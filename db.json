{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/indigo/source/css/style.less","path":"css/style.less","modified":0,"renderable":1},{"_id":"themes/indigo/source/img/cc.png","path":"img/cc.png","modified":0,"renderable":1},{"_id":"themes/indigo/source/img/img-err.png","path":"img/img-err.png","modified":0,"renderable":1},{"_id":"themes/indigo/source/img/brand.jpg","path":"img/brand.jpg","modified":0,"renderable":1},{"_id":"themes/indigo/source/img/site_icon.jpg","path":"img/site_icon.jpg","modified":0,"renderable":1},{"_id":"themes/indigo/source/img/img-loading.png","path":"img/img-loading.png","modified":0,"renderable":1},{"_id":"themes/indigo/source/img/wechat.jpg","path":"img/wechat.jpg","modified":0,"renderable":1},{"_id":"themes/indigo/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/indigo/source/js/main.min.js","path":"js/main.min.js","modified":0,"renderable":1},{"_id":"themes/indigo/source/img/me.jpg","path":"img/me.jpg","modified":0,"renderable":1},{"_id":"themes/indigo/source/js/embed.min.js","path":"js/embed.min.js","modified":0,"renderable":1},{"_id":"themes/indigo/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"themes/indigo/source/js/search.min.js","path":"js/search.min.js","modified":0,"renderable":1},{"_id":"themes/indigo/source/img/alipay.jpg","path":"img/alipay.jpg","modified":0,"renderable":1},{"_id":"themes/indigo/source/js/embed.js","path":"js/embed.js","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.woff","path":"css/fonts/roboto/Roboto-Bold.woff","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.eot","path":"css/fonts/roboto/Roboto-Bold.eot","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.woff2","path":"css/fonts/roboto/Roboto-Bold.woff2","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.eot","path":"css/fonts/roboto/Roboto-Light.eot","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.woff2","path":"css/fonts/roboto/Roboto-Light.woff2","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.woff","path":"css/fonts/roboto/Roboto-Light.woff","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.woff2","path":"css/fonts/roboto/Roboto-Medium.woff2","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.woff","path":"css/fonts/roboto/Roboto-Medium.woff","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.woff","path":"css/fonts/roboto/Roboto-Regular.woff","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.eot","path":"css/fonts/roboto/Roboto-Medium.eot","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.eot","path":"css/fonts/roboto/Roboto-Regular.eot","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.eot","path":"css/fonts/roboto/Roboto-Thin.eot","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.woff2","path":"css/fonts/roboto/Roboto-Regular.woff2","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.woff","path":"css/fonts/roboto/Roboto-Thin.woff","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.woff2","path":"css/fonts/roboto/Roboto-Thin.woff2","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.woff","path":"css/fonts/fontawesome/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.ttf","path":"css/fonts/roboto/Roboto-Bold.ttf","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.woff2","path":"css/fonts/fontawesome/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.ttf","path":"css/fonts/roboto/Roboto-Light.ttf","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.ttf","path":"css/fonts/roboto/Roboto-Medium.ttf","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.ttf","path":"css/fonts/roboto/Roboto-Regular.ttf","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.ttf","path":"css/fonts/roboto/Roboto-Thin.ttf","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.eot","path":"css/fonts/fontawesome/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.ttf","path":"css/fonts/fontawesome/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/fontawesome/FontAwesome.otf","path":"css/fonts/fontawesome/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.svg","path":"css/fonts/fontawesome/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"themes/indigo/package.json","hash":"f6e4c3326a222cd16a3fdb53656c90e0f9ab80ff","modified":1481278446000},{"_id":"themes/indigo/README.md","hash":"0d9232edd25c8de4070715cc900c93282f3a2dc2","modified":1481278446000},{"_id":"source/_posts/Android SingleTask 探究.md","hash":"dfe7d7a3c7846587b8e9bb5ae3981b7727b2b4f3","modified":1481984703531},{"_id":"themes/indigo/_config.yml","hash":"cce0f75500da53dc0232be1689278e59257dc712","modified":1482736861231},{"_id":"source/_posts/Android 与 js 交互中url传参中也有url的问题.md","hash":"feaa42d73fb296953784e388435772d3e5f177e7","modified":1482138063970},{"_id":"source/_posts/Android apk安装过程实例分析.md","hash":"ed54f9821f72c9d558114bf6a0c0b8a8cdac4967","modified":1481989071985},{"_id":"themes/indigo/.editorconfig","hash":"9b0445427777519defe360ea38c61729d847b3d3","modified":1481278446000},{"_id":"source/_posts/Android Studio NDK开发环境搭建及Demo示例.md","hash":"d826fa41123ce295553ed7448ba4f11ae88992e5","modified":1486554546000},{"_id":"source/_posts/Git学习笔记（一）.md","hash":"658d2d1f9d00c9fa1afe2dbc917fb1d6bf700f1d","modified":1481984265689},{"_id":"source/_posts/Android 类加载初探.md","hash":"0b9a67ee5732a4c842d09943bc3d8f1195546f54","modified":1481984584669},{"_id":"source/_posts/Git学习笔记（二）.md","hash":"fa615908b242a0f89a5b591e35c5faf1897b8cd0","modified":1481984231736},{"_id":"source/_posts/RxJava 初探（一）.md","hash":"d8d4e0b8bd8be7b4d97219f979b4e4260b93ce05","modified":1481984831748},{"_id":"source/_posts/RadioGroup、RadioButton动态创建并定制icon显示.md","hash":"b3801e25edfeaedeb47703cdaa966dc94a8e808c","modified":1486555076000},{"_id":"source/_posts/Gradle相关配置.md","hash":"9243b28cd2d779aa10242e80e62c3c6ccc123da5","modified":1486555027000},{"_id":"source/_posts/instant run 相关分析.md","hash":"22066cb89e7daedd83fcefae87c8daa09ecc646e","modified":1486555059000},{"_id":"source/about/about_me.md","hash":"1806a56f75043590ce1d1010a2bf29f488b0492f","modified":1484814055000},{"_id":"source/_posts/对称、非对称加密技术初探.md","hash":"0175cb08b05c844a94b52c516c6cbceb3cb3ef0d","modified":1481987560989},{"_id":"source/_posts/简单的页面置换算法分析.md","hash":"8f6299058981835523f09167154f3855547a4371","modified":1481984358847},{"_id":"source/_posts/滑动冲突之EditText-ScrollView.md","hash":"d18a7ea73f57ec163b9e09c0e85853fb290349f9","modified":1486553425000},{"_id":"source/tags/index.md","hash":"5871c77738f47fee359277cc29f0729e0d3125e3","modified":1481559424537},{"_id":"source/categories/index.md","hash":"941bef254f35eca9b9e98863e75a83723d684dbb","modified":1481559489769},{"_id":"themes/indigo/layout/category.ejs","hash":"7ea26a8a935886963eda82f41c7bd5270cf780d9","modified":1481278446000},{"_id":"themes/indigo/layout/index.ejs","hash":"39477807b98b2d2df78f3b82498a11e90be8222c","modified":1481278446000},{"_id":"themes/indigo/layout/layout.ejs","hash":"d52f43fa9572d70cae834e4887c8897b43744805","modified":1481278446000},{"_id":"themes/indigo/layout/categories.ejs","hash":"62488be0c5db55718594143a603b98ab84dd981c","modified":1481278446000},{"_id":"themes/indigo/layout/archive.ejs","hash":"d039719e21f6a6fa2925b00aaa623a180a78c818","modified":1481278446000},{"_id":"themes/indigo/layout/tag.ejs","hash":"36786a3de7f6cad58209603f7d84ba23addea174","modified":1481278446000},{"_id":"themes/indigo/scripts/plugins.js","hash":"a73fc4e34e761f019b90046c67d87b4fb44a4a20","modified":1481278446000},{"_id":"themes/indigo/layout/post.ejs","hash":"afbf8532dc8d148ca4dff2ca127a3382907cf2f5","modified":1481278446000},{"_id":"themes/indigo/layout/tags.ejs","hash":"8a31c65cfbef999da1c89d4ab2ae79970ee892ed","modified":1481278446000},{"_id":"themes/indigo/layout/_partial/footer.ejs","hash":"18e361f260eb37a03069d6e3f6ccf0327fc5b75b","modified":1481278446000},{"_id":"themes/indigo/layout/_partial/after-footer.ejs","hash":"9ac30b9439fab69973cf4722dbf2945a18fd3804","modified":1481278446000},{"_id":"themes/indigo/layout/page.ejs","hash":"afb98face24d39a21ebbbde6592a9afc98572aa4","modified":1481278446000},{"_id":"themes/indigo/layout/_partial/header.ejs","hash":"af85a963119861ada586f3a32be3f951252976a2","modified":1481278446000},{"_id":"themes/indigo/layout/_partial/loading.ejs","hash":"bc4cb19b20de55a0332647f4dca9684184383685","modified":1481278446000},{"_id":"themes/indigo/layout/_partial/archive.ejs","hash":"55cd81ef9183426d6d99fd91550fce0a9cc92aa0","modified":1481278446000},{"_id":"themes/indigo/layout/_partial/index-item.ejs","hash":"c324ab0e8ac5475adaa506f424447e615c1f210c","modified":1481278446000},{"_id":"themes/indigo/layout/_partial/paginator.ejs","hash":"dc27242927890f130a64400596b9b7ad5fca8972","modified":1481278446000},{"_id":"themes/indigo/layout/_partial/head.ejs","hash":"178d676eae4351774e7b9a121191a24fe5e46dae","modified":1481278446000},{"_id":"themes/indigo/layout/_partial/menu.ejs","hash":"da480b3f2f0f20e3a2d0db9a8371d13fb7cbfc6f","modified":1481278446000},{"_id":"themes/indigo/layout/_partial/search.ejs","hash":"c2091c621b5480ef1e69d72027028cec8e929892","modified":1481278446000},{"_id":"themes/indigo/layout/_partial/post.ejs","hash":"27f37ef30ea3651940be6f3f16f33ec492b252e5","modified":1481278446000},{"_id":"themes/indigo/source/css/style.less","hash":"6e8609fa857be01f0206209a746c9872389c42c3","modified":1481278446000},{"_id":"themes/indigo/layout/_partial/script.ejs","hash":"2c85661cd13dc8a153c328020ded60c8e7d36892","modified":1481278446000},{"_id":"themes/indigo/source/img/cc.png","hash":"ebce75a62b40976a72d43f0bd937d859ac24d87c","modified":1481278446000},{"_id":"themes/indigo/source/img/img-err.png","hash":"23a63ea26eb3c1d5e677d9883cf36cc1a1a1228b","modified":1481278446000},{"_id":"themes/indigo/source/img/brand.jpg","hash":"0e237f1b433851c156e1f1cdaeb044054b3b9879","modified":1481278446000},{"_id":"themes/indigo/source/img/site_icon.jpg","hash":"a78f48fe9f9114f315dc79eff29452e93ffd709a","modified":1475638116524},{"_id":"themes/indigo/source/img/img-loading.png","hash":"a9cd5cd11866824f31e3d1c5e23badfeb3f73031","modified":1481278446000},{"_id":"themes/indigo/source/img/wechat.jpg","hash":"afe55e0ada74d0add2e3758f8bc6a6c9c40475ab","modified":1481607186291},{"_id":"themes/indigo/layout/_partial/tags-bar.ejs","hash":"cd8e1ef7024a38b2ba1c9b3a4af12f54bb2d3d96","modified":1481278446000},{"_id":"themes/indigo/source/js/main.js","hash":"f7636eda390a77574e8df4b655eb0167f0386776","modified":1481278446000},{"_id":"themes/indigo/source/js/main.min.js","hash":"3de7801b80c04432870bc270127d4102a10f45dd","modified":1481278446000},{"_id":"themes/indigo/source/img/me.jpg","hash":"c99d0692b5ecfb328518ec4f2dba7838675f6875","modified":1481562391071},{"_id":"themes/indigo/source/js/embed.min.js","hash":"c2ad9ec865e531f47bb7db5cc032be44d7fe73a2","modified":1481278446000},{"_id":"themes/indigo/source/js/search.js","hash":"ae7c7c544dadebeb75b0d3cdad7d5bf9be16f637","modified":1481278446000},{"_id":"themes/indigo/layout/_partial/plugins/duoshuo-count.ejs","hash":"de23dfaaaed783f6ade86084fb7bcee531dce4d0","modified":1481278446000},{"_id":"themes/indigo/layout/_partial/plugins/disqus.ejs","hash":"4a0c01e4195f685f9825fcd016d01249dbdd52ca","modified":1481278446000},{"_id":"themes/indigo/layout/_partial/plugins/baidu.ejs","hash":"e44d526029f122e9c2c74f3a647c35002c818cbe","modified":1481278446000},{"_id":"themes/indigo/layout/_partial/plugins/duoshuo-js.ejs","hash":"1698376d86761762ccbeb9f5818a919437e7d13b","modified":1481278446000},{"_id":"themes/indigo/source/js/search.min.js","hash":"b37a264a13785e08760cadee3309a172269dff63","modified":1481278446000},{"_id":"themes/indigo/layout/_partial/plugins/page-visit.ejs","hash":"2decb77bf3c1a064ea6ce1d4e78892c434d9c884","modified":1481278446000},{"_id":"themes/indigo/layout/_partial/plugins/google-analytics.ejs","hash":"a947f4076b54b48d4df5baf2d5b3c39b632c7576","modified":1481278446000},{"_id":"themes/indigo/layout/_partial/plugins/site-visit.ejs","hash":"8fbd0910828f1ab6eba728bdecc9811d623baae2","modified":1481278446000},{"_id":"themes/indigo/layout/_partial/plugins/mathjax.ejs","hash":"90d43c469931ce5db5f4bb66f0bd9378532aea30","modified":1481278446000},{"_id":"themes/indigo/layout/_partial/plugins/tajs.ejs","hash":"97b48fe10be1c71d4ff25ccec3bd92d97466c9c5","modified":1481278446000},{"_id":"themes/indigo/layout/_partial/plugins/duoshuo.ejs","hash":"edc98c8015ab1deff32507d5f563f5cab0bd7f68","modified":1481278446000},{"_id":"themes/indigo/layout/_partial/post/date.ejs","hash":"1fa66e299500927c3fda64b36c5a1fbd277fb696","modified":1481278446000},{"_id":"themes/indigo/layout/_partial/post/comment.ejs","hash":"18206ba13fcd0484e299aa61986afb0de9daec6d","modified":1481278446000},{"_id":"themes/indigo/layout/_partial/post/copyright.ejs","hash":"210d63adf95a79f560e380b24bcdc25a3dd43077","modified":1481278446000},{"_id":"themes/indigo/layout/_partial/post/reward.ejs","hash":"ce764334c94e198fde3d222eadedc8813f026fca","modified":1481278446000},{"_id":"themes/indigo/layout/_partial/post/reward-btn.ejs","hash":"41c242fe3159dc68cec8dd00ab6d2663f5a51179","modified":1481278446000},{"_id":"themes/indigo/layout/_partial/post/category.ejs","hash":"c7476165721a3a5e34d00d8c5c07e1e5474cd800","modified":1481278446000},{"_id":"themes/indigo/layout/_partial/post/nav.ejs","hash":"11e7d504f7c7a3c4c052da13cfa8ea4862c9383e","modified":1481278446000},{"_id":"themes/indigo/layout/_partial/post/share-fab.ejs","hash":"93482ad7d1e01b966f5ee1c5d12b88564e02b349","modified":1481278446000},{"_id":"themes/indigo/layout/_partial/post/head-meta.ejs","hash":"b0c680ce5b8aaf461a6731b1ff1287bd140c168a","modified":1481278446000},{"_id":"themes/indigo/layout/_partial/post/title.ejs","hash":"062d56cb88ae2be3a6616b911d4ebeffcbfe3cff","modified":1481278446000},{"_id":"themes/indigo/layout/_partial/post/share.ejs","hash":"8df0d7bf6f8e106cdbdac2dd10a97367aa0695f8","modified":1481278446000},{"_id":"themes/indigo/layout/_partial/post/tag.ejs","hash":"b3dc38652c4a018a37418136478dcd522fc49f79","modified":1481278446000},{"_id":"themes/indigo/source/css/_duoshuo/custom.less","hash":"10c3e846afb891edf847cdc150bb842371458172","modified":1481278446000},{"_id":"themes/indigo/source/css/_duoshuo/common.less","hash":"cf669f01788aac984cf295842c53d28844d256ba","modified":1481278446000},{"_id":"themes/indigo/layout/_partial/post/toc.ejs","hash":"b6123e895c16ace651f1832281ff655776d4068c","modified":1481278446000},{"_id":"themes/indigo/source/css/_duoshuo/dialog.less","hash":"d320c0c5eb467695f8e3298ccc05926e1dcaf350","modified":1481278446000},{"_id":"themes/indigo/source/css/_duoshuo/embed.less","hash":"a09aeb68646e6309d737dddea237a2d160608bbf","modified":1481278446000},{"_id":"themes/indigo/source/css/_duoshuo/login.less","hash":"6a7962f817199802f91d32d4e9bb87098683d84c","modified":1481278446000},{"_id":"themes/indigo/layout/_partial/post/updated.ejs","hash":"1eb9620f1efc58b68a4f1dab10543741d5f142ef","modified":1481278446000},{"_id":"themes/indigo/source/css/_duoshuo/notify.less","hash":"de48d76de6b99d7aa3f176cb1345b5bd1a6e3ec0","modified":1481278446000},{"_id":"themes/indigo/source/css/_duoshuo/mixins.less","hash":"caf782f681fc97ecdab34bc34e16e3353bcd1eb6","modified":1481278446000},{"_id":"themes/indigo/source/css/_duoshuo/recent-comments.less","hash":"1e2a57b7dc9ca3ef46d9966b49d0a8e614920c0a","modified":1481278446000},{"_id":"themes/indigo/source/css/_duoshuo/recent-visitors.less","hash":"9494e2183ce7a7a3f5742e3ba42b3514312a5006","modified":1481278446000},{"_id":"themes/indigo/source/css/_duoshuo/thread.less","hash":"954e1c6af84c13940c8fd8c035bc4d2b273ab992","modified":1481278446000},{"_id":"themes/indigo/source/css/_duoshuo/share.less","hash":"4218e03b97d12b006dc01c78f02f76a1e0daafb7","modified":1481278446000},{"_id":"themes/indigo/source/css/_duoshuo/global.less","hash":"b95ac4f80d83595186e158a05f9e5551fb199171","modified":1481278446000},{"_id":"themes/indigo/source/css/_partial/archives.less","hash":"3325d75dde92d1ccfdf3e817794da4334c7c2133","modified":1481278446000},{"_id":"themes/indigo/source/css/_duoshuo/variables.less","hash":"5b4e813e3141d5509ee80fa319ae4cf3adfdd7da","modified":1481278446000},{"_id":"themes/indigo/source/css/_partial/article.less","hash":"eef9507d6fa7b7959b7a0b5b7df27a87879aa767","modified":1481278446000},{"_id":"themes/indigo/source/css/_partial/header.less","hash":"90f0948a9182c14b1dac1e9dbed3c883543266f9","modified":1481278446000},{"_id":"themes/indigo/source/css/_partial/highlight.less","hash":"58492b7cdb45fe09b026b2f34e8ae69c2ddb8228","modified":1481278446000},{"_id":"themes/indigo/source/css/_partial/gotop.less","hash":"b7db31b9bc563c10b9e3cf3e6d9cfddfeb3e805a","modified":1481278446000},{"_id":"themes/indigo/source/css/_partial/layout.less","hash":"43765a1b8dd041854ac2386955e9f68d5b6be5c1","modified":1481278446000},{"_id":"themes/indigo/source/css/_partial/lightbox.less","hash":"9b961eb1d70e7658f42cf2ca895fa5e35a6b6541","modified":1481278446000},{"_id":"themes/indigo/source/css/_partial/loading.less","hash":"f9d06a1e24fb4857fd18d7a0bfbb3a0ab2d1c742","modified":1481278446000},{"_id":"themes/indigo/source/css/_partial/postlist.less","hash":"156b5d2c2b83d2fd768c83119bd1dc23756f657d","modified":1481278446000},{"_id":"themes/indigo/source/css/_partial/reward.less","hash":"15e2bcbdf2ffb44707e4c7d0b6ba166fe1598ac0","modified":1481278446000},{"_id":"themes/indigo/source/css/_partial/roboto.less","hash":"2e0469ed8161d5672d903ca1a8027cd65fe007f1","modified":1481278446000},{"_id":"themes/indigo/source/css/_partial/page.less","hash":"e92ccb53e6ac73a51498c6a9672db9d0d2bc7f1a","modified":1481278446000},{"_id":"themes/indigo/source/css/_partial/search.less","hash":"d73a12ca56cd710a13cb61074958c82a5cb95d63","modified":1481278446000},{"_id":"themes/indigo/source/css/_partial/share.less","hash":"27d80bcc96a53dd1e7eaa9a7d746e4b212357302","modified":1481278446000},{"_id":"themes/indigo/source/css/_partial/tags.less","hash":"959f4373fda6e45f6a4041a995ed3ea8a05a5170","modified":1481278446000},{"_id":"themes/indigo/source/css/_partial/fontawesome.less","hash":"c19f5e28365c7ba6fa938591a8021da7d603253d","modified":1481278446000},{"_id":"themes/indigo/source/css/_partial/waves.less","hash":"77bfd0b373b0469eb0176167fb076ccda4edf2a7","modified":1481278446000},{"_id":"themes/indigo/source/img/alipay.jpg","hash":"964d2c9dc1935ed8afc4dbf4ae62819a01a60345","modified":1481608426691},{"_id":"themes/indigo/source/js/embed.js","hash":"0a99baa3a205f94b16ce9134fc14375178912401","modified":1481278446000},{"_id":"themes/indigo/source/css/_partial/variable.less","hash":"d3a56e0b4a457ceec90cf90cb8320404f335bf89","modified":1481278446000},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.woff","hash":"ee99cd87a59a9a5d4092c83232bb3eec67547425","modified":1481278446000},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.eot","hash":"a76cd602f5188b9fbd4ba7443dcb9c064e3dbf10","modified":1481278446000},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.woff2","hash":"933b866d09c2b087707a98dab64b3888865eeb96","modified":1481278446000},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.eot","hash":"42fe156996197e5eb0c0264c5d1bb3b4681f4595","modified":1481278446000},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.woff2","hash":"bbdc28b887400fcb340b504ec2904993af42a5d7","modified":1481278446000},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.woff","hash":"6300f659be9e834ab263efe2fb3c581d48b1e7b2","modified":1481278446000},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.woff2","hash":"6cc1b73571af9e827c4e7e91418f476703cd4c4b","modified":1481278446000},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.woff","hash":"d45f84922131364989ad6578c7a06b6b4fc22c34","modified":1481278446000},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.woff","hash":"74734dde8d94e7268170f9b994dedfbdcb5b3a15","modified":1481278446000},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.eot","hash":"1517f4b6e1c5d0e5198f937557253aac8fab0416","modified":1481278446000},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.eot","hash":"77ae3e980ec03863ebe2587a8ef9ddfd06941db0","modified":1481278446000},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.eot","hash":"0790a51a848dbe7292c98f9d0459218bf1a8ffdd","modified":1481278446000},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.woff2","hash":"ed1558b0541f5e01ce48c7db1588371b990eec19","modified":1481278446000},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.woff","hash":"fbc3e71d456c96667d8082ab910e3946ef89240b","modified":1481278446000},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.woff2","hash":"2449e3dac5ddb7c3da8bb07450493b62d052758c","modified":1481278446000},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1481278446000},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.ttf","hash":"47327df0f35e7cd7c8645874897a7449697544ae","modified":1481278446000},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1481278446000},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.ttf","hash":"e321c183e2b75ee19813892b7bac8d7c411cb88a","modified":1481278446000},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.ttf","hash":"6060ca726b9760b76f7c347dce9d2fa1fe42ec92","modified":1481278446000},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.ttf","hash":"824b5480c977a8166e177e5357d13164ccc45f47","modified":1481278446000},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.ttf","hash":"173ed64528b4d010a76d8d38deb1d7e7eed58eda","modified":1481278446000},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1481278446000},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1481278446000},{"_id":"themes/indigo/source/css/fonts/fontawesome/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1481278446000},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1481278446000},{"_id":"public/atom.xml","hash":"471e8d384fc87b79b1fd20c48addd3347713fd20","modified":1486555419132},{"_id":"public/content.json","hash":"940d8a326f908e8676378c96ed2594953847fa4d","modified":1486555335850},{"_id":"public/archives/page/2/index.html","hash":"52998c061768d3f8129524d81fcdaf9ec7dc08dc","modified":1486535758061},{"_id":"public/archives/2016/page/2/index.html","hash":"0ab4f2a77f0bac8e815a14ce95327167abef2e29","modified":1486535758034},{"_id":"public/archives/2016/02/index.html","hash":"c5295fcbe18c2a60812db530517dbe3b0f5c17d4","modified":1484814163376},{"_id":"public/archives/2016/01/index.html","hash":"e71f25d9ed9b505999518e74da2ac0b66188fa6b","modified":1484814163376},{"_id":"public/archives/2016/05/index.html","hash":"d367e258805f873bd51c3b1ef322c4d98cda1fa2","modified":1484814163376},{"_id":"public/archives/2016/06/index.html","hash":"b4c057ffd03e632b9013da03d672f90966fbf7ab","modified":1484814163376},{"_id":"public/archives/2016/08/index.html","hash":"42bd20885e05aa5f8100cccecb7c73e4121bb8f4","modified":1484814163376},{"_id":"public/archives/2016/09/index.html","hash":"2f47e9e06f65760761faced7609044698a44fa5c","modified":1484814163376},{"_id":"public/archives/2016/10/index.html","hash":"afde2e2d1b8c608d66a23570fb3103067666de88","modified":1484814163376},{"_id":"public/archives/2016/11/index.html","hash":"22e905f7ea5879af3beb2b1350bc22ce4ab1b6a3","modified":1486535758060},{"_id":"public/archives/2016/12/index.html","hash":"839f6b75d6ed36eaf6eb549fb4a9951898a188ec","modified":1486448130455},{"_id":"public/page/2/index.html","hash":"a663a2f50e4779b4dcfae67bf2786b8b37308bab","modified":1486535758061},{"_id":"public/categories/Hybird/index.html","hash":"9e5f18d16a4a537ce22c4e9715bde30010f4d487","modified":1486395911270},{"_id":"public/categories/工具/index.html","hash":"5698b66b83ddffe06f116c52bb182b19aae7ba81","modified":1486395911270},{"_id":"public/categories/RxJava/index.html","hash":"3c35b863b3dd3745d5232f1503fea4d6ec250257","modified":1486395911270},{"_id":"public/categories/网络/index.html","hash":"4c49f7f70377306f744a34cb0592a4938f2ce453","modified":1486395911270},{"_id":"public/categories/算法/index.html","hash":"743388dc239116c0b0910f880596e38fb318cab7","modified":1486395911270},{"_id":"public/tags/SingleTask/index.html","hash":"9de9074c8145c39221211c17a6b5f600d2514190","modified":1486395911270},{"_id":"public/tags/JS/index.html","hash":"78b2392da963f32b4deddb2088cc7bec511868dd","modified":1482138159147},{"_id":"public/tags/Dalvik/index.html","hash":"69b1a0c1e59f78d29bcc786129574b7696acf7d7","modified":1486535758060},{"_id":"public/tags/ART/index.html","hash":"129bbf3bf1a078ce72cd5361718a889faff888ab","modified":1486395911270},{"_id":"public/tags/JNI/index.html","hash":"3234c14c1b40d5d45d54db9b0e21f9b5951f0aed","modified":1486395911270},{"_id":"public/tags/NDK/index.html","hash":"bfd6447f675961996ed4e79ddc57fa01e201f436","modified":1486395911271},{"_id":"public/tags/Git/index.html","hash":"5f1b3d4492c53918adbd92726cfc2d8c6cf18526","modified":1486395911271},{"_id":"public/tags/ClassLoader/index.html","hash":"aa1ab8a7da6c07ffb6c8bfd08602c633c62ca0fd","modified":1486395911271},{"_id":"public/tags/RxJava/index.html","hash":"199d3ccc05800a4e976b73f470bc48ef28c2609e","modified":1486395911271},{"_id":"public/tags/Radiobutton/index.html","hash":"520f76eb6f5c2f959599e976f58fe46a5bf4559a","modified":1486395911271},{"_id":"public/tags/Gradle/index.html","hash":"746298db948ba4fd3469636071b6cadee84b6da7","modified":1486395911271},{"_id":"public/tags/instant-run/index.html","hash":"3e5979b3534b020432d2aef8c624f2a7d048373d","modified":1486395911271},{"_id":"public/tags/加密/index.html","hash":"86a39063fb584c3c223fc79343554e88b6be0e71","modified":1486395911272},{"_id":"public/tags/签名/index.html","hash":"0d5abbc9a0604de26def453c0af75ff78f4b2ec5","modified":1486395911272},{"_id":"public/tags/LRU/index.html","hash":"b55412230fc123b43cb5118afeb59d853d36934c","modified":1486395911272},{"_id":"public/tags/滑动冲突/index.html","hash":"ace8a68a63ce64bbe2a3a8e94466ca820ea53c26","modified":1486395911272},{"_id":"public/about/about_me.html","hash":"b2b449d1e97905adbb538ec3d4ff5827ca572bb0","modified":1486535758060},{"_id":"public/tags/index.html","hash":"7f22431b7c7fbddc73cfa9c4100d51d207ff038b","modified":1486535758060},{"_id":"public/categories/index.html","hash":"5715d2e95dd729a63887418ebbd56fd389dfe89f","modified":1486535758060},{"_id":"public/2016/12/17/instant run 相关分析/index.html","hash":"e3c24159abe0e86d7cd6e2645fb3a5b70dd9cf1b","modified":1486555235972},{"_id":"public/2016/12/15/Android 与 js 交互中url传参中也有url的问题/index.html","hash":"d22299fb5a927bbc789ed9fd1fe98a5e56f2812c","modified":1482138075653},{"_id":"public/2016/11/17/Android apk安装过程实例分析/index.html","hash":"69406c578e4c8731d6e3c42e29f0b1c4f5a19433","modified":1486535758061},{"_id":"public/2016/11/17/Android 类加载初探/index.html","hash":"bc045930150622daa3a85002c8452d3344da0ebd","modified":1486535758061},{"_id":"public/2016/10/25/RadioGroup、RadioButton动态创建并定制icon显示/index.html","hash":"7d6b9903b7af0e834ced03d93ae53d8eff05b9bb","modified":1486555235972},{"_id":"public/2016/10/06/RxJava 初探（一）/index.html","hash":"140d3464654c3ed8090d3b726ed80c216d86675c","modified":1484814163381},{"_id":"public/2016/09/09/Gradle相关配置/index.html","hash":"71cbf012609d3b211e88c7beda681691719d2483","modified":1486555235972},{"_id":"public/2016/08/16/滑动冲突之EditText-ScrollView/index.html","hash":"85adc79963ef30f6cfd5508259087d769db43c77","modified":1486553545955},{"_id":"public/2016/06/04/简单的页面置换算法分析/index.html","hash":"c14e7bc5f70336f5ec6784928a83ed6deae4025d","modified":1484814163381},{"_id":"public/2016/05/16/Android SingleTask 探究/index.html","hash":"717963d04f54c93cdb8f46fccecb4aface7ed6f0","modified":1484814163381},{"_id":"public/2016/02/28/对称、非对称加密技术初探/index.html","hash":"16a6aeb31f7e1a8b07d316ca1d02916796c15fd1","modified":1484814163381},{"_id":"public/2016/02/19/Git学习笔记（二）/index.html","hash":"23cb5fd098959fa08e2037005c7c83bb34ad9bfb","modified":1484814163381},{"_id":"public/2016/02/19/Git学习笔记（一）/index.html","hash":"9a7348d4a0517645801a2bf3bfa7276950345b4c","modified":1484814163381},{"_id":"public/2016/01/16/Android Studio NDK开发环境搭建及Demo示例/index.html","hash":"b868e7e75f31afcf75e546a0a10cfb0afa507d95","modified":1486554555604},{"_id":"public/archives/index.html","hash":"0161a9bd939cb9b0d3f9a55ff9f68742ed7350d1","modified":1486535758061},{"_id":"public/archives/2016/index.html","hash":"927bb485c827fe46e7ebce1a03da910524d99d66","modified":1486535758061},{"_id":"public/index.html","hash":"3a3f6ed875fd845a39d5f5609af7aae564ba41f4","modified":1486555235972},{"_id":"public/categories/Android/index.html","hash":"a7a36edf51bae2b67523a2d1a3b221d72ccbd915","modified":1486535758061},{"_id":"public/img/cc.png","hash":"ebce75a62b40976a72d43f0bd937d859ac24d87c","modified":1482137968320},{"_id":"public/img/img-err.png","hash":"23a63ea26eb3c1d5e677d9883cf36cc1a1a1228b","modified":1482137968320},{"_id":"public/img/brand.jpg","hash":"0e237f1b433851c156e1f1cdaeb044054b3b9879","modified":1482137968320},{"_id":"public/img/site_icon.jpg","hash":"a78f48fe9f9114f315dc79eff29452e93ffd709a","modified":1482137968320},{"_id":"public/img/img-loading.png","hash":"a9cd5cd11866824f31e3d1c5e23badfeb3f73031","modified":1482137968321},{"_id":"public/img/wechat.jpg","hash":"afe55e0ada74d0add2e3758f8bc6a6c9c40475ab","modified":1482137968321},{"_id":"public/css/fonts/roboto/Roboto-Bold.woff","hash":"ee99cd87a59a9a5d4092c83232bb3eec67547425","modified":1482137968321},{"_id":"public/css/fonts/roboto/Roboto-Bold.eot","hash":"a76cd602f5188b9fbd4ba7443dcb9c064e3dbf10","modified":1482137968321},{"_id":"public/css/fonts/roboto/Roboto-Bold.woff2","hash":"933b866d09c2b087707a98dab64b3888865eeb96","modified":1482137968321},{"_id":"public/css/fonts/roboto/Roboto-Light.eot","hash":"42fe156996197e5eb0c0264c5d1bb3b4681f4595","modified":1482137968321},{"_id":"public/css/fonts/roboto/Roboto-Light.woff","hash":"6300f659be9e834ab263efe2fb3c581d48b1e7b2","modified":1482137968322},{"_id":"public/css/fonts/roboto/Roboto-Light.woff2","hash":"bbdc28b887400fcb340b504ec2904993af42a5d7","modified":1482137968322},{"_id":"public/css/fonts/roboto/Roboto-Medium.woff2","hash":"6cc1b73571af9e827c4e7e91418f476703cd4c4b","modified":1482137968322},{"_id":"public/css/fonts/roboto/Roboto-Medium.woff","hash":"d45f84922131364989ad6578c7a06b6b4fc22c34","modified":1482137968322},{"_id":"public/css/fonts/roboto/Roboto-Regular.woff","hash":"74734dde8d94e7268170f9b994dedfbdcb5b3a15","modified":1482137968322},{"_id":"public/css/fonts/roboto/Roboto-Medium.eot","hash":"1517f4b6e1c5d0e5198f937557253aac8fab0416","modified":1482137968322},{"_id":"public/css/fonts/roboto/Roboto-Regular.eot","hash":"77ae3e980ec03863ebe2587a8ef9ddfd06941db0","modified":1482137968322},{"_id":"public/css/fonts/roboto/Roboto-Thin.eot","hash":"0790a51a848dbe7292c98f9d0459218bf1a8ffdd","modified":1482137968322},{"_id":"public/css/fonts/roboto/Roboto-Regular.woff2","hash":"ed1558b0541f5e01ce48c7db1588371b990eec19","modified":1482137968322},{"_id":"public/css/fonts/roboto/Roboto-Thin.woff","hash":"fbc3e71d456c96667d8082ab910e3946ef89240b","modified":1482137968322},{"_id":"public/css/fonts/roboto/Roboto-Thin.woff2","hash":"2449e3dac5ddb7c3da8bb07450493b62d052758c","modified":1482137968322},{"_id":"public/img/me.jpg","hash":"c99d0692b5ecfb328518ec4f2dba7838675f6875","modified":1482137968402},{"_id":"public/css/fonts/fontawesome/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1482137968411},{"_id":"public/css/fonts/roboto/Roboto-Bold.ttf","hash":"47327df0f35e7cd7c8645874897a7449697544ae","modified":1482137968413},{"_id":"public/css/fonts/fontawesome/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1482137968414},{"_id":"public/css/fonts/roboto/Roboto-Light.ttf","hash":"e321c183e2b75ee19813892b7bac8d7c411cb88a","modified":1482137968414},{"_id":"public/css/fonts/roboto/Roboto-Medium.ttf","hash":"6060ca726b9760b76f7c347dce9d2fa1fe42ec92","modified":1482137968414},{"_id":"public/css/fonts/roboto/Roboto-Regular.ttf","hash":"824b5480c977a8166e177e5357d13164ccc45f47","modified":1482137968414},{"_id":"public/css/fonts/roboto/Roboto-Thin.ttf","hash":"173ed64528b4d010a76d8d38deb1d7e7eed58eda","modified":1482137968414},{"_id":"public/js/main.min.js","hash":"3de7801b80c04432870bc270127d4102a10f45dd","modified":1482137969015},{"_id":"public/js/search.js","hash":"ae7c7c544dadebeb75b0d3cdad7d5bf9be16f637","modified":1482137969015},{"_id":"public/js/search.min.js","hash":"b37a264a13785e08760cadee3309a172269dff63","modified":1482137969015},{"_id":"public/js/main.js","hash":"f7636eda390a77574e8df4b655eb0167f0386776","modified":1482137969015},{"_id":"public/js/embed.min.js","hash":"c2ad9ec865e531f47bb7db5cc032be44d7fe73a2","modified":1482137969015},{"_id":"public/js/embed.js","hash":"0a99baa3a205f94b16ce9134fc14375178912401","modified":1482137969016},{"_id":"public/css/fonts/fontawesome/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1482137969016},{"_id":"public/css/fonts/fontawesome/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1482137969016},{"_id":"public/css/fonts/fontawesome/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1482137969016},{"_id":"public/img/alipay.jpg","hash":"964d2c9dc1935ed8afc4dbf4ae62819a01a60345","modified":1482137969118},{"_id":"public/css/fonts/fontawesome/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1482137969222},{"_id":"public/css/style.css","hash":"a389b9ebafb4b2d661cbd6bc3933ae3a63affe55","modified":1482137969803},{"_id":"source/_posts/Android 与 js 交互中url嵌套url传参问题.md","hash":"56eb69afe247e77c166779b922d5a83b6c19aa05","modified":1482138142009},{"_id":"public/2016/12/15/Android 与 js 交互中url嵌套url传参问题/index.html","hash":"8b81ff912262f00f6f4c5ff568e22b415641bda4","modified":1482138159150},{"_id":"source/_posts/Android WebView 相关踩坑.md","hash":"035a5b502161d63be646e5cee8bc4dd35bf3cc5d","modified":1486554798000},{"_id":"public/tags/h5/index.html","hash":"53726d32f0d2e4d7ecd6ca14e77dfb7b27b17da4","modified":1486395911272},{"_id":"public/2016/12/15/Android WebView 相关踩坑/index.html","hash":"6fd2172ebeb50b2868d37799d4ea04d56ac7b215","modified":1486554815843},{"_id":"source/.DS_Store","hash":"1d53b052bc5bf581f842e688638ccebf3db28368","modified":1486535455000},{"_id":"source/_posts/Gradle实现自动拉取git及压缩文件.md","hash":"b342ea8ed05672b9959b5e27d666f28705e4f809","modified":1486554944000},{"_id":"public/archives/2017/index.html","hash":"1a186efb0281829077ef34a99e954b44e62a2ac8","modified":1486109334792},{"_id":"public/archives/2017/02/index.html","hash":"5f2c357e171dd3425ff737a84e9d9318038ea627","modified":1486109334792},{"_id":"public/2017/02/01/Gradle实现自动拉取git及压缩文件/index.html","hash":"7ac368664f1031a95ae7ed69a10ba40b2bff6ca6","modified":1486554959428},{"_id":"public/categories/Gradle/index.html","hash":"168c3c188db4d183fd5ffa80ee64e79730feeb4a","modified":1486395911270},{"_id":"source/_posts/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1486395715000},{"_id":"source/_posts/Spring 学习（一）.md","hash":"6bf0e0d45bb7be691e5cb4f92d56cd02038d82cb","modified":1486555411000},{"_id":"public/categories/Java后台/index.html","hash":"75d5a90b245ee2f2e0db018df85cbb287736f27c","modified":1486448130425},{"_id":"public/tags/Spring/index.html","hash":"af6b3c994b05ad1f418656b1bfff5e660f20983a","modified":1486448130455},{"_id":"public/2016/12/18/Spring 学习（一）/index.html","hash":"89459a06c97f43ebdfe2a4f844a2d330b305e85d","modified":1486395911274},{"_id":"public/2016/12/26/Spring 学习（一）/index.html","hash":"fdf695bc298d398aebbcd22fcbd7273698de15c9","modified":1486555420447},{"_id":"source/_posts/Spring 学习（二）.md","hash":"29e9b2aaa496c42f50a1fdcdb692d2f659453cf4","modified":1486555126000},{"_id":"public/2016/12/26/Spring 学习（二）/index.html","hash":"df1f8e7acdf9d5f24ab7b1fd25c249135ccac222","modified":1486447985146},{"_id":"public/2016/12/27/Spring 学习（二）/index.html","hash":"5c079c16f984bc317b161f94efadeae97b52c0f5","modified":1486555235972},{"_id":"themes/indigo/.DS_Store","hash":"f09a86bb4ce7d04901ec1bb4cb55bee99909840c","modified":1486536571000},{"_id":"source/_posts/Dalvik中PreVerify问题.md","hash":"640b236a184a5806589e61307fa1a92fc49f97ce","modified":1486553261000},{"_id":"themes/indigo/source/.DS_Store","hash":"78c55cb943d84d5cb881e84c1b3357ffc7a1dc0e","modified":1486479326000},{"_id":"themes/indigo/source/css/.DS_Store","hash":"b2229336b4bdd6869c95d6859594a4a25f3eb56c","modified":1486479338000},{"_id":"themes/indigo/source/css/fonts/.DS_Store","hash":"9cdfd30d7bcf88f685d33df0f43b4ae4a2c40823","modified":1486479349000},{"_id":"public/2016/11/24/Dalvik中PreVerify问题/index.html","hash":"fb2ae3661b2002346382b56ddf1b3aa3d6994fc0","modified":1486553308513}],"Category":[{"name":"Android","_id":"ciwvuocrt0003f0v717ihjd7s"},{"name":"Hybird","_id":"ciwvuocs70008f0v7yhu3mxyn"},{"name":"工具","_id":"ciwvuocsp000lf0v7meexivi2"},{"name":"RxJava","_id":"ciwvuoct7000yf0v72eyacfow"},{"name":"网络","_id":"ciwvuocta0013f0v71sgcnlqa"},{"name":"算法","_id":"ciwvuoctd0018f0v7b9p76pyv"},{"name":"Gradle","_id":"ciypj474i0000leqwm3z3t6ja"},{"name":"Java后台","_id":"ciyu9qvky00013dqw0ggdcxrf"}],"Data":[],"Page":[{"title":"about me","date":"2016-12-12T16:15:52.000Z","layout":"tags","comments":0,"_content":"","source":"about/about_me.md","raw":"---\ntitle: about me\ndate: 2016-12-13 00:15:52\nlayout: tags\ncomments: false\n---\n","updated":"2017-01-19T08:20:55.000Z","path":"about/about_me.html","_id":"ciwvuocqy0001f0v7nosglpub","content":"","excerpt":"","more":""},{"title":"tags","date":"2016-12-12T16:15:52.000Z","layout":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2016-12-13 00:15:52\nlayout: tags\ncomments: false\n---\n","updated":"2016-12-12T16:17:04.537Z","path":"tags/index.html","_id":"ciwvuocuc001wf0v76f5boc10","content":"","excerpt":"","more":""},{"title":"categories","date":"2016-12-12T16:17:28.000Z","layout":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2016-12-13 00:17:28\nlayout: categories\ncomments: false\n---\n","updated":"2016-12-12T16:18:09.769Z","path":"categories/index.html","_id":"ciwvuocud001xf0v7hfr5cfta","content":"","excerpt":"","more":""}],"Post":[{"title":"Android SingleTask 探究","date":"2016-05-16T03:12:00.000Z","_content":"> Android 4种启动模式来说，用法说明此处不再提及主要介绍SingleTop，SingleTask相关的问题\n\n### 说明\n\n* 先分析 官方文档 中的一段话：\n\n    > As shown in the table above, standard is the default mode and is appropriate for most types of activities. SingleTop is also a common and useful launch mode for many types of activities. The other modes — singleTask and singleInstance — <font color=\"red\">are not appropriate for most applications</font>, since they result in an interaction model that is likely to be unfamiliar to users and is very different from most other applications.\n\n&emsp;&emsp;对于大多数应用来说，SingleTask 和 SingleInstance 并不适用，standrd 和 SingleTop对于普通的大部分Activity启动是适用的。\n之所以使用singleTask，是存在这样一类问题，想要从后面的Activity 直接跳转到前面某一个Activity时，可能会采用的，如一个应用的MainActivity，LoginActivity等。\n\n&emsp;&emsp;对于SingleTask模式，官方文档的这么一句话，坑了不少人（我还比较幸运，没被坑惨）,也带给我对之前知识的迷惑。\n> The system creates a new task and instantiates the activity at the root of the new task\n\n&emsp;&emsp;**其实事实根本不是这样的**！！！\n\n### 场景复现\n\n* 下面用代码事实说话：建立3个Activity，分别为Main1Activity、Main2Activity、Main3Activity，前两个都设定单击事件，跳转逻辑为：main1 -> main2 -> main3，其中 Main2Activity 为 SingleTask（AndroidManifest.xml中设置）。打印相应的生命周期方法和所在的 **taskId**\n\n    ![](http://7xr1vo.com1.z0.glb.clouddn.com/SingleTask%20%E5%9B%BE1.png)\n\n\n&emsp;&emsp;这些taskid都是一样的，所以它们都是同一个Task中的。事实胜于雄辩。然后搜了一下相关问题，老罗的博客还是给力，彻彻底底的分析了这个坑。致谢老罗的开源精神！\n&emsp;&emsp;链接：[http://blog.csdn.net/luoshengyang/article/details/6714543](http://blog.csdn.net/luoshengyang/article/details/6714543)\n\n* 同时为了解释项目中类似的一个页面跳转问题，对于上面的demo做了修改：\n    \n    将 Main1Activity 设置为 SingleTask，其余2个为standrd\n    \n    操作步骤：\n    1. 点击图标启动此应用\n    2. 依次点击进入 Main2，Main3，再点击Home键\n    3. 点击应用图标重新进入\n\n    操作结果：结果再次显示的是Main1Activity，而不是Main3Activity。\n\n    先看看打印的日志：\n    \n    ![](http://7xr1vo.com1.z0.glb.clouddn.com/SingleTask%E5%9B%BE2.png)\n    \n    再次点击图标进入应用时，实际上是Main2Activity，Main3Activity 出栈了。\n    分析下这个过程：\n    \n    Main1，Main2，Main3 依次压入栈中，然后 Home 键，则整个Task处于stop状态，是一个background Task。当再次点击应用图标时，系统检测到此时已经存在一个该应用的Task的，此时就将此Background Task 移至前台，成为Foreground Task，而且由于Main1Activity是SingleTask，且位于task底部，所以，再次启动时，将前两个Activity移除，且按照启动顺序依次移除，所以打出的日志是：Main2 desotry，Main3 destory，Main1 onResume。\n    \n    * **看来，SingleTask这种特殊的模式引起的Task内Activity的变化是值得注意的**\n\n    之前我在Stackoverflow上问相关的问题，和我猜想的原因比较类似，链接如下：\n        \n    [http://stackoverflow.com/questions/36933755/activity-is-singletask-and-is-root-in-task-restrart-activity-of-top-is-destorye](http://stackoverflow.com/questions/36933755/activity-is-singletask-and-is-root-in-task-restrart-activity-of-top-is-destorye) （可供参考）\n\n那么，如何才能在一个新的任务栈里创建新的Activity呢？\n\n* 只需要在AndroidManifest.xml中配置即可\n    \n    在SingleTask的基础之上，再增加设置 **taskAffinify** 属性即可，默认情况下，taskAffinity属性值为 包名，所以可以自定义一个taskAffinity值，便可以实现一个新的Task,新的Activity处于这个新的Task的root。如，我的 Demo 代码如下：\n    \n    ![](http://7xr1vo.com1.z0.glb.clouddn.com/SingleTask%E5%9B%BE3.png)\n\n### 总结\n* SingleTask的启动模式并不会启动一个新的任务栈来承载Activity，而是在原来的Task中\n* SingleTask的启动模式，在官方文档的说明中，日常开发中并不建议使用，SingleInstance更是如此。\n* Activity的启动模式会带来的Task的变化和Activity的生命周期变化都会在ActivityRecord中体现的，通过源码分析可以发现。\n* 通过以下命令，可以查看Task内的Activity的变化：\n\n        adb shell dumpsys activity  获取所有应用的activity堆栈信息\n        adb shell dumpsys activity | grep com.xxx.xxx.xxx   获取某个应用的activity 堆栈信息\n        adb shell dumpsys activity | grep mFocusedActivity  获取处于栈顶的Activity\n\n* [http://blog.piasy.com/2016/03/19/Android-Task-And-Back-Stack/](http://blog.piasy.com/2016/03/19/Android-Task-And-Back-Stack/) (写完此文后，发现有高人已经写得很全面很详尽了)","source":"_posts/Android SingleTask 探究.md","raw":"---\ntitle: Android SingleTask 探究\ndate: 2016-05-16 11:12\ncategories: Android \ntags: SingleTask\n---\n> Android 4种启动模式来说，用法说明此处不再提及主要介绍SingleTop，SingleTask相关的问题\n\n### 说明\n\n* 先分析 官方文档 中的一段话：\n\n    > As shown in the table above, standard is the default mode and is appropriate for most types of activities. SingleTop is also a common and useful launch mode for many types of activities. The other modes — singleTask and singleInstance — <font color=\"red\">are not appropriate for most applications</font>, since they result in an interaction model that is likely to be unfamiliar to users and is very different from most other applications.\n\n&emsp;&emsp;对于大多数应用来说，SingleTask 和 SingleInstance 并不适用，standrd 和 SingleTop对于普通的大部分Activity启动是适用的。\n之所以使用singleTask，是存在这样一类问题，想要从后面的Activity 直接跳转到前面某一个Activity时，可能会采用的，如一个应用的MainActivity，LoginActivity等。\n\n&emsp;&emsp;对于SingleTask模式，官方文档的这么一句话，坑了不少人（我还比较幸运，没被坑惨）,也带给我对之前知识的迷惑。\n> The system creates a new task and instantiates the activity at the root of the new task\n\n&emsp;&emsp;**其实事实根本不是这样的**！！！\n\n### 场景复现\n\n* 下面用代码事实说话：建立3个Activity，分别为Main1Activity、Main2Activity、Main3Activity，前两个都设定单击事件，跳转逻辑为：main1 -> main2 -> main3，其中 Main2Activity 为 SingleTask（AndroidManifest.xml中设置）。打印相应的生命周期方法和所在的 **taskId**\n\n    ![](http://7xr1vo.com1.z0.glb.clouddn.com/SingleTask%20%E5%9B%BE1.png)\n\n\n&emsp;&emsp;这些taskid都是一样的，所以它们都是同一个Task中的。事实胜于雄辩。然后搜了一下相关问题，老罗的博客还是给力，彻彻底底的分析了这个坑。致谢老罗的开源精神！\n&emsp;&emsp;链接：[http://blog.csdn.net/luoshengyang/article/details/6714543](http://blog.csdn.net/luoshengyang/article/details/6714543)\n\n* 同时为了解释项目中类似的一个页面跳转问题，对于上面的demo做了修改：\n    \n    将 Main1Activity 设置为 SingleTask，其余2个为standrd\n    \n    操作步骤：\n    1. 点击图标启动此应用\n    2. 依次点击进入 Main2，Main3，再点击Home键\n    3. 点击应用图标重新进入\n\n    操作结果：结果再次显示的是Main1Activity，而不是Main3Activity。\n\n    先看看打印的日志：\n    \n    ![](http://7xr1vo.com1.z0.glb.clouddn.com/SingleTask%E5%9B%BE2.png)\n    \n    再次点击图标进入应用时，实际上是Main2Activity，Main3Activity 出栈了。\n    分析下这个过程：\n    \n    Main1，Main2，Main3 依次压入栈中，然后 Home 键，则整个Task处于stop状态，是一个background Task。当再次点击应用图标时，系统检测到此时已经存在一个该应用的Task的，此时就将此Background Task 移至前台，成为Foreground Task，而且由于Main1Activity是SingleTask，且位于task底部，所以，再次启动时，将前两个Activity移除，且按照启动顺序依次移除，所以打出的日志是：Main2 desotry，Main3 destory，Main1 onResume。\n    \n    * **看来，SingleTask这种特殊的模式引起的Task内Activity的变化是值得注意的**\n\n    之前我在Stackoverflow上问相关的问题，和我猜想的原因比较类似，链接如下：\n        \n    [http://stackoverflow.com/questions/36933755/activity-is-singletask-and-is-root-in-task-restrart-activity-of-top-is-destorye](http://stackoverflow.com/questions/36933755/activity-is-singletask-and-is-root-in-task-restrart-activity-of-top-is-destorye) （可供参考）\n\n那么，如何才能在一个新的任务栈里创建新的Activity呢？\n\n* 只需要在AndroidManifest.xml中配置即可\n    \n    在SingleTask的基础之上，再增加设置 **taskAffinify** 属性即可，默认情况下，taskAffinity属性值为 包名，所以可以自定义一个taskAffinity值，便可以实现一个新的Task,新的Activity处于这个新的Task的root。如，我的 Demo 代码如下：\n    \n    ![](http://7xr1vo.com1.z0.glb.clouddn.com/SingleTask%E5%9B%BE3.png)\n\n### 总结\n* SingleTask的启动模式并不会启动一个新的任务栈来承载Activity，而是在原来的Task中\n* SingleTask的启动模式，在官方文档的说明中，日常开发中并不建议使用，SingleInstance更是如此。\n* Activity的启动模式会带来的Task的变化和Activity的生命周期变化都会在ActivityRecord中体现的，通过源码分析可以发现。\n* 通过以下命令，可以查看Task内的Activity的变化：\n\n        adb shell dumpsys activity  获取所有应用的activity堆栈信息\n        adb shell dumpsys activity | grep com.xxx.xxx.xxx   获取某个应用的activity 堆栈信息\n        adb shell dumpsys activity | grep mFocusedActivity  获取处于栈顶的Activity\n\n* [http://blog.piasy.com/2016/03/19/Android-Task-And-Back-Stack/](http://blog.piasy.com/2016/03/19/Android-Task-And-Back-Stack/) (写完此文后，发现有高人已经写得很全面很详尽了)","slug":"Android SingleTask 探究","published":1,"updated":"2016-12-17T14:25:03.531Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciwvuocqq0000f0v7p5bb78tf","content":"<blockquote>\n<p>Android 4种启动模式来说，用法说明此处不再提及主要介绍SingleTop，SingleTask相关的问题</p>\n</blockquote>\n<h3 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h3><ul>\n<li><p>先分析 官方文档 中的一段话：</p>\n<blockquote>\n<p>As shown in the table above, standard is the default mode and is appropriate for most types of activities. SingleTop is also a common and useful launch mode for many types of activities. The other modes — singleTask and singleInstance — <font color=\"red\">are not appropriate for most applications</font>, since they result in an interaction model that is likely to be unfamiliar to users and is very different from most other applications.</p>\n</blockquote>\n</li>\n</ul>\n<p>&emsp;&emsp;对于大多数应用来说，SingleTask 和 SingleInstance 并不适用，standrd 和 SingleTop对于普通的大部分Activity启动是适用的。<br>之所以使用singleTask，是存在这样一类问题，想要从后面的Activity 直接跳转到前面某一个Activity时，可能会采用的，如一个应用的MainActivity，LoginActivity等。</p>\n<p>&emsp;&emsp;对于SingleTask模式，官方文档的这么一句话，坑了不少人（我还比较幸运，没被坑惨）,也带给我对之前知识的迷惑。</p>\n<blockquote>\n<p>The system creates a new task and instantiates the activity at the root of the new task</p>\n</blockquote>\n<p>&emsp;&emsp;<strong>其实事实根本不是这样的</strong>！！！</p>\n<h3 id=\"场景复现\"><a href=\"#场景复现\" class=\"headerlink\" title=\"场景复现\"></a>场景复现</h3><ul>\n<li><p>下面用代码事实说话：建立3个Activity，分别为Main1Activity、Main2Activity、Main3Activity，前两个都设定单击事件，跳转逻辑为：main1 -&gt; main2 -&gt; main3，其中 Main2Activity 为 SingleTask（AndroidManifest.xml中设置）。打印相应的生命周期方法和所在的 <strong>taskId</strong></p>\n<p>  <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/SingleTask%20%E5%9B%BE1.png\" alt=\"\"></p>\n</li>\n</ul>\n<p>&emsp;&emsp;这些taskid都是一样的，所以它们都是同一个Task中的。事实胜于雄辩。然后搜了一下相关问题，老罗的博客还是给力，彻彻底底的分析了这个坑。致谢老罗的开源精神！<br>&emsp;&emsp;链接：<a href=\"http://blog.csdn.net/luoshengyang/article/details/6714543\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/luoshengyang/article/details/6714543</a></p>\n<ul>\n<li><p>同时为了解释项目中类似的一个页面跳转问题，对于上面的demo做了修改：</p>\n<p>  将 Main1Activity 设置为 SingleTask，其余2个为standrd</p>\n<p>  操作步骤：</p>\n<ol>\n<li>点击图标启动此应用</li>\n<li>依次点击进入 Main2，Main3，再点击Home键</li>\n<li><p>点击应用图标重新进入</p>\n<p>操作结果：结果再次显示的是Main1Activity，而不是Main3Activity。</p>\n<p>先看看打印的日志：</p>\n<p><img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/SingleTask%E5%9B%BE2.png\" alt=\"\"></p>\n<p>再次点击图标进入应用时，实际上是Main2Activity，Main3Activity 出栈了。<br>分析下这个过程：</p>\n<p>Main1，Main2，Main3 依次压入栈中，然后 Home 键，则整个Task处于stop状态，是一个background Task。当再次点击应用图标时，系统检测到此时已经存在一个该应用的Task的，此时就将此Background Task 移至前台，成为Foreground Task，而且由于Main1Activity是SingleTask，且位于task底部，所以，再次启动时，将前两个Activity移除，且按照启动顺序依次移除，所以打出的日志是：Main2 desotry，Main3 destory，Main1 onResume。</p>\n</li>\n</ol>\n<ul>\n<li><p><strong>看来，SingleTask这种特殊的模式引起的Task内Activity的变化是值得注意的</strong></p>\n<p>之前我在Stackoverflow上问相关的问题，和我猜想的原因比较类似，链接如下：</p>\n<p><a href=\"http://stackoverflow.com/questions/36933755/activity-is-singletask-and-is-root-in-task-restrart-activity-of-top-is-destorye\" target=\"_blank\" rel=\"external\">http://stackoverflow.com/questions/36933755/activity-is-singletask-and-is-root-in-task-restrart-activity-of-top-is-destorye</a> （可供参考）</p>\n</li>\n</ul>\n</li>\n</ul>\n<p>那么，如何才能在一个新的任务栈里创建新的Activity呢？</p>\n<ul>\n<li><p>只需要在AndroidManifest.xml中配置即可</p>\n<p>  在SingleTask的基础之上，再增加设置 <strong>taskAffinify</strong> 属性即可，默认情况下，taskAffinity属性值为 包名，所以可以自定义一个taskAffinity值，便可以实现一个新的Task,新的Activity处于这个新的Task的root。如，我的 Demo 代码如下：</p>\n<p>  <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/SingleTask%E5%9B%BE3.png\" alt=\"\"></p>\n</li>\n</ul>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><ul>\n<li>SingleTask的启动模式并不会启动一个新的任务栈来承载Activity，而是在原来的Task中</li>\n<li>SingleTask的启动模式，在官方文档的说明中，日常开发中并不建议使用，SingleInstance更是如此。</li>\n<li>Activity的启动模式会带来的Task的变化和Activity的生命周期变化都会在ActivityRecord中体现的，通过源码分析可以发现。</li>\n<li><p>通过以下命令，可以查看Task内的Activity的变化：</p>\n<pre><code>adb shell dumpsys activity  获取所有应用的activity堆栈信息\nadb shell dumpsys activity | grep com.xxx.xxx.xxx   获取某个应用的activity 堆栈信息\nadb shell dumpsys activity | grep mFocusedActivity  获取处于栈顶的Activity\n</code></pre></li>\n<li><p><a href=\"http://blog.piasy.com/2016/03/19/Android-Task-And-Back-Stack/\" target=\"_blank\" rel=\"external\">http://blog.piasy.com/2016/03/19/Android-Task-And-Back-Stack/</a> (写完此文后，发现有高人已经写得很全面很详尽了)</p>\n</li>\n</ul>\n","excerpt":"","more":"<blockquote>\n<p>Android 4种启动模式来说，用法说明此处不再提及主要介绍SingleTop，SingleTask相关的问题</p>\n</blockquote>\n<h3 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h3><ul>\n<li><p>先分析 官方文档 中的一段话：</p>\n<blockquote>\n<p>As shown in the table above, standard is the default mode and is appropriate for most types of activities. SingleTop is also a common and useful launch mode for many types of activities. The other modes — singleTask and singleInstance — <font color=\"red\">are not appropriate for most applications</font>, since they result in an interaction model that is likely to be unfamiliar to users and is very different from most other applications.</p>\n</blockquote>\n</li>\n</ul>\n<p>&emsp;&emsp;对于大多数应用来说，SingleTask 和 SingleInstance 并不适用，standrd 和 SingleTop对于普通的大部分Activity启动是适用的。<br>之所以使用singleTask，是存在这样一类问题，想要从后面的Activity 直接跳转到前面某一个Activity时，可能会采用的，如一个应用的MainActivity，LoginActivity等。</p>\n<p>&emsp;&emsp;对于SingleTask模式，官方文档的这么一句话，坑了不少人（我还比较幸运，没被坑惨）,也带给我对之前知识的迷惑。</p>\n<blockquote>\n<p>The system creates a new task and instantiates the activity at the root of the new task</p>\n</blockquote>\n<p>&emsp;&emsp;<strong>其实事实根本不是这样的</strong>！！！</p>\n<h3 id=\"场景复现\"><a href=\"#场景复现\" class=\"headerlink\" title=\"场景复现\"></a>场景复现</h3><ul>\n<li><p>下面用代码事实说话：建立3个Activity，分别为Main1Activity、Main2Activity、Main3Activity，前两个都设定单击事件，跳转逻辑为：main1 -&gt; main2 -&gt; main3，其中 Main2Activity 为 SingleTask（AndroidManifest.xml中设置）。打印相应的生命周期方法和所在的 <strong>taskId</strong></p>\n<p>  <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/SingleTask%20%E5%9B%BE1.png\" alt=\"\"></p>\n</li>\n</ul>\n<p>&emsp;&emsp;这些taskid都是一样的，所以它们都是同一个Task中的。事实胜于雄辩。然后搜了一下相关问题，老罗的博客还是给力，彻彻底底的分析了这个坑。致谢老罗的开源精神！<br>&emsp;&emsp;链接：<a href=\"http://blog.csdn.net/luoshengyang/article/details/6714543\">http://blog.csdn.net/luoshengyang/article/details/6714543</a></p>\n<ul>\n<li><p>同时为了解释项目中类似的一个页面跳转问题，对于上面的demo做了修改：</p>\n<p>  将 Main1Activity 设置为 SingleTask，其余2个为standrd</p>\n<p>  操作步骤：</p>\n<ol>\n<li>点击图标启动此应用</li>\n<li>依次点击进入 Main2，Main3，再点击Home键</li>\n<li><p>点击应用图标重新进入</p>\n<p>操作结果：结果再次显示的是Main1Activity，而不是Main3Activity。</p>\n<p>先看看打印的日志：</p>\n<p><img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/SingleTask%E5%9B%BE2.png\" alt=\"\"></p>\n<p>再次点击图标进入应用时，实际上是Main2Activity，Main3Activity 出栈了。<br>分析下这个过程：</p>\n<p>Main1，Main2，Main3 依次压入栈中，然后 Home 键，则整个Task处于stop状态，是一个background Task。当再次点击应用图标时，系统检测到此时已经存在一个该应用的Task的，此时就将此Background Task 移至前台，成为Foreground Task，而且由于Main1Activity是SingleTask，且位于task底部，所以，再次启动时，将前两个Activity移除，且按照启动顺序依次移除，所以打出的日志是：Main2 desotry，Main3 destory，Main1 onResume。</p>\n</li>\n</ol>\n<ul>\n<li><p><strong>看来，SingleTask这种特殊的模式引起的Task内Activity的变化是值得注意的</strong></p>\n<p>之前我在Stackoverflow上问相关的问题，和我猜想的原因比较类似，链接如下：</p>\n<p><a href=\"http://stackoverflow.com/questions/36933755/activity-is-singletask-and-is-root-in-task-restrart-activity-of-top-is-destorye\">http://stackoverflow.com/questions/36933755/activity-is-singletask-and-is-root-in-task-restrart-activity-of-top-is-destorye</a> （可供参考）</p>\n</li>\n</ul>\n</li>\n</ul>\n<p>那么，如何才能在一个新的任务栈里创建新的Activity呢？</p>\n<ul>\n<li><p>只需要在AndroidManifest.xml中配置即可</p>\n<p>  在SingleTask的基础之上，再增加设置 <strong>taskAffinify</strong> 属性即可，默认情况下，taskAffinity属性值为 包名，所以可以自定义一个taskAffinity值，便可以实现一个新的Task,新的Activity处于这个新的Task的root。如，我的 Demo 代码如下：</p>\n<p>  <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/SingleTask%E5%9B%BE3.png\" alt=\"\"></p>\n</li>\n</ul>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><ul>\n<li>SingleTask的启动模式并不会启动一个新的任务栈来承载Activity，而是在原来的Task中</li>\n<li>SingleTask的启动模式，在官方文档的说明中，日常开发中并不建议使用，SingleInstance更是如此。</li>\n<li>Activity的启动模式会带来的Task的变化和Activity的生命周期变化都会在ActivityRecord中体现的，通过源码分析可以发现。</li>\n<li><p>通过以下命令，可以查看Task内的Activity的变化：</p>\n<pre><code>adb shell dumpsys activity  获取所有应用的activity堆栈信息\nadb shell dumpsys activity | grep com.xxx.xxx.xxx   获取某个应用的activity 堆栈信息\nadb shell dumpsys activity | grep mFocusedActivity  获取处于栈顶的Activity\n</code></pre></li>\n<li><p><a href=\"http://blog.piasy.com/2016/03/19/Android-Task-And-Back-Stack/\">http://blog.piasy.com/2016/03/19/Android-Task-And-Back-Stack/</a> (写完此文后，发现有高人已经写得很全面很详尽了)</p>\n</li>\n</ul>\n"},{"title":"Android apk安装过程实例分析","date":"2016-11-17T13:08:00.000Z","_content":"> 注：本文不对apk安装之前，系统所做的复杂工作做分析，只针对普通的apk安装过程进行简单的过程理解\n\n一般情况下，在apk安装时，系统一般会显示一个安装界面，获取用户同意之后进行安装，并且有一些apk预处理相关的操作，紧接着，会启动app界面，进入app。\n在这一过程中，不同版本的Android系统在安装时，对包的处理是不太一样的，以下分Dalivk、ART两种虚拟机进行分析。这里主要采用原生模拟器，进行分析。\n\n### 一、 Dalvik（JIT：just in time  即时编译）\n\n- 过程分析：\n - 点击apk包后或apk下载后，安装之前，系统会启动安装界面PackageInstallerActivity，让用户进行授权选择，用户同意后，会调用ApplicationPackageManager 进行相关操作。\n - 调用ApplicationPackageManager，通过IPC来调用 PackageManagerService 中的 installPackage 方法，在这个方法中，又去调用 installPackageAsUser 方法，此时，要进行权限相关校验，完毕之后，会通过 handler 发送消息（类型：INIT_COPY，MCS_BOUND）\n - 然后 startCopy —> handleStartCopy 依次调用，这里，对安装位置、存储空间进行处理，之后会 拷贝apk 相关文件放在相应的目录下。这些文件主要包括：\n\t   - apk文件\n\t   - jar、so文件\n\t   - db文件（若有的话）\n - 拷贝完成之后，进行预处理，对于Dalvik来说，dexopt要进行dex文件的优化，生成odex文件，在app运行时，能加快其启动速度。\n - 另外，对于资源处理，是 AssetMananger 来进行资源的解析、加载。\n\n\n- 实例考察：\n\t- 安装时logcat日志：拷贝工作，然后进行dex优化，dexopt执行操作\n\n![](http://7xr1vo.com1.z0.glb.clouddn.com/apk%E5%AE%89%E8%A3%85%E8%BF%87%E7%A8%8B.png)\n\n   \n   拷贝后，目录如下：\n\t\n![](http://7xr1vo.com1.z0.glb.clouddn.com/copy%20lib%E7%BB%93%E6%9E%9C.png)\n\n dex位置：\n\t\n![](http://7xr1vo.com1.z0.glb.clouddn.com/dex%E4%BD%8D%E7%BD%AE.png)\n\n如果把此位置的 dex 删除后，且杀掉已经运行的进程后，再次点击app启动后奔溃，如图：\n\n![](http://7xr1vo.com1.z0.glb.clouddn.com/%E5%88%A0%E6%8E%89dalvik-cache%E7%9B%AE%E5%BD%95%E4%B8%8B%E7%9A%84dex%E5%90%8E%EF%BC%8C%E4%B8%94%E6%9D%80%E6%8E%89%E5%B7%B2%E7%BB%8F%E8%BF%90%E8%A1%8C%E7%9A%84%E5%BA%94%E7%94%A8%E8%BF%9B%E7%A8%8B%EF%BC%8C%E5%86%8D%E6%AC%A1%E5%90%AF%E5%8A%A8.png)\n\n由此可知，要启动app时，需要加载 /data/dalik-cache 目录下的dex文件\n\n相关参考文献：\nhttp://www.woaitqs.cc/android/2016/07/28/android-plugin-get-apk-info\nhttp://blog.csdn.net/luoshengyang/article/details/8852432\n\n### 二、ART（AOT：Ahead of time  预编译）\n\nAndroid 4.4之后，对于Android虚拟机又继续做了优化，art 代替了 Dalvik，对于dex文件，优化工作做了改变。\n- 大致的处理过程：\n\t\t\n- 编译时，通过调用 dex2oat 对dex 进行预编译，这个编译器参考了LLVM框架，默认情况下，是采用了quick模式，但在6.0之后，LLVM被彻底去除了。关于LLVM细节，自行Google。\n- 编译后生成的文件 .oat 文件，实际上是Android 私有的ELF文件。在Linux系统中，ELF文件主要分为3类：目标文件（ .o）、共享文件（ .so）、可执行文件。此处Android的 .oat文件属于可执行文件。\n\toat 文件含有ELF文件正常的结构形态，里面既包含有dex 文件，也包含编译好的本地指令代码。被包含的dex文件也可以是多个。\n\t\n\t\n- 实例考察\n - ART 安装apk时，日志记录：\n\n![](http://7xr1vo.com1.z0.glb.clouddn.com/art%E5%AE%89%E8%A3%85apk%E7%9A%84log.png)\n\t 可以看到，有apk的拷贝，有dex2oat的dex优化过程。再追一下相关的目录：\n\t \n\n ![](http://7xr1vo.com1.z0.glb.clouddn.com/local%E7%9B%AE%E5%BD%95%E4%B8%8B.png)\n \n  ![](http://7xr1vo.com1.z0.glb.clouddn.com/dalvik-cache%E7%9B%AE%E5%BD%95%E4%B8%8B.png)\n  \n里面有一部分是系统框架层的相关文件。\n\t\n安装后的目录结构也有变化：\n\n![](http://7xr1vo.com1.z0.glb.clouddn.com/data_app%E7%9B%AE%E5%BD%95%E4%B8%8B.png)\n\n生成相应的平台下的文件，此处我使用的是x86的模拟器\n\nAndroid 在编译时用到的 dexopt、dex2oat、aapt 都在 /system/bin目录下：\n\n![](http://7xr1vo.com1.z0.glb.clouddn.com/4.4%E4%B8%8Bsystem_bin%E4%B8%8B%E7%9A%84aapt.png.png)\n\n当时对于 multidex 的包也进行了目录查找，如下，留下后续研究做参考。\n\n![](http://7xr1vo.com1.z0.glb.clouddn.com/multidex.png)\n\n相关参考文献：\nhttps://mssun.me/blog/android-art-runtime-2-dex2oat.html\nhttp://blog.csdn.net/luoshengyang/article/details/39307813","source":"_posts/Android apk安装过程实例分析.md","raw":"---\ntitle: Android apk安装过程实例分析\ndate: 2016-11-17 21:08\ncategories: Android\ntags: [Dalvik, ART]\n---\n> 注：本文不对apk安装之前，系统所做的复杂工作做分析，只针对普通的apk安装过程进行简单的过程理解\n\n一般情况下，在apk安装时，系统一般会显示一个安装界面，获取用户同意之后进行安装，并且有一些apk预处理相关的操作，紧接着，会启动app界面，进入app。\n在这一过程中，不同版本的Android系统在安装时，对包的处理是不太一样的，以下分Dalivk、ART两种虚拟机进行分析。这里主要采用原生模拟器，进行分析。\n\n### 一、 Dalvik（JIT：just in time  即时编译）\n\n- 过程分析：\n - 点击apk包后或apk下载后，安装之前，系统会启动安装界面PackageInstallerActivity，让用户进行授权选择，用户同意后，会调用ApplicationPackageManager 进行相关操作。\n - 调用ApplicationPackageManager，通过IPC来调用 PackageManagerService 中的 installPackage 方法，在这个方法中，又去调用 installPackageAsUser 方法，此时，要进行权限相关校验，完毕之后，会通过 handler 发送消息（类型：INIT_COPY，MCS_BOUND）\n - 然后 startCopy —> handleStartCopy 依次调用，这里，对安装位置、存储空间进行处理，之后会 拷贝apk 相关文件放在相应的目录下。这些文件主要包括：\n\t   - apk文件\n\t   - jar、so文件\n\t   - db文件（若有的话）\n - 拷贝完成之后，进行预处理，对于Dalvik来说，dexopt要进行dex文件的优化，生成odex文件，在app运行时，能加快其启动速度。\n - 另外，对于资源处理，是 AssetMananger 来进行资源的解析、加载。\n\n\n- 实例考察：\n\t- 安装时logcat日志：拷贝工作，然后进行dex优化，dexopt执行操作\n\n![](http://7xr1vo.com1.z0.glb.clouddn.com/apk%E5%AE%89%E8%A3%85%E8%BF%87%E7%A8%8B.png)\n\n   \n   拷贝后，目录如下：\n\t\n![](http://7xr1vo.com1.z0.glb.clouddn.com/copy%20lib%E7%BB%93%E6%9E%9C.png)\n\n dex位置：\n\t\n![](http://7xr1vo.com1.z0.glb.clouddn.com/dex%E4%BD%8D%E7%BD%AE.png)\n\n如果把此位置的 dex 删除后，且杀掉已经运行的进程后，再次点击app启动后奔溃，如图：\n\n![](http://7xr1vo.com1.z0.glb.clouddn.com/%E5%88%A0%E6%8E%89dalvik-cache%E7%9B%AE%E5%BD%95%E4%B8%8B%E7%9A%84dex%E5%90%8E%EF%BC%8C%E4%B8%94%E6%9D%80%E6%8E%89%E5%B7%B2%E7%BB%8F%E8%BF%90%E8%A1%8C%E7%9A%84%E5%BA%94%E7%94%A8%E8%BF%9B%E7%A8%8B%EF%BC%8C%E5%86%8D%E6%AC%A1%E5%90%AF%E5%8A%A8.png)\n\n由此可知，要启动app时，需要加载 /data/dalik-cache 目录下的dex文件\n\n相关参考文献：\nhttp://www.woaitqs.cc/android/2016/07/28/android-plugin-get-apk-info\nhttp://blog.csdn.net/luoshengyang/article/details/8852432\n\n### 二、ART（AOT：Ahead of time  预编译）\n\nAndroid 4.4之后，对于Android虚拟机又继续做了优化，art 代替了 Dalvik，对于dex文件，优化工作做了改变。\n- 大致的处理过程：\n\t\t\n- 编译时，通过调用 dex2oat 对dex 进行预编译，这个编译器参考了LLVM框架，默认情况下，是采用了quick模式，但在6.0之后，LLVM被彻底去除了。关于LLVM细节，自行Google。\n- 编译后生成的文件 .oat 文件，实际上是Android 私有的ELF文件。在Linux系统中，ELF文件主要分为3类：目标文件（ .o）、共享文件（ .so）、可执行文件。此处Android的 .oat文件属于可执行文件。\n\toat 文件含有ELF文件正常的结构形态，里面既包含有dex 文件，也包含编译好的本地指令代码。被包含的dex文件也可以是多个。\n\t\n\t\n- 实例考察\n - ART 安装apk时，日志记录：\n\n![](http://7xr1vo.com1.z0.glb.clouddn.com/art%E5%AE%89%E8%A3%85apk%E7%9A%84log.png)\n\t 可以看到，有apk的拷贝，有dex2oat的dex优化过程。再追一下相关的目录：\n\t \n\n ![](http://7xr1vo.com1.z0.glb.clouddn.com/local%E7%9B%AE%E5%BD%95%E4%B8%8B.png)\n \n  ![](http://7xr1vo.com1.z0.glb.clouddn.com/dalvik-cache%E7%9B%AE%E5%BD%95%E4%B8%8B.png)\n  \n里面有一部分是系统框架层的相关文件。\n\t\n安装后的目录结构也有变化：\n\n![](http://7xr1vo.com1.z0.glb.clouddn.com/data_app%E7%9B%AE%E5%BD%95%E4%B8%8B.png)\n\n生成相应的平台下的文件，此处我使用的是x86的模拟器\n\nAndroid 在编译时用到的 dexopt、dex2oat、aapt 都在 /system/bin目录下：\n\n![](http://7xr1vo.com1.z0.glb.clouddn.com/4.4%E4%B8%8Bsystem_bin%E4%B8%8B%E7%9A%84aapt.png.png)\n\n当时对于 multidex 的包也进行了目录查找，如下，留下后续研究做参考。\n\n![](http://7xr1vo.com1.z0.glb.clouddn.com/multidex.png)\n\n相关参考文献：\nhttps://mssun.me/blog/android-art-runtime-2-dex2oat.html\nhttp://blog.csdn.net/luoshengyang/article/details/39307813","slug":"Android apk安装过程实例分析","published":1,"updated":"2016-12-17T15:37:51.985Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciwvuocrz0005f0v7znwootzm","content":"<blockquote>\n<p>注：本文不对apk安装之前，系统所做的复杂工作做分析，只针对普通的apk安装过程进行简单的过程理解</p>\n</blockquote>\n<p>一般情况下，在apk安装时，系统一般会显示一个安装界面，获取用户同意之后进行安装，并且有一些apk预处理相关的操作，紧接着，会启动app界面，进入app。<br>在这一过程中，不同版本的Android系统在安装时，对包的处理是不太一样的，以下分Dalivk、ART两种虚拟机进行分析。这里主要采用原生模拟器，进行分析。</p>\n<h3 id=\"一、-Dalvik（JIT：just-in-time-即时编译）\"><a href=\"#一、-Dalvik（JIT：just-in-time-即时编译）\" class=\"headerlink\" title=\"一、 Dalvik（JIT：just in time  即时编译）\"></a>一、 Dalvik（JIT：just in time  即时编译）</h3><ul>\n<li>过程分析：<ul>\n<li>点击apk包后或apk下载后，安装之前，系统会启动安装界面PackageInstallerActivity，让用户进行授权选择，用户同意后，会调用ApplicationPackageManager 进行相关操作。</li>\n<li>调用ApplicationPackageManager，通过IPC来调用 PackageManagerService 中的 installPackage 方法，在这个方法中，又去调用 installPackageAsUser 方法，此时，要进行权限相关校验，完毕之后，会通过 handler 发送消息（类型：INIT_COPY，MCS_BOUND）</li>\n<li>然后 startCopy —&gt; handleStartCopy 依次调用，这里，对安装位置、存储空间进行处理，之后会 拷贝apk 相关文件放在相应的目录下。这些文件主要包括：<ul>\n<li>apk文件</li>\n<li>jar、so文件</li>\n<li>db文件（若有的话）</li>\n</ul>\n</li>\n<li>拷贝完成之后，进行预处理，对于Dalvik来说，dexopt要进行dex文件的优化，生成odex文件，在app运行时，能加快其启动速度。</li>\n<li>另外，对于资源处理，是 AssetMananger 来进行资源的解析、加载。</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li>实例考察：<ul>\n<li>安装时logcat日志：拷贝工作，然后进行dex优化，dexopt执行操作</li>\n</ul>\n</li>\n</ul>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/apk%E5%AE%89%E8%A3%85%E8%BF%87%E7%A8%8B.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>   拷贝后，目录如下：</p>\n<p><img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/copy%20lib%E7%BB%93%E6%9E%9C.png\" alt=\"\"></p>\n<p> dex位置：</p>\n<p><img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/dex%E4%BD%8D%E7%BD%AE.png\" alt=\"\"></p>\n<p>如果把此位置的 dex 删除后，且杀掉已经运行的进程后，再次点击app启动后奔溃，如图：</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/%E5%88%A0%E6%8E%89dalvik-cache%E7%9B%AE%E5%BD%95%E4%B8%8B%E7%9A%84dex%E5%90%8E%EF%BC%8C%E4%B8%94%E6%9D%80%E6%8E%89%E5%B7%B2%E7%BB%8F%E8%BF%90%E8%A1%8C%E7%9A%84%E5%BA%94%E7%94%A8%E8%BF%9B%E7%A8%8B%EF%BC%8C%E5%86%8D%E6%AC%A1%E5%90%AF%E5%8A%A8.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>由此可知，要启动app时，需要加载 /data/dalik-cache 目录下的dex文件</p>\n<p>相关参考文献：<br><a href=\"http://www.woaitqs.cc/android/2016/07/28/android-plugin-get-apk-info\" target=\"_blank\" rel=\"external\">http://www.woaitqs.cc/android/2016/07/28/android-plugin-get-apk-info</a><br><a href=\"http://blog.csdn.net/luoshengyang/article/details/8852432\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/luoshengyang/article/details/8852432</a></p>\n<h3 id=\"二、ART（AOT：Ahead-of-time-预编译）\"><a href=\"#二、ART（AOT：Ahead-of-time-预编译）\" class=\"headerlink\" title=\"二、ART（AOT：Ahead of time  预编译）\"></a>二、ART（AOT：Ahead of time  预编译）</h3><p>Android 4.4之后，对于Android虚拟机又继续做了优化，art 代替了 Dalvik，对于dex文件，优化工作做了改变。</p>\n<ul>\n<li><p>大致的处理过程：</p>\n</li>\n<li><p>编译时，通过调用 dex2oat 对dex 进行预编译，这个编译器参考了LLVM框架，默认情况下，是采用了quick模式，但在6.0之后，LLVM被彻底去除了。关于LLVM细节，自行Google。</p>\n</li>\n<li>编译后生成的文件 .oat 文件，实际上是Android 私有的ELF文件。在Linux系统中，ELF文件主要分为3类：目标文件（ .o）、共享文件（ .so）、可执行文件。此处Android的 .oat文件属于可执行文件。<br>  oat 文件含有ELF文件正常的结构形态，里面既包含有dex 文件，也包含编译好的本地指令代码。被包含的dex文件也可以是多个。</li>\n</ul>\n<ul>\n<li>实例考察<ul>\n<li>ART 安装apk时，日志记录：</li>\n</ul>\n</li>\n</ul>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/art%E5%AE%89%E8%A3%85apk%E7%9A%84log.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<pre><code>可以看到，有apk的拷贝，有dex2oat的dex优化过程。再追一下相关的目录：\n</code></pre><p> <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/local%E7%9B%AE%E5%BD%95%E4%B8%8B.png\" alt=\"\"></p>\n<p>  <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/dalvik-cache%E7%9B%AE%E5%BD%95%E4%B8%8B.png\" alt=\"\"></p>\n<p>里面有一部分是系统框架层的相关文件。</p>\n<p>安装后的目录结构也有变化：</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/data_app%E7%9B%AE%E5%BD%95%E4%B8%8B.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>生成相应的平台下的文件，此处我使用的是x86的模拟器</p>\n<p>Android 在编译时用到的 dexopt、dex2oat、aapt 都在 /system/bin目录下：</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/4.4%E4%B8%8Bsystem_bin%E4%B8%8B%E7%9A%84aapt.png.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>当时对于 multidex 的包也进行了目录查找，如下，留下后续研究做参考。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/multidex.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>相关参考文献：<br><a href=\"https://mssun.me/blog/android-art-runtime-2-dex2oat.html\" target=\"_blank\" rel=\"external\">https://mssun.me/blog/android-art-runtime-2-dex2oat.html</a><br><a href=\"http://blog.csdn.net/luoshengyang/article/details/39307813\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/luoshengyang/article/details/39307813</a></p>\n","excerpt":"","more":"<blockquote>\n<p>注：本文不对apk安装之前，系统所做的复杂工作做分析，只针对普通的apk安装过程进行简单的过程理解</p>\n</blockquote>\n<p>一般情况下，在apk安装时，系统一般会显示一个安装界面，获取用户同意之后进行安装，并且有一些apk预处理相关的操作，紧接着，会启动app界面，进入app。<br>在这一过程中，不同版本的Android系统在安装时，对包的处理是不太一样的，以下分Dalivk、ART两种虚拟机进行分析。这里主要采用原生模拟器，进行分析。</p>\n<h3 id=\"一、-Dalvik（JIT：just-in-time-即时编译）\"><a href=\"#一、-Dalvik（JIT：just-in-time-即时编译）\" class=\"headerlink\" title=\"一、 Dalvik（JIT：just in time  即时编译）\"></a>一、 Dalvik（JIT：just in time  即时编译）</h3><ul>\n<li>过程分析：<ul>\n<li>点击apk包后或apk下载后，安装之前，系统会启动安装界面PackageInstallerActivity，让用户进行授权选择，用户同意后，会调用ApplicationPackageManager 进行相关操作。</li>\n<li>调用ApplicationPackageManager，通过IPC来调用 PackageManagerService 中的 installPackage 方法，在这个方法中，又去调用 installPackageAsUser 方法，此时，要进行权限相关校验，完毕之后，会通过 handler 发送消息（类型：INIT_COPY，MCS_BOUND）</li>\n<li>然后 startCopy —&gt; handleStartCopy 依次调用，这里，对安装位置、存储空间进行处理，之后会 拷贝apk 相关文件放在相应的目录下。这些文件主要包括：<ul>\n<li>apk文件</li>\n<li>jar、so文件</li>\n<li>db文件（若有的话）</li>\n</ul>\n</li>\n<li>拷贝完成之后，进行预处理，对于Dalvik来说，dexopt要进行dex文件的优化，生成odex文件，在app运行时，能加快其启动速度。</li>\n<li>另外，对于资源处理，是 AssetMananger 来进行资源的解析、加载。</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li>实例考察：<ul>\n<li>安装时logcat日志：拷贝工作，然后进行dex优化，dexopt执行操作</li>\n</ul>\n</li>\n</ul>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/apk%E5%AE%89%E8%A3%85%E8%BF%87%E7%A8%8B.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>   拷贝后，目录如下：</p>\n<p><img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/copy%20lib%E7%BB%93%E6%9E%9C.png\" alt=\"\"></p>\n<p> dex位置：</p>\n<p><img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/dex%E4%BD%8D%E7%BD%AE.png\" alt=\"\"></p>\n<p>如果把此位置的 dex 删除后，且杀掉已经运行的进程后，再次点击app启动后奔溃，如图：</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/%E5%88%A0%E6%8E%89dalvik-cache%E7%9B%AE%E5%BD%95%E4%B8%8B%E7%9A%84dex%E5%90%8E%EF%BC%8C%E4%B8%94%E6%9D%80%E6%8E%89%E5%B7%B2%E7%BB%8F%E8%BF%90%E8%A1%8C%E7%9A%84%E5%BA%94%E7%94%A8%E8%BF%9B%E7%A8%8B%EF%BC%8C%E5%86%8D%E6%AC%A1%E5%90%AF%E5%8A%A8.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>由此可知，要启动app时，需要加载 /data/dalik-cache 目录下的dex文件</p>\n<p>相关参考文献：<br><a href=\"http://www.woaitqs.cc/android/2016/07/28/android-plugin-get-apk-info\">http://www.woaitqs.cc/android/2016/07/28/android-plugin-get-apk-info</a><br><a href=\"http://blog.csdn.net/luoshengyang/article/details/8852432\">http://blog.csdn.net/luoshengyang/article/details/8852432</a></p>\n<h3 id=\"二、ART（AOT：Ahead-of-time-预编译）\"><a href=\"#二、ART（AOT：Ahead-of-time-预编译）\" class=\"headerlink\" title=\"二、ART（AOT：Ahead of time  预编译）\"></a>二、ART（AOT：Ahead of time  预编译）</h3><p>Android 4.4之后，对于Android虚拟机又继续做了优化，art 代替了 Dalvik，对于dex文件，优化工作做了改变。</p>\n<ul>\n<li><p>大致的处理过程：</p>\n</li>\n<li><p>编译时，通过调用 dex2oat 对dex 进行预编译，这个编译器参考了LLVM框架，默认情况下，是采用了quick模式，但在6.0之后，LLVM被彻底去除了。关于LLVM细节，自行Google。</p>\n</li>\n<li>编译后生成的文件 .oat 文件，实际上是Android 私有的ELF文件。在Linux系统中，ELF文件主要分为3类：目标文件（ .o）、共享文件（ .so）、可执行文件。此处Android的 .oat文件属于可执行文件。<br>  oat 文件含有ELF文件正常的结构形态，里面既包含有dex 文件，也包含编译好的本地指令代码。被包含的dex文件也可以是多个。</li>\n</ul>\n<ul>\n<li>实例考察<ul>\n<li>ART 安装apk时，日志记录：</li>\n</ul>\n</li>\n</ul>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/art%E5%AE%89%E8%A3%85apk%E7%9A%84log.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<pre><code>可以看到，有apk的拷贝，有dex2oat的dex优化过程。再追一下相关的目录：\n</code></pre><p> <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/local%E7%9B%AE%E5%BD%95%E4%B8%8B.png\" alt=\"\"></p>\n<p>  <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/dalvik-cache%E7%9B%AE%E5%BD%95%E4%B8%8B.png\" alt=\"\"></p>\n<p>里面有一部分是系统框架层的相关文件。</p>\n<p>安装后的目录结构也有变化：</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/data_app%E7%9B%AE%E5%BD%95%E4%B8%8B.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>生成相应的平台下的文件，此处我使用的是x86的模拟器</p>\n<p>Android 在编译时用到的 dexopt、dex2oat、aapt 都在 /system/bin目录下：</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/4.4%E4%B8%8Bsystem_bin%E4%B8%8B%E7%9A%84aapt.png.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>当时对于 multidex 的包也进行了目录查找，如下，留下后续研究做参考。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/multidex.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>相关参考文献：<br><a href=\"https://mssun.me/blog/android-art-runtime-2-dex2oat.html\">https://mssun.me/blog/android-art-runtime-2-dex2oat.html</a><br><a href=\"http://blog.csdn.net/luoshengyang/article/details/39307813\">http://blog.csdn.net/luoshengyang/article/details/39307813</a></p>\n"},{"title":"Android Studio NDK开发环境搭建及Demo示例","date":"2016-01-16T11:34:00.000Z","comments":1,"_content":">  说明：Android Studio 1.4后支持C/C++开发，1.3之前的版本坑点较多，所以使用1.4后的版本较为容易\n\n### 所用工具版本\n* Android Studio 1.5\n* android-ndk-r10e-windows-x86_64.exe\n\n### 配置NDK环境\n* 自行下载 **ndk** 工具，在你的要安装 ndk 的目录下，直接双击 此安装包，就会自动安装至此目录下，过程中会打开cmd窗口，命令行不断执行命令，需等待一会即可\n\n* cmd窗口自动关闭后，会出现 **ndk** 的文件夹，如图： \n\n![](http://7xr1vo.com1.z0.glb.clouddn.com/1.jpg)![](http://7xr1vo.com1.z0.glb.clouddn.com/2.png)\n\n* 配置**ndk**环境变量，path 中添加即可，如我的路径如下：\n\n\t> **PATH： D:\\android-ndk-r10e**\n* 保存后，打开cmd,输入命令:\n\t> **ndk-build** \n\n\t出现如下显示，则安装成功：\n\n![](http://7xr1vo.com1.z0.glb.clouddn.com/3.png)\n\n### 第一个NDKDemo\n* studio中，新建一个project，\tname： NDKDemo\n* 在本项目中，配置 **ndk** 路径，如图：\n\n![](http://7xr1vo.com1.z0.glb.clouddn.com/4.png)\n![](http://7xr1vo.com1.z0.glb.clouddn.com/5.png)\n\n点击**OK**， 此时，等待gradle构建，构建完成后，观察 **local.properties** 文件，多出来了 **ndk** 的路径，如图所示：\n![](http://7xr1vo.com1.z0.glb.clouddn.com/6.png)\n* 打开 **grade.properties** 文件，在末尾添加：\n\n\t> **android.useDeprecatedNdk=\"true\"**\n\n\n![](http://7xr1vo.com1.z0.glb.clouddn.com/7.png)\n\t\t\n\t\t* 此步骤，为了防止下一步修改 app/build.gradle 文件后报错\n* 打开 **app/build.gradle** 文件，在 **defaultConfig** 下加入**ndk**相关配置参数：\n\n``` gradle\nndk {\n\tmoduleName \"HelloNDK\"\n}\n```\n\n![](http://7xr1vo.com1.z0.glb.clouddn.com/8.png)\n\n\t* 此处的 modleName 是 加载库文件的标识，必须和后面代码中的 System.loadLibrary(\"HelloNDK\") 保持一致，否则会报错\n\t\n* 书写 **native** 方法 和 加载类库，代码如下：\n\n``` java\nstatic {\n\t// 加载类库\n\tSystem.loadLibrary(\"HelloNDK\");\n}\n\n// native方法 调用 C代码\npublic native String javaCallC();\n```\n如图，我这是后续的图片，过程中的未截：\n\t\n![](http://7xr1vo.com1.z0.glb.clouddn.com/10.png)\n* 打开左下角的 **Terminal**，**cd** 至 **java** 路径下，并执行命令：\n\n\t\tjavah -d jni [native方法所在类的全路径]\n\n\t如图：\n\n![](http://7xr1vo.com1.z0.glb.clouddn.com/11.png)\n\n在studio中：类的全路径可 通过 右击该类 -> Copy Reference获得，执行成功后，刷新下目录，可看到目录中多了一个 **咖啡色的jni目录**，和一个 **.h文件**，如图：\n\n![](http://7xr1vo.com1.z0.glb.clouddn.com/12.png)\n* 右击 **Main目录的图标 -> New -> Floder -> JNI Floder**，之后会出现一个 **蓝色的JNI** 文件夹，如图：\n\n![](http://7xr1vo.com1.z0.glb.clouddn.com/13.png)\n\t\n此时，继续解决上面 **native** 方法名报错（红色）的问题，**Alt + Enter** 选择创建 **.c** 中的方法，这时，会在蓝色的JNI文件夹下自动生成一个 **.c** 文件，并且 含有 **c代码**，里面有复杂的方法头\n\n![](http://7xr1vo.com1.z0.glb.clouddn.com/9.png)\n\n![](http://7xr1vo.com1.z0.glb.clouddn.com/14.png)\n\n\t\t* 可能 native 方法名仍然是红色的，这可能是 Studio 的一个bug，但其实是可以运行的。可能过一段时间红色会消失变为正常，我的就是这种情况\n* 下面就可以书写真正的 **C代码**了，此处 只简单写下，关于更牛逼的用法，将更新在后面blog中，继续总结。\n\n\t此处代码改为：\n\t\t\n``` c\nreturn (*env)->NewStringUTF(env, \"你好，NDK\");\n```\n\n*  OK，第一个NDK Demo可以运行了，上图：\n\n![](http://7xr1vo.com1.z0.glb.clouddn.com/16.png)\n\n### 总结\n* 相比以前在 **eclipse** 中进行 **NDK** 开发，**studio**中显得方便多了，并不用安装 **CDT** 和 **cygwin**，而且 **.c** 文件及其内容可以自动生成\n* 利用命令 **javah -d jni [native方法所在类的全路径]**  生成的  **.h头文件** 可以在 有了 **.c** 文件后删除，此 **.h** 文件主要是用来用于生成 **.c** 文件中相应比较长的方法头。如果之前没有 **.h** 文件，**Alt + Enter** 是无法自动生成 **.c**文件的\n* 必须在 有 **/src/main/jni** 的文件夹（蓝色的jni文件夹）下，才能自动生成**.c** 文件\n* **.c** 文件中要出现了中文，必须是 **UTF-8** 下，否则，运行时会崩溃报错\n* 注意观察 **/app/build/intermediates/ndk** 目录下，有相关的 所有平台的 .so 文件（默认情况下，生成所有平台的；若只想生成某几种平台的，可在 **app/build.gradle（abi-Filters \"armeabi\",\"armeabi-v7a\",\"x86\"）** 中  或者 **Android.mk**中 进行配置）\n\n![](http://7xr1vo.com1.z0.glb.clouddn.com/17.png)\n### 补充\n* so文件和native类与混淆无关，无需keep语句\n* 实现类一定要方法名正确否则会报java.lang.UnsatisfiedLinkError: dlopen failed异常\n* studio工具的提示并不是很智能，所以有时要rebuild project","source":"_posts/Android Studio NDK开发环境搭建及Demo示例.md","raw":"---\ntitle: Android Studio NDK开发环境搭建及Demo示例\ndate: 2016-01-16 19:34\ncomments: true\ncategories: Android\ntags: [JNI, NDK]\n---\n>  说明：Android Studio 1.4后支持C/C++开发，1.3之前的版本坑点较多，所以使用1.4后的版本较为容易\n\n### 所用工具版本\n* Android Studio 1.5\n* android-ndk-r10e-windows-x86_64.exe\n\n### 配置NDK环境\n* 自行下载 **ndk** 工具，在你的要安装 ndk 的目录下，直接双击 此安装包，就会自动安装至此目录下，过程中会打开cmd窗口，命令行不断执行命令，需等待一会即可\n\n* cmd窗口自动关闭后，会出现 **ndk** 的文件夹，如图： \n\n![](http://7xr1vo.com1.z0.glb.clouddn.com/1.jpg)![](http://7xr1vo.com1.z0.glb.clouddn.com/2.png)\n\n* 配置**ndk**环境变量，path 中添加即可，如我的路径如下：\n\n\t> **PATH： D:\\android-ndk-r10e**\n* 保存后，打开cmd,输入命令:\n\t> **ndk-build** \n\n\t出现如下显示，则安装成功：\n\n![](http://7xr1vo.com1.z0.glb.clouddn.com/3.png)\n\n### 第一个NDKDemo\n* studio中，新建一个project，\tname： NDKDemo\n* 在本项目中，配置 **ndk** 路径，如图：\n\n![](http://7xr1vo.com1.z0.glb.clouddn.com/4.png)\n![](http://7xr1vo.com1.z0.glb.clouddn.com/5.png)\n\n点击**OK**， 此时，等待gradle构建，构建完成后，观察 **local.properties** 文件，多出来了 **ndk** 的路径，如图所示：\n![](http://7xr1vo.com1.z0.glb.clouddn.com/6.png)\n* 打开 **grade.properties** 文件，在末尾添加：\n\n\t> **android.useDeprecatedNdk=\"true\"**\n\n\n![](http://7xr1vo.com1.z0.glb.clouddn.com/7.png)\n\t\t\n\t\t* 此步骤，为了防止下一步修改 app/build.gradle 文件后报错\n* 打开 **app/build.gradle** 文件，在 **defaultConfig** 下加入**ndk**相关配置参数：\n\n``` gradle\nndk {\n\tmoduleName \"HelloNDK\"\n}\n```\n\n![](http://7xr1vo.com1.z0.glb.clouddn.com/8.png)\n\n\t* 此处的 modleName 是 加载库文件的标识，必须和后面代码中的 System.loadLibrary(\"HelloNDK\") 保持一致，否则会报错\n\t\n* 书写 **native** 方法 和 加载类库，代码如下：\n\n``` java\nstatic {\n\t// 加载类库\n\tSystem.loadLibrary(\"HelloNDK\");\n}\n\n// native方法 调用 C代码\npublic native String javaCallC();\n```\n如图，我这是后续的图片，过程中的未截：\n\t\n![](http://7xr1vo.com1.z0.glb.clouddn.com/10.png)\n* 打开左下角的 **Terminal**，**cd** 至 **java** 路径下，并执行命令：\n\n\t\tjavah -d jni [native方法所在类的全路径]\n\n\t如图：\n\n![](http://7xr1vo.com1.z0.glb.clouddn.com/11.png)\n\n在studio中：类的全路径可 通过 右击该类 -> Copy Reference获得，执行成功后，刷新下目录，可看到目录中多了一个 **咖啡色的jni目录**，和一个 **.h文件**，如图：\n\n![](http://7xr1vo.com1.z0.glb.clouddn.com/12.png)\n* 右击 **Main目录的图标 -> New -> Floder -> JNI Floder**，之后会出现一个 **蓝色的JNI** 文件夹，如图：\n\n![](http://7xr1vo.com1.z0.glb.clouddn.com/13.png)\n\t\n此时，继续解决上面 **native** 方法名报错（红色）的问题，**Alt + Enter** 选择创建 **.c** 中的方法，这时，会在蓝色的JNI文件夹下自动生成一个 **.c** 文件，并且 含有 **c代码**，里面有复杂的方法头\n\n![](http://7xr1vo.com1.z0.glb.clouddn.com/9.png)\n\n![](http://7xr1vo.com1.z0.glb.clouddn.com/14.png)\n\n\t\t* 可能 native 方法名仍然是红色的，这可能是 Studio 的一个bug，但其实是可以运行的。可能过一段时间红色会消失变为正常，我的就是这种情况\n* 下面就可以书写真正的 **C代码**了，此处 只简单写下，关于更牛逼的用法，将更新在后面blog中，继续总结。\n\n\t此处代码改为：\n\t\t\n``` c\nreturn (*env)->NewStringUTF(env, \"你好，NDK\");\n```\n\n*  OK，第一个NDK Demo可以运行了，上图：\n\n![](http://7xr1vo.com1.z0.glb.clouddn.com/16.png)\n\n### 总结\n* 相比以前在 **eclipse** 中进行 **NDK** 开发，**studio**中显得方便多了，并不用安装 **CDT** 和 **cygwin**，而且 **.c** 文件及其内容可以自动生成\n* 利用命令 **javah -d jni [native方法所在类的全路径]**  生成的  **.h头文件** 可以在 有了 **.c** 文件后删除，此 **.h** 文件主要是用来用于生成 **.c** 文件中相应比较长的方法头。如果之前没有 **.h** 文件，**Alt + Enter** 是无法自动生成 **.c**文件的\n* 必须在 有 **/src/main/jni** 的文件夹（蓝色的jni文件夹）下，才能自动生成**.c** 文件\n* **.c** 文件中要出现了中文，必须是 **UTF-8** 下，否则，运行时会崩溃报错\n* 注意观察 **/app/build/intermediates/ndk** 目录下，有相关的 所有平台的 .so 文件（默认情况下，生成所有平台的；若只想生成某几种平台的，可在 **app/build.gradle（abi-Filters \"armeabi\",\"armeabi-v7a\",\"x86\"）** 中  或者 **Android.mk**中 进行配置）\n\n![](http://7xr1vo.com1.z0.glb.clouddn.com/17.png)\n### 补充\n* so文件和native类与混淆无关，无需keep语句\n* 实现类一定要方法名正确否则会报java.lang.UnsatisfiedLinkError: dlopen failed异常\n* studio工具的提示并不是很智能，所以有时要rebuild project","slug":"Android Studio NDK开发环境搭建及Demo示例","published":1,"updated":"2017-02-08T11:49:06.000Z","_id":"ciwvuocs40006f0v7be57jg6p","layout":"post","photos":[],"link":"","content":"<blockquote>\n<p> 说明：Android Studio 1.4后支持C/C++开发，1.3之前的版本坑点较多，所以使用1.4后的版本较为容易</p>\n</blockquote>\n<h3 id=\"所用工具版本\"><a href=\"#所用工具版本\" class=\"headerlink\" title=\"所用工具版本\"></a>所用工具版本</h3><ul>\n<li>Android Studio 1.5</li>\n<li>android-ndk-r10e-windows-x86_64.exe</li>\n</ul>\n<h3 id=\"配置NDK环境\"><a href=\"#配置NDK环境\" class=\"headerlink\" title=\"配置NDK环境\"></a>配置NDK环境</h3><ul>\n<li><p>自行下载 <strong>ndk</strong> 工具，在你的要安装 ndk 的目录下，直接双击 此安装包，就会自动安装至此目录下，过程中会打开cmd窗口，命令行不断执行命令，需等待一会即可</p>\n</li>\n<li><p>cmd窗口自动关闭后，会出现 <strong>ndk</strong> 的文件夹，如图： </p>\n</li>\n</ul>\n<p><img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/1.jpg\" alt=\"\"><img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/2.png\" alt=\"\"></p>\n<ul>\n<li><p>配置<strong>ndk</strong>环境变量，path 中添加即可，如我的路径如下：</p>\n<blockquote>\n<p><strong>PATH： D:\\android-ndk-r10e</strong></p>\n</blockquote>\n</li>\n<li><p>保存后，打开cmd,输入命令:</p>\n<blockquote>\n<p><strong>ndk-build</strong> </p>\n</blockquote>\n<p>  出现如下显示，则安装成功：</p>\n</li>\n</ul>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/3.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<h3 id=\"第一个NDKDemo\"><a href=\"#第一个NDKDemo\" class=\"headerlink\" title=\"第一个NDKDemo\"></a>第一个NDKDemo</h3><ul>\n<li>studio中，新建一个project，    name： NDKDemo</li>\n<li>在本项目中，配置 <strong>ndk</strong> 路径，如图：</li>\n</ul>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/4.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/5.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>点击<strong>OK</strong>， 此时，等待gradle构建，构建完成后，观察 <strong>local.properties</strong> 文件，多出来了 <strong>ndk</strong> 的路径，如图所示：<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/6.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure></p>\n<ul>\n<li><p>打开 <strong>grade.properties</strong> 文件，在末尾添加：</p>\n<blockquote>\n<p><strong>android.useDeprecatedNdk=”true”</strong></p>\n</blockquote>\n</li>\n</ul>\n<p><img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/7.png\" alt=\"\"></p>\n<pre><code>* 此步骤，为了防止下一步修改 app/build.gradle 文件后报错\n</code></pre><ul>\n<li>打开 <strong>app/build.gradle</strong> 文件，在 <strong>defaultConfig</strong> 下加入<strong>ndk</strong>相关配置参数：</li>\n</ul>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">ndk &#123;</div><div class=\"line\">\tmoduleName <span class=\"string\">\"HelloNDK\"</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/8.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<pre><code>* 此处的 modleName 是 加载库文件的标识，必须和后面代码中的 System.loadLibrary(&quot;HelloNDK&quot;) 保持一致，否则会报错\n</code></pre><ul>\n<li>书写 <strong>native</strong> 方法 和 加载类库，代码如下：</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">static</span> &#123;</div><div class=\"line\">\t<span class=\"comment\">// 加载类库</span></div><div class=\"line\">\tSystem.loadLibrary(<span class=\"string\">\"HelloNDK\"</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// native方法 调用 C代码</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">native</span> String <span class=\"title\">javaCallC</span><span class=\"params\">()</span></span>;</div></pre></td></tr></table></figure>\n<p>如图，我这是后续的图片，过程中的未截：</p>\n<p><img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/10.png\" alt=\"\"></p>\n<ul>\n<li><p>打开左下角的 <strong>Terminal</strong>，<strong>cd</strong> 至 <strong>java</strong> 路径下，并执行命令：</p>\n<pre><code>javah -d jni [native方法所在类的全路径]\n</code></pre><p>  如图：</p>\n</li>\n</ul>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/11.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>在studio中：类的全路径可 通过 右击该类 -&gt; Copy Reference获得，执行成功后，刷新下目录，可看到目录中多了一个 <strong>咖啡色的jni目录</strong>，和一个 <strong>.h文件</strong>，如图：</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/12.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<ul>\n<li>右击 <strong>Main目录的图标 -&gt; New -&gt; Floder -&gt; JNI Floder</strong>，之后会出现一个 <strong>蓝色的JNI</strong> 文件夹，如图：</li>\n</ul>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/13.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>此时，继续解决上面 <strong>native</strong> 方法名报错（红色）的问题，<strong>Alt + Enter</strong> 选择创建 <strong>.c</strong> 中的方法，这时，会在蓝色的JNI文件夹下自动生成一个 <strong>.c</strong> 文件，并且 含有 <strong>c代码</strong>，里面有复杂的方法头</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/9.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/14.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<pre><code>* 可能 native 方法名仍然是红色的，这可能是 Studio 的一个bug，但其实是可以运行的。可能过一段时间红色会消失变为正常，我的就是这种情况\n</code></pre><ul>\n<li><p>下面就可以书写真正的 <strong>C代码</strong>了，此处 只简单写下，关于更牛逼的用法，将更新在后面blog中，继续总结。</p>\n<p>  此处代码改为：</p>\n</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">return</span> (*env)-&gt;NewStringUTF(env, <span class=\"string\">\"你好，NDK\"</span>);</div></pre></td></tr></table></figure>\n<ul>\n<li>OK，第一个NDK Demo可以运行了，上图：</li>\n</ul>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/16.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><ul>\n<li>相比以前在 <strong>eclipse</strong> 中进行 <strong>NDK</strong> 开发，<strong>studio</strong>中显得方便多了，并不用安装 <strong>CDT</strong> 和 <strong>cygwin</strong>，而且 <strong>.c</strong> 文件及其内容可以自动生成</li>\n<li>利用命令 <strong>javah -d jni [native方法所在类的全路径]</strong>  生成的  <strong>.h头文件</strong> 可以在 有了 <strong>.c</strong> 文件后删除，此 <strong>.h</strong> 文件主要是用来用于生成 <strong>.c</strong> 文件中相应比较长的方法头。如果之前没有 <strong>.h</strong> 文件，<strong>Alt + Enter</strong> 是无法自动生成 <strong>.c</strong>文件的</li>\n<li>必须在 有 <strong>/src/main/jni</strong> 的文件夹（蓝色的jni文件夹）下，才能自动生成<strong>.c</strong> 文件</li>\n<li><strong>.c</strong> 文件中要出现了中文，必须是 <strong>UTF-8</strong> 下，否则，运行时会崩溃报错</li>\n<li>注意观察 <strong>/app/build/intermediates/ndk</strong> 目录下，有相关的 所有平台的 .so 文件（默认情况下，生成所有平台的；若只想生成某几种平台的，可在 <strong>app/build.gradle（abi-Filters “armeabi”,”armeabi-v7a”,”x86”）</strong> 中  或者 <strong>Android.mk</strong>中 进行配置）</li>\n</ul>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/17.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<h3 id=\"补充\"><a href=\"#补充\" class=\"headerlink\" title=\"补充\"></a>补充</h3><ul>\n<li>so文件和native类与混淆无关，无需keep语句</li>\n<li>实现类一定要方法名正确否则会报java.lang.UnsatisfiedLinkError: dlopen failed异常</li>\n<li>studio工具的提示并不是很智能，所以有时要rebuild project</li>\n</ul>\n","excerpt":"","more":"<blockquote>\n<p> 说明：Android Studio 1.4后支持C/C++开发，1.3之前的版本坑点较多，所以使用1.4后的版本较为容易</p>\n</blockquote>\n<h3 id=\"所用工具版本\"><a href=\"#所用工具版本\" class=\"headerlink\" title=\"所用工具版本\"></a>所用工具版本</h3><ul>\n<li>Android Studio 1.5</li>\n<li>android-ndk-r10e-windows-x86_64.exe</li>\n</ul>\n<h3 id=\"配置NDK环境\"><a href=\"#配置NDK环境\" class=\"headerlink\" title=\"配置NDK环境\"></a>配置NDK环境</h3><ul>\n<li><p>自行下载 <strong>ndk</strong> 工具，在你的要安装 ndk 的目录下，直接双击 此安装包，就会自动安装至此目录下，过程中会打开cmd窗口，命令行不断执行命令，需等待一会即可</p>\n</li>\n<li><p>cmd窗口自动关闭后，会出现 <strong>ndk</strong> 的文件夹，如图： </p>\n</li>\n</ul>\n<p><img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/1.jpg\" alt=\"\"><img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/2.png\" alt=\"\"></p>\n<ul>\n<li><p>配置<strong>ndk</strong>环境变量，path 中添加即可，如我的路径如下：</p>\n<blockquote>\n<p><strong>PATH： D:\\android-ndk-r10e</strong></p>\n</blockquote>\n</li>\n<li><p>保存后，打开cmd,输入命令:</p>\n<blockquote>\n<p><strong>ndk-build</strong> </p>\n</blockquote>\n<p>  出现如下显示，则安装成功：</p>\n</li>\n</ul>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/3.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<h3 id=\"第一个NDKDemo\"><a href=\"#第一个NDKDemo\" class=\"headerlink\" title=\"第一个NDKDemo\"></a>第一个NDKDemo</h3><ul>\n<li>studio中，新建一个project，    name： NDKDemo</li>\n<li>在本项目中，配置 <strong>ndk</strong> 路径，如图：</li>\n</ul>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/4.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/5.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>点击<strong>OK</strong>， 此时，等待gradle构建，构建完成后，观察 <strong>local.properties</strong> 文件，多出来了 <strong>ndk</strong> 的路径，如图所示：<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/6.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure></p>\n<ul>\n<li><p>打开 <strong>grade.properties</strong> 文件，在末尾添加：</p>\n<blockquote>\n<p><strong>android.useDeprecatedNdk=”true”</strong></p>\n</blockquote>\n</li>\n</ul>\n<p><img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/7.png\" alt=\"\"></p>\n<pre><code>* 此步骤，为了防止下一步修改 app/build.gradle 文件后报错\n</code></pre><ul>\n<li>打开 <strong>app/build.gradle</strong> 文件，在 <strong>defaultConfig</strong> 下加入<strong>ndk</strong>相关配置参数：</li>\n</ul>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">ndk &#123;</div><div class=\"line\">\tmoduleName <span class=\"string\">\"HelloNDK\"</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/8.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<pre><code>* 此处的 modleName 是 加载库文件的标识，必须和后面代码中的 System.loadLibrary(&quot;HelloNDK&quot;) 保持一致，否则会报错\n</code></pre><ul>\n<li>书写 <strong>native</strong> 方法 和 加载类库，代码如下：</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">static</span> &#123;</div><div class=\"line\">\t<span class=\"comment\">// 加载类库</span></div><div class=\"line\">\tSystem.loadLibrary(<span class=\"string\">\"HelloNDK\"</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// native方法 调用 C代码</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">native</span> String <span class=\"title\">javaCallC</span><span class=\"params\">()</span></span>;</div></pre></td></tr></table></figure>\n<p>如图，我这是后续的图片，过程中的未截：</p>\n<p><img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/10.png\" alt=\"\"></p>\n<ul>\n<li><p>打开左下角的 <strong>Terminal</strong>，<strong>cd</strong> 至 <strong>java</strong> 路径下，并执行命令：</p>\n<pre><code>javah -d jni [native方法所在类的全路径]\n</code></pre><p>  如图：</p>\n</li>\n</ul>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/11.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>在studio中：类的全路径可 通过 右击该类 -&gt; Copy Reference获得，执行成功后，刷新下目录，可看到目录中多了一个 <strong>咖啡色的jni目录</strong>，和一个 <strong>.h文件</strong>，如图：</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/12.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<ul>\n<li>右击 <strong>Main目录的图标 -&gt; New -&gt; Floder -&gt; JNI Floder</strong>，之后会出现一个 <strong>蓝色的JNI</strong> 文件夹，如图：</li>\n</ul>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/13.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>此时，继续解决上面 <strong>native</strong> 方法名报错（红色）的问题，<strong>Alt + Enter</strong> 选择创建 <strong>.c</strong> 中的方法，这时，会在蓝色的JNI文件夹下自动生成一个 <strong>.c</strong> 文件，并且 含有 <strong>c代码</strong>，里面有复杂的方法头</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/9.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/14.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<pre><code>* 可能 native 方法名仍然是红色的，这可能是 Studio 的一个bug，但其实是可以运行的。可能过一段时间红色会消失变为正常，我的就是这种情况\n</code></pre><ul>\n<li><p>下面就可以书写真正的 <strong>C代码</strong>了，此处 只简单写下，关于更牛逼的用法，将更新在后面blog中，继续总结。</p>\n<p>  此处代码改为：</p>\n</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">return</span> (*env)-&gt;NewStringUTF(env, <span class=\"string\">\"你好，NDK\"</span>);</div></pre></td></tr></table></figure>\n<ul>\n<li>OK，第一个NDK Demo可以运行了，上图：</li>\n</ul>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/16.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><ul>\n<li>相比以前在 <strong>eclipse</strong> 中进行 <strong>NDK</strong> 开发，<strong>studio</strong>中显得方便多了，并不用安装 <strong>CDT</strong> 和 <strong>cygwin</strong>，而且 <strong>.c</strong> 文件及其内容可以自动生成</li>\n<li>利用命令 <strong>javah -d jni [native方法所在类的全路径]</strong>  生成的  <strong>.h头文件</strong> 可以在 有了 <strong>.c</strong> 文件后删除，此 <strong>.h</strong> 文件主要是用来用于生成 <strong>.c</strong> 文件中相应比较长的方法头。如果之前没有 <strong>.h</strong> 文件，<strong>Alt + Enter</strong> 是无法自动生成 <strong>.c</strong>文件的</li>\n<li>必须在 有 <strong>/src/main/jni</strong> 的文件夹（蓝色的jni文件夹）下，才能自动生成<strong>.c</strong> 文件</li>\n<li><strong>.c</strong> 文件中要出现了中文，必须是 <strong>UTF-8</strong> 下，否则，运行时会崩溃报错</li>\n<li>注意观察 <strong>/app/build/intermediates/ndk</strong> 目录下，有相关的 所有平台的 .so 文件（默认情况下，生成所有平台的；若只想生成某几种平台的，可在 <strong>app/build.gradle（abi-Filters “armeabi”,”armeabi-v7a”,”x86”）</strong> 中  或者 <strong>Android.mk</strong>中 进行配置）</li>\n</ul>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/17.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<h3 id=\"补充\"><a href=\"#补充\" class=\"headerlink\" title=\"补充\"></a>补充</h3><ul>\n<li>so文件和native类与混淆无关，无需keep语句</li>\n<li>实现类一定要方法名正确否则会报java.lang.UnsatisfiedLinkError: dlopen failed异常</li>\n<li>studio工具的提示并不是很智能，所以有时要rebuild project</li>\n</ul>\n"},{"title":"Git学习笔记（一）","date":"2016-02-19T07:28:00.000Z","_content":"### 一、Git特点\n#### 1. 直接记录快照，而非差异比较\n* 在 Git 中保存项目状态时，它主要对当时的全部文件制作一个快照并保存这个快照的索引。\n* 为了高效，如果文件没有修改，Git 不再重新存储该文件，而是只保留一个链接指向之前存储的文件。\n* Git 对待数据更像是一个 快照流。\n#### 2. 近乎所有操作都是本地执行\n* 在 Git 中的绝大多数操作都只需要访问本地文件和资源，一般不需要来自网络上其它计算机的信息。\n#### 3. Git 保证完整性\n* Git 中所有数据在存储前都计算校验和，然后以校验和来引用。Git 用以计算校验和的机制叫做 SHA-1 散列（hash，哈希）。 \n这是一个由 40 个十六进制字符（0-9 和 a-f）组成字符串，基于 Git 中文件的内容或目录结构计算出来。 \nSHA-1 哈希看起来是这样：  \n\n       >24b9da6552252987aa493b52f8696cd6d3b00373\n\n* 实际上，Git 数据库中保存的信息都是以文件内容的哈希值来索引，而不是文件名\n#### 4. Git 一般只添加数据\n* 你执行的 Git 操作，几乎只往 Git 数据库中增加数据\n\n### 二、Git 中的文件有3种状态：\n#### 1. 已提交：数据已经安全的保存在本地数据库中\n#### 2. 已修改：修改了文件，但未保存到数据库中\n#### 3. 已暂存：对一个已修改文件的当前版本做了标记，使之包含在下次提交的快照中\n![](http://7xr1vo.com1.z0.glb.clouddn.com/%E6%96%87%E4%BB%B6%E7%9A%84%E7%8A%B6%E6%80%81%E5%8F%98%E5%8C%96%E5%91%A8%E6%9C%9F.png) \n\n### 三、Git 中的3个工作区域\n#### 1. Git仓库：保存项目的元数据和对象数据库，Git中最重要的部分，供其他人clone 仓库\n#### 2. 工作目录：对项目的某个版本独立提取出来的，供工作中使用、修改\n* 工作目录下的文件状态：\n\n    已跟踪：纳入了版本控制的文件，后期可能处于 未修改，已修改或放入暂存区了\n\n    未跟踪：工作目录下除已跟踪文件外的其他所有文件\n#### 3. 暂存区：是一个文件，保存下次将提交的文件列表信息，一般在Git仓库目录中，有时也被叫做索引\n![](http://7xr1vo.com1.z0.glb.clouddn.com/git3%E7%A7%8D%E5%B7%A5%E4%BD%9C%E5%8C%BA%E5%9F%9F.png) \n\n\n### 四、Git 的基本工作流程\n#### 1. 在工作目录中修改文件\n#### 2. 暂存文件，将文件的快照放入暂存区\n#### 3. 提交更新，找到暂存区的文件，将快照永久性存储到Git仓库中\n\n### 五、Git 个人信息初始配置\n* 全局信息配置：(个人默认信息)\n    >git config --global user.name \"xxx\"\n\t\n\t>git config --global user.email   xxx@qq.coom\n\n    此配置会写入 user目录下的 .gitconfig文件，实际上为个人信息默认值\n* 临时配置：\n\n    去掉 --global 即可\n    实际是在其配置列表中追加其信息，重复变量名，不同的value值\n    (Git每次会读取不同文件，其中就可能含有同一个配置)\n    Git 会使用每个变量的最后一次的配置的值","source":"_posts/Git学习笔记（一）.md","raw":"---\ntitle: Git学习笔记（一）\ndate: 2016-02-19 15:28\ncategories: 工具\ntags: Git\n---\n### 一、Git特点\n#### 1. 直接记录快照，而非差异比较\n* 在 Git 中保存项目状态时，它主要对当时的全部文件制作一个快照并保存这个快照的索引。\n* 为了高效，如果文件没有修改，Git 不再重新存储该文件，而是只保留一个链接指向之前存储的文件。\n* Git 对待数据更像是一个 快照流。\n#### 2. 近乎所有操作都是本地执行\n* 在 Git 中的绝大多数操作都只需要访问本地文件和资源，一般不需要来自网络上其它计算机的信息。\n#### 3. Git 保证完整性\n* Git 中所有数据在存储前都计算校验和，然后以校验和来引用。Git 用以计算校验和的机制叫做 SHA-1 散列（hash，哈希）。 \n这是一个由 40 个十六进制字符（0-9 和 a-f）组成字符串，基于 Git 中文件的内容或目录结构计算出来。 \nSHA-1 哈希看起来是这样：  \n\n       >24b9da6552252987aa493b52f8696cd6d3b00373\n\n* 实际上，Git 数据库中保存的信息都是以文件内容的哈希值来索引，而不是文件名\n#### 4. Git 一般只添加数据\n* 你执行的 Git 操作，几乎只往 Git 数据库中增加数据\n\n### 二、Git 中的文件有3种状态：\n#### 1. 已提交：数据已经安全的保存在本地数据库中\n#### 2. 已修改：修改了文件，但未保存到数据库中\n#### 3. 已暂存：对一个已修改文件的当前版本做了标记，使之包含在下次提交的快照中\n![](http://7xr1vo.com1.z0.glb.clouddn.com/%E6%96%87%E4%BB%B6%E7%9A%84%E7%8A%B6%E6%80%81%E5%8F%98%E5%8C%96%E5%91%A8%E6%9C%9F.png) \n\n### 三、Git 中的3个工作区域\n#### 1. Git仓库：保存项目的元数据和对象数据库，Git中最重要的部分，供其他人clone 仓库\n#### 2. 工作目录：对项目的某个版本独立提取出来的，供工作中使用、修改\n* 工作目录下的文件状态：\n\n    已跟踪：纳入了版本控制的文件，后期可能处于 未修改，已修改或放入暂存区了\n\n    未跟踪：工作目录下除已跟踪文件外的其他所有文件\n#### 3. 暂存区：是一个文件，保存下次将提交的文件列表信息，一般在Git仓库目录中，有时也被叫做索引\n![](http://7xr1vo.com1.z0.glb.clouddn.com/git3%E7%A7%8D%E5%B7%A5%E4%BD%9C%E5%8C%BA%E5%9F%9F.png) \n\n\n### 四、Git 的基本工作流程\n#### 1. 在工作目录中修改文件\n#### 2. 暂存文件，将文件的快照放入暂存区\n#### 3. 提交更新，找到暂存区的文件，将快照永久性存储到Git仓库中\n\n### 五、Git 个人信息初始配置\n* 全局信息配置：(个人默认信息)\n    >git config --global user.name \"xxx\"\n\t\n\t>git config --global user.email   xxx@qq.coom\n\n    此配置会写入 user目录下的 .gitconfig文件，实际上为个人信息默认值\n* 临时配置：\n\n    去掉 --global 即可\n    实际是在其配置列表中追加其信息，重复变量名，不同的value值\n    (Git每次会读取不同文件，其中就可能含有同一个配置)\n    Git 会使用每个变量的最后一次的配置的值","slug":"Git学习笔记（一）","published":1,"updated":"2016-12-17T14:17:45.689Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciwvuocs60007f0v7xmaut2cs","content":"<h3 id=\"一、Git特点\"><a href=\"#一、Git特点\" class=\"headerlink\" title=\"一、Git特点\"></a>一、Git特点</h3><h4 id=\"1-直接记录快照，而非差异比较\"><a href=\"#1-直接记录快照，而非差异比较\" class=\"headerlink\" title=\"1. 直接记录快照，而非差异比较\"></a>1. 直接记录快照，而非差异比较</h4><ul>\n<li>在 Git 中保存项目状态时，它主要对当时的全部文件制作一个快照并保存这个快照的索引。</li>\n<li>为了高效，如果文件没有修改，Git 不再重新存储该文件，而是只保留一个链接指向之前存储的文件。</li>\n<li>Git 对待数据更像是一个 快照流。<h4 id=\"2-近乎所有操作都是本地执行\"><a href=\"#2-近乎所有操作都是本地执行\" class=\"headerlink\" title=\"2. 近乎所有操作都是本地执行\"></a>2. 近乎所有操作都是本地执行</h4></li>\n<li>在 Git 中的绝大多数操作都只需要访问本地文件和资源，一般不需要来自网络上其它计算机的信息。<h4 id=\"3-Git-保证完整性\"><a href=\"#3-Git-保证完整性\" class=\"headerlink\" title=\"3. Git 保证完整性\"></a>3. Git 保证完整性</h4></li>\n<li><p>Git 中所有数据在存储前都计算校验和，然后以校验和来引用。Git 用以计算校验和的机制叫做 SHA-1 散列（hash，哈希）。<br>这是一个由 40 个十六进制字符（0-9 和 a-f）组成字符串，基于 Git 中文件的内容或目录结构计算出来。<br>SHA-1 哈希看起来是这样：  </p>\n<pre><code>&gt;24b9da6552252987aa493b52f8696cd6d3b00373\n</code></pre></li>\n<li><p>实际上，Git 数据库中保存的信息都是以文件内容的哈希值来索引，而不是文件名</p>\n<h4 id=\"4-Git-一般只添加数据\"><a href=\"#4-Git-一般只添加数据\" class=\"headerlink\" title=\"4. Git 一般只添加数据\"></a>4. Git 一般只添加数据</h4></li>\n<li>你执行的 Git 操作，几乎只往 Git 数据库中增加数据</li>\n</ul>\n<h3 id=\"二、Git-中的文件有3种状态：\"><a href=\"#二、Git-中的文件有3种状态：\" class=\"headerlink\" title=\"二、Git 中的文件有3种状态：\"></a>二、Git 中的文件有3种状态：</h3><h4 id=\"1-已提交：数据已经安全的保存在本地数据库中\"><a href=\"#1-已提交：数据已经安全的保存在本地数据库中\" class=\"headerlink\" title=\"1. 已提交：数据已经安全的保存在本地数据库中\"></a>1. 已提交：数据已经安全的保存在本地数据库中</h4><h4 id=\"2-已修改：修改了文件，但未保存到数据库中\"><a href=\"#2-已修改：修改了文件，但未保存到数据库中\" class=\"headerlink\" title=\"2. 已修改：修改了文件，但未保存到数据库中\"></a>2. 已修改：修改了文件，但未保存到数据库中</h4><h4 id=\"3-已暂存：对一个已修改文件的当前版本做了标记，使之包含在下次提交的快照中\"><a href=\"#3-已暂存：对一个已修改文件的当前版本做了标记，使之包含在下次提交的快照中\" class=\"headerlink\" title=\"3. 已暂存：对一个已修改文件的当前版本做了标记，使之包含在下次提交的快照中\"></a>3. 已暂存：对一个已修改文件的当前版本做了标记，使之包含在下次提交的快照中</h4><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/%E6%96%87%E4%BB%B6%E7%9A%84%E7%8A%B6%E6%80%81%E5%8F%98%E5%8C%96%E5%91%A8%E6%9C%9F.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure> \n<h3 id=\"三、Git-中的3个工作区域\"><a href=\"#三、Git-中的3个工作区域\" class=\"headerlink\" title=\"三、Git 中的3个工作区域\"></a>三、Git 中的3个工作区域</h3><h4 id=\"1-Git仓库：保存项目的元数据和对象数据库，Git中最重要的部分，供其他人clone-仓库\"><a href=\"#1-Git仓库：保存项目的元数据和对象数据库，Git中最重要的部分，供其他人clone-仓库\" class=\"headerlink\" title=\"1. Git仓库：保存项目的元数据和对象数据库，Git中最重要的部分，供其他人clone 仓库\"></a>1. Git仓库：保存项目的元数据和对象数据库，Git中最重要的部分，供其他人clone 仓库</h4><h4 id=\"2-工作目录：对项目的某个版本独立提取出来的，供工作中使用、修改\"><a href=\"#2-工作目录：对项目的某个版本独立提取出来的，供工作中使用、修改\" class=\"headerlink\" title=\"2. 工作目录：对项目的某个版本独立提取出来的，供工作中使用、修改\"></a>2. 工作目录：对项目的某个版本独立提取出来的，供工作中使用、修改</h4><ul>\n<li><p>工作目录下的文件状态：</p>\n<p>  已跟踪：纳入了版本控制的文件，后期可能处于 未修改，已修改或放入暂存区了</p>\n<p>  未跟踪：工作目录下除已跟踪文件外的其他所有文件</p>\n<h4 id=\"3-暂存区：是一个文件，保存下次将提交的文件列表信息，一般在Git仓库目录中，有时也被叫做索引\"><a href=\"#3-暂存区：是一个文件，保存下次将提交的文件列表信息，一般在Git仓库目录中，有时也被叫做索引\" class=\"headerlink\" title=\"3. 暂存区：是一个文件，保存下次将提交的文件列表信息，一般在Git仓库目录中，有时也被叫做索引\"></a>3. 暂存区：是一个文件，保存下次将提交的文件列表信息，一般在Git仓库目录中，有时也被叫做索引</h4><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/git3%E7%A7%8D%E5%B7%A5%E4%BD%9C%E5%8C%BA%E5%9F%9F.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure> \n</li>\n</ul>\n<h3 id=\"四、Git-的基本工作流程\"><a href=\"#四、Git-的基本工作流程\" class=\"headerlink\" title=\"四、Git 的基本工作流程\"></a>四、Git 的基本工作流程</h3><h4 id=\"1-在工作目录中修改文件\"><a href=\"#1-在工作目录中修改文件\" class=\"headerlink\" title=\"1. 在工作目录中修改文件\"></a>1. 在工作目录中修改文件</h4><h4 id=\"2-暂存文件，将文件的快照放入暂存区\"><a href=\"#2-暂存文件，将文件的快照放入暂存区\" class=\"headerlink\" title=\"2. 暂存文件，将文件的快照放入暂存区\"></a>2. 暂存文件，将文件的快照放入暂存区</h4><h4 id=\"3-提交更新，找到暂存区的文件，将快照永久性存储到Git仓库中\"><a href=\"#3-提交更新，找到暂存区的文件，将快照永久性存储到Git仓库中\" class=\"headerlink\" title=\"3. 提交更新，找到暂存区的文件，将快照永久性存储到Git仓库中\"></a>3. 提交更新，找到暂存区的文件，将快照永久性存储到Git仓库中</h4><h3 id=\"五、Git-个人信息初始配置\"><a href=\"#五、Git-个人信息初始配置\" class=\"headerlink\" title=\"五、Git 个人信息初始配置\"></a>五、Git 个人信息初始配置</h3><ul>\n<li><p>全局信息配置：(个人默认信息)</p>\n<blockquote>\n<p>git config –global user.name “xxx”</p>\n<p>git config –global user.email   xxx@qq.coom</p>\n</blockquote>\n<p>  此配置会写入 user目录下的 .gitconfig文件，实际上为个人信息默认值</p>\n</li>\n<li><p>临时配置：</p>\n<p>  去掉 –global 即可<br>  实际是在其配置列表中追加其信息，重复变量名，不同的value值<br>  (Git每次会读取不同文件，其中就可能含有同一个配置)<br>  Git 会使用每个变量的最后一次的配置的值</p>\n</li>\n</ul>\n","excerpt":"","more":"<h3 id=\"一、Git特点\"><a href=\"#一、Git特点\" class=\"headerlink\" title=\"一、Git特点\"></a>一、Git特点</h3><h4 id=\"1-直接记录快照，而非差异比较\"><a href=\"#1-直接记录快照，而非差异比较\" class=\"headerlink\" title=\"1. 直接记录快照，而非差异比较\"></a>1. 直接记录快照，而非差异比较</h4><ul>\n<li>在 Git 中保存项目状态时，它主要对当时的全部文件制作一个快照并保存这个快照的索引。</li>\n<li>为了高效，如果文件没有修改，Git 不再重新存储该文件，而是只保留一个链接指向之前存储的文件。</li>\n<li>Git 对待数据更像是一个 快照流。<h4 id=\"2-近乎所有操作都是本地执行\"><a href=\"#2-近乎所有操作都是本地执行\" class=\"headerlink\" title=\"2. 近乎所有操作都是本地执行\"></a>2. 近乎所有操作都是本地执行</h4></li>\n<li>在 Git 中的绝大多数操作都只需要访问本地文件和资源，一般不需要来自网络上其它计算机的信息。<h4 id=\"3-Git-保证完整性\"><a href=\"#3-Git-保证完整性\" class=\"headerlink\" title=\"3. Git 保证完整性\"></a>3. Git 保证完整性</h4></li>\n<li><p>Git 中所有数据在存储前都计算校验和，然后以校验和来引用。Git 用以计算校验和的机制叫做 SHA-1 散列（hash，哈希）。<br>这是一个由 40 个十六进制字符（0-9 和 a-f）组成字符串，基于 Git 中文件的内容或目录结构计算出来。<br>SHA-1 哈希看起来是这样：  </p>\n<pre><code>&gt;24b9da6552252987aa493b52f8696cd6d3b00373\n</code></pre></li>\n<li><p>实际上，Git 数据库中保存的信息都是以文件内容的哈希值来索引，而不是文件名</p>\n<h4 id=\"4-Git-一般只添加数据\"><a href=\"#4-Git-一般只添加数据\" class=\"headerlink\" title=\"4. Git 一般只添加数据\"></a>4. Git 一般只添加数据</h4></li>\n<li>你执行的 Git 操作，几乎只往 Git 数据库中增加数据</li>\n</ul>\n<h3 id=\"二、Git-中的文件有3种状态：\"><a href=\"#二、Git-中的文件有3种状态：\" class=\"headerlink\" title=\"二、Git 中的文件有3种状态：\"></a>二、Git 中的文件有3种状态：</h3><h4 id=\"1-已提交：数据已经安全的保存在本地数据库中\"><a href=\"#1-已提交：数据已经安全的保存在本地数据库中\" class=\"headerlink\" title=\"1. 已提交：数据已经安全的保存在本地数据库中\"></a>1. 已提交：数据已经安全的保存在本地数据库中</h4><h4 id=\"2-已修改：修改了文件，但未保存到数据库中\"><a href=\"#2-已修改：修改了文件，但未保存到数据库中\" class=\"headerlink\" title=\"2. 已修改：修改了文件，但未保存到数据库中\"></a>2. 已修改：修改了文件，但未保存到数据库中</h4><h4 id=\"3-已暂存：对一个已修改文件的当前版本做了标记，使之包含在下次提交的快照中\"><a href=\"#3-已暂存：对一个已修改文件的当前版本做了标记，使之包含在下次提交的快照中\" class=\"headerlink\" title=\"3. 已暂存：对一个已修改文件的当前版本做了标记，使之包含在下次提交的快照中\"></a>3. 已暂存：对一个已修改文件的当前版本做了标记，使之包含在下次提交的快照中</h4><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/%E6%96%87%E4%BB%B6%E7%9A%84%E7%8A%B6%E6%80%81%E5%8F%98%E5%8C%96%E5%91%A8%E6%9C%9F.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure> \n<h3 id=\"三、Git-中的3个工作区域\"><a href=\"#三、Git-中的3个工作区域\" class=\"headerlink\" title=\"三、Git 中的3个工作区域\"></a>三、Git 中的3个工作区域</h3><h4 id=\"1-Git仓库：保存项目的元数据和对象数据库，Git中最重要的部分，供其他人clone-仓库\"><a href=\"#1-Git仓库：保存项目的元数据和对象数据库，Git中最重要的部分，供其他人clone-仓库\" class=\"headerlink\" title=\"1. Git仓库：保存项目的元数据和对象数据库，Git中最重要的部分，供其他人clone 仓库\"></a>1. Git仓库：保存项目的元数据和对象数据库，Git中最重要的部分，供其他人clone 仓库</h4><h4 id=\"2-工作目录：对项目的某个版本独立提取出来的，供工作中使用、修改\"><a href=\"#2-工作目录：对项目的某个版本独立提取出来的，供工作中使用、修改\" class=\"headerlink\" title=\"2. 工作目录：对项目的某个版本独立提取出来的，供工作中使用、修改\"></a>2. 工作目录：对项目的某个版本独立提取出来的，供工作中使用、修改</h4><ul>\n<li><p>工作目录下的文件状态：</p>\n<p>  已跟踪：纳入了版本控制的文件，后期可能处于 未修改，已修改或放入暂存区了</p>\n<p>  未跟踪：工作目录下除已跟踪文件外的其他所有文件</p>\n<h4 id=\"3-暂存区：是一个文件，保存下次将提交的文件列表信息，一般在Git仓库目录中，有时也被叫做索引\"><a href=\"#3-暂存区：是一个文件，保存下次将提交的文件列表信息，一般在Git仓库目录中，有时也被叫做索引\" class=\"headerlink\" title=\"3. 暂存区：是一个文件，保存下次将提交的文件列表信息，一般在Git仓库目录中，有时也被叫做索引\"></a>3. 暂存区：是一个文件，保存下次将提交的文件列表信息，一般在Git仓库目录中，有时也被叫做索引</h4><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/git3%E7%A7%8D%E5%B7%A5%E4%BD%9C%E5%8C%BA%E5%9F%9F.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure> \n</li>\n</ul>\n<h3 id=\"四、Git-的基本工作流程\"><a href=\"#四、Git-的基本工作流程\" class=\"headerlink\" title=\"四、Git 的基本工作流程\"></a>四、Git 的基本工作流程</h3><h4 id=\"1-在工作目录中修改文件\"><a href=\"#1-在工作目录中修改文件\" class=\"headerlink\" title=\"1. 在工作目录中修改文件\"></a>1. 在工作目录中修改文件</h4><h4 id=\"2-暂存文件，将文件的快照放入暂存区\"><a href=\"#2-暂存文件，将文件的快照放入暂存区\" class=\"headerlink\" title=\"2. 暂存文件，将文件的快照放入暂存区\"></a>2. 暂存文件，将文件的快照放入暂存区</h4><h4 id=\"3-提交更新，找到暂存区的文件，将快照永久性存储到Git仓库中\"><a href=\"#3-提交更新，找到暂存区的文件，将快照永久性存储到Git仓库中\" class=\"headerlink\" title=\"3. 提交更新，找到暂存区的文件，将快照永久性存储到Git仓库中\"></a>3. 提交更新，找到暂存区的文件，将快照永久性存储到Git仓库中</h4><h3 id=\"五、Git-个人信息初始配置\"><a href=\"#五、Git-个人信息初始配置\" class=\"headerlink\" title=\"五、Git 个人信息初始配置\"></a>五、Git 个人信息初始配置</h3><ul>\n<li><p>全局信息配置：(个人默认信息)</p>\n<blockquote>\n<p>git config –global user.name “xxx”</p>\n<p>git config –global user.email   xxx@qq.coom</p>\n</blockquote>\n<p>  此配置会写入 user目录下的 .gitconfig文件，实际上为个人信息默认值</p>\n</li>\n<li><p>临时配置：</p>\n<p>  去掉 –global 即可<br>  实际是在其配置列表中追加其信息，重复变量名，不同的value值<br>  (Git每次会读取不同文件，其中就可能含有同一个配置)<br>  Git 会使用每个变量的最后一次的配置的值</p>\n</li>\n</ul>\n"},{"title":"Android 类加载初探","date":"2016-11-17T13:08:00.000Z","_content":"> 源码路径(此版本：Android 5.0)：\nandroid-5.0.0_r7\\libcore\\dalvik\\src\\main\\java\\dalvik\\system\n\n需要关注的类有：\n![](http://7xr1vo.com1.z0.glb.clouddn.com/AndroidClassloader1.png)\n### 一、查找类的过程\n对于一个Class，在Android中，是如何被ClassLoader查找的呢？我们先查看一下，在Android中最原始的ClassLoader: BaseDexClassLoader 中有直接的方法。直接看源码：\n![](http://7xr1vo.com1.z0.glb.clouddn.com/AndroidClassLoader2.png)\n\n再继续追， pathList 的 findClass() 方法：\n![](http://7xr1vo.com1.z0.glb.clouddn.com/AndroidClassLoader3.png)\n\n此时遍历每个dex，通过二进制名来查找类Class；若类未定义或类未找到，则将异常add至suppressed异常集合中，随后抛出。\n![](http://7xr1vo.com1.z0.glb.clouddn.com/AndroidClassLoader4.png)\n\n### 二、3个类加载器的关系\n\n我们先来看看这3个ClassLoader的定义\n\n* BaseDexClassLoader\n\n![](http://7xr1vo.com1.z0.glb.clouddn.com/AndroidClassloader5.png)\n\n* DexClassLoader\n\n![](http://7xr1vo.com1.z0.glb.clouddn.com/AndroidClassloader6.png)\n\n* PathClassLoader\n\n![](http://7xr1vo.com1.z0.glb.clouddn.com/AndroidClassloader7.png)\n\n由上面可看出：BaseDexClassLoader 继承自最原始的 ClassLoader，DexClassLoader 和 PathClassLoader都继承自BaseClassLoader。依据传入的参数不同，来实现各自不同的 dex 加载功能\n\n**ClassLoader 相关说明：**\n\n从存储中加载类和资源。 在运行时安装一个或多个类加载器。 每当运行时系统需要在内存中尚不可用的特定类时，都会查询这些类。 通常，类加载器是一个树型结构，其中子类加载器将所有请求委托给父类加载器。 只有父类加载器无法满足请求，子类加载器才会尝试处理它（委托机制）\n\n下面我们再继续分析，传入不同的 optimizedDirectory 参数，两者会有什么样的区别？\n\nDexPathList 构造函数：\n![](http://7xr1vo.com1.z0.glb.clouddn.com/AndroidClassloader8.png)\n\nmakeDexElements过程：\n![](http://7xr1vo.com1.z0.glb.clouddn.com/AndroidClassloader9.png)\n\n加载DexFile，若optimizedDirectory 目录为空，则初始化一个DexFile，否则，直接加载dex文件：\n\n![](http://7xr1vo.com1.z0.glb.clouddn.com/AndroidClassloader10.png)\n\n初始化DexFile文件，通常是从一个文件对象中打开一个Dex file ，通常是一个 内容是 classes.dex 的 zip/jar文件，\n虚拟机将在 /data/dalvik-cache 目录下生成相应名称的文件，且打开它，在系统权限允许的情况下尽可能的先创建或更新该文件 \n不能传递 优化后的 文件名（/data/dalvik-cache），而是在 dexopt 之前的原始状态的文件名。\n\n![](http://7xr1vo.com1.z0.glb.clouddn.com/AndroidClassloader11.png)\n\n由上可知，PathClassLoader 的构造函数，与DexClassLoader相比较，optimizedDirectory 优化目录为null。\n由于optimizedDirectory是用来缓存我们需要加载的dex文件的，并创建一个DexFile对象，如果它为null，那么会直接使用dex文件原有的路径来创建DexFile对象。\noptimizedDirectory必须是一个内部存储路径，无论哪种动态加载，加载的可执行文件一定要存放在内部存储。DexClassLoader可以指定自己的optimizedDirectory，所以它可以加载外部的dex，因为这个dex会被复制到内部路径的optimizedDirectory\n所以DexClassLoader可以通过其他路径（内部存储路径）加载dex，而PathClassLoader没有optimizedDirectory，所以它只能加载内部的dex，这些大都是存在系统中已经安装过的apk里面的。\n\n若想查看相关目录下的dex文件，可参考上一篇文章。\n\n\n\n","source":"_posts/Android 类加载初探.md","raw":"---\ntitle: Android 类加载初探\ndate: 2016-11-17 21:08\ncategories: Android\ntags: ClassLoader\n---\n> 源码路径(此版本：Android 5.0)：\nandroid-5.0.0_r7\\libcore\\dalvik\\src\\main\\java\\dalvik\\system\n\n需要关注的类有：\n![](http://7xr1vo.com1.z0.glb.clouddn.com/AndroidClassloader1.png)\n### 一、查找类的过程\n对于一个Class，在Android中，是如何被ClassLoader查找的呢？我们先查看一下，在Android中最原始的ClassLoader: BaseDexClassLoader 中有直接的方法。直接看源码：\n![](http://7xr1vo.com1.z0.glb.clouddn.com/AndroidClassLoader2.png)\n\n再继续追， pathList 的 findClass() 方法：\n![](http://7xr1vo.com1.z0.glb.clouddn.com/AndroidClassLoader3.png)\n\n此时遍历每个dex，通过二进制名来查找类Class；若类未定义或类未找到，则将异常add至suppressed异常集合中，随后抛出。\n![](http://7xr1vo.com1.z0.glb.clouddn.com/AndroidClassLoader4.png)\n\n### 二、3个类加载器的关系\n\n我们先来看看这3个ClassLoader的定义\n\n* BaseDexClassLoader\n\n![](http://7xr1vo.com1.z0.glb.clouddn.com/AndroidClassloader5.png)\n\n* DexClassLoader\n\n![](http://7xr1vo.com1.z0.glb.clouddn.com/AndroidClassloader6.png)\n\n* PathClassLoader\n\n![](http://7xr1vo.com1.z0.glb.clouddn.com/AndroidClassloader7.png)\n\n由上面可看出：BaseDexClassLoader 继承自最原始的 ClassLoader，DexClassLoader 和 PathClassLoader都继承自BaseClassLoader。依据传入的参数不同，来实现各自不同的 dex 加载功能\n\n**ClassLoader 相关说明：**\n\n从存储中加载类和资源。 在运行时安装一个或多个类加载器。 每当运行时系统需要在内存中尚不可用的特定类时，都会查询这些类。 通常，类加载器是一个树型结构，其中子类加载器将所有请求委托给父类加载器。 只有父类加载器无法满足请求，子类加载器才会尝试处理它（委托机制）\n\n下面我们再继续分析，传入不同的 optimizedDirectory 参数，两者会有什么样的区别？\n\nDexPathList 构造函数：\n![](http://7xr1vo.com1.z0.glb.clouddn.com/AndroidClassloader8.png)\n\nmakeDexElements过程：\n![](http://7xr1vo.com1.z0.glb.clouddn.com/AndroidClassloader9.png)\n\n加载DexFile，若optimizedDirectory 目录为空，则初始化一个DexFile，否则，直接加载dex文件：\n\n![](http://7xr1vo.com1.z0.glb.clouddn.com/AndroidClassloader10.png)\n\n初始化DexFile文件，通常是从一个文件对象中打开一个Dex file ，通常是一个 内容是 classes.dex 的 zip/jar文件，\n虚拟机将在 /data/dalvik-cache 目录下生成相应名称的文件，且打开它，在系统权限允许的情况下尽可能的先创建或更新该文件 \n不能传递 优化后的 文件名（/data/dalvik-cache），而是在 dexopt 之前的原始状态的文件名。\n\n![](http://7xr1vo.com1.z0.glb.clouddn.com/AndroidClassloader11.png)\n\n由上可知，PathClassLoader 的构造函数，与DexClassLoader相比较，optimizedDirectory 优化目录为null。\n由于optimizedDirectory是用来缓存我们需要加载的dex文件的，并创建一个DexFile对象，如果它为null，那么会直接使用dex文件原有的路径来创建DexFile对象。\noptimizedDirectory必须是一个内部存储路径，无论哪种动态加载，加载的可执行文件一定要存放在内部存储。DexClassLoader可以指定自己的optimizedDirectory，所以它可以加载外部的dex，因为这个dex会被复制到内部路径的optimizedDirectory\n所以DexClassLoader可以通过其他路径（内部存储路径）加载dex，而PathClassLoader没有optimizedDirectory，所以它只能加载内部的dex，这些大都是存在系统中已经安装过的apk里面的。\n\n若想查看相关目录下的dex文件，可参考上一篇文章。\n\n\n\n","slug":"Android 类加载初探","published":1,"updated":"2016-12-17T14:23:04.669Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciwvuocs9000bf0v73wl32sq3","content":"<blockquote>\n<p>源码路径(此版本：Android 5.0)：<br>android-5.0.0_r7\\libcore\\dalvik\\src\\main\\java\\dalvik\\system</p>\n</blockquote>\n<p>需要关注的类有：<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/AndroidClassloader1.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure></p>\n<h3 id=\"一、查找类的过程\"><a href=\"#一、查找类的过程\" class=\"headerlink\" title=\"一、查找类的过程\"></a>一、查找类的过程</h3><p>对于一个Class，在Android中，是如何被ClassLoader查找的呢？我们先查看一下，在Android中最原始的ClassLoader: BaseDexClassLoader 中有直接的方法。直接看源码：<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/AndroidClassLoader2.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure></p>\n<p>再继续追， pathList 的 findClass() 方法：<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/AndroidClassLoader3.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure></p>\n<p>此时遍历每个dex，通过二进制名来查找类Class；若类未定义或类未找到，则将异常add至suppressed异常集合中，随后抛出。<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/AndroidClassLoader4.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure></p>\n<h3 id=\"二、3个类加载器的关系\"><a href=\"#二、3个类加载器的关系\" class=\"headerlink\" title=\"二、3个类加载器的关系\"></a>二、3个类加载器的关系</h3><p>我们先来看看这3个ClassLoader的定义</p>\n<ul>\n<li>BaseDexClassLoader</li>\n</ul>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/AndroidClassloader5.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<ul>\n<li>DexClassLoader</li>\n</ul>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/AndroidClassloader6.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<ul>\n<li>PathClassLoader</li>\n</ul>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/AndroidClassloader7.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>由上面可看出：BaseDexClassLoader 继承自最原始的 ClassLoader，DexClassLoader 和 PathClassLoader都继承自BaseClassLoader。依据传入的参数不同，来实现各自不同的 dex 加载功能</p>\n<p><strong>ClassLoader 相关说明：</strong></p>\n<p>从存储中加载类和资源。 在运行时安装一个或多个类加载器。 每当运行时系统需要在内存中尚不可用的特定类时，都会查询这些类。 通常，类加载器是一个树型结构，其中子类加载器将所有请求委托给父类加载器。 只有父类加载器无法满足请求，子类加载器才会尝试处理它（委托机制）</p>\n<p>下面我们再继续分析，传入不同的 optimizedDirectory 参数，两者会有什么样的区别？</p>\n<p>DexPathList 构造函数：<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/AndroidClassloader8.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure></p>\n<p>makeDexElements过程：<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/AndroidClassloader9.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure></p>\n<p>加载DexFile，若optimizedDirectory 目录为空，则初始化一个DexFile，否则，直接加载dex文件：</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/AndroidClassloader10.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>初始化DexFile文件，通常是从一个文件对象中打开一个Dex file ，通常是一个 内容是 classes.dex 的 zip/jar文件，<br>虚拟机将在 /data/dalvik-cache 目录下生成相应名称的文件，且打开它，在系统权限允许的情况下尽可能的先创建或更新该文件<br>不能传递 优化后的 文件名（/data/dalvik-cache），而是在 dexopt 之前的原始状态的文件名。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/AndroidClassloader11.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>由上可知，PathClassLoader 的构造函数，与DexClassLoader相比较，optimizedDirectory 优化目录为null。<br>由于optimizedDirectory是用来缓存我们需要加载的dex文件的，并创建一个DexFile对象，如果它为null，那么会直接使用dex文件原有的路径来创建DexFile对象。<br>optimizedDirectory必须是一个内部存储路径，无论哪种动态加载，加载的可执行文件一定要存放在内部存储。DexClassLoader可以指定自己的optimizedDirectory，所以它可以加载外部的dex，因为这个dex会被复制到内部路径的optimizedDirectory<br>所以DexClassLoader可以通过其他路径（内部存储路径）加载dex，而PathClassLoader没有optimizedDirectory，所以它只能加载内部的dex，这些大都是存在系统中已经安装过的apk里面的。</p>\n<p>若想查看相关目录下的dex文件，可参考上一篇文章。</p>\n","excerpt":"","more":"<blockquote>\n<p>源码路径(此版本：Android 5.0)：<br>android-5.0.0_r7\\libcore\\dalvik\\src\\main\\java\\dalvik\\system</p>\n</blockquote>\n<p>需要关注的类有：<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/AndroidClassloader1.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure></p>\n<h3 id=\"一、查找类的过程\"><a href=\"#一、查找类的过程\" class=\"headerlink\" title=\"一、查找类的过程\"></a>一、查找类的过程</h3><p>对于一个Class，在Android中，是如何被ClassLoader查找的呢？我们先查看一下，在Android中最原始的ClassLoader: BaseDexClassLoader 中有直接的方法。直接看源码：<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/AndroidClassLoader2.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure></p>\n<p>再继续追， pathList 的 findClass() 方法：<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/AndroidClassLoader3.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure></p>\n<p>此时遍历每个dex，通过二进制名来查找类Class；若类未定义或类未找到，则将异常add至suppressed异常集合中，随后抛出。<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/AndroidClassLoader4.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure></p>\n<h3 id=\"二、3个类加载器的关系\"><a href=\"#二、3个类加载器的关系\" class=\"headerlink\" title=\"二、3个类加载器的关系\"></a>二、3个类加载器的关系</h3><p>我们先来看看这3个ClassLoader的定义</p>\n<ul>\n<li>BaseDexClassLoader</li>\n</ul>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/AndroidClassloader5.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<ul>\n<li>DexClassLoader</li>\n</ul>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/AndroidClassloader6.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<ul>\n<li>PathClassLoader</li>\n</ul>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/AndroidClassloader7.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>由上面可看出：BaseDexClassLoader 继承自最原始的 ClassLoader，DexClassLoader 和 PathClassLoader都继承自BaseClassLoader。依据传入的参数不同，来实现各自不同的 dex 加载功能</p>\n<p><strong>ClassLoader 相关说明：</strong></p>\n<p>从存储中加载类和资源。 在运行时安装一个或多个类加载器。 每当运行时系统需要在内存中尚不可用的特定类时，都会查询这些类。 通常，类加载器是一个树型结构，其中子类加载器将所有请求委托给父类加载器。 只有父类加载器无法满足请求，子类加载器才会尝试处理它（委托机制）</p>\n<p>下面我们再继续分析，传入不同的 optimizedDirectory 参数，两者会有什么样的区别？</p>\n<p>DexPathList 构造函数：<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/AndroidClassloader8.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure></p>\n<p>makeDexElements过程：<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/AndroidClassloader9.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure></p>\n<p>加载DexFile，若optimizedDirectory 目录为空，则初始化一个DexFile，否则，直接加载dex文件：</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/AndroidClassloader10.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>初始化DexFile文件，通常是从一个文件对象中打开一个Dex file ，通常是一个 内容是 classes.dex 的 zip/jar文件，<br>虚拟机将在 /data/dalvik-cache 目录下生成相应名称的文件，且打开它，在系统权限允许的情况下尽可能的先创建或更新该文件<br>不能传递 优化后的 文件名（/data/dalvik-cache），而是在 dexopt 之前的原始状态的文件名。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/AndroidClassloader11.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>由上可知，PathClassLoader 的构造函数，与DexClassLoader相比较，optimizedDirectory 优化目录为null。<br>由于optimizedDirectory是用来缓存我们需要加载的dex文件的，并创建一个DexFile对象，如果它为null，那么会直接使用dex文件原有的路径来创建DexFile对象。<br>optimizedDirectory必须是一个内部存储路径，无论哪种动态加载，加载的可执行文件一定要存放在内部存储。DexClassLoader可以指定自己的optimizedDirectory，所以它可以加载外部的dex，因为这个dex会被复制到内部路径的optimizedDirectory<br>所以DexClassLoader可以通过其他路径（内部存储路径）加载dex，而PathClassLoader没有optimizedDirectory，所以它只能加载内部的dex，这些大都是存在系统中已经安装过的apk里面的。</p>\n<p>若想查看相关目录下的dex文件，可参考上一篇文章。</p>\n"},{"title":"Git学习笔记（二）","date":"2016-02-19T08:06:00.000Z","_content":"### 常用命令：\n> 1、初始\n\n\tgit <verb> --help\t\t\t查看命令用法(方法之一)\n\tgit init\t\t\t\t\t初始化git仓库(在当前目录下会创建.git目录)\n\n> 2、 远程操作\n\n\tgit clone URL\t\t\t\t从远程clone git仓库\n\tgit remote -v\t\t\t\t查看远程仓库使用的 Git 保存的简写与其对应的 URL\t\n\tgit pull URL\t\t\t\t将数据拉取到你的本地仓库,并合并远程分支到当前分支\n\tgit fetch URL\t\t\t\t将数据拉取到你的本地仓库,并不会自动合并或修改你当前的工作\n\tgit push URL\t\t\t\t将本地git仓库推送到远程仓库(一次就记住URL了,之后不需要写URL)\n\n> 3、添加文件\n\t\n\tgit add filename\t\t\t添加某个文件(该文件处于已跟踪(A)：tracked)\n\tgit add --all , -A\t\t\t添加所有文件\n\t\n> 4、提交文件\n\n\tgit commit -m \"提交信息\"\t \t提交当下工作区的文件\n\tgit commit -a -m \"提交信息\"\t \t前两个命令的合并，直接跳过暂存区提交\n\tgit commit\t\t\t\t\t\t启动文本编辑器写提交信息\n\t\n> 5、查看文件状态\n\n\tgit status\t\t\t\t\t查看当前文件状态\n\tgit status -s\t\t\t\t查看当前文件详细状态列表\t\n\t\n> 6、查看日志\n\n\tgit log\t\t\t\t\t\t查看提交的日志\n\tgit log\t--oneline\t\t\t查看提交的日志简略信息\n\tgit log\t-p -2\t\t\t\t查看最近两次提交的日志\n\n> 7、查看修改\n\n\tgit diff\t\t\t\t\t查看未暂存文件(未add)的修改内容\n\tgit diff --staged, --cached\t查看已暂存文件(已add)的修改内容\n\t\n> 8、删除文件\n\n\tgit rm filename\t\t\t\t移除文件\n\tgit rm --cached filename\t移除文件,但该文件还留在工作区，但之后不会被跟踪(untracked)\n\tgit rm \\*.txt\t\t\t\t移除以 .txt 结尾的文件\n\t\n> 9、更改文件名\n\n\tgit mv oldName newName\t\t更改文件名\n\n> 10、标签操作\n\t\n\tgit tag -a v1.0 -m \"info\"\t打标签 v1.0:版本号，info:版本信息\n\tgit tag\t\t\t\t\t\t查看已有标签\n\t\n> 11、分支操作\n\n\tgit branch branchName\t\t创建分支\n\tgit branch -d branchName\t删除分支\n\tgit checkout branchName\t\t切换分支\n\tgit merge branchName\t\t合并分支到当前分支\n\tgit mergetool\t\t\t\t启动图形化工具解决冲突\n\tgit branch\t\t\t\t\t查看所有分支\n\tgit branch -v, -vv\t\t\t查看所有分支的最后一次提交\n\n\t\n### 补充：\n* **rebase**: **变基**，另一种不同于merge的\"整合\"方式 (命令示例：git rebase master)\n* 变基是将一系列提交按照原有次序依次应用到另一分支上，而合并是把最终结果合在一起。\n* 请注意：\n\t\t\t\n\t> 无论是通过变基，还是通过三方合并，整合的最终结果所指向的快照始终是一样的，只不过提交历史不同罢了。\n* 准则：\n\n * 不要对在你的仓库外有副本的分支执行变基\n * 只对尚未推送或分享给别人的本地修改执行变基操作清理历史，从不对已推送至别处的提交执行变基操作","source":"_posts/Git学习笔记（二）.md","raw":"---\ntitle: Git学习笔记（二）\ndate: 2016-02-19 16:06\ncategories: 工具\ntags: Git\n---\n### 常用命令：\n> 1、初始\n\n\tgit <verb> --help\t\t\t查看命令用法(方法之一)\n\tgit init\t\t\t\t\t初始化git仓库(在当前目录下会创建.git目录)\n\n> 2、 远程操作\n\n\tgit clone URL\t\t\t\t从远程clone git仓库\n\tgit remote -v\t\t\t\t查看远程仓库使用的 Git 保存的简写与其对应的 URL\t\n\tgit pull URL\t\t\t\t将数据拉取到你的本地仓库,并合并远程分支到当前分支\n\tgit fetch URL\t\t\t\t将数据拉取到你的本地仓库,并不会自动合并或修改你当前的工作\n\tgit push URL\t\t\t\t将本地git仓库推送到远程仓库(一次就记住URL了,之后不需要写URL)\n\n> 3、添加文件\n\t\n\tgit add filename\t\t\t添加某个文件(该文件处于已跟踪(A)：tracked)\n\tgit add --all , -A\t\t\t添加所有文件\n\t\n> 4、提交文件\n\n\tgit commit -m \"提交信息\"\t \t提交当下工作区的文件\n\tgit commit -a -m \"提交信息\"\t \t前两个命令的合并，直接跳过暂存区提交\n\tgit commit\t\t\t\t\t\t启动文本编辑器写提交信息\n\t\n> 5、查看文件状态\n\n\tgit status\t\t\t\t\t查看当前文件状态\n\tgit status -s\t\t\t\t查看当前文件详细状态列表\t\n\t\n> 6、查看日志\n\n\tgit log\t\t\t\t\t\t查看提交的日志\n\tgit log\t--oneline\t\t\t查看提交的日志简略信息\n\tgit log\t-p -2\t\t\t\t查看最近两次提交的日志\n\n> 7、查看修改\n\n\tgit diff\t\t\t\t\t查看未暂存文件(未add)的修改内容\n\tgit diff --staged, --cached\t查看已暂存文件(已add)的修改内容\n\t\n> 8、删除文件\n\n\tgit rm filename\t\t\t\t移除文件\n\tgit rm --cached filename\t移除文件,但该文件还留在工作区，但之后不会被跟踪(untracked)\n\tgit rm \\*.txt\t\t\t\t移除以 .txt 结尾的文件\n\t\n> 9、更改文件名\n\n\tgit mv oldName newName\t\t更改文件名\n\n> 10、标签操作\n\t\n\tgit tag -a v1.0 -m \"info\"\t打标签 v1.0:版本号，info:版本信息\n\tgit tag\t\t\t\t\t\t查看已有标签\n\t\n> 11、分支操作\n\n\tgit branch branchName\t\t创建分支\n\tgit branch -d branchName\t删除分支\n\tgit checkout branchName\t\t切换分支\n\tgit merge branchName\t\t合并分支到当前分支\n\tgit mergetool\t\t\t\t启动图形化工具解决冲突\n\tgit branch\t\t\t\t\t查看所有分支\n\tgit branch -v, -vv\t\t\t查看所有分支的最后一次提交\n\n\t\n### 补充：\n* **rebase**: **变基**，另一种不同于merge的\"整合\"方式 (命令示例：git rebase master)\n* 变基是将一系列提交按照原有次序依次应用到另一分支上，而合并是把最终结果合在一起。\n* 请注意：\n\t\t\t\n\t> 无论是通过变基，还是通过三方合并，整合的最终结果所指向的快照始终是一样的，只不过提交历史不同罢了。\n* 准则：\n\n * 不要对在你的仓库外有副本的分支执行变基\n * 只对尚未推送或分享给别人的本地修改执行变基操作清理历史，从不对已推送至别处的提交执行变基操作","slug":"Git学习笔记（二）","published":1,"updated":"2016-12-17T14:17:11.736Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciwvuocse000df0v7nzmv4sxm","content":"<h3 id=\"常用命令：\"><a href=\"#常用命令：\" class=\"headerlink\" title=\"常用命令：\"></a>常用命令：</h3><blockquote>\n<p>1、初始</p>\n</blockquote>\n<pre><code>git &lt;verb&gt; --help            查看命令用法(方法之一)\ngit init                    初始化git仓库(在当前目录下会创建.git目录)\n</code></pre><blockquote>\n<p>2、 远程操作</p>\n</blockquote>\n<pre><code>git clone URL                从远程clone git仓库\ngit remote -v                查看远程仓库使用的 Git 保存的简写与其对应的 URL    \ngit pull URL                将数据拉取到你的本地仓库,并合并远程分支到当前分支\ngit fetch URL                将数据拉取到你的本地仓库,并不会自动合并或修改你当前的工作\ngit push URL                将本地git仓库推送到远程仓库(一次就记住URL了,之后不需要写URL)\n</code></pre><blockquote>\n<p>3、添加文件</p>\n</blockquote>\n<pre><code>git add filename            添加某个文件(该文件处于已跟踪(A)：tracked)\ngit add --all , -A            添加所有文件\n</code></pre><blockquote>\n<p>4、提交文件</p>\n</blockquote>\n<pre><code>git commit -m &quot;提交信息&quot;         提交当下工作区的文件\ngit commit -a -m &quot;提交信息&quot;         前两个命令的合并，直接跳过暂存区提交\ngit commit                        启动文本编辑器写提交信息\n</code></pre><blockquote>\n<p>5、查看文件状态</p>\n</blockquote>\n<pre><code>git status                    查看当前文件状态\ngit status -s                查看当前文件详细状态列表    \n</code></pre><blockquote>\n<p>6、查看日志</p>\n</blockquote>\n<pre><code>git log                        查看提交的日志\ngit log    --oneline            查看提交的日志简略信息\ngit log    -p -2                查看最近两次提交的日志\n</code></pre><blockquote>\n<p>7、查看修改</p>\n</blockquote>\n<pre><code>git diff                    查看未暂存文件(未add)的修改内容\ngit diff --staged, --cached    查看已暂存文件(已add)的修改内容\n</code></pre><blockquote>\n<p>8、删除文件</p>\n</blockquote>\n<pre><code>git rm filename                移除文件\ngit rm --cached filename    移除文件,但该文件还留在工作区，但之后不会被跟踪(untracked)\ngit rm \\*.txt                移除以 .txt 结尾的文件\n</code></pre><blockquote>\n<p>9、更改文件名</p>\n</blockquote>\n<pre><code>git mv oldName newName        更改文件名\n</code></pre><blockquote>\n<p>10、标签操作</p>\n</blockquote>\n<pre><code>git tag -a v1.0 -m &quot;info&quot;    打标签 v1.0:版本号，info:版本信息\ngit tag                        查看已有标签\n</code></pre><blockquote>\n<p>11、分支操作</p>\n</blockquote>\n<pre><code>git branch branchName        创建分支\ngit branch -d branchName    删除分支\ngit checkout branchName        切换分支\ngit merge branchName        合并分支到当前分支\ngit mergetool                启动图形化工具解决冲突\ngit branch                    查看所有分支\ngit branch -v, -vv            查看所有分支的最后一次提交\n</code></pre><h3 id=\"补充：\"><a href=\"#补充：\" class=\"headerlink\" title=\"补充：\"></a>补充：</h3><ul>\n<li><strong>rebase</strong>: <strong>变基</strong>，另一种不同于merge的”整合”方式 (命令示例：git rebase master)</li>\n<li>变基是将一系列提交按照原有次序依次应用到另一分支上，而合并是把最终结果合在一起。</li>\n<li><p>请注意：</p>\n<blockquote>\n<p>无论是通过变基，还是通过三方合并，整合的最终结果所指向的快照始终是一样的，只不过提交历史不同罢了。</p>\n</blockquote>\n</li>\n<li><p>准则：</p>\n<ul>\n<li>不要对在你的仓库外有副本的分支执行变基</li>\n<li>只对尚未推送或分享给别人的本地修改执行变基操作清理历史，从不对已推送至别处的提交执行变基操作</li>\n</ul>\n</li>\n</ul>\n","excerpt":"","more":"<h3 id=\"常用命令：\"><a href=\"#常用命令：\" class=\"headerlink\" title=\"常用命令：\"></a>常用命令：</h3><blockquote>\n<p>1、初始</p>\n</blockquote>\n<pre><code>git &lt;verb&gt; --help            查看命令用法(方法之一)\ngit init                    初始化git仓库(在当前目录下会创建.git目录)\n</code></pre><blockquote>\n<p>2、 远程操作</p>\n</blockquote>\n<pre><code>git clone URL                从远程clone git仓库\ngit remote -v                查看远程仓库使用的 Git 保存的简写与其对应的 URL    \ngit pull URL                将数据拉取到你的本地仓库,并合并远程分支到当前分支\ngit fetch URL                将数据拉取到你的本地仓库,并不会自动合并或修改你当前的工作\ngit push URL                将本地git仓库推送到远程仓库(一次就记住URL了,之后不需要写URL)\n</code></pre><blockquote>\n<p>3、添加文件</p>\n</blockquote>\n<pre><code>git add filename            添加某个文件(该文件处于已跟踪(A)：tracked)\ngit add --all , -A            添加所有文件\n</code></pre><blockquote>\n<p>4、提交文件</p>\n</blockquote>\n<pre><code>git commit -m &quot;提交信息&quot;         提交当下工作区的文件\ngit commit -a -m &quot;提交信息&quot;         前两个命令的合并，直接跳过暂存区提交\ngit commit                        启动文本编辑器写提交信息\n</code></pre><blockquote>\n<p>5、查看文件状态</p>\n</blockquote>\n<pre><code>git status                    查看当前文件状态\ngit status -s                查看当前文件详细状态列表    \n</code></pre><blockquote>\n<p>6、查看日志</p>\n</blockquote>\n<pre><code>git log                        查看提交的日志\ngit log    --oneline            查看提交的日志简略信息\ngit log    -p -2                查看最近两次提交的日志\n</code></pre><blockquote>\n<p>7、查看修改</p>\n</blockquote>\n<pre><code>git diff                    查看未暂存文件(未add)的修改内容\ngit diff --staged, --cached    查看已暂存文件(已add)的修改内容\n</code></pre><blockquote>\n<p>8、删除文件</p>\n</blockquote>\n<pre><code>git rm filename                移除文件\ngit rm --cached filename    移除文件,但该文件还留在工作区，但之后不会被跟踪(untracked)\ngit rm \\*.txt                移除以 .txt 结尾的文件\n</code></pre><blockquote>\n<p>9、更改文件名</p>\n</blockquote>\n<pre><code>git mv oldName newName        更改文件名\n</code></pre><blockquote>\n<p>10、标签操作</p>\n</blockquote>\n<pre><code>git tag -a v1.0 -m &quot;info&quot;    打标签 v1.0:版本号，info:版本信息\ngit tag                        查看已有标签\n</code></pre><blockquote>\n<p>11、分支操作</p>\n</blockquote>\n<pre><code>git branch branchName        创建分支\ngit branch -d branchName    删除分支\ngit checkout branchName        切换分支\ngit merge branchName        合并分支到当前分支\ngit mergetool                启动图形化工具解决冲突\ngit branch                    查看所有分支\ngit branch -v, -vv            查看所有分支的最后一次提交\n</code></pre><h3 id=\"补充：\"><a href=\"#补充：\" class=\"headerlink\" title=\"补充：\"></a>补充：</h3><ul>\n<li><strong>rebase</strong>: <strong>变基</strong>，另一种不同于merge的”整合”方式 (命令示例：git rebase master)</li>\n<li>变基是将一系列提交按照原有次序依次应用到另一分支上，而合并是把最终结果合在一起。</li>\n<li><p>请注意：</p>\n<blockquote>\n<p>无论是通过变基，还是通过三方合并，整合的最终结果所指向的快照始终是一样的，只不过提交历史不同罢了。</p>\n</blockquote>\n</li>\n<li><p>准则：</p>\n<ul>\n<li>不要对在你的仓库外有副本的分支执行变基</li>\n<li>只对尚未推送或分享给别人的本地修改执行变基操作清理历史，从不对已推送至别处的提交执行变基操作</li>\n</ul>\n</li>\n</ul>\n"},{"title":"RxJava 初探（一）","date":"2016-10-05T16:45:00.000Z","_content":"### 一、几个基本概念\n* 由来\n\tRx(Reactive Extensions)，最初是LINQ的一个扩展，后由微软团队开发，在2012年11月开源。ReactiveX.io给的定义是，Rx是一个使用可观察数据流进行异步编程的编程接口，ReactiveX结合了观察者模式、迭代器模式和函数式编程的精华。\n* Rx 模式\n * 创建：Rx可以方便的创建事件流和数据流\n * 组合：Rx使用查询式的操作符组合和变换数据流\n * 监听：Rx可以订阅任何可观察的数据流并执行操作\n* 名词定义\n\t* Iterable： 可迭代对象，支持以迭代器的形式遍历\n\t* Observable：可观察对象，在Rx中定义为更强大的Iterable，在观察者模式中是被观察的对象，一旦数据产生或发生变化，会通过某种方式通知观察者或订阅者\n\t* Observer： 观察者对象，监听Observable发射的数据并做出响应，Subscriber是它的一个特殊实现\n\t* emit：直译为发射，发布，发出，含义是Observable在数据产生或变化时发送通知给Observer，调用Observer对应的方法。文章统一翻译为发射\n\t* items：直译为项目，条目，在Rx里是指Observable发射的数据项，文章统一译为数据，数据项\n\n### 二、响应式编程模式\n* 下图采自官方文档，基本阐述了数据流和数据变换的过程：\n\t\n\t![这里写图片描述](http://7xr1vo.com1.z0.glb.clouddn.com/rxjava%E7%AE%80%E5%8D%95%E5%9B%BE%E8%A7%A3.png)\n* 冷热观察者\n\t* 热 观察者：可能一创建完就开始发射数据，因此所有后续订阅它的观察者可能从序列中间的某个位置开始接受数据（有一些数据错过了）\n\t* 冷 观察者：一个\"冷\"的Observable会一直等待，直到有观察者订阅它才开始发射数据，因此这个观察者可以确保会收到整个数据序列\n\n### 三、操作分类\n* 创建操作： Create, Defer, Empty/Never/Throw, From, Interval, Just, Range, Repeat, Start, Timer\n* 变换操作：Buffer, FlatMap, GroupBy, Map, Scan和Window\n* 过滤操作：Debounce, Distinct, ElementAt, Filter, First, IgnoreElements, Last, Sample, Skip, SkipLast, Take, TakeLast\n* 组合操作：And/Then/When, CombineLatest, Join, Merge, StartWith, Switch, Zip\n* 错误处理：Catch和Retry\n* 辅助操作：Delay, Do, Materialize/Dematerialize, ObserveOn, Serialize, Subscribe, SubscribeOn, TimeInterval, Timeout, Timestamp, Using\n* 条件和布尔操作：All, Amb, Contains, DefaultIfEmpty, SequenceEqual, SkipUntil, SkipWhile, TakeUntil, TakeWhile\n* 算术和集合操作：Average, Concat, Count, Max, Min, Reduce, Sum\n* 转换操作：To\n* 连接操作：Connect, Publish, RefCount, Replay\n* 反压操作：用于增加特殊的流程控制策略的操作符\n\n> 官方文档翻译版：https://mcxiaoke.gitbooks.io/rxdocs/content/Intro.html","source":"_posts/RxJava 初探（一）.md","raw":"---\ntitle: RxJava 初探（一）\ndate: 2016-10-06 00:45\ncategories: RxJava\ntags: RxJava\n---\n### 一、几个基本概念\n* 由来\n\tRx(Reactive Extensions)，最初是LINQ的一个扩展，后由微软团队开发，在2012年11月开源。ReactiveX.io给的定义是，Rx是一个使用可观察数据流进行异步编程的编程接口，ReactiveX结合了观察者模式、迭代器模式和函数式编程的精华。\n* Rx 模式\n * 创建：Rx可以方便的创建事件流和数据流\n * 组合：Rx使用查询式的操作符组合和变换数据流\n * 监听：Rx可以订阅任何可观察的数据流并执行操作\n* 名词定义\n\t* Iterable： 可迭代对象，支持以迭代器的形式遍历\n\t* Observable：可观察对象，在Rx中定义为更强大的Iterable，在观察者模式中是被观察的对象，一旦数据产生或发生变化，会通过某种方式通知观察者或订阅者\n\t* Observer： 观察者对象，监听Observable发射的数据并做出响应，Subscriber是它的一个特殊实现\n\t* emit：直译为发射，发布，发出，含义是Observable在数据产生或变化时发送通知给Observer，调用Observer对应的方法。文章统一翻译为发射\n\t* items：直译为项目，条目，在Rx里是指Observable发射的数据项，文章统一译为数据，数据项\n\n### 二、响应式编程模式\n* 下图采自官方文档，基本阐述了数据流和数据变换的过程：\n\t\n\t![这里写图片描述](http://7xr1vo.com1.z0.glb.clouddn.com/rxjava%E7%AE%80%E5%8D%95%E5%9B%BE%E8%A7%A3.png)\n* 冷热观察者\n\t* 热 观察者：可能一创建完就开始发射数据，因此所有后续订阅它的观察者可能从序列中间的某个位置开始接受数据（有一些数据错过了）\n\t* 冷 观察者：一个\"冷\"的Observable会一直等待，直到有观察者订阅它才开始发射数据，因此这个观察者可以确保会收到整个数据序列\n\n### 三、操作分类\n* 创建操作： Create, Defer, Empty/Never/Throw, From, Interval, Just, Range, Repeat, Start, Timer\n* 变换操作：Buffer, FlatMap, GroupBy, Map, Scan和Window\n* 过滤操作：Debounce, Distinct, ElementAt, Filter, First, IgnoreElements, Last, Sample, Skip, SkipLast, Take, TakeLast\n* 组合操作：And/Then/When, CombineLatest, Join, Merge, StartWith, Switch, Zip\n* 错误处理：Catch和Retry\n* 辅助操作：Delay, Do, Materialize/Dematerialize, ObserveOn, Serialize, Subscribe, SubscribeOn, TimeInterval, Timeout, Timestamp, Using\n* 条件和布尔操作：All, Amb, Contains, DefaultIfEmpty, SequenceEqual, SkipUntil, SkipWhile, TakeUntil, TakeWhile\n* 算术和集合操作：Average, Concat, Count, Max, Min, Reduce, Sum\n* 转换操作：To\n* 连接操作：Connect, Publish, RefCount, Replay\n* 反压操作：用于增加特殊的流程控制策略的操作符\n\n> 官方文档翻译版：https://mcxiaoke.gitbooks.io/rxdocs/content/Intro.html","slug":"RxJava 初探（一）","published":1,"updated":"2016-12-17T14:27:11.748Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciwvuocsi000hf0v7b3qtp7hh","content":"<h3 id=\"一、几个基本概念\"><a href=\"#一、几个基本概念\" class=\"headerlink\" title=\"一、几个基本概念\"></a>一、几个基本概念</h3><ul>\n<li>由来<br>  Rx(Reactive Extensions)，最初是LINQ的一个扩展，后由微软团队开发，在2012年11月开源。ReactiveX.io给的定义是，Rx是一个使用可观察数据流进行异步编程的编程接口，ReactiveX结合了观察者模式、迭代器模式和函数式编程的精华。</li>\n<li>Rx 模式<ul>\n<li>创建：Rx可以方便的创建事件流和数据流</li>\n<li>组合：Rx使用查询式的操作符组合和变换数据流</li>\n<li>监听：Rx可以订阅任何可观察的数据流并执行操作</li>\n</ul>\n</li>\n<li>名词定义<ul>\n<li>Iterable： 可迭代对象，支持以迭代器的形式遍历</li>\n<li>Observable：可观察对象，在Rx中定义为更强大的Iterable，在观察者模式中是被观察的对象，一旦数据产生或发生变化，会通过某种方式通知观察者或订阅者</li>\n<li>Observer： 观察者对象，监听Observable发射的数据并做出响应，Subscriber是它的一个特殊实现</li>\n<li>emit：直译为发射，发布，发出，含义是Observable在数据产生或变化时发送通知给Observer，调用Observer对应的方法。文章统一翻译为发射</li>\n<li>items：直译为项目，条目，在Rx里是指Observable发射的数据项，文章统一译为数据，数据项</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"二、响应式编程模式\"><a href=\"#二、响应式编程模式\" class=\"headerlink\" title=\"二、响应式编程模式\"></a>二、响应式编程模式</h3><ul>\n<li><p>下图采自官方文档，基本阐述了数据流和数据变换的过程：</p>\n<p>  <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/rxjava%E7%AE%80%E5%8D%95%E5%9B%BE%E8%A7%A3.png\" alt=\"这里写图片描述\"></p>\n</li>\n<li>冷热观察者<ul>\n<li>热 观察者：可能一创建完就开始发射数据，因此所有后续订阅它的观察者可能从序列中间的某个位置开始接受数据（有一些数据错过了）</li>\n<li>冷 观察者：一个”冷”的Observable会一直等待，直到有观察者订阅它才开始发射数据，因此这个观察者可以确保会收到整个数据序列</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"三、操作分类\"><a href=\"#三、操作分类\" class=\"headerlink\" title=\"三、操作分类\"></a>三、操作分类</h3><ul>\n<li>创建操作： Create, Defer, Empty/Never/Throw, From, Interval, Just, Range, Repeat, Start, Timer</li>\n<li>变换操作：Buffer, FlatMap, GroupBy, Map, Scan和Window</li>\n<li>过滤操作：Debounce, Distinct, ElementAt, Filter, First, IgnoreElements, Last, Sample, Skip, SkipLast, Take, TakeLast</li>\n<li>组合操作：And/Then/When, CombineLatest, Join, Merge, StartWith, Switch, Zip</li>\n<li>错误处理：Catch和Retry</li>\n<li>辅助操作：Delay, Do, Materialize/Dematerialize, ObserveOn, Serialize, Subscribe, SubscribeOn, TimeInterval, Timeout, Timestamp, Using</li>\n<li>条件和布尔操作：All, Amb, Contains, DefaultIfEmpty, SequenceEqual, SkipUntil, SkipWhile, TakeUntil, TakeWhile</li>\n<li>算术和集合操作：Average, Concat, Count, Max, Min, Reduce, Sum</li>\n<li>转换操作：To</li>\n<li>连接操作：Connect, Publish, RefCount, Replay</li>\n<li>反压操作：用于增加特殊的流程控制策略的操作符</li>\n</ul>\n<blockquote>\n<p>官方文档翻译版：<a href=\"https://mcxiaoke.gitbooks.io/rxdocs/content/Intro.html\" target=\"_blank\" rel=\"external\">https://mcxiaoke.gitbooks.io/rxdocs/content/Intro.html</a></p>\n</blockquote>\n","excerpt":"","more":"<h3 id=\"一、几个基本概念\"><a href=\"#一、几个基本概念\" class=\"headerlink\" title=\"一、几个基本概念\"></a>一、几个基本概念</h3><ul>\n<li>由来<br>  Rx(Reactive Extensions)，最初是LINQ的一个扩展，后由微软团队开发，在2012年11月开源。ReactiveX.io给的定义是，Rx是一个使用可观察数据流进行异步编程的编程接口，ReactiveX结合了观察者模式、迭代器模式和函数式编程的精华。</li>\n<li>Rx 模式<ul>\n<li>创建：Rx可以方便的创建事件流和数据流</li>\n<li>组合：Rx使用查询式的操作符组合和变换数据流</li>\n<li>监听：Rx可以订阅任何可观察的数据流并执行操作</li>\n</ul>\n</li>\n<li>名词定义<ul>\n<li>Iterable： 可迭代对象，支持以迭代器的形式遍历</li>\n<li>Observable：可观察对象，在Rx中定义为更强大的Iterable，在观察者模式中是被观察的对象，一旦数据产生或发生变化，会通过某种方式通知观察者或订阅者</li>\n<li>Observer： 观察者对象，监听Observable发射的数据并做出响应，Subscriber是它的一个特殊实现</li>\n<li>emit：直译为发射，发布，发出，含义是Observable在数据产生或变化时发送通知给Observer，调用Observer对应的方法。文章统一翻译为发射</li>\n<li>items：直译为项目，条目，在Rx里是指Observable发射的数据项，文章统一译为数据，数据项</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"二、响应式编程模式\"><a href=\"#二、响应式编程模式\" class=\"headerlink\" title=\"二、响应式编程模式\"></a>二、响应式编程模式</h3><ul>\n<li><p>下图采自官方文档，基本阐述了数据流和数据变换的过程：</p>\n<p>  <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/rxjava%E7%AE%80%E5%8D%95%E5%9B%BE%E8%A7%A3.png\" alt=\"这里写图片描述\"></p>\n</li>\n<li>冷热观察者<ul>\n<li>热 观察者：可能一创建完就开始发射数据，因此所有后续订阅它的观察者可能从序列中间的某个位置开始接受数据（有一些数据错过了）</li>\n<li>冷 观察者：一个”冷”的Observable会一直等待，直到有观察者订阅它才开始发射数据，因此这个观察者可以确保会收到整个数据序列</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"三、操作分类\"><a href=\"#三、操作分类\" class=\"headerlink\" title=\"三、操作分类\"></a>三、操作分类</h3><ul>\n<li>创建操作： Create, Defer, Empty/Never/Throw, From, Interval, Just, Range, Repeat, Start, Timer</li>\n<li>变换操作：Buffer, FlatMap, GroupBy, Map, Scan和Window</li>\n<li>过滤操作：Debounce, Distinct, ElementAt, Filter, First, IgnoreElements, Last, Sample, Skip, SkipLast, Take, TakeLast</li>\n<li>组合操作：And/Then/When, CombineLatest, Join, Merge, StartWith, Switch, Zip</li>\n<li>错误处理：Catch和Retry</li>\n<li>辅助操作：Delay, Do, Materialize/Dematerialize, ObserveOn, Serialize, Subscribe, SubscribeOn, TimeInterval, Timeout, Timestamp, Using</li>\n<li>条件和布尔操作：All, Amb, Contains, DefaultIfEmpty, SequenceEqual, SkipUntil, SkipWhile, TakeUntil, TakeWhile</li>\n<li>算术和集合操作：Average, Concat, Count, Max, Min, Reduce, Sum</li>\n<li>转换操作：To</li>\n<li>连接操作：Connect, Publish, RefCount, Replay</li>\n<li>反压操作：用于增加特殊的流程控制策略的操作符</li>\n</ul>\n<blockquote>\n<p>官方文档翻译版：<a href=\"https://mcxiaoke.gitbooks.io/rxdocs/content/Intro.html\">https://mcxiaoke.gitbooks.io/rxdocs/content/Intro.html</a></p>\n</blockquote>\n"},{"title":"RadioGroup、RadioButton动态创建并定制icon显示","date":"2016-10-25T02:24:00.000Z","_content":"由于原生的Radiobutton不能满足业务需求，所以需要自己定制icon图片，和默认选中某一项。需要自己代码动态实现。废话不多说，上代码：\n``` java\nprivate void setViewData() {\n        radioGroup.removeAllViews();\n\n        int margin = ScreenUtil.dip2px(this, 14.0f);\n        int marginLeft = ScreenUtil.dip2px(this, 20.0f);\n        int paddingLeft = ScreenUtil.dip2px(this, 3.0f);\n\n        RadioGroup.LayoutParams layoutParams = \n            new RadioGroup.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT);\n        RadioGroup.LayoutParams layoutParams1 = \n            new RadioGroup.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, 1);\n        layoutParams.setMargins(marginLeft, margin, margin, margin);\n        layoutParams1.setMargins(margin, 0, margin, 0);\n\n        int defaultId = -1;\n        for (int i = 0; i < messageList.size(); i++) {\n            RadioButton rb = new RadioButton(this);\n            rb.setMaxLines(2);\n            rb.setPadding(paddingLeft, 0, 0, 0);\n            rb.setText(messageList.get(i).relayMessage);\n            rb.setButtonDrawable(android.R.color.transparent);\n            rb.setTextColor(Color.parseColor(\"#555555\"));\n            rb.setButtonDrawable(null);// 去掉左边默认图标\n            rb.setCompoundDrawablePadding(margin);\n            rb.setEllipsize(TextUtils.TruncateAt.END);// 结尾处打点显示\n            Drawable drawable = getResources().getDrawable(R.drawable.relay_message_radio_selector);\n            drawable.setBounds(0, 0, drawable.getMinimumWidth(), drawable.getMinimumHeight());\n            rb.setCompoundDrawables(drawable, null, null, null);\n            // 手动生成id\n            int generateId = generateViewId();\n            messages.put(generateId, messageList.get(i).relayMessage);\n            rb.setId(generateId);\n            if (i == 0) {\n                defaultId = generateId;\n            }\n\n            TextView view = new TextView(this);\n            view.setBackgroundColor(Color.parseColor(\"#dddddd\"));\n\n            radioGroup.addView(rb, layoutParams);\n            radioGroup.addView(view, layoutParams1);\n        }\n        // 此处：默认选中第一个\n        radioGroup.check(defaultId);\n    }\n```\nR.drawable.relay_message_radio_selector 代码如下：\n\n``` xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<selector xmlns:android=\"http://schemas.android.com/apk/res/android\">\n    <!--设置自己的图片icon-->\n    <item android:drawable=\"@drawable/relay_radio_unchecked\" \n        android:state_checked=\"false\" />\n    <item android:drawable=\"@drawable/relay_radio_checked\" \n        android:state_checked=\"true\" />\n</selector>\n```\n\n效果如下图：\n\n![](http://7xr1vo.com1.z0.glb.clouddn.com/%E9%80%89%E6%8B%A9.png)","source":"_posts/RadioGroup、RadioButton动态创建并定制icon显示.md","raw":"---\ntitle: RadioGroup、RadioButton动态创建并定制icon显示\ndate: 2016-10-25 10:24\ncategories: Android\ntags: Radiobutton\n---\n由于原生的Radiobutton不能满足业务需求，所以需要自己定制icon图片，和默认选中某一项。需要自己代码动态实现。废话不多说，上代码：\n``` java\nprivate void setViewData() {\n        radioGroup.removeAllViews();\n\n        int margin = ScreenUtil.dip2px(this, 14.0f);\n        int marginLeft = ScreenUtil.dip2px(this, 20.0f);\n        int paddingLeft = ScreenUtil.dip2px(this, 3.0f);\n\n        RadioGroup.LayoutParams layoutParams = \n            new RadioGroup.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT);\n        RadioGroup.LayoutParams layoutParams1 = \n            new RadioGroup.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, 1);\n        layoutParams.setMargins(marginLeft, margin, margin, margin);\n        layoutParams1.setMargins(margin, 0, margin, 0);\n\n        int defaultId = -1;\n        for (int i = 0; i < messageList.size(); i++) {\n            RadioButton rb = new RadioButton(this);\n            rb.setMaxLines(2);\n            rb.setPadding(paddingLeft, 0, 0, 0);\n            rb.setText(messageList.get(i).relayMessage);\n            rb.setButtonDrawable(android.R.color.transparent);\n            rb.setTextColor(Color.parseColor(\"#555555\"));\n            rb.setButtonDrawable(null);// 去掉左边默认图标\n            rb.setCompoundDrawablePadding(margin);\n            rb.setEllipsize(TextUtils.TruncateAt.END);// 结尾处打点显示\n            Drawable drawable = getResources().getDrawable(R.drawable.relay_message_radio_selector);\n            drawable.setBounds(0, 0, drawable.getMinimumWidth(), drawable.getMinimumHeight());\n            rb.setCompoundDrawables(drawable, null, null, null);\n            // 手动生成id\n            int generateId = generateViewId();\n            messages.put(generateId, messageList.get(i).relayMessage);\n            rb.setId(generateId);\n            if (i == 0) {\n                defaultId = generateId;\n            }\n\n            TextView view = new TextView(this);\n            view.setBackgroundColor(Color.parseColor(\"#dddddd\"));\n\n            radioGroup.addView(rb, layoutParams);\n            radioGroup.addView(view, layoutParams1);\n        }\n        // 此处：默认选中第一个\n        radioGroup.check(defaultId);\n    }\n```\nR.drawable.relay_message_radio_selector 代码如下：\n\n``` xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<selector xmlns:android=\"http://schemas.android.com/apk/res/android\">\n    <!--设置自己的图片icon-->\n    <item android:drawable=\"@drawable/relay_radio_unchecked\" \n        android:state_checked=\"false\" />\n    <item android:drawable=\"@drawable/relay_radio_checked\" \n        android:state_checked=\"true\" />\n</selector>\n```\n\n效果如下图：\n\n![](http://7xr1vo.com1.z0.glb.clouddn.com/%E9%80%89%E6%8B%A9.png)","slug":"RadioGroup、RadioButton动态创建并定制icon显示","published":1,"updated":"2017-02-08T11:57:56.000Z","_id":"ciwvuocsm000kf0v7k80ga9kb","comments":1,"layout":"post","photos":[],"link":"","content":"<p>由于原生的Radiobutton不能满足业务需求，所以需要自己定制icon图片，和默认选中某一项。需要自己代码动态实现。废话不多说，上代码：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">setViewData</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        radioGroup.removeAllViews();</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">int</span> margin = ScreenUtil.dip2px(<span class=\"keyword\">this</span>, <span class=\"number\">14.0f</span>);</div><div class=\"line\">        <span class=\"keyword\">int</span> marginLeft = ScreenUtil.dip2px(<span class=\"keyword\">this</span>, <span class=\"number\">20.0f</span>);</div><div class=\"line\">        <span class=\"keyword\">int</span> paddingLeft = ScreenUtil.dip2px(<span class=\"keyword\">this</span>, <span class=\"number\">3.0f</span>);</div><div class=\"line\"></div><div class=\"line\">        RadioGroup.LayoutParams layoutParams = </div><div class=\"line\">            <span class=\"keyword\">new</span> RadioGroup.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT);</div><div class=\"line\">        RadioGroup.LayoutParams layoutParams1 = </div><div class=\"line\">            <span class=\"keyword\">new</span> RadioGroup.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, <span class=\"number\">1</span>);</div><div class=\"line\">        layoutParams.setMargins(marginLeft, margin, margin, margin);</div><div class=\"line\">        layoutParams1.setMargins(margin, <span class=\"number\">0</span>, margin, <span class=\"number\">0</span>);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">int</span> defaultId = -<span class=\"number\">1</span>;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; messageList.size(); i++) &#123;</div><div class=\"line\">            RadioButton rb = <span class=\"keyword\">new</span> RadioButton(<span class=\"keyword\">this</span>);</div><div class=\"line\">            rb.setMaxLines(<span class=\"number\">2</span>);</div><div class=\"line\">            rb.setPadding(paddingLeft, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</div><div class=\"line\">            rb.setText(messageList.get(i).relayMessage);</div><div class=\"line\">            rb.setButtonDrawable(android.R.color.transparent);</div><div class=\"line\">            rb.setTextColor(Color.parseColor(<span class=\"string\">\"#555555\"</span>));</div><div class=\"line\">            rb.setButtonDrawable(<span class=\"keyword\">null</span>);<span class=\"comment\">// 去掉左边默认图标</span></div><div class=\"line\">            rb.setCompoundDrawablePadding(margin);</div><div class=\"line\">            rb.setEllipsize(TextUtils.TruncateAt.END);<span class=\"comment\">// 结尾处打点显示</span></div><div class=\"line\">            Drawable drawable = getResources().getDrawable(R.drawable.relay_message_radio_selector);</div><div class=\"line\">            drawable.setBounds(<span class=\"number\">0</span>, <span class=\"number\">0</span>, drawable.getMinimumWidth(), drawable.getMinimumHeight());</div><div class=\"line\">            rb.setCompoundDrawables(drawable, <span class=\"keyword\">null</span>, <span class=\"keyword\">null</span>, <span class=\"keyword\">null</span>);</div><div class=\"line\">            <span class=\"comment\">// 手动生成id</span></div><div class=\"line\">            <span class=\"keyword\">int</span> generateId = generateViewId();</div><div class=\"line\">            messages.put(generateId, messageList.get(i).relayMessage);</div><div class=\"line\">            rb.setId(generateId);</div><div class=\"line\">            <span class=\"keyword\">if</span> (i == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                defaultId = generateId;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            TextView view = <span class=\"keyword\">new</span> TextView(<span class=\"keyword\">this</span>);</div><div class=\"line\">            view.setBackgroundColor(Color.parseColor(<span class=\"string\">\"#dddddd\"</span>));</div><div class=\"line\"></div><div class=\"line\">            radioGroup.addView(rb, layoutParams);</div><div class=\"line\">            radioGroup.addView(view, layoutParams1);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"comment\">// 此处：默认选中第一个</span></div><div class=\"line\">        radioGroup.check(defaultId);</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure></p>\n<p>R.drawable.relay_message_radio_selector 代码如下：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">selector</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!--设置自己的图片icon--&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">android:drawable</span>=<span class=\"string\">\"@drawable/relay_radio_unchecked\"</span> </span></div><div class=\"line\">        <span class=\"attr\">android:state_checked</span>=<span class=\"string\">\"false\"</span> /&gt;</div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">android:drawable</span>=<span class=\"string\">\"@drawable/relay_radio_checked\"</span> </span></div><div class=\"line\">        <span class=\"attr\">android:state_checked</span>=<span class=\"string\">\"true\"</span> /&gt;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">selector</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>效果如下图：</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/%E9%80%89%E6%8B%A9.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>","excerpt":"","more":"<p>由于原生的Radiobutton不能满足业务需求，所以需要自己定制icon图片，和默认选中某一项。需要自己代码动态实现。废话不多说，上代码：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">setViewData</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        radioGroup.removeAllViews();</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">int</span> margin = ScreenUtil.dip2px(<span class=\"keyword\">this</span>, <span class=\"number\">14.0f</span>);</div><div class=\"line\">        <span class=\"keyword\">int</span> marginLeft = ScreenUtil.dip2px(<span class=\"keyword\">this</span>, <span class=\"number\">20.0f</span>);</div><div class=\"line\">        <span class=\"keyword\">int</span> paddingLeft = ScreenUtil.dip2px(<span class=\"keyword\">this</span>, <span class=\"number\">3.0f</span>);</div><div class=\"line\"></div><div class=\"line\">        RadioGroup.LayoutParams layoutParams = </div><div class=\"line\">            <span class=\"keyword\">new</span> RadioGroup.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT);</div><div class=\"line\">        RadioGroup.LayoutParams layoutParams1 = </div><div class=\"line\">            <span class=\"keyword\">new</span> RadioGroup.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, <span class=\"number\">1</span>);</div><div class=\"line\">        layoutParams.setMargins(marginLeft, margin, margin, margin);</div><div class=\"line\">        layoutParams1.setMargins(margin, <span class=\"number\">0</span>, margin, <span class=\"number\">0</span>);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">int</span> defaultId = -<span class=\"number\">1</span>;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; messageList.size(); i++) &#123;</div><div class=\"line\">            RadioButton rb = <span class=\"keyword\">new</span> RadioButton(<span class=\"keyword\">this</span>);</div><div class=\"line\">            rb.setMaxLines(<span class=\"number\">2</span>);</div><div class=\"line\">            rb.setPadding(paddingLeft, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</div><div class=\"line\">            rb.setText(messageList.get(i).relayMessage);</div><div class=\"line\">            rb.setButtonDrawable(android.R.color.transparent);</div><div class=\"line\">            rb.setTextColor(Color.parseColor(<span class=\"string\">\"#555555\"</span>));</div><div class=\"line\">            rb.setButtonDrawable(<span class=\"keyword\">null</span>);<span class=\"comment\">// 去掉左边默认图标</span></div><div class=\"line\">            rb.setCompoundDrawablePadding(margin);</div><div class=\"line\">            rb.setEllipsize(TextUtils.TruncateAt.END);<span class=\"comment\">// 结尾处打点显示</span></div><div class=\"line\">            Drawable drawable = getResources().getDrawable(R.drawable.relay_message_radio_selector);</div><div class=\"line\">            drawable.setBounds(<span class=\"number\">0</span>, <span class=\"number\">0</span>, drawable.getMinimumWidth(), drawable.getMinimumHeight());</div><div class=\"line\">            rb.setCompoundDrawables(drawable, <span class=\"keyword\">null</span>, <span class=\"keyword\">null</span>, <span class=\"keyword\">null</span>);</div><div class=\"line\">            <span class=\"comment\">// 手动生成id</span></div><div class=\"line\">            <span class=\"keyword\">int</span> generateId = generateViewId();</div><div class=\"line\">            messages.put(generateId, messageList.get(i).relayMessage);</div><div class=\"line\">            rb.setId(generateId);</div><div class=\"line\">            <span class=\"keyword\">if</span> (i == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                defaultId = generateId;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            TextView view = <span class=\"keyword\">new</span> TextView(<span class=\"keyword\">this</span>);</div><div class=\"line\">            view.setBackgroundColor(Color.parseColor(<span class=\"string\">\"#dddddd\"</span>));</div><div class=\"line\"></div><div class=\"line\">            radioGroup.addView(rb, layoutParams);</div><div class=\"line\">            radioGroup.addView(view, layoutParams1);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"comment\">// 此处：默认选中第一个</span></div><div class=\"line\">        radioGroup.check(defaultId);</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure></p>\n<p>R.drawable.relay_message_radio_selector 代码如下：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">selector</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!--设置自己的图片icon--&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">android:drawable</span>=<span class=\"string\">\"@drawable/relay_radio_unchecked\"</span> </div><div class=\"line\">        <span class=\"attr\">android:state_checked</span>=<span class=\"string\">\"false\"</span> /&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">android:drawable</span>=<span class=\"string\">\"@drawable/relay_radio_checked\"</span> </div><div class=\"line\">        <span class=\"attr\">android:state_checked</span>=<span class=\"string\">\"true\"</span> /&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">selector</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>效果如下图：</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/%E9%80%89%E6%8B%A9.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>"},{"title":"Gradle相关配置","date":"2016-09-09T02:36:00.000Z","_content":"``` gradle\nandroid {\n    compileSdkVersion 24\n    buildToolsVersion \"24.0.0\"\n\n    defaultConfig {\n        applicationId \"com.geng.hello\"\n        minSdkVersion 19\n        targetSdkVersion 24\n        versionCode 1\n        versionName \"1.0\"\n        // 在buildConfig.java中自动配置常量字段\n        buildConfigField('String', \"API_DEBUG_URL\", '\"http://test.baidu.com\"')\n\n        // 开启multidex,突破64k\n        multiDexEnabled true\n\n        // ndk cpu架构，生成相应的so包\n        ndk{\n            abiFilter 'armeabi', 'x86', 'armeabi-v7a', 'x86_64', 'arm64-v8a'\n        }\n    }\n\n    // 渠道\n    productFlavors {\n    }\n\n    signingConfigs {\n        relase {\n            storeFile file(\"relase.keystore\")\n            keyAlias \"relase\"\n            keyPassword \"123456\"\n            storePassword \"123456\"\n        }\n        debug {\n        }\n    }\n\n    buildTypes {\n        release {\n            // 混淆开启\n            minifyEnabled true\n            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'\n        }\n        debug {\n            minifyEnabled false\n            // 4byte对齐，加快解析效率\n            zipAlignEnabled true\n            // 移除无用的资源文件\n            shrinkResources true\n            // 更改包名\n            applicationVariants.all { variant ->\n                variant.outputs.each { output ->\n                    output.outputFile = new File(output.outputFile.parent,\n                            \"debug_\" + buildTime() + \".apk\")\n                }\n            }\n        }\n    }\n\n}\n\ndependencies {\n    compile fileTree(dir: 'libs', include: ['*.jar'])\n    testCompile 'junit:junit:4.12'\n    compile 'com.android.support:appcompat-v7:24.0.0'\n}\n\n\n\n// --------------------------------gradle.properties配置------------------------------\n\n// 加速构建速度\norg.gradle.daemon=true\norg.gradle.parallel=true\norg.gradle.jvmargs=-Xmx2048m\n\n// 使用ndk配置\nandroid.useDeprecatedNdk=true\n\n\n// 其他：\n1.查看 keystore 文件的签名信息：\n\n在keystore所在目录下，打开cmd:\nkeytool -list -v -keystore keystore文件名\n\n再根据提示，输入storepassword即可查看\n\n2.混淆：\nhttps://segmentfault.com/a/1190000004461614\nhttp://www.mayflyask.org/question/247\n```","source":"_posts/Gradle相关配置.md","raw":"---\ntitle: Gradle相关配置\ndate: 2016-09-09 10:36\ncategories: Android \ntags: Gradle\n---\n``` gradle\nandroid {\n    compileSdkVersion 24\n    buildToolsVersion \"24.0.0\"\n\n    defaultConfig {\n        applicationId \"com.geng.hello\"\n        minSdkVersion 19\n        targetSdkVersion 24\n        versionCode 1\n        versionName \"1.0\"\n        // 在buildConfig.java中自动配置常量字段\n        buildConfigField('String', \"API_DEBUG_URL\", '\"http://test.baidu.com\"')\n\n        // 开启multidex,突破64k\n        multiDexEnabled true\n\n        // ndk cpu架构，生成相应的so包\n        ndk{\n            abiFilter 'armeabi', 'x86', 'armeabi-v7a', 'x86_64', 'arm64-v8a'\n        }\n    }\n\n    // 渠道\n    productFlavors {\n    }\n\n    signingConfigs {\n        relase {\n            storeFile file(\"relase.keystore\")\n            keyAlias \"relase\"\n            keyPassword \"123456\"\n            storePassword \"123456\"\n        }\n        debug {\n        }\n    }\n\n    buildTypes {\n        release {\n            // 混淆开启\n            minifyEnabled true\n            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'\n        }\n        debug {\n            minifyEnabled false\n            // 4byte对齐，加快解析效率\n            zipAlignEnabled true\n            // 移除无用的资源文件\n            shrinkResources true\n            // 更改包名\n            applicationVariants.all { variant ->\n                variant.outputs.each { output ->\n                    output.outputFile = new File(output.outputFile.parent,\n                            \"debug_\" + buildTime() + \".apk\")\n                }\n            }\n        }\n    }\n\n}\n\ndependencies {\n    compile fileTree(dir: 'libs', include: ['*.jar'])\n    testCompile 'junit:junit:4.12'\n    compile 'com.android.support:appcompat-v7:24.0.0'\n}\n\n\n\n// --------------------------------gradle.properties配置------------------------------\n\n// 加速构建速度\norg.gradle.daemon=true\norg.gradle.parallel=true\norg.gradle.jvmargs=-Xmx2048m\n\n// 使用ndk配置\nandroid.useDeprecatedNdk=true\n\n\n// 其他：\n1.查看 keystore 文件的签名信息：\n\n在keystore所在目录下，打开cmd:\nkeytool -list -v -keystore keystore文件名\n\n再根据提示，输入storepassword即可查看\n\n2.混淆：\nhttps://segmentfault.com/a/1190000004461614\nhttp://www.mayflyask.org/question/247\n```","slug":"Gradle相关配置","published":1,"updated":"2017-02-08T11:57:07.000Z","_id":"ciwvuocsr000of0v7v5dwv489","comments":1,"layout":"post","photos":[],"link":"","content":"<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div></pre></td><td class=\"code\"><pre><div class=\"line\">android &#123;</div><div class=\"line\">    compileSdkVersion <span class=\"number\">24</span></div><div class=\"line\">    buildToolsVersion <span class=\"string\">\"24.0.0\"</span></div><div class=\"line\"></div><div class=\"line\">    defaultConfig &#123;</div><div class=\"line\">        applicationId <span class=\"string\">\"com.geng.hello\"</span></div><div class=\"line\">        minSdkVersion <span class=\"number\">19</span></div><div class=\"line\">        targetSdkVersion <span class=\"number\">24</span></div><div class=\"line\">        versionCode <span class=\"number\">1</span></div><div class=\"line\">        versionName <span class=\"string\">\"1.0\"</span></div><div class=\"line\">        <span class=\"comment\">// 在buildConfig.java中自动配置常量字段</span></div><div class=\"line\">        buildConfigField(<span class=\"string\">'String'</span>, <span class=\"string\">\"API_DEBUG_URL\"</span>, <span class=\"string\">'\"http://test.baidu.com\"'</span>)</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// 开启multidex,突破64k</span></div><div class=\"line\">        multiDexEnabled <span class=\"keyword\">true</span></div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// ndk cpu架构，生成相应的so包</span></div><div class=\"line\">        ndk&#123;</div><div class=\"line\">            abiFilter <span class=\"string\">'armeabi'</span>, <span class=\"string\">'x86'</span>, <span class=\"string\">'armeabi-v7a'</span>, <span class=\"string\">'x86_64'</span>, <span class=\"string\">'arm64-v8a'</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 渠道</span></div><div class=\"line\">    productFlavors &#123;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    signingConfigs &#123;</div><div class=\"line\">        relase &#123;</div><div class=\"line\">            storeFile <span class=\"keyword\">file</span>(<span class=\"string\">\"relase.keystore\"</span>)</div><div class=\"line\">            keyAlias <span class=\"string\">\"relase\"</span></div><div class=\"line\">            keyPassword <span class=\"string\">\"123456\"</span></div><div class=\"line\">            storePassword <span class=\"string\">\"123456\"</span></div><div class=\"line\">        &#125;</div><div class=\"line\">        debug &#123;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    buildTypes &#123;</div><div class=\"line\">        release &#123;</div><div class=\"line\">            <span class=\"comment\">// 混淆开启</span></div><div class=\"line\">            minifyEnabled <span class=\"keyword\">true</span></div><div class=\"line\">            proguardFiles getDefaultProguardFile(<span class=\"string\">'proguard-android.txt'</span>), <span class=\"string\">'proguard-rules.pro'</span></div><div class=\"line\">        &#125;</div><div class=\"line\">        debug &#123;</div><div class=\"line\">            minifyEnabled <span class=\"keyword\">false</span></div><div class=\"line\">            <span class=\"comment\">// 4byte对齐，加快解析效率</span></div><div class=\"line\">            zipAlignEnabled <span class=\"keyword\">true</span></div><div class=\"line\">            <span class=\"comment\">// 移除无用的资源文件</span></div><div class=\"line\">            shrinkResources <span class=\"keyword\">true</span></div><div class=\"line\">            <span class=\"comment\">// 更改包名</span></div><div class=\"line\">            applicationVariants.all &#123; variant -&gt;</div><div class=\"line\">                variant.outputs.<span class=\"keyword\">each</span> &#123; output -&gt;</div><div class=\"line\">                    output.outputFile = <span class=\"keyword\">new</span> <span class=\"keyword\">File</span>(output.outputFile.parent,</div><div class=\"line\">                            <span class=\"string\">\"debug_\"</span> + buildTime() + <span class=\"string\">\".apk\"</span>)</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">dependencies</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">compile</span> <span class=\"keyword\">fileTree</span>(dir: <span class=\"string\">'libs'</span>, <span class=\"keyword\">include</span>: [<span class=\"string\">'*.jar'</span>])</div><div class=\"line\">    testCompile <span class=\"string\">'junit:junit:4.12'</span></div><div class=\"line\">    <span class=\"keyword\">compile</span> <span class=\"string\">'com.android.support:appcompat-v7:24.0.0'</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// --------------------------------gradle.properties配置------------------------------</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 加速构建速度</span></div><div class=\"line\">org.gradle.daemon=<span class=\"keyword\">true</span></div><div class=\"line\">org.gradle.parallel=<span class=\"keyword\">true</span></div><div class=\"line\">org.gradle.jvmargs=-Xmx2048m</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 使用ndk配置</span></div><div class=\"line\">android.useDeprecatedNdk=<span class=\"keyword\">true</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 其他：</span></div><div class=\"line\"><span class=\"number\">1</span>.查看 keystore 文件的签名信息：</div><div class=\"line\"></div><div class=\"line\">在keystore所在目录下，打开cmd:</div><div class=\"line\">keytool -list -v -keystore keystore文件名</div><div class=\"line\"></div><div class=\"line\">再根据提示，输入storepassword即可查看</div><div class=\"line\"></div><div class=\"line\"><span class=\"number\">2</span>.混淆：</div><div class=\"line\">https:<span class=\"comment\">//segmentfault.com/a/1190000004461614</span></div><div class=\"line\">http:<span class=\"comment\">//www.mayflyask.org/question/247</span></div></pre></td></tr></table></figure>","excerpt":"","more":"<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div></pre></td><td class=\"code\"><pre><div class=\"line\">android &#123;</div><div class=\"line\">    compileSdkVersion <span class=\"number\">24</span></div><div class=\"line\">    buildToolsVersion <span class=\"string\">\"24.0.0\"</span></div><div class=\"line\"></div><div class=\"line\">    defaultConfig &#123;</div><div class=\"line\">        applicationId <span class=\"string\">\"com.geng.hello\"</span></div><div class=\"line\">        minSdkVersion <span class=\"number\">19</span></div><div class=\"line\">        targetSdkVersion <span class=\"number\">24</span></div><div class=\"line\">        versionCode <span class=\"number\">1</span></div><div class=\"line\">        versionName <span class=\"string\">\"1.0\"</span></div><div class=\"line\">        <span class=\"comment\">// 在buildConfig.java中自动配置常量字段</span></div><div class=\"line\">        buildConfigField(<span class=\"string\">'String'</span>, <span class=\"string\">\"API_DEBUG_URL\"</span>, <span class=\"string\">'\"http://test.baidu.com\"'</span>)</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// 开启multidex,突破64k</span></div><div class=\"line\">        multiDexEnabled <span class=\"keyword\">true</span></div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// ndk cpu架构，生成相应的so包</span></div><div class=\"line\">        ndk&#123;</div><div class=\"line\">            abiFilter <span class=\"string\">'armeabi'</span>, <span class=\"string\">'x86'</span>, <span class=\"string\">'armeabi-v7a'</span>, <span class=\"string\">'x86_64'</span>, <span class=\"string\">'arm64-v8a'</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 渠道</span></div><div class=\"line\">    productFlavors &#123;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    signingConfigs &#123;</div><div class=\"line\">        relase &#123;</div><div class=\"line\">            storeFile <span class=\"keyword\">file</span>(<span class=\"string\">\"relase.keystore\"</span>)</div><div class=\"line\">            keyAlias <span class=\"string\">\"relase\"</span></div><div class=\"line\">            keyPassword <span class=\"string\">\"123456\"</span></div><div class=\"line\">            storePassword <span class=\"string\">\"123456\"</span></div><div class=\"line\">        &#125;</div><div class=\"line\">        debug &#123;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    buildTypes &#123;</div><div class=\"line\">        release &#123;</div><div class=\"line\">            <span class=\"comment\">// 混淆开启</span></div><div class=\"line\">            minifyEnabled <span class=\"keyword\">true</span></div><div class=\"line\">            proguardFiles getDefaultProguardFile(<span class=\"string\">'proguard-android.txt'</span>), <span class=\"string\">'proguard-rules.pro'</span></div><div class=\"line\">        &#125;</div><div class=\"line\">        debug &#123;</div><div class=\"line\">            minifyEnabled <span class=\"keyword\">false</span></div><div class=\"line\">            <span class=\"comment\">// 4byte对齐，加快解析效率</span></div><div class=\"line\">            zipAlignEnabled <span class=\"keyword\">true</span></div><div class=\"line\">            <span class=\"comment\">// 移除无用的资源文件</span></div><div class=\"line\">            shrinkResources <span class=\"keyword\">true</span></div><div class=\"line\">            <span class=\"comment\">// 更改包名</span></div><div class=\"line\">            applicationVariants.all &#123; variant -&gt;</div><div class=\"line\">                variant.outputs.<span class=\"keyword\">each</span> &#123; output -&gt;</div><div class=\"line\">                    output.outputFile = <span class=\"keyword\">new</span> <span class=\"keyword\">File</span>(output.outputFile.parent,</div><div class=\"line\">                            <span class=\"string\">\"debug_\"</span> + buildTime() + <span class=\"string\">\".apk\"</span>)</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">dependencies</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">compile</span> <span class=\"keyword\">fileTree</span>(dir: <span class=\"string\">'libs'</span>, <span class=\"keyword\">include</span>: [<span class=\"string\">'*.jar'</span>])</div><div class=\"line\">    testCompile <span class=\"string\">'junit:junit:4.12'</span></div><div class=\"line\">    <span class=\"keyword\">compile</span> <span class=\"string\">'com.android.support:appcompat-v7:24.0.0'</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// --------------------------------gradle.properties配置------------------------------</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 加速构建速度</span></div><div class=\"line\">org.gradle.daemon=<span class=\"keyword\">true</span></div><div class=\"line\">org.gradle.parallel=<span class=\"keyword\">true</span></div><div class=\"line\">org.gradle.jvmargs=-Xmx2048m</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 使用ndk配置</span></div><div class=\"line\">android.useDeprecatedNdk=<span class=\"keyword\">true</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 其他：</span></div><div class=\"line\"><span class=\"number\">1</span>.查看 keystore 文件的签名信息：</div><div class=\"line\"></div><div class=\"line\">在keystore所在目录下，打开cmd:</div><div class=\"line\">keytool -list -v -keystore keystore文件名</div><div class=\"line\"></div><div class=\"line\">再根据提示，输入storepassword即可查看</div><div class=\"line\"></div><div class=\"line\"><span class=\"number\">2</span>.混淆：</div><div class=\"line\">https:<span class=\"comment\">//segmentfault.com/a/1190000004461614</span></div><div class=\"line\">http:<span class=\"comment\">//www.mayflyask.org/question/247</span></div></pre></td></tr></table></figure>"},{"title":"instant run 相关分析","date":"2016-12-17T05:00:00.000Z","_content":"Android Studio 2.0 引入了即时编译功能：instant run，一定程度上进行了增量编译、增量更新代码，节省了开发耗时（喝咖啡的时间）。\n下面具体分析下instant run相关工作流程和相关的源码\n\n### instant run 使用\n#### 版本要求\nGradle 2.0 以上\nbuild.gradle：minSdkVersion 15 以上（设置21以上可获得最佳性能）\nAndroid 5.0以上的手机或模拟器\n\n#### 使用\n首先确认开启instant run，在settings中搜索instant run，可看到相关设置，默认instant run功能是开启的\n![](http://7xr1vo.com1.z0.glb.clouddn.com/Image.png)\n\n当第一次点击 run 按钮 ![](http://7xr1vo.com1.z0.glb.clouddn.com/Image1.png)，进行第一次编译打包。\napk成功安装之后，再观察工具栏，run按钮发生了变化：![](http://7xr1vo.com1.z0.glb.clouddn.com/Image2.png)\n\n然后我们随意修改一部分代码，点击运行，可看到手机屏幕上弹出toast，提示代码已经改变了，可看到最新的运行效果。使用起来也比较方便、快捷。\n\n#### 更新方式\n * 热交换 hot swap\n更改现有方法的实现代码；不会重新初始化正在运行的app，不要做重启app，activity的操作，即可看到最新代码运行结果\n * 温交换 warm swap\n更改或移除当前的资源；activity会自动重启（小闪烁），即可看到最新运行结果\n * 冷交换 cold swap\n 对代码有结构性的更改（字段更改、类继承关系、清单文件更改）；此时会重启app\n\n![](http://7xr1vo.com1.z0.glb.clouddn.com/1-Y-gIucAGyqQscMdXuHaSiA.png)\n\n参考：\nhttps://developer.android.com/studio/run/index.html?hl=zh-cn\nhttps://medium.com/google-developers/instant-run-how-does-it-work-294a1633367f#.go1u6yq2o\n\n### 过程分析\n#### 第一次打包\ninstant run 第一次编译打包流程，会执行下面的工作\n![](http://7xr1vo.com1.z0.glb.clouddn.com/1-U2tXGUWaeDU7L3u9Z_U0fw.png)\n\n先来看看生成的apk：\n![](http://7xr1vo.com1.z0.glb.clouddn.com/instant%20run%20apk.png)\n \n 多出了 instant-run.zip文件，那它里面是什么内容呢？\n ![](http://7xr1vo.com1.z0.glb.clouddn.com/instant%20run%20zip%20class.png)\n instant-run.zip里的dex文件，是我们真正的业务代码\n\n 那instant run 相关的类呢，反而跑到了外层的classes.dex和classes2.dex中。\n \n![](http://7xr1vo.com1.z0.glb.clouddn.com/%E6%97%A0%E6%A0%87%E9%A2%98.png)\n![](http://7xr1vo.com1.z0.glb.clouddn.com/instant%20run%20%E7%9B%B8%E5%85%B3jar.png)\n\n实际上这2个dex中的内容是instant-run.jar和instant-run-bootstrap.jar 的内容（自己可反编译出来看看）：\n\n**就是说，第一次运行打包时候，是将 instant-run.jar 和 instant-run-bootstrap.jar 2个jar 变成 2个dex文件，真正的业务代码编译后整合到别的dex中，然后放在了instant-run.zip中**\n> classes.dex  ->   instant-run.jar &nbsp;&nbsp;&nbsp;&nbsp; instant run 相关api类\n> classes2.dex  ->  instant-run-bootstrap.jar   &nbsp;&nbsp;  AppInfo.class\n\n再来看看清单文件，application 被替换成 BootstrapApplication：\n![](http://7xr1vo.com1.z0.glb.clouddn.com/instant%20run%20application.png)\n\n#### instant run 代码分析\n##### attachBaseContext() 中执行的三个步骤\n首先来观察下该类下的 attachBaseContext()方法，其中做了3个比较重要的事情：\ncreateResources() 、setupClassLoaders()、createRealApplication()\n\n* createResources() \n主要是判断资源resource.ap_是否改变，然后保存resource.ap_的路径到externalResourcePath中\n* setupClassLoaders()\n设置instant run 相关的classLoader，及其继承关系（PathClassLoader -> BootClassLoader   变为  PathClassLoader -> IncrementalClassLoader -> BootClassLoader）\n* createRealApplication()\n进行application 的相关替换，当前app的application变为realApplication；\n反射的方式拿到 真实的 Application，通过AppInfo相关字段进行获取\n\n\n下面我们分析一下setClassLoader详细过程：\n主要经历了以下的方法：\n![](http://7xr1vo.com1.z0.glb.clouddn.com/instant%20run%20%E8%AE%BE%E7%BD%AE%E7%88%B6classloader%E8%BF%87%E7%A8%8B.png)\n这几个ClassLoader类定义的逻辑关系如下：\n![](http://7xr1vo.com1.z0.glb.clouddn.com/instant-run%E7%9B%B8%E5%85%B3classLoader%E5%AE%9A%E4%B9%89.png)\nfindClass过程依次委托给 父ClassLoader，最后是让PathClassLoader去加载类\n\n##### onCreate() 过程\n* 通过MonkeyPatcher 替换当前的 application 为 realApplication\n包含ActivityThread中相应的Application 都替换成 realApplication\n* 替换相应的资源resource\n替换当前app的assetManager，资源相关的变量等等（期间都是用反射的方式）\n* Server 创建，建立Socket连接，开启连接\n\n##### Server 部署工作\n在Server 建立起连接后，三种部署工作（hot swap、warm swap、cold swap），都是通过Server进行操作。具体在那种情形下进行哪种交换，源码中有具体实现：\n\n``` java\nprivate int handlePatches(List<ApplicationPatch> paramList, boolean paramBoolean, int paramInt) {\n    if (paramBoolean) {\n        FileManager.startUpdate();\n    }\n    Iterator localIterator = paramList.iterator();\n    while (localIterator.hasNext()) {\n        Object localObject = (ApplicationPatch) localIterator.next();\n        String str = ((ApplicationPatch) localObject).getPath();\n        if (str.endsWith(\".dex\")) {// 冷交换\n            handleColdSwapPatch((ApplicationPatch) localObject);\n            int j = 0;\n            localObject = paramList.iterator();\n            do {\n                i = j;\n                if (!((Iterator) localObject).hasNext()) {\n                    break;\n                }\n            }\n            while (!((ApplicationPatch) ((Iterator) localObject).next()).getPath().equals(\"classes.dex.3\"));\n            int i = 1;\n            if (i == 0) {\n                paramInt = 3;\n            }\n        } else if (str.equals(\"classes.dex.3\")) {// 热交换\n            paramInt = handleHotSwapPatch(paramInt, (ApplicationPatch) localObject);\n        } else if (isResourcePath(str)) {// 资源：温交换\n            paramInt = handleResourcePatch(paramInt, (ApplicationPatch) localObject, str);\n        }\n    }\n    if (paramBoolean) {\n        FileManager.finishUpdate(true);\n    }\n    return paramInt;\n}\n```\n### 代码热更新流程\n在我们增加一行代码后，点击运行，我们来观察生成的类的变化\n在 build 目录下，transforms 中有生成相关的代码\n![](http://7xr1vo.com1.z0.glb.clouddn.com/instant-run%E6%9C%89%E4%BB%A3%E7%A0%81%E5%8F%98%E6%9B%B4%E6%97%B6%E6%96%B0%E7%94%9F%E6%88%90.png)\n\n#### 几个重要类\n我们来具体看看demo 中代码更改：MainActivity$override类内容的确是最新的代码内容\n![](http://7xr1vo.com1.z0.glb.clouddn.com/instant%20run%20%E5%A2%9E%E5%8A%A0%E7%9A%84%E4%BB%A3%E7%A0%81override%E7%B1%BB.png)\n\nAppPatchesLoaderImpl类记录了更改的类，存储在一个数组中，供类加载时候，替换成最新的类的代码内容\n![](http://7xr1vo.com1.z0.glb.clouddn.com/instant%20run%20%E5%8F%98%E5%8C%96%E7%9A%84%E7%B1%BB%E6%95%B0%E7%BB%84%E5%AD%98%E5%82%A8.png)\n\n![](http://7xr1vo.com1.z0.glb.clouddn.com/instant-run%20patch%E7%9B%B8%E5%85%B3.png)\n\n在此处，我反编译了slice_0-classes.dex：\n ![](http://7xr1vo.com1.z0.glb.clouddn.com/instant%20run%E7%AC%AC%E4%B8%80%E6%AC%A1%E6%89%93%E5%8C%85%E7%BB%93%E6%9E%9C.png)\n\n第一次运行打包生成的 “业务代码” 中，生成的类中的方法里都增加了 IncrementalChange 相关的判断，如果 $change 不为空，说明我们有更改的代码，有更改的代码，则执行最新更改的代码\n\n``` java\npublic Object access$dispatch(String paramString, Object... paramVarArgs) {\n        switch (paramString.hashCode()) {\n            case -833446436:\n                initView((MainActivity) paramVarArgs[0]);\n                return null;\n            case -641568046:\n                onCreate((MainActivity) paramVarArgs[0], (Bundle) paramVarArgs[1]);\n                return null;\n            case -399296056:\n                return init$args((MainActivity[]) paramVarArgs[0], (Object[]) paramVarArgs[1]);\n            case 781336394:\n                init$body((MainActivity) paramVarArgs[0], (Object[]) paramVarArgs[1]);\n                return null;\n            case 2118315029:\n                testClick((MainActivity) paramVarArgs[0], (View) paramVarArgs[1]);\n                return null;\n        }\n        throw new InstantReloadException(String.format(\"String switch could not find '%s' with hashcode %s in %s\", new Object[]{paramString, Integer.valueOf(paramString.hashCode()), \"com/geng/myapplication/MainActivity\"}));\n    }\n```\n最后根据不同的类型，进行相关的重启（activity 或者 app），主要由 Restarter负责，同时也提供了相关的重启方法：\n* restartActivity()\n* restartApp()\n\n<br>\n至此，整个 instant run 的分析告一段落，需要慢慢消化一下。。。\n\n<br>\n源码及工具资源：\nhttps://github.com/fenglincanyi/Study/tree/master/instant%20run%E7%9B%B8%E5%85%B3\n参考：\nhttps://github.com/nuptboyzhb/AndroidInstantRun\n","source":"_posts/instant run 相关分析.md","raw":"---\ntitle: instant run 相关分析\ndate: 2016-12-17 13:00\ncategories: Android\ntags: instant run\n---\nAndroid Studio 2.0 引入了即时编译功能：instant run，一定程度上进行了增量编译、增量更新代码，节省了开发耗时（喝咖啡的时间）。\n下面具体分析下instant run相关工作流程和相关的源码\n\n### instant run 使用\n#### 版本要求\nGradle 2.0 以上\nbuild.gradle：minSdkVersion 15 以上（设置21以上可获得最佳性能）\nAndroid 5.0以上的手机或模拟器\n\n#### 使用\n首先确认开启instant run，在settings中搜索instant run，可看到相关设置，默认instant run功能是开启的\n![](http://7xr1vo.com1.z0.glb.clouddn.com/Image.png)\n\n当第一次点击 run 按钮 ![](http://7xr1vo.com1.z0.glb.clouddn.com/Image1.png)，进行第一次编译打包。\napk成功安装之后，再观察工具栏，run按钮发生了变化：![](http://7xr1vo.com1.z0.glb.clouddn.com/Image2.png)\n\n然后我们随意修改一部分代码，点击运行，可看到手机屏幕上弹出toast，提示代码已经改变了，可看到最新的运行效果。使用起来也比较方便、快捷。\n\n#### 更新方式\n * 热交换 hot swap\n更改现有方法的实现代码；不会重新初始化正在运行的app，不要做重启app，activity的操作，即可看到最新代码运行结果\n * 温交换 warm swap\n更改或移除当前的资源；activity会自动重启（小闪烁），即可看到最新运行结果\n * 冷交换 cold swap\n 对代码有结构性的更改（字段更改、类继承关系、清单文件更改）；此时会重启app\n\n![](http://7xr1vo.com1.z0.glb.clouddn.com/1-Y-gIucAGyqQscMdXuHaSiA.png)\n\n参考：\nhttps://developer.android.com/studio/run/index.html?hl=zh-cn\nhttps://medium.com/google-developers/instant-run-how-does-it-work-294a1633367f#.go1u6yq2o\n\n### 过程分析\n#### 第一次打包\ninstant run 第一次编译打包流程，会执行下面的工作\n![](http://7xr1vo.com1.z0.glb.clouddn.com/1-U2tXGUWaeDU7L3u9Z_U0fw.png)\n\n先来看看生成的apk：\n![](http://7xr1vo.com1.z0.glb.clouddn.com/instant%20run%20apk.png)\n \n 多出了 instant-run.zip文件，那它里面是什么内容呢？\n ![](http://7xr1vo.com1.z0.glb.clouddn.com/instant%20run%20zip%20class.png)\n instant-run.zip里的dex文件，是我们真正的业务代码\n\n 那instant run 相关的类呢，反而跑到了外层的classes.dex和classes2.dex中。\n \n![](http://7xr1vo.com1.z0.glb.clouddn.com/%E6%97%A0%E6%A0%87%E9%A2%98.png)\n![](http://7xr1vo.com1.z0.glb.clouddn.com/instant%20run%20%E7%9B%B8%E5%85%B3jar.png)\n\n实际上这2个dex中的内容是instant-run.jar和instant-run-bootstrap.jar 的内容（自己可反编译出来看看）：\n\n**就是说，第一次运行打包时候，是将 instant-run.jar 和 instant-run-bootstrap.jar 2个jar 变成 2个dex文件，真正的业务代码编译后整合到别的dex中，然后放在了instant-run.zip中**\n> classes.dex  ->   instant-run.jar &nbsp;&nbsp;&nbsp;&nbsp; instant run 相关api类\n> classes2.dex  ->  instant-run-bootstrap.jar   &nbsp;&nbsp;  AppInfo.class\n\n再来看看清单文件，application 被替换成 BootstrapApplication：\n![](http://7xr1vo.com1.z0.glb.clouddn.com/instant%20run%20application.png)\n\n#### instant run 代码分析\n##### attachBaseContext() 中执行的三个步骤\n首先来观察下该类下的 attachBaseContext()方法，其中做了3个比较重要的事情：\ncreateResources() 、setupClassLoaders()、createRealApplication()\n\n* createResources() \n主要是判断资源resource.ap_是否改变，然后保存resource.ap_的路径到externalResourcePath中\n* setupClassLoaders()\n设置instant run 相关的classLoader，及其继承关系（PathClassLoader -> BootClassLoader   变为  PathClassLoader -> IncrementalClassLoader -> BootClassLoader）\n* createRealApplication()\n进行application 的相关替换，当前app的application变为realApplication；\n反射的方式拿到 真实的 Application，通过AppInfo相关字段进行获取\n\n\n下面我们分析一下setClassLoader详细过程：\n主要经历了以下的方法：\n![](http://7xr1vo.com1.z0.glb.clouddn.com/instant%20run%20%E8%AE%BE%E7%BD%AE%E7%88%B6classloader%E8%BF%87%E7%A8%8B.png)\n这几个ClassLoader类定义的逻辑关系如下：\n![](http://7xr1vo.com1.z0.glb.clouddn.com/instant-run%E7%9B%B8%E5%85%B3classLoader%E5%AE%9A%E4%B9%89.png)\nfindClass过程依次委托给 父ClassLoader，最后是让PathClassLoader去加载类\n\n##### onCreate() 过程\n* 通过MonkeyPatcher 替换当前的 application 为 realApplication\n包含ActivityThread中相应的Application 都替换成 realApplication\n* 替换相应的资源resource\n替换当前app的assetManager，资源相关的变量等等（期间都是用反射的方式）\n* Server 创建，建立Socket连接，开启连接\n\n##### Server 部署工作\n在Server 建立起连接后，三种部署工作（hot swap、warm swap、cold swap），都是通过Server进行操作。具体在那种情形下进行哪种交换，源码中有具体实现：\n\n``` java\nprivate int handlePatches(List<ApplicationPatch> paramList, boolean paramBoolean, int paramInt) {\n    if (paramBoolean) {\n        FileManager.startUpdate();\n    }\n    Iterator localIterator = paramList.iterator();\n    while (localIterator.hasNext()) {\n        Object localObject = (ApplicationPatch) localIterator.next();\n        String str = ((ApplicationPatch) localObject).getPath();\n        if (str.endsWith(\".dex\")) {// 冷交换\n            handleColdSwapPatch((ApplicationPatch) localObject);\n            int j = 0;\n            localObject = paramList.iterator();\n            do {\n                i = j;\n                if (!((Iterator) localObject).hasNext()) {\n                    break;\n                }\n            }\n            while (!((ApplicationPatch) ((Iterator) localObject).next()).getPath().equals(\"classes.dex.3\"));\n            int i = 1;\n            if (i == 0) {\n                paramInt = 3;\n            }\n        } else if (str.equals(\"classes.dex.3\")) {// 热交换\n            paramInt = handleHotSwapPatch(paramInt, (ApplicationPatch) localObject);\n        } else if (isResourcePath(str)) {// 资源：温交换\n            paramInt = handleResourcePatch(paramInt, (ApplicationPatch) localObject, str);\n        }\n    }\n    if (paramBoolean) {\n        FileManager.finishUpdate(true);\n    }\n    return paramInt;\n}\n```\n### 代码热更新流程\n在我们增加一行代码后，点击运行，我们来观察生成的类的变化\n在 build 目录下，transforms 中有生成相关的代码\n![](http://7xr1vo.com1.z0.glb.clouddn.com/instant-run%E6%9C%89%E4%BB%A3%E7%A0%81%E5%8F%98%E6%9B%B4%E6%97%B6%E6%96%B0%E7%94%9F%E6%88%90.png)\n\n#### 几个重要类\n我们来具体看看demo 中代码更改：MainActivity$override类内容的确是最新的代码内容\n![](http://7xr1vo.com1.z0.glb.clouddn.com/instant%20run%20%E5%A2%9E%E5%8A%A0%E7%9A%84%E4%BB%A3%E7%A0%81override%E7%B1%BB.png)\n\nAppPatchesLoaderImpl类记录了更改的类，存储在一个数组中，供类加载时候，替换成最新的类的代码内容\n![](http://7xr1vo.com1.z0.glb.clouddn.com/instant%20run%20%E5%8F%98%E5%8C%96%E7%9A%84%E7%B1%BB%E6%95%B0%E7%BB%84%E5%AD%98%E5%82%A8.png)\n\n![](http://7xr1vo.com1.z0.glb.clouddn.com/instant-run%20patch%E7%9B%B8%E5%85%B3.png)\n\n在此处，我反编译了slice_0-classes.dex：\n ![](http://7xr1vo.com1.z0.glb.clouddn.com/instant%20run%E7%AC%AC%E4%B8%80%E6%AC%A1%E6%89%93%E5%8C%85%E7%BB%93%E6%9E%9C.png)\n\n第一次运行打包生成的 “业务代码” 中，生成的类中的方法里都增加了 IncrementalChange 相关的判断，如果 $change 不为空，说明我们有更改的代码，有更改的代码，则执行最新更改的代码\n\n``` java\npublic Object access$dispatch(String paramString, Object... paramVarArgs) {\n        switch (paramString.hashCode()) {\n            case -833446436:\n                initView((MainActivity) paramVarArgs[0]);\n                return null;\n            case -641568046:\n                onCreate((MainActivity) paramVarArgs[0], (Bundle) paramVarArgs[1]);\n                return null;\n            case -399296056:\n                return init$args((MainActivity[]) paramVarArgs[0], (Object[]) paramVarArgs[1]);\n            case 781336394:\n                init$body((MainActivity) paramVarArgs[0], (Object[]) paramVarArgs[1]);\n                return null;\n            case 2118315029:\n                testClick((MainActivity) paramVarArgs[0], (View) paramVarArgs[1]);\n                return null;\n        }\n        throw new InstantReloadException(String.format(\"String switch could not find '%s' with hashcode %s in %s\", new Object[]{paramString, Integer.valueOf(paramString.hashCode()), \"com/geng/myapplication/MainActivity\"}));\n    }\n```\n最后根据不同的类型，进行相关的重启（activity 或者 app），主要由 Restarter负责，同时也提供了相关的重启方法：\n* restartActivity()\n* restartApp()\n\n<br>\n至此，整个 instant run 的分析告一段落，需要慢慢消化一下。。。\n\n<br>\n源码及工具资源：\nhttps://github.com/fenglincanyi/Study/tree/master/instant%20run%E7%9B%B8%E5%85%B3\n参考：\nhttps://github.com/nuptboyzhb/AndroidInstantRun\n","slug":"instant run 相关分析","published":1,"updated":"2017-02-08T11:57:39.000Z","_id":"ciwvuocsz000pf0v72rx8h8jl","comments":1,"layout":"post","photos":[],"link":"","content":"<p>Android Studio 2.0 引入了即时编译功能：instant run，一定程度上进行了增量编译、增量更新代码，节省了开发耗时（喝咖啡的时间）。<br>下面具体分析下instant run相关工作流程和相关的源码</p>\n<h3 id=\"instant-run-使用\"><a href=\"#instant-run-使用\" class=\"headerlink\" title=\"instant run 使用\"></a>instant run 使用</h3><h4 id=\"版本要求\"><a href=\"#版本要求\" class=\"headerlink\" title=\"版本要求\"></a>版本要求</h4><p>Gradle 2.0 以上<br>build.gradle：minSdkVersion 15 以上（设置21以上可获得最佳性能）<br>Android 5.0以上的手机或模拟器</p>\n<h4 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h4><p>首先确认开启instant run，在settings中搜索instant run，可看到相关设置，默认instant run功能是开启的<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/Image.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure></p>\n<p>当第一次点击 run 按钮 <figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/Image1.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>，进行第一次编译打包。<br>apk成功安装之后，再观察工具栏，run按钮发生了变化：<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/Image2.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure></p>\n<p>然后我们随意修改一部分代码，点击运行，可看到手机屏幕上弹出toast，提示代码已经改变了，可看到最新的运行效果。使用起来也比较方便、快捷。</p>\n<h4 id=\"更新方式\"><a href=\"#更新方式\" class=\"headerlink\" title=\"更新方式\"></a>更新方式</h4><ul>\n<li>热交换 hot swap<br>更改现有方法的实现代码；不会重新初始化正在运行的app，不要做重启app，activity的操作，即可看到最新代码运行结果</li>\n<li>温交换 warm swap<br>更改或移除当前的资源；activity会自动重启（小闪烁），即可看到最新运行结果</li>\n<li>冷交换 cold swap<br>对代码有结构性的更改（字段更改、类继承关系、清单文件更改）；此时会重启app</li>\n</ul>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/1-Y-gIucAGyqQscMdXuHaSiA.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>参考：<br><a href=\"https://developer.android.com/studio/run/index.html?hl=zh-cn\" target=\"_blank\" rel=\"external\">https://developer.android.com/studio/run/index.html?hl=zh-cn</a><br><a href=\"https://medium.com/google-developers/instant-run-how-does-it-work-294a1633367f#.go1u6yq2o\" target=\"_blank\" rel=\"external\">https://medium.com/google-developers/instant-run-how-does-it-work-294a1633367f#.go1u6yq2o</a></p>\n<h3 id=\"过程分析\"><a href=\"#过程分析\" class=\"headerlink\" title=\"过程分析\"></a>过程分析</h3><h4 id=\"第一次打包\"><a href=\"#第一次打包\" class=\"headerlink\" title=\"第一次打包\"></a>第一次打包</h4><p>instant run 第一次编译打包流程，会执行下面的工作<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/1-U2tXGUWaeDU7L3u9Z_U0fw.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure></p>\n<p>先来看看生成的apk：<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/instant%20run%20apk.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure></p>\n<p> 多出了 instant-run.zip文件，那它里面是什么内容呢？<br> <figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/instant%20run%20zip%20class.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure><br> instant-run.zip里的dex文件，是我们真正的业务代码</p>\n<p> 那instant run 相关的类呢，反而跑到了外层的classes.dex和classes2.dex中。</p>\n<p><img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/%E6%97%A0%E6%A0%87%E9%A2%98.png\" alt=\"\"><br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/instant%20run%20%E7%9B%B8%E5%85%B3jar.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure></p>\n<p>实际上这2个dex中的内容是instant-run.jar和instant-run-bootstrap.jar 的内容（自己可反编译出来看看）：</p>\n<p><strong>就是说，第一次运行打包时候，是将 instant-run.jar 和 instant-run-bootstrap.jar 2个jar 变成 2个dex文件，真正的业务代码编译后整合到别的dex中，然后放在了instant-run.zip中</strong></p>\n<blockquote>\n<p>classes.dex  -&gt;   instant-run.jar &nbsp;&nbsp;&nbsp;&nbsp; instant run 相关api类<br>classes2.dex  -&gt;  instant-run-bootstrap.jar   &nbsp;&nbsp;  AppInfo.class</p>\n</blockquote>\n<p>再来看看清单文件，application 被替换成 BootstrapApplication：<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/instant%20run%20application.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure></p>\n<h4 id=\"instant-run-代码分析\"><a href=\"#instant-run-代码分析\" class=\"headerlink\" title=\"instant run 代码分析\"></a>instant run 代码分析</h4><h5 id=\"attachBaseContext-中执行的三个步骤\"><a href=\"#attachBaseContext-中执行的三个步骤\" class=\"headerlink\" title=\"attachBaseContext() 中执行的三个步骤\"></a>attachBaseContext() 中执行的三个步骤</h5><p>首先来观察下该类下的 attachBaseContext()方法，其中做了3个比较重要的事情：<br>createResources() 、setupClassLoaders()、createRealApplication()</p>\n<ul>\n<li>createResources()<br>主要是判断资源resource.ap<em>是否改变，然后保存resource.ap</em>的路径到externalResourcePath中</li>\n<li>setupClassLoaders()<br>设置instant run 相关的classLoader，及其继承关系（PathClassLoader -&gt; BootClassLoader   变为  PathClassLoader -&gt; IncrementalClassLoader -&gt; BootClassLoader）</li>\n<li>createRealApplication()<br>进行application 的相关替换，当前app的application变为realApplication；<br>反射的方式拿到 真实的 Application，通过AppInfo相关字段进行获取</li>\n</ul>\n<p>下面我们分析一下setClassLoader详细过程：<br>主要经历了以下的方法：<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/instant%20run%20%E8%AE%BE%E7%BD%AE%E7%88%B6classloader%E8%BF%87%E7%A8%8B.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure><br>这几个ClassLoader类定义的逻辑关系如下：<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/instant-run%E7%9B%B8%E5%85%B3classLoader%E5%AE%9A%E4%B9%89.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure><br>findClass过程依次委托给 父ClassLoader，最后是让PathClassLoader去加载类</p>\n<h5 id=\"onCreate-过程\"><a href=\"#onCreate-过程\" class=\"headerlink\" title=\"onCreate() 过程\"></a>onCreate() 过程</h5><ul>\n<li>通过MonkeyPatcher 替换当前的 application 为 realApplication<br>包含ActivityThread中相应的Application 都替换成 realApplication</li>\n<li>替换相应的资源resource<br>替换当前app的assetManager，资源相关的变量等等（期间都是用反射的方式）</li>\n<li>Server 创建，建立Socket连接，开启连接</li>\n</ul>\n<h5 id=\"Server-部署工作\"><a href=\"#Server-部署工作\" class=\"headerlink\" title=\"Server 部署工作\"></a>Server 部署工作</h5><p>在Server 建立起连接后，三种部署工作（hot swap、warm swap、cold swap），都是通过Server进行操作。具体在那种情形下进行哪种交换，源码中有具体实现：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">handlePatches</span><span class=\"params\">(List&lt;ApplicationPatch&gt; paramList, <span class=\"keyword\">boolean</span> paramBoolean, <span class=\"keyword\">int</span> paramInt)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (paramBoolean) &#123;</div><div class=\"line\">        FileManager.startUpdate();</div><div class=\"line\">    &#125;</div><div class=\"line\">    Iterator localIterator = paramList.iterator();</div><div class=\"line\">    <span class=\"keyword\">while</span> (localIterator.hasNext()) &#123;</div><div class=\"line\">        Object localObject = (ApplicationPatch) localIterator.next();</div><div class=\"line\">        String str = ((ApplicationPatch) localObject).getPath();</div><div class=\"line\">        <span class=\"keyword\">if</span> (str.endsWith(<span class=\"string\">\".dex\"</span>)) &#123;<span class=\"comment\">// 冷交换</span></div><div class=\"line\">            handleColdSwapPatch((ApplicationPatch) localObject);</div><div class=\"line\">            <span class=\"keyword\">int</span> j = <span class=\"number\">0</span>;</div><div class=\"line\">            localObject = paramList.iterator();</div><div class=\"line\">            <span class=\"keyword\">do</span> &#123;</div><div class=\"line\">                i = j;</div><div class=\"line\">                <span class=\"keyword\">if</span> (!((Iterator) localObject).hasNext()) &#123;</div><div class=\"line\">                    <span class=\"keyword\">break</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">while</span> (!((ApplicationPatch) ((Iterator) localObject).next()).getPath().equals(<span class=\"string\">\"classes.dex.3\"</span>));</div><div class=\"line\">            <span class=\"keyword\">int</span> i = <span class=\"number\">1</span>;</div><div class=\"line\">            <span class=\"keyword\">if</span> (i == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                paramInt = <span class=\"number\">3</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (str.equals(<span class=\"string\">\"classes.dex.3\"</span>)) &#123;<span class=\"comment\">// 热交换</span></div><div class=\"line\">            paramInt = handleHotSwapPatch(paramInt, (ApplicationPatch) localObject);</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (isResourcePath(str)) &#123;<span class=\"comment\">// 资源：温交换</span></div><div class=\"line\">            paramInt = handleResourcePatch(paramInt, (ApplicationPatch) localObject, str);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> (paramBoolean) &#123;</div><div class=\"line\">        FileManager.finishUpdate(<span class=\"keyword\">true</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> paramInt;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"代码热更新流程\"><a href=\"#代码热更新流程\" class=\"headerlink\" title=\"代码热更新流程\"></a>代码热更新流程</h3><p>在我们增加一行代码后，点击运行，我们来观察生成的类的变化<br>在 build 目录下，transforms 中有生成相关的代码<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/instant-run%E6%9C%89%E4%BB%A3%E7%A0%81%E5%8F%98%E6%9B%B4%E6%97%B6%E6%96%B0%E7%94%9F%E6%88%90.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure></p>\n<h4 id=\"几个重要类\"><a href=\"#几个重要类\" class=\"headerlink\" title=\"几个重要类\"></a>几个重要类</h4><p>我们来具体看看demo 中代码更改：MainActivity$override类内容的确是最新的代码内容<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/instant%20run%20%E5%A2%9E%E5%8A%A0%E7%9A%84%E4%BB%A3%E7%A0%81override%E7%B1%BB.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure></p>\n<p>AppPatchesLoaderImpl类记录了更改的类，存储在一个数组中，供类加载时候，替换成最新的类的代码内容<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/instant%20run%20%E5%8F%98%E5%8C%96%E7%9A%84%E7%B1%BB%E6%95%B0%E7%BB%84%E5%AD%98%E5%82%A8.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure></p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/instant-run%20patch%E7%9B%B8%E5%85%B3.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>在此处，我反编译了slice_0-classes.dex：<br> <figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/instant%20run%E7%AC%AC%E4%B8%80%E6%AC%A1%E6%89%93%E5%8C%85%E7%BB%93%E6%9E%9C.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure></p>\n<p>第一次运行打包生成的 “业务代码” 中，生成的类中的方法里都增加了 IncrementalChange 相关的判断，如果 $change 不为空，说明我们有更改的代码，有更改的代码，则执行最新更改的代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> Object access$dispatch(String paramString, Object... paramVarArgs) &#123;</div><div class=\"line\">        <span class=\"keyword\">switch</span> (paramString.hashCode()) &#123;</div><div class=\"line\">            <span class=\"keyword\">case</span> -<span class=\"number\">833446436</span>:</div><div class=\"line\">                initView((MainActivity) paramVarArgs[<span class=\"number\">0</span>]);</div><div class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">            <span class=\"keyword\">case</span> -<span class=\"number\">641568046</span>:</div><div class=\"line\">                onCreate((MainActivity) paramVarArgs[<span class=\"number\">0</span>], (Bundle) paramVarArgs[<span class=\"number\">1</span>]);</div><div class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">            <span class=\"keyword\">case</span> -<span class=\"number\">399296056</span>:</div><div class=\"line\">                <span class=\"keyword\">return</span> init$args((MainActivity[]) paramVarArgs[<span class=\"number\">0</span>], (Object[]) paramVarArgs[<span class=\"number\">1</span>]);</div><div class=\"line\">            <span class=\"keyword\">case</span> <span class=\"number\">781336394</span>:</div><div class=\"line\">                init$body((MainActivity) paramVarArgs[<span class=\"number\">0</span>], (Object[]) paramVarArgs[<span class=\"number\">1</span>]);</div><div class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">            <span class=\"keyword\">case</span> <span class=\"number\">2118315029</span>:</div><div class=\"line\">                testClick((MainActivity) paramVarArgs[<span class=\"number\">0</span>], (View) paramVarArgs[<span class=\"number\">1</span>]);</div><div class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> InstantReloadException(String.format(<span class=\"string\">\"String switch could not find '%s' with hashcode %s in %s\"</span>, <span class=\"keyword\">new</span> Object[]&#123;paramString, Integer.valueOf(paramString.hashCode()), <span class=\"string\">\"com/geng/myapplication/MainActivity\"</span>&#125;));</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p>最后根据不同的类型，进行相关的重启（activity 或者 app），主要由 Restarter负责，同时也提供了相关的重启方法：</p>\n<ul>\n<li>restartActivity()</li>\n<li>restartApp()</li>\n</ul>\n<p><br><br>至此，整个 instant run 的分析告一段落，需要慢慢消化一下。。。</p>\n<p><br><br>源码及工具资源：<br><a href=\"https://github.com/fenglincanyi/Study/tree/master/instant%20run%E7%9B%B8%E5%85%B3\" target=\"_blank\" rel=\"external\">https://github.com/fenglincanyi/Study/tree/master/instant%20run%E7%9B%B8%E5%85%B3</a><br>参考：<br><a href=\"https://github.com/nuptboyzhb/AndroidInstantRun\" target=\"_blank\" rel=\"external\">https://github.com/nuptboyzhb/AndroidInstantRun</a></p>\n","excerpt":"","more":"<p>Android Studio 2.0 引入了即时编译功能：instant run，一定程度上进行了增量编译、增量更新代码，节省了开发耗时（喝咖啡的时间）。<br>下面具体分析下instant run相关工作流程和相关的源码</p>\n<h3 id=\"instant-run-使用\"><a href=\"#instant-run-使用\" class=\"headerlink\" title=\"instant run 使用\"></a>instant run 使用</h3><h4 id=\"版本要求\"><a href=\"#版本要求\" class=\"headerlink\" title=\"版本要求\"></a>版本要求</h4><p>Gradle 2.0 以上<br>build.gradle：minSdkVersion 15 以上（设置21以上可获得最佳性能）<br>Android 5.0以上的手机或模拟器</p>\n<h4 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h4><p>首先确认开启instant run，在settings中搜索instant run，可看到相关设置，默认instant run功能是开启的<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/Image.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure></p>\n<p>当第一次点击 run 按钮 <figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/Image1.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>，进行第一次编译打包。<br>apk成功安装之后，再观察工具栏，run按钮发生了变化：<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/Image2.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure></p>\n<p>然后我们随意修改一部分代码，点击运行，可看到手机屏幕上弹出toast，提示代码已经改变了，可看到最新的运行效果。使用起来也比较方便、快捷。</p>\n<h4 id=\"更新方式\"><a href=\"#更新方式\" class=\"headerlink\" title=\"更新方式\"></a>更新方式</h4><ul>\n<li>热交换 hot swap<br>更改现有方法的实现代码；不会重新初始化正在运行的app，不要做重启app，activity的操作，即可看到最新代码运行结果</li>\n<li>温交换 warm swap<br>更改或移除当前的资源；activity会自动重启（小闪烁），即可看到最新运行结果</li>\n<li>冷交换 cold swap<br>对代码有结构性的更改（字段更改、类继承关系、清单文件更改）；此时会重启app</li>\n</ul>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/1-Y-gIucAGyqQscMdXuHaSiA.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>参考：<br><a href=\"https://developer.android.com/studio/run/index.html?hl=zh-cn\">https://developer.android.com/studio/run/index.html?hl=zh-cn</a><br><a href=\"https://medium.com/google-developers/instant-run-how-does-it-work-294a1633367f#.go1u6yq2o\">https://medium.com/google-developers/instant-run-how-does-it-work-294a1633367f#.go1u6yq2o</a></p>\n<h3 id=\"过程分析\"><a href=\"#过程分析\" class=\"headerlink\" title=\"过程分析\"></a>过程分析</h3><h4 id=\"第一次打包\"><a href=\"#第一次打包\" class=\"headerlink\" title=\"第一次打包\"></a>第一次打包</h4><p>instant run 第一次编译打包流程，会执行下面的工作<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/1-U2tXGUWaeDU7L3u9Z_U0fw.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure></p>\n<p>先来看看生成的apk：<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/instant%20run%20apk.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure></p>\n<p> 多出了 instant-run.zip文件，那它里面是什么内容呢？<br> <figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/instant%20run%20zip%20class.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure><br> instant-run.zip里的dex文件，是我们真正的业务代码</p>\n<p> 那instant run 相关的类呢，反而跑到了外层的classes.dex和classes2.dex中。</p>\n<p><img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/%E6%97%A0%E6%A0%87%E9%A2%98.png\" alt=\"\"><br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/instant%20run%20%E7%9B%B8%E5%85%B3jar.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure></p>\n<p>实际上这2个dex中的内容是instant-run.jar和instant-run-bootstrap.jar 的内容（自己可反编译出来看看）：</p>\n<p><strong>就是说，第一次运行打包时候，是将 instant-run.jar 和 instant-run-bootstrap.jar 2个jar 变成 2个dex文件，真正的业务代码编译后整合到别的dex中，然后放在了instant-run.zip中</strong></p>\n<blockquote>\n<p>classes.dex  -&gt;   instant-run.jar &nbsp;&nbsp;&nbsp;&nbsp; instant run 相关api类<br>classes2.dex  -&gt;  instant-run-bootstrap.jar   &nbsp;&nbsp;  AppInfo.class</p>\n</blockquote>\n<p>再来看看清单文件，application 被替换成 BootstrapApplication：<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/instant%20run%20application.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure></p>\n<h4 id=\"instant-run-代码分析\"><a href=\"#instant-run-代码分析\" class=\"headerlink\" title=\"instant run 代码分析\"></a>instant run 代码分析</h4><h5 id=\"attachBaseContext-中执行的三个步骤\"><a href=\"#attachBaseContext-中执行的三个步骤\" class=\"headerlink\" title=\"attachBaseContext() 中执行的三个步骤\"></a>attachBaseContext() 中执行的三个步骤</h5><p>首先来观察下该类下的 attachBaseContext()方法，其中做了3个比较重要的事情：<br>createResources() 、setupClassLoaders()、createRealApplication()</p>\n<ul>\n<li>createResources()<br>主要是判断资源resource.ap<em>是否改变，然后保存resource.ap</em>的路径到externalResourcePath中</li>\n<li>setupClassLoaders()<br>设置instant run 相关的classLoader，及其继承关系（PathClassLoader -&gt; BootClassLoader   变为  PathClassLoader -&gt; IncrementalClassLoader -&gt; BootClassLoader）</li>\n<li>createRealApplication()<br>进行application 的相关替换，当前app的application变为realApplication；<br>反射的方式拿到 真实的 Application，通过AppInfo相关字段进行获取</li>\n</ul>\n<p>下面我们分析一下setClassLoader详细过程：<br>主要经历了以下的方法：<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/instant%20run%20%E8%AE%BE%E7%BD%AE%E7%88%B6classloader%E8%BF%87%E7%A8%8B.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure><br>这几个ClassLoader类定义的逻辑关系如下：<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/instant-run%E7%9B%B8%E5%85%B3classLoader%E5%AE%9A%E4%B9%89.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure><br>findClass过程依次委托给 父ClassLoader，最后是让PathClassLoader去加载类</p>\n<h5 id=\"onCreate-过程\"><a href=\"#onCreate-过程\" class=\"headerlink\" title=\"onCreate() 过程\"></a>onCreate() 过程</h5><ul>\n<li>通过MonkeyPatcher 替换当前的 application 为 realApplication<br>包含ActivityThread中相应的Application 都替换成 realApplication</li>\n<li>替换相应的资源resource<br>替换当前app的assetManager，资源相关的变量等等（期间都是用反射的方式）</li>\n<li>Server 创建，建立Socket连接，开启连接</li>\n</ul>\n<h5 id=\"Server-部署工作\"><a href=\"#Server-部署工作\" class=\"headerlink\" title=\"Server 部署工作\"></a>Server 部署工作</h5><p>在Server 建立起连接后，三种部署工作（hot swap、warm swap、cold swap），都是通过Server进行操作。具体在那种情形下进行哪种交换，源码中有具体实现：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">handlePatches</span><span class=\"params\">(List&lt;ApplicationPatch&gt; paramList, <span class=\"keyword\">boolean</span> paramBoolean, <span class=\"keyword\">int</span> paramInt)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (paramBoolean) &#123;</div><div class=\"line\">        FileManager.startUpdate();</div><div class=\"line\">    &#125;</div><div class=\"line\">    Iterator localIterator = paramList.iterator();</div><div class=\"line\">    <span class=\"keyword\">while</span> (localIterator.hasNext()) &#123;</div><div class=\"line\">        Object localObject = (ApplicationPatch) localIterator.next();</div><div class=\"line\">        String str = ((ApplicationPatch) localObject).getPath();</div><div class=\"line\">        <span class=\"keyword\">if</span> (str.endsWith(<span class=\"string\">\".dex\"</span>)) &#123;<span class=\"comment\">// 冷交换</span></div><div class=\"line\">            handleColdSwapPatch((ApplicationPatch) localObject);</div><div class=\"line\">            <span class=\"keyword\">int</span> j = <span class=\"number\">0</span>;</div><div class=\"line\">            localObject = paramList.iterator();</div><div class=\"line\">            <span class=\"keyword\">do</span> &#123;</div><div class=\"line\">                i = j;</div><div class=\"line\">                <span class=\"keyword\">if</span> (!((Iterator) localObject).hasNext()) &#123;</div><div class=\"line\">                    <span class=\"keyword\">break</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">while</span> (!((ApplicationPatch) ((Iterator) localObject).next()).getPath().equals(<span class=\"string\">\"classes.dex.3\"</span>));</div><div class=\"line\">            <span class=\"keyword\">int</span> i = <span class=\"number\">1</span>;</div><div class=\"line\">            <span class=\"keyword\">if</span> (i == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                paramInt = <span class=\"number\">3</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (str.equals(<span class=\"string\">\"classes.dex.3\"</span>)) &#123;<span class=\"comment\">// 热交换</span></div><div class=\"line\">            paramInt = handleHotSwapPatch(paramInt, (ApplicationPatch) localObject);</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (isResourcePath(str)) &#123;<span class=\"comment\">// 资源：温交换</span></div><div class=\"line\">            paramInt = handleResourcePatch(paramInt, (ApplicationPatch) localObject, str);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> (paramBoolean) &#123;</div><div class=\"line\">        FileManager.finishUpdate(<span class=\"keyword\">true</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> paramInt;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"代码热更新流程\"><a href=\"#代码热更新流程\" class=\"headerlink\" title=\"代码热更新流程\"></a>代码热更新流程</h3><p>在我们增加一行代码后，点击运行，我们来观察生成的类的变化<br>在 build 目录下，transforms 中有生成相关的代码<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/instant-run%E6%9C%89%E4%BB%A3%E7%A0%81%E5%8F%98%E6%9B%B4%E6%97%B6%E6%96%B0%E7%94%9F%E6%88%90.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure></p>\n<h4 id=\"几个重要类\"><a href=\"#几个重要类\" class=\"headerlink\" title=\"几个重要类\"></a>几个重要类</h4><p>我们来具体看看demo 中代码更改：MainActivity$override类内容的确是最新的代码内容<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/instant%20run%20%E5%A2%9E%E5%8A%A0%E7%9A%84%E4%BB%A3%E7%A0%81override%E7%B1%BB.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure></p>\n<p>AppPatchesLoaderImpl类记录了更改的类，存储在一个数组中，供类加载时候，替换成最新的类的代码内容<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/instant%20run%20%E5%8F%98%E5%8C%96%E7%9A%84%E7%B1%BB%E6%95%B0%E7%BB%84%E5%AD%98%E5%82%A8.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure></p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/instant-run%20patch%E7%9B%B8%E5%85%B3.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>在此处，我反编译了slice_0-classes.dex：<br> <figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/instant%20run%E7%AC%AC%E4%B8%80%E6%AC%A1%E6%89%93%E5%8C%85%E7%BB%93%E6%9E%9C.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure></p>\n<p>第一次运行打包生成的 “业务代码” 中，生成的类中的方法里都增加了 IncrementalChange 相关的判断，如果 $change 不为空，说明我们有更改的代码，有更改的代码，则执行最新更改的代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> Object access$dispatch(String paramString, Object... paramVarArgs) &#123;</div><div class=\"line\">        <span class=\"keyword\">switch</span> (paramString.hashCode()) &#123;</div><div class=\"line\">            <span class=\"keyword\">case</span> -<span class=\"number\">833446436</span>:</div><div class=\"line\">                initView((MainActivity) paramVarArgs[<span class=\"number\">0</span>]);</div><div class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">            <span class=\"keyword\">case</span> -<span class=\"number\">641568046</span>:</div><div class=\"line\">                onCreate((MainActivity) paramVarArgs[<span class=\"number\">0</span>], (Bundle) paramVarArgs[<span class=\"number\">1</span>]);</div><div class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">            <span class=\"keyword\">case</span> -<span class=\"number\">399296056</span>:</div><div class=\"line\">                <span class=\"keyword\">return</span> init$args((MainActivity[]) paramVarArgs[<span class=\"number\">0</span>], (Object[]) paramVarArgs[<span class=\"number\">1</span>]);</div><div class=\"line\">            <span class=\"keyword\">case</span> <span class=\"number\">781336394</span>:</div><div class=\"line\">                init$body((MainActivity) paramVarArgs[<span class=\"number\">0</span>], (Object[]) paramVarArgs[<span class=\"number\">1</span>]);</div><div class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">            <span class=\"keyword\">case</span> <span class=\"number\">2118315029</span>:</div><div class=\"line\">                testClick((MainActivity) paramVarArgs[<span class=\"number\">0</span>], (View) paramVarArgs[<span class=\"number\">1</span>]);</div><div class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> InstantReloadException(String.format(<span class=\"string\">\"String switch could not find '%s' with hashcode %s in %s\"</span>, <span class=\"keyword\">new</span> Object[]&#123;paramString, Integer.valueOf(paramString.hashCode()), <span class=\"string\">\"com/geng/myapplication/MainActivity\"</span>&#125;));</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p>最后根据不同的类型，进行相关的重启（activity 或者 app），主要由 Restarter负责，同时也提供了相关的重启方法：</p>\n<ul>\n<li>restartActivity()</li>\n<li>restartApp()</li>\n</ul>\n<p><br><br>至此，整个 instant run 的分析告一段落，需要慢慢消化一下。。。</p>\n<p><br><br>源码及工具资源：<br><a href=\"https://github.com/fenglincanyi/Study/tree/master/instant%20run%E7%9B%B8%E5%85%B3\">https://github.com/fenglincanyi/Study/tree/master/instant%20run%E7%9B%B8%E5%85%B3</a><br>参考：<br><a href=\"https://github.com/nuptboyzhb/AndroidInstantRun\">https://github.com/nuptboyzhb/AndroidInstantRun</a></p>\n"},{"title":"对称、非对称加密技术初探","date":"2016-02-28T09:52:00.000Z","_content":"### 一、对称加密\n1. **对称加密简介**\n\n    对称加密算法所用到的基本的方法是：代换 和 置换。简单来说：（以早期的加密方式举例）\n    * 代换：是将明文字母替换成其他字母、数字或符号的方法\n\n        对于明文中的每一个字母，用字母表中k个字母来代替（允许循环，即a可以在z的后面）\n        > 例如：如果 k = 3，那么明文中的 a 在密文中就变 d ，b 就变成 e。这里 k 值充当密钥\n\n    * 置换：可以说对代换的一种改进，通过并不是通过固定的规则来替换字母，任意字母都可以替换为别的其他字母，但是一一对应的。例如（单表置换加密）：\n        > 明文：a b c d e f g\n        \n        > 密文：d c h n q i a\n    \n    以上是早期加密时用的简单的方法，其思想还是通过 替换 来进行加密的\n\n2. **对称加密过程**\n\n    ![](http://7xr1vo.com1.z0.glb.clouddn.com/%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86%E8%BF%87%E7%A8%8B.PNG)\n\n3. **常见对称加密算法**\n\n    * **DES**   \n    \n        采用64位的分组长度，和56位的密钥长度，将64位的输入经过一系列的变换得到64位的输出。加密解密使用了相同的密钥。\n        \n            * 注： 此算法可以被暴力破解，穷举即可解密，所以不再单纯使用 \n    * **3DES**\n\n        对DES的改进，使用多个密钥对DES进行三次加密，有些基于Internet的应用已经采纳了这种算法，如：PGP，S/MIME\n    * **AES**(高级加密标准)\n        \n        对DES的再次改进，性能不低于3DES， 它的密钥长度为128、192或256位，分组长度为128位\n    * **Blowfish算法**\n\n        一种可变密钥长度的分组加密算法，分组长度64位。迄今为止，该算法的安全性还没有受到挑战\n    * **RC5算法**\n    \n        参数可变的分组加密算法，此算法使用了三种运算：异或、加、循环\n\n### 二、非对称加密\n> 基于数学函数的算法，而不再是基于代换和置换技术，公钥加密算法是 非对称的\n\n> 根据加密算法 和 加密密钥 是推不出 解密密钥的\n\n1. **关于公钥、私钥**\n    \n    正确理解：\n\n        公钥是用于 加密 和 认证 的\n        私钥是用于 解密 和 签名 的\n        \n        * 这两个密钥，任意一个都可以用来加密，另一个用来解密\n        * 公钥是公开的\n    \n2. **非对称加密过程**\n\n    ![](http://7xr1vo.com1.z0.glb.clouddn.com/%E9%9D%9E%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86%E8%BF%87%E7%A8%8B.png)\n    \n3. **RSA简介**\n\n    第一个能用于数据加密也能用于数字签名的算法，RSA是一种分组密码\n    * 易于理解和操作，但安全性一直没有得到理论上的证明\n    * RSA的加密和解密时间是DES的上百倍，效率较低\n    \n    > 选取密钥的过程：\n\n        (1). 选取两个 大质数 p, q. 质数值越大，破解 RSA 就越困难，进行加密和解密的时间就越长\n        (2). 计算 n = p * q,  z = (p-1) * (q-1)\n        (3). 选取 e < n, 且与 z 互质（e 和 z没有公约数）\n        (4). 找到数 d, 满足 ed - 1 被 z 整除（ ((e * d) - 1) % n) == 0 ）\n        (5). 公钥：（n, e）;  私钥：（n, d）\n    > 加密、解密过程：\n    \n        (1). 甲方（发送方）：发送 m (发送数)，m < n,\n        (2). 发送时，用乙方（接收方）的公钥加密：密文 c = m^e % n\n        (3). 乙方：解密用自己的私钥，得到明文 m = c^d % n\n\n4. **其他非对称加密算法**\n\n    * ElGamal算法：基于公钥密码体制和椭圆曲线加密体系，既能用于数据加密，又能用于数字签名\n    * 背包加密算法：基于背包算法，但是大多数一次背包体制均被破译了，因此很少有人使用它\n    \n\n4. **散列(哈希)函数**\n    \n    是公开的函数，可以将任意长的串映射成一个固定长度的串，Hash值 由下面的函数 H 生成：\n        \n        h = H (M)\n\n        M: 变长的消息，H(M)是定长的 Hash值\n    常见的散列函数有： **MD5**，**SHA-1** \n    \n    * MD5：\n        \n        有广泛的应用，如在 Java API 中就有体现，但也不安全，有人专门将大量的明文和密文收集起来存至数据库中，用于暴力破解MD5。所以实际使用时，需 “加盐”\n    * SHA-1:\n\n        在Linux系统、Git中都有广泛的使用，它的原理类似于 MD4(MD5的前身)。\n        >说明： MD5 和 SHA-1被好多人称为 加密算法，其实这两个散列函数，是用于散列获得消息摘要的，严格来说，应该叫做 **消息摘要算法**\n5. **数字签名**\n\n    签名是用来验证 发送方的身份 和 数据的完整性(数据是否被第三方篡改)的\n    \n    签名分为：\n    * 普通数字签名（如：RSA，DES）\n    * 特殊数字签名（如：有盲签名，代理签名）\n    \n    **数字签名过程**：\n        \n        (1). 发送方 生成一对公钥和私钥，将自己的 公钥 发送给 接收方\n        (2). 发送方 将 要发送的消息 msg, 进行散列(MD5或者SHA-1)，得到 消息摘要\n        (3). 发送方 将 消息摘要 用自己的私钥加密，加密后的信息就是 数字签名\n        (4). 发送方 将 数字签名 附在 要发送的消息 msg' (是通过接收方的公钥加密后的) 的后面，再一起发送至 接收方\n    **数字签名的验证过程**：\n        \n        (1). 接收方 收到消息后，对消息 msg' 使用自己的私钥进行解密得到 msg\n        (2). 接收方 对 数字签名 使用 发送方的公钥解密，得到 消息摘要(之前是由消息经过散列得到)\n        (3). 接收方 使用相同的 散列函数(散列函数也是公开的)对 msg 进行散列，再计算得到一个 消息摘要\n        (4). 接收方 对比着两个 消息摘要 即可判断出 消息的完整性\n\n    > 身份的正确性：可通过 使用公钥能否解开数字签名 来判断\n\n    > 数据的完整性：可通过 对比两个消息摘要是否相同 来判断\n\n    ![](http://7xr1vo.com1.z0.glb.clouddn.com/%E6%95%B0%E5%AD%97%E7%AD%BE%E5%90%8D.png)\n    ","source":"_posts/对称、非对称加密技术初探.md","raw":"---\ntitle: 对称、非对称加密技术初探\ndate: 2016-02-28 17:52\ncategories: 网络\ntags: [加密, 签名]\n---\n### 一、对称加密\n1. **对称加密简介**\n\n    对称加密算法所用到的基本的方法是：代换 和 置换。简单来说：（以早期的加密方式举例）\n    * 代换：是将明文字母替换成其他字母、数字或符号的方法\n\n        对于明文中的每一个字母，用字母表中k个字母来代替（允许循环，即a可以在z的后面）\n        > 例如：如果 k = 3，那么明文中的 a 在密文中就变 d ，b 就变成 e。这里 k 值充当密钥\n\n    * 置换：可以说对代换的一种改进，通过并不是通过固定的规则来替换字母，任意字母都可以替换为别的其他字母，但是一一对应的。例如（单表置换加密）：\n        > 明文：a b c d e f g\n        \n        > 密文：d c h n q i a\n    \n    以上是早期加密时用的简单的方法，其思想还是通过 替换 来进行加密的\n\n2. **对称加密过程**\n\n    ![](http://7xr1vo.com1.z0.glb.clouddn.com/%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86%E8%BF%87%E7%A8%8B.PNG)\n\n3. **常见对称加密算法**\n\n    * **DES**   \n    \n        采用64位的分组长度，和56位的密钥长度，将64位的输入经过一系列的变换得到64位的输出。加密解密使用了相同的密钥。\n        \n            * 注： 此算法可以被暴力破解，穷举即可解密，所以不再单纯使用 \n    * **3DES**\n\n        对DES的改进，使用多个密钥对DES进行三次加密，有些基于Internet的应用已经采纳了这种算法，如：PGP，S/MIME\n    * **AES**(高级加密标准)\n        \n        对DES的再次改进，性能不低于3DES， 它的密钥长度为128、192或256位，分组长度为128位\n    * **Blowfish算法**\n\n        一种可变密钥长度的分组加密算法，分组长度64位。迄今为止，该算法的安全性还没有受到挑战\n    * **RC5算法**\n    \n        参数可变的分组加密算法，此算法使用了三种运算：异或、加、循环\n\n### 二、非对称加密\n> 基于数学函数的算法，而不再是基于代换和置换技术，公钥加密算法是 非对称的\n\n> 根据加密算法 和 加密密钥 是推不出 解密密钥的\n\n1. **关于公钥、私钥**\n    \n    正确理解：\n\n        公钥是用于 加密 和 认证 的\n        私钥是用于 解密 和 签名 的\n        \n        * 这两个密钥，任意一个都可以用来加密，另一个用来解密\n        * 公钥是公开的\n    \n2. **非对称加密过程**\n\n    ![](http://7xr1vo.com1.z0.glb.clouddn.com/%E9%9D%9E%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86%E8%BF%87%E7%A8%8B.png)\n    \n3. **RSA简介**\n\n    第一个能用于数据加密也能用于数字签名的算法，RSA是一种分组密码\n    * 易于理解和操作，但安全性一直没有得到理论上的证明\n    * RSA的加密和解密时间是DES的上百倍，效率较低\n    \n    > 选取密钥的过程：\n\n        (1). 选取两个 大质数 p, q. 质数值越大，破解 RSA 就越困难，进行加密和解密的时间就越长\n        (2). 计算 n = p * q,  z = (p-1) * (q-1)\n        (3). 选取 e < n, 且与 z 互质（e 和 z没有公约数）\n        (4). 找到数 d, 满足 ed - 1 被 z 整除（ ((e * d) - 1) % n) == 0 ）\n        (5). 公钥：（n, e）;  私钥：（n, d）\n    > 加密、解密过程：\n    \n        (1). 甲方（发送方）：发送 m (发送数)，m < n,\n        (2). 发送时，用乙方（接收方）的公钥加密：密文 c = m^e % n\n        (3). 乙方：解密用自己的私钥，得到明文 m = c^d % n\n\n4. **其他非对称加密算法**\n\n    * ElGamal算法：基于公钥密码体制和椭圆曲线加密体系，既能用于数据加密，又能用于数字签名\n    * 背包加密算法：基于背包算法，但是大多数一次背包体制均被破译了，因此很少有人使用它\n    \n\n4. **散列(哈希)函数**\n    \n    是公开的函数，可以将任意长的串映射成一个固定长度的串，Hash值 由下面的函数 H 生成：\n        \n        h = H (M)\n\n        M: 变长的消息，H(M)是定长的 Hash值\n    常见的散列函数有： **MD5**，**SHA-1** \n    \n    * MD5：\n        \n        有广泛的应用，如在 Java API 中就有体现，但也不安全，有人专门将大量的明文和密文收集起来存至数据库中，用于暴力破解MD5。所以实际使用时，需 “加盐”\n    * SHA-1:\n\n        在Linux系统、Git中都有广泛的使用，它的原理类似于 MD4(MD5的前身)。\n        >说明： MD5 和 SHA-1被好多人称为 加密算法，其实这两个散列函数，是用于散列获得消息摘要的，严格来说，应该叫做 **消息摘要算法**\n5. **数字签名**\n\n    签名是用来验证 发送方的身份 和 数据的完整性(数据是否被第三方篡改)的\n    \n    签名分为：\n    * 普通数字签名（如：RSA，DES）\n    * 特殊数字签名（如：有盲签名，代理签名）\n    \n    **数字签名过程**：\n        \n        (1). 发送方 生成一对公钥和私钥，将自己的 公钥 发送给 接收方\n        (2). 发送方 将 要发送的消息 msg, 进行散列(MD5或者SHA-1)，得到 消息摘要\n        (3). 发送方 将 消息摘要 用自己的私钥加密，加密后的信息就是 数字签名\n        (4). 发送方 将 数字签名 附在 要发送的消息 msg' (是通过接收方的公钥加密后的) 的后面，再一起发送至 接收方\n    **数字签名的验证过程**：\n        \n        (1). 接收方 收到消息后，对消息 msg' 使用自己的私钥进行解密得到 msg\n        (2). 接收方 对 数字签名 使用 发送方的公钥解密，得到 消息摘要(之前是由消息经过散列得到)\n        (3). 接收方 使用相同的 散列函数(散列函数也是公开的)对 msg 进行散列，再计算得到一个 消息摘要\n        (4). 接收方 对比着两个 消息摘要 即可判断出 消息的完整性\n\n    > 身份的正确性：可通过 使用公钥能否解开数字签名 来判断\n\n    > 数据的完整性：可通过 对比两个消息摘要是否相同 来判断\n\n    ![](http://7xr1vo.com1.z0.glb.clouddn.com/%E6%95%B0%E5%AD%97%E7%AD%BE%E5%90%8D.png)\n    ","slug":"对称、非对称加密技术初探","published":1,"updated":"2016-12-17T15:12:40.989Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciwvuoct3000tf0v78rxqi5uc","content":"<h3 id=\"一、对称加密\"><a href=\"#一、对称加密\" class=\"headerlink\" title=\"一、对称加密\"></a>一、对称加密</h3><ol>\n<li><p><strong>对称加密简介</strong></p>\n<p> 对称加密算法所用到的基本的方法是：代换 和 置换。简单来说：（以早期的加密方式举例）</p>\n<ul>\n<li><p>代换：是将明文字母替换成其他字母、数字或符号的方法</p>\n<p>  对于明文中的每一个字母，用字母表中k个字母来代替（允许循环，即a可以在z的后面）</p>\n<blockquote>\n<p>例如：如果 k = 3，那么明文中的 a 在密文中就变 d ，b 就变成 e。这里 k 值充当密钥</p>\n</blockquote>\n</li>\n<li><p>置换：可以说对代换的一种改进，通过并不是通过固定的规则来替换字母，任意字母都可以替换为别的其他字母，但是一一对应的。例如（单表置换加密）：</p>\n<blockquote>\n<p>明文：a b c d e f g</p>\n<p>密文：d c h n q i a</p>\n</blockquote>\n<p>以上是早期加密时用的简单的方法，其思想还是通过 替换 来进行加密的</p>\n</li>\n</ul>\n</li>\n<li><p><strong>对称加密过程</strong></p>\n<p> <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86%E8%BF%87%E7%A8%8B.PNG\" alt=\"\"></p>\n</li>\n<li><p><strong>常见对称加密算法</strong></p>\n<ul>\n<li><p><strong>DES</strong>   </p>\n<p>  采用64位的分组长度，和56位的密钥长度，将64位的输入经过一系列的变换得到64位的输出。加密解密使用了相同的密钥。</p>\n<pre><code>* 注： 此算法可以被暴力破解，穷举即可解密，所以不再单纯使用 \n</code></pre></li>\n<li><p><strong>3DES</strong></p>\n<p>  对DES的改进，使用多个密钥对DES进行三次加密，有些基于Internet的应用已经采纳了这种算法，如：PGP，S/MIME</p>\n</li>\n<li><p><strong>AES</strong>(高级加密标准)</p>\n<p>  对DES的再次改进，性能不低于3DES， 它的密钥长度为128、192或256位，分组长度为128位</p>\n</li>\n<li><p><strong>Blowfish算法</strong></p>\n<p>  一种可变密钥长度的分组加密算法，分组长度64位。迄今为止，该算法的安全性还没有受到挑战</p>\n</li>\n<li><p><strong>RC5算法</strong></p>\n<p>  参数可变的分组加密算法，此算法使用了三种运算：异或、加、循环</p>\n</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"二、非对称加密\"><a href=\"#二、非对称加密\" class=\"headerlink\" title=\"二、非对称加密\"></a>二、非对称加密</h3><blockquote>\n<p>基于数学函数的算法，而不再是基于代换和置换技术，公钥加密算法是 非对称的</p>\n<p>根据加密算法 和 加密密钥 是推不出 解密密钥的</p>\n</blockquote>\n<ol>\n<li><p><strong>关于公钥、私钥</strong></p>\n<p> 正确理解：</p>\n<pre><code>公钥是用于 加密 和 认证 的\n私钥是用于 解密 和 签名 的\n\n* 这两个密钥，任意一个都可以用来加密，另一个用来解密\n* 公钥是公开的\n</code></pre></li>\n<li><p><strong>非对称加密过程</strong></p>\n<p> <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/%E9%9D%9E%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86%E8%BF%87%E7%A8%8B.png\" alt=\"\"></p>\n</li>\n<li><p><strong>RSA简介</strong></p>\n<p> 第一个能用于数据加密也能用于数字签名的算法，RSA是一种分组密码</p>\n<ul>\n<li>易于理解和操作，但安全性一直没有得到理论上的证明</li>\n<li><p>RSA的加密和解密时间是DES的上百倍，效率较低</p>\n<blockquote>\n<p>选取密钥的过程：</p>\n</blockquote>\n<p>  (1). 选取两个 大质数 p, q. 质数值越大，破解 RSA 就越困难，进行加密和解密的时间就越长<br>  (2). 计算 n = p <em> q,  z = (p-1) </em> (q-1)<br>  (3). 选取 e &lt; n, 且与 z 互质（e 和 z没有公约数）<br>  (4). 找到数 d, 满足 ed - 1 被 z 整除（ ((e * d) - 1) % n) == 0 ）<br>  (5). 公钥：（n, e）;  私钥：（n, d）</p>\n<blockquote>\n<p>加密、解密过程：</p>\n</blockquote>\n<p>  (1). 甲方（发送方）：发送 m (发送数)，m &lt; n,<br>  (2). 发送时，用乙方（接收方）的公钥加密：密文 c = m^e % n<br>  (3). 乙方：解密用自己的私钥，得到明文 m = c^d % n</p>\n</li>\n</ul>\n</li>\n<li><p><strong>其他非对称加密算法</strong></p>\n<ul>\n<li>ElGamal算法：基于公钥密码体制和椭圆曲线加密体系，既能用于数据加密，又能用于数字签名</li>\n<li>背包加密算法：基于背包算法，但是大多数一次背包体制均被破译了，因此很少有人使用它</li>\n</ul>\n</li>\n</ol>\n<ol>\n<li><p><strong>散列(哈希)函数</strong></p>\n<p> 是公开的函数，可以将任意长的串映射成一个固定长度的串，Hash值 由下面的函数 H 生成：</p>\n<pre><code>h = H (M)\n\nM: 变长的消息，H(M)是定长的 Hash值\n</code></pre><p> 常见的散列函数有： <strong>MD5</strong>，<strong>SHA-1</strong> </p>\n<ul>\n<li><p>MD5：</p>\n<p>  有广泛的应用，如在 Java API 中就有体现，但也不安全，有人专门将大量的明文和密文收集起来存至数据库中，用于暴力破解MD5。所以实际使用时，需 “加盐”</p>\n</li>\n<li><p>SHA-1:</p>\n<p>  在Linux系统、Git中都有广泛的使用，它的原理类似于 MD4(MD5的前身)。</p>\n<blockquote>\n<p>说明： MD5 和 SHA-1被好多人称为 加密算法，其实这两个散列函数，是用于散列获得消息摘要的，严格来说，应该叫做 <strong>消息摘要算法</strong></p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li><p><strong>数字签名</strong></p>\n<p> 签名是用来验证 发送方的身份 和 数据的完整性(数据是否被第三方篡改)的</p>\n<p> 签名分为：</p>\n<ul>\n<li>普通数字签名（如：RSA，DES）</li>\n<li><p>特殊数字签名（如：有盲签名，代理签名）</p>\n<p><strong>数字签名过程</strong>：</p>\n<p>  (1). 发送方 生成一对公钥和私钥，将自己的 公钥 发送给 接收方<br>  (2). 发送方 将 要发送的消息 msg, 进行散列(MD5或者SHA-1)，得到 消息摘要<br>  (3). 发送方 将 消息摘要 用自己的私钥加密，加密后的信息就是 数字签名<br>  (4). 发送方 将 数字签名 附在 要发送的消息 msg’ (是通过接收方的公钥加密后的) 的后面，再一起发送至 接收方<br><strong>数字签名的验证过程</strong>：</p>\n<p>  (1). 接收方 收到消息后，对消息 msg’ 使用自己的私钥进行解密得到 msg<br>  (2). 接收方 对 数字签名 使用 发送方的公钥解密，得到 消息摘要(之前是由消息经过散列得到)<br>  (3). 接收方 使用相同的 散列函数(散列函数也是公开的)对 msg 进行散列，再计算得到一个 消息摘要<br>  (4). 接收方 对比着两个 消息摘要 即可判断出 消息的完整性</p>\n<blockquote>\n<p>身份的正确性：可通过 使用公钥能否解开数字签名 来判断</p>\n<p>数据的完整性：可通过 对比两个消息摘要是否相同 来判断</p>\n</blockquote>\n<p><img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/%E6%95%B0%E5%AD%97%E7%AD%BE%E5%90%8D.png\" alt=\"\"></p>\n</li>\n</ul>\n</li>\n</ol>\n","excerpt":"","more":"<h3 id=\"一、对称加密\"><a href=\"#一、对称加密\" class=\"headerlink\" title=\"一、对称加密\"></a>一、对称加密</h3><ol>\n<li><p><strong>对称加密简介</strong></p>\n<p> 对称加密算法所用到的基本的方法是：代换 和 置换。简单来说：（以早期的加密方式举例）</p>\n<ul>\n<li><p>代换：是将明文字母替换成其他字母、数字或符号的方法</p>\n<p>  对于明文中的每一个字母，用字母表中k个字母来代替（允许循环，即a可以在z的后面）</p>\n<blockquote>\n<p>例如：如果 k = 3，那么明文中的 a 在密文中就变 d ，b 就变成 e。这里 k 值充当密钥</p>\n</blockquote>\n</li>\n<li><p>置换：可以说对代换的一种改进，通过并不是通过固定的规则来替换字母，任意字母都可以替换为别的其他字母，但是一一对应的。例如（单表置换加密）：</p>\n<blockquote>\n<p>明文：a b c d e f g</p>\n<p>密文：d c h n q i a</p>\n</blockquote>\n<p>以上是早期加密时用的简单的方法，其思想还是通过 替换 来进行加密的</p>\n</li>\n</ul>\n</li>\n<li><p><strong>对称加密过程</strong></p>\n<p> <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86%E8%BF%87%E7%A8%8B.PNG\" alt=\"\"></p>\n</li>\n<li><p><strong>常见对称加密算法</strong></p>\n<ul>\n<li><p><strong>DES</strong>   </p>\n<p>  采用64位的分组长度，和56位的密钥长度，将64位的输入经过一系列的变换得到64位的输出。加密解密使用了相同的密钥。</p>\n<pre><code>* 注： 此算法可以被暴力破解，穷举即可解密，所以不再单纯使用 \n</code></pre></li>\n<li><p><strong>3DES</strong></p>\n<p>  对DES的改进，使用多个密钥对DES进行三次加密，有些基于Internet的应用已经采纳了这种算法，如：PGP，S/MIME</p>\n</li>\n<li><p><strong>AES</strong>(高级加密标准)</p>\n<p>  对DES的再次改进，性能不低于3DES， 它的密钥长度为128、192或256位，分组长度为128位</p>\n</li>\n<li><p><strong>Blowfish算法</strong></p>\n<p>  一种可变密钥长度的分组加密算法，分组长度64位。迄今为止，该算法的安全性还没有受到挑战</p>\n</li>\n<li><p><strong>RC5算法</strong></p>\n<p>  参数可变的分组加密算法，此算法使用了三种运算：异或、加、循环</p>\n</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"二、非对称加密\"><a href=\"#二、非对称加密\" class=\"headerlink\" title=\"二、非对称加密\"></a>二、非对称加密</h3><blockquote>\n<p>基于数学函数的算法，而不再是基于代换和置换技术，公钥加密算法是 非对称的</p>\n<p>根据加密算法 和 加密密钥 是推不出 解密密钥的</p>\n</blockquote>\n<ol>\n<li><p><strong>关于公钥、私钥</strong></p>\n<p> 正确理解：</p>\n<pre><code>公钥是用于 加密 和 认证 的\n私钥是用于 解密 和 签名 的\n\n* 这两个密钥，任意一个都可以用来加密，另一个用来解密\n* 公钥是公开的\n</code></pre></li>\n<li><p><strong>非对称加密过程</strong></p>\n<p> <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/%E9%9D%9E%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86%E8%BF%87%E7%A8%8B.png\" alt=\"\"></p>\n</li>\n<li><p><strong>RSA简介</strong></p>\n<p> 第一个能用于数据加密也能用于数字签名的算法，RSA是一种分组密码</p>\n<ul>\n<li>易于理解和操作，但安全性一直没有得到理论上的证明</li>\n<li><p>RSA的加密和解密时间是DES的上百倍，效率较低</p>\n<blockquote>\n<p>选取密钥的过程：</p>\n</blockquote>\n<p>  (1). 选取两个 大质数 p, q. 质数值越大，破解 RSA 就越困难，进行加密和解密的时间就越长<br>  (2). 计算 n = p <em> q,  z = (p-1) </em> (q-1)<br>  (3). 选取 e &lt; n, 且与 z 互质（e 和 z没有公约数）<br>  (4). 找到数 d, 满足 ed - 1 被 z 整除（ ((e * d) - 1) % n) == 0 ）<br>  (5). 公钥：（n, e）;  私钥：（n, d）</p>\n<blockquote>\n<p>加密、解密过程：</p>\n</blockquote>\n<p>  (1). 甲方（发送方）：发送 m (发送数)，m &lt; n,<br>  (2). 发送时，用乙方（接收方）的公钥加密：密文 c = m^e % n<br>  (3). 乙方：解密用自己的私钥，得到明文 m = c^d % n</p>\n</li>\n</ul>\n</li>\n<li><p><strong>其他非对称加密算法</strong></p>\n<ul>\n<li>ElGamal算法：基于公钥密码体制和椭圆曲线加密体系，既能用于数据加密，又能用于数字签名</li>\n<li>背包加密算法：基于背包算法，但是大多数一次背包体制均被破译了，因此很少有人使用它</li>\n</ul>\n</li>\n</ol>\n<ol>\n<li><p><strong>散列(哈希)函数</strong></p>\n<p> 是公开的函数，可以将任意长的串映射成一个固定长度的串，Hash值 由下面的函数 H 生成：</p>\n<pre><code>h = H (M)\n\nM: 变长的消息，H(M)是定长的 Hash值\n</code></pre><p> 常见的散列函数有： <strong>MD5</strong>，<strong>SHA-1</strong> </p>\n<ul>\n<li><p>MD5：</p>\n<p>  有广泛的应用，如在 Java API 中就有体现，但也不安全，有人专门将大量的明文和密文收集起来存至数据库中，用于暴力破解MD5。所以实际使用时，需 “加盐”</p>\n</li>\n<li><p>SHA-1:</p>\n<p>  在Linux系统、Git中都有广泛的使用，它的原理类似于 MD4(MD5的前身)。</p>\n<blockquote>\n<p>说明： MD5 和 SHA-1被好多人称为 加密算法，其实这两个散列函数，是用于散列获得消息摘要的，严格来说，应该叫做 <strong>消息摘要算法</strong></p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li><p><strong>数字签名</strong></p>\n<p> 签名是用来验证 发送方的身份 和 数据的完整性(数据是否被第三方篡改)的</p>\n<p> 签名分为：</p>\n<ul>\n<li>普通数字签名（如：RSA，DES）</li>\n<li><p>特殊数字签名（如：有盲签名，代理签名）</p>\n<p><strong>数字签名过程</strong>：</p>\n<p>  (1). 发送方 生成一对公钥和私钥，将自己的 公钥 发送给 接收方<br>  (2). 发送方 将 要发送的消息 msg, 进行散列(MD5或者SHA-1)，得到 消息摘要<br>  (3). 发送方 将 消息摘要 用自己的私钥加密，加密后的信息就是 数字签名<br>  (4). 发送方 将 数字签名 附在 要发送的消息 msg’ (是通过接收方的公钥加密后的) 的后面，再一起发送至 接收方<br><strong>数字签名的验证过程</strong>：</p>\n<p>  (1). 接收方 收到消息后，对消息 msg’ 使用自己的私钥进行解密得到 msg<br>  (2). 接收方 对 数字签名 使用 发送方的公钥解密，得到 消息摘要(之前是由消息经过散列得到)<br>  (3). 接收方 使用相同的 散列函数(散列函数也是公开的)对 msg 进行散列，再计算得到一个 消息摘要<br>  (4). 接收方 对比着两个 消息摘要 即可判断出 消息的完整性</p>\n<blockquote>\n<p>身份的正确性：可通过 使用公钥能否解开数字签名 来判断</p>\n<p>数据的完整性：可通过 对比两个消息摘要是否相同 来判断</p>\n</blockquote>\n<p><img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/%E6%95%B0%E5%AD%97%E7%AD%BE%E5%90%8D.png\" alt=\"\"></p>\n</li>\n</ul>\n</li>\n</ol>\n"},{"title":"简单的页面置换算法分析","date":"2016-06-04T11:39:00.000Z","_content":">本文主要分析操作系统中涉及到的一些常见的置换算法，并不对涉及的操作系统内容过多介绍。这些算法在其他的计算机应用中也有体现，基本原理都是一致的，可参考理解。\n\n### 一、前提说明\n本文主要针对一个例子进行说明，以下的算法实现过程均是按照本例进行分析。页面的走向为：\n\n    4 3 2 1 4 3 5 4 3 2 1 5 \n一段程序在内存中，分配3个页面，初始情况下为空。\n以下依次根据不同的算法进行页面置换过程的分析。\n### 二、算法分析过程\n#### 1. FIFO（先进先出）\nFIFO算是最简单、最容易理解的算法了，只要按照依次装入内存的页面的页号按照进入的先后次序排好队列，每次总是从队首出，队尾出。当发生缺页时，置换队首的页面即可。<br>\n对上面的页面走向序列，分析过程如下图：\n\n![](http://7xr1vo.com1.z0.glb.clouddn.com/%E5%9B%BE1.png)\n#### 2. LRU （最近最少使用 Least Recently Used）\n在缺页发生时，选择离现在最长时间内，没有被访问过的页面置换出来。<br>\n分析过程，如下图：\n\n![](http://7xr1vo.com1.z0.glb.clouddn.com/%E5%9B%BE2.png)\n\n* 此算法应用的比较广泛，尤其是拿来做缓存算法。Android的API中，已经封装了相关的LRU的算法直接可以调用。\n* 一些图片的缓存算法都是使用LRU进行缓存优化的。ImageLoader框架更是将好几种缓存算法融合到里面，可以灵活选用。详细可以查看源码的实现。\n#### 3. LFU （最近最不常用 Least Frequently Used）\n选择访问次数最少的页面置换出来。<br>此算法的实现要花费的开销很大，并且要确定一个合适的周期T也有一定的难度，就不在分析了。\n#### 3. OPT （理想）\n此算法置换以后不再需要或最长时间以后才会用到的页面。这一算法一般不可能实现，但它可以作为衡量其他页面置换算法的标准。<br>\n分析过程，如下图：\n\n![](http://7xr1vo.com1.z0.glb.clouddn.com/%E5%9B%BE3.png)\n","source":"_posts/简单的页面置换算法分析.md","raw":"---\ntitle: 简单的页面置换算法分析\ndate: 2016-06-04 19:39\ncategories: 算法\ntags: LRU\n---\n>本文主要分析操作系统中涉及到的一些常见的置换算法，并不对涉及的操作系统内容过多介绍。这些算法在其他的计算机应用中也有体现，基本原理都是一致的，可参考理解。\n\n### 一、前提说明\n本文主要针对一个例子进行说明，以下的算法实现过程均是按照本例进行分析。页面的走向为：\n\n    4 3 2 1 4 3 5 4 3 2 1 5 \n一段程序在内存中，分配3个页面，初始情况下为空。\n以下依次根据不同的算法进行页面置换过程的分析。\n### 二、算法分析过程\n#### 1. FIFO（先进先出）\nFIFO算是最简单、最容易理解的算法了，只要按照依次装入内存的页面的页号按照进入的先后次序排好队列，每次总是从队首出，队尾出。当发生缺页时，置换队首的页面即可。<br>\n对上面的页面走向序列，分析过程如下图：\n\n![](http://7xr1vo.com1.z0.glb.clouddn.com/%E5%9B%BE1.png)\n#### 2. LRU （最近最少使用 Least Recently Used）\n在缺页发生时，选择离现在最长时间内，没有被访问过的页面置换出来。<br>\n分析过程，如下图：\n\n![](http://7xr1vo.com1.z0.glb.clouddn.com/%E5%9B%BE2.png)\n\n* 此算法应用的比较广泛，尤其是拿来做缓存算法。Android的API中，已经封装了相关的LRU的算法直接可以调用。\n* 一些图片的缓存算法都是使用LRU进行缓存优化的。ImageLoader框架更是将好几种缓存算法融合到里面，可以灵活选用。详细可以查看源码的实现。\n#### 3. LFU （最近最不常用 Least Frequently Used）\n选择访问次数最少的页面置换出来。<br>此算法的实现要花费的开销很大，并且要确定一个合适的周期T也有一定的难度，就不在分析了。\n#### 3. OPT （理想）\n此算法置换以后不再需要或最长时间以后才会用到的页面。这一算法一般不可能实现，但它可以作为衡量其他页面置换算法的标准。<br>\n分析过程，如下图：\n\n![](http://7xr1vo.com1.z0.glb.clouddn.com/%E5%9B%BE3.png)\n","slug":"简单的页面置换算法分析","published":1,"updated":"2016-12-17T14:19:18.847Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciwvuoct6000wf0v7tgs5tb4l","content":"<blockquote>\n<p>本文主要分析操作系统中涉及到的一些常见的置换算法，并不对涉及的操作系统内容过多介绍。这些算法在其他的计算机应用中也有体现，基本原理都是一致的，可参考理解。</p>\n</blockquote>\n<h3 id=\"一、前提说明\"><a href=\"#一、前提说明\" class=\"headerlink\" title=\"一、前提说明\"></a>一、前提说明</h3><p>本文主要针对一个例子进行说明，以下的算法实现过程均是按照本例进行分析。页面的走向为：</p>\n<pre><code>4 3 2 1 4 3 5 4 3 2 1 5 \n</code></pre><p>一段程序在内存中，分配3个页面，初始情况下为空。<br>以下依次根据不同的算法进行页面置换过程的分析。</p>\n<h3 id=\"二、算法分析过程\"><a href=\"#二、算法分析过程\" class=\"headerlink\" title=\"二、算法分析过程\"></a>二、算法分析过程</h3><h4 id=\"1-FIFO（先进先出）\"><a href=\"#1-FIFO（先进先出）\" class=\"headerlink\" title=\"1. FIFO（先进先出）\"></a>1. FIFO（先进先出）</h4><p>FIFO算是最简单、最容易理解的算法了，只要按照依次装入内存的页面的页号按照进入的先后次序排好队列，每次总是从队首出，队尾出。当发生缺页时，置换队首的页面即可。<br><br>对上面的页面走向序列，分析过程如下图：</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/%E5%9B%BE1.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<h4 id=\"2-LRU-（最近最少使用-Least-Recently-Used）\"><a href=\"#2-LRU-（最近最少使用-Least-Recently-Used）\" class=\"headerlink\" title=\"2. LRU （最近最少使用 Least Recently Used）\"></a>2. LRU （最近最少使用 Least Recently Used）</h4><p>在缺页发生时，选择离现在最长时间内，没有被访问过的页面置换出来。<br><br>分析过程，如下图：</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/%E5%9B%BE2.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<ul>\n<li>此算法应用的比较广泛，尤其是拿来做缓存算法。Android的API中，已经封装了相关的LRU的算法直接可以调用。</li>\n<li>一些图片的缓存算法都是使用LRU进行缓存优化的。ImageLoader框架更是将好几种缓存算法融合到里面，可以灵活选用。详细可以查看源码的实现。<h4 id=\"3-LFU-（最近最不常用-Least-Frequently-Used）\"><a href=\"#3-LFU-（最近最不常用-Least-Frequently-Used）\" class=\"headerlink\" title=\"3. LFU （最近最不常用 Least Frequently Used）\"></a>3. LFU （最近最不常用 Least Frequently Used）</h4>选择访问次数最少的页面置换出来。<br>此算法的实现要花费的开销很大，并且要确定一个合适的周期T也有一定的难度，就不在分析了。<h4 id=\"3-OPT-（理想）\"><a href=\"#3-OPT-（理想）\" class=\"headerlink\" title=\"3. OPT （理想）\"></a>3. OPT （理想）</h4>此算法置换以后不再需要或最长时间以后才会用到的页面。这一算法一般不可能实现，但它可以作为衡量其他页面置换算法的标准。<br><br>分析过程，如下图：</li>\n</ul>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/%E5%9B%BE3.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n","excerpt":"","more":"<blockquote>\n<p>本文主要分析操作系统中涉及到的一些常见的置换算法，并不对涉及的操作系统内容过多介绍。这些算法在其他的计算机应用中也有体现，基本原理都是一致的，可参考理解。</p>\n</blockquote>\n<h3 id=\"一、前提说明\"><a href=\"#一、前提说明\" class=\"headerlink\" title=\"一、前提说明\"></a>一、前提说明</h3><p>本文主要针对一个例子进行说明，以下的算法实现过程均是按照本例进行分析。页面的走向为：</p>\n<pre><code>4 3 2 1 4 3 5 4 3 2 1 5 \n</code></pre><p>一段程序在内存中，分配3个页面，初始情况下为空。<br>以下依次根据不同的算法进行页面置换过程的分析。</p>\n<h3 id=\"二、算法分析过程\"><a href=\"#二、算法分析过程\" class=\"headerlink\" title=\"二、算法分析过程\"></a>二、算法分析过程</h3><h4 id=\"1-FIFO（先进先出）\"><a href=\"#1-FIFO（先进先出）\" class=\"headerlink\" title=\"1. FIFO（先进先出）\"></a>1. FIFO（先进先出）</h4><p>FIFO算是最简单、最容易理解的算法了，只要按照依次装入内存的页面的页号按照进入的先后次序排好队列，每次总是从队首出，队尾出。当发生缺页时，置换队首的页面即可。<br><br>对上面的页面走向序列，分析过程如下图：</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/%E5%9B%BE1.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<h4 id=\"2-LRU-（最近最少使用-Least-Recently-Used）\"><a href=\"#2-LRU-（最近最少使用-Least-Recently-Used）\" class=\"headerlink\" title=\"2. LRU （最近最少使用 Least Recently Used）\"></a>2. LRU （最近最少使用 Least Recently Used）</h4><p>在缺页发生时，选择离现在最长时间内，没有被访问过的页面置换出来。<br><br>分析过程，如下图：</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/%E5%9B%BE2.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<ul>\n<li>此算法应用的比较广泛，尤其是拿来做缓存算法。Android的API中，已经封装了相关的LRU的算法直接可以调用。</li>\n<li>一些图片的缓存算法都是使用LRU进行缓存优化的。ImageLoader框架更是将好几种缓存算法融合到里面，可以灵活选用。详细可以查看源码的实现。<h4 id=\"3-LFU-（最近最不常用-Least-Frequently-Used）\"><a href=\"#3-LFU-（最近最不常用-Least-Frequently-Used）\" class=\"headerlink\" title=\"3. LFU （最近最不常用 Least Frequently Used）\"></a>3. LFU （最近最不常用 Least Frequently Used）</h4>选择访问次数最少的页面置换出来。<br>此算法的实现要花费的开销很大，并且要确定一个合适的周期T也有一定的难度，就不在分析了。<h4 id=\"3-OPT-（理想）\"><a href=\"#3-OPT-（理想）\" class=\"headerlink\" title=\"3. OPT （理想）\"></a>3. OPT （理想）</h4>此算法置换以后不再需要或最长时间以后才会用到的页面。这一算法一般不可能实现，但它可以作为衡量其他页面置换算法的标准。<br><br>分析过程，如下图：</li>\n</ul>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/%E5%9B%BE3.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n"},{"title":"滑动冲突之EditText-ScrollView","date":"2016-08-16T09:14:00.000Z","_content":"### 问题一\n\tEditText的内容过多时，EditText的内容并不能滚动，而是ScrollView的滚动\n### 解决\n\t\t重写EditText的onTouch事件，将触摸事件交给EditText来处理\n\n``` java\net.setOnTouchListener(new View.OnTouchListener() {\n            @Override\n            public boolean onTouch(View v, MotionEvent event) {\n            \t// 设置ScrollView不拦截事件\n                scrollView.requestDisallowInterceptTouchEvent(true);\n            \tswitch (event.getAction() & MotionEvent.ACTION_MASK){\n                \tcase MotionEvent.ACTION_UP:\n                \t// 手指离开时：重置ScrollView事件拦截的状态\n                    slContainer.requestDisallowInterceptTouchEvent(false);\n                    \tbreak;\n            \t}\n            \treturn false;\n            }\n        });\n    }\n```\n### 问题二\n\t\t若有ScrollView内容比较多，比较长时，编辑EditText里的内容时会出现ScrollView滑到底部的现象，使得当前编辑的EditText看不到了\n### 解决\n\t\t修改AndroidManifest.xml中Activity的windowSoftInputMode属性\n``` xml\n<activity\n\tandroid:name=\".me.MineResumeProjectExperienceActivity\"\n\tandroid:screenOrientation=\"portrait\n\tandroid:windowSoftInputMode=\"stateHidden|adjustPan\"/>\n```","source":"_posts/滑动冲突之EditText-ScrollView.md","raw":"---\ntitle: 滑动冲突之EditText-ScrollView\ndate: 2016-08-16 17:14\ncategories: Android\ntags: 滑动冲突\n---\n### 问题一\n\tEditText的内容过多时，EditText的内容并不能滚动，而是ScrollView的滚动\n### 解决\n\t\t重写EditText的onTouch事件，将触摸事件交给EditText来处理\n\n``` java\net.setOnTouchListener(new View.OnTouchListener() {\n            @Override\n            public boolean onTouch(View v, MotionEvent event) {\n            \t// 设置ScrollView不拦截事件\n                scrollView.requestDisallowInterceptTouchEvent(true);\n            \tswitch (event.getAction() & MotionEvent.ACTION_MASK){\n                \tcase MotionEvent.ACTION_UP:\n                \t// 手指离开时：重置ScrollView事件拦截的状态\n                    slContainer.requestDisallowInterceptTouchEvent(false);\n                    \tbreak;\n            \t}\n            \treturn false;\n            }\n        });\n    }\n```\n### 问题二\n\t\t若有ScrollView内容比较多，比较长时，编辑EditText里的内容时会出现ScrollView滑到底部的现象，使得当前编辑的EditText看不到了\n### 解决\n\t\t修改AndroidManifest.xml中Activity的windowSoftInputMode属性\n``` xml\n<activity\n\tandroid:name=\".me.MineResumeProjectExperienceActivity\"\n\tandroid:screenOrientation=\"portrait\n\tandroid:windowSoftInputMode=\"stateHidden|adjustPan\"/>\n```","slug":"滑动冲突之EditText-ScrollView","published":1,"updated":"2017-02-08T11:30:25.000Z","_id":"ciwvuocub001vf0v7wev75e53","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"问题一\"><a href=\"#问题一\" class=\"headerlink\" title=\"问题一\"></a>问题一</h3><pre><code>EditText的内容过多时，EditText的内容并不能滚动，而是ScrollView的滚动\n</code></pre><h3 id=\"解决\"><a href=\"#解决\" class=\"headerlink\" title=\"解决\"></a>解决</h3><pre><code>重写EditText的onTouch事件，将触摸事件交给EditText来处理\n</code></pre><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">et.setOnTouchListener(<span class=\"keyword\">new</span> View.OnTouchListener() &#123;</div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onTouch</span><span class=\"params\">(View v, MotionEvent event)</span> </span>&#123;</div><div class=\"line\">            \t<span class=\"comment\">// 设置ScrollView不拦截事件</span></div><div class=\"line\">                scrollView.requestDisallowInterceptTouchEvent(<span class=\"keyword\">true</span>);</div><div class=\"line\">            \t<span class=\"keyword\">switch</span> (event.getAction() &amp; MotionEvent.ACTION_MASK)&#123;</div><div class=\"line\">                \t<span class=\"keyword\">case</span> MotionEvent.ACTION_UP:</div><div class=\"line\">                \t<span class=\"comment\">// 手指离开时：重置ScrollView事件拦截的状态</span></div><div class=\"line\">                    slContainer.requestDisallowInterceptTouchEvent(<span class=\"keyword\">false</span>);</div><div class=\"line\">                    \t<span class=\"keyword\">break</span>;</div><div class=\"line\">            \t&#125;</div><div class=\"line\">            \t<span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;);</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<h3 id=\"问题二\"><a href=\"#问题二\" class=\"headerlink\" title=\"问题二\"></a>问题二</h3><pre><code>若有ScrollView内容比较多，比较长时，编辑EditText里的内容时会出现ScrollView滑到底部的现象，使得当前编辑的EditText看不到了\n</code></pre><h3 id=\"解决-1\"><a href=\"#解决-1\" class=\"headerlink\" title=\"解决\"></a>解决</h3><pre><code>修改AndroidManifest.xml中Activity的windowSoftInputMode属性\n</code></pre><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">activity</span></span></div><div class=\"line\">\t<span class=\"attr\">android:name</span>=<span class=\"string\">\".me.MineResumeProjectExperienceActivity\"</span></div><div class=\"line\">\t<span class=\"attr\">android:screenOrientation</span>=<span class=\"string\">\"portrait</span></div><div class=\"line\">\tandroid:windowSoftInputMode=\"<span class=\"attr\">stateHidden</span>|<span class=\"attr\">adjustPan</span>\"/&gt;</div></pre></td></tr></table></figure>","excerpt":"","more":"<h3 id=\"问题一\"><a href=\"#问题一\" class=\"headerlink\" title=\"问题一\"></a>问题一</h3><pre><code>EditText的内容过多时，EditText的内容并不能滚动，而是ScrollView的滚动\n</code></pre><h3 id=\"解决\"><a href=\"#解决\" class=\"headerlink\" title=\"解决\"></a>解决</h3><pre><code>重写EditText的onTouch事件，将触摸事件交给EditText来处理\n</code></pre><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">et.setOnTouchListener(<span class=\"keyword\">new</span> View.OnTouchListener() &#123;</div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onTouch</span><span class=\"params\">(View v, MotionEvent event)</span> </span>&#123;</div><div class=\"line\">            \t<span class=\"comment\">// 设置ScrollView不拦截事件</span></div><div class=\"line\">                scrollView.requestDisallowInterceptTouchEvent(<span class=\"keyword\">true</span>);</div><div class=\"line\">            \t<span class=\"keyword\">switch</span> (event.getAction() &amp; MotionEvent.ACTION_MASK)&#123;</div><div class=\"line\">                \t<span class=\"keyword\">case</span> MotionEvent.ACTION_UP:</div><div class=\"line\">                \t<span class=\"comment\">// 手指离开时：重置ScrollView事件拦截的状态</span></div><div class=\"line\">                    slContainer.requestDisallowInterceptTouchEvent(<span class=\"keyword\">false</span>);</div><div class=\"line\">                    \t<span class=\"keyword\">break</span>;</div><div class=\"line\">            \t&#125;</div><div class=\"line\">            \t<span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;);</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<h3 id=\"问题二\"><a href=\"#问题二\" class=\"headerlink\" title=\"问题二\"></a>问题二</h3><pre><code>若有ScrollView内容比较多，比较长时，编辑EditText里的内容时会出现ScrollView滑到底部的现象，使得当前编辑的EditText看不到了\n</code></pre><h3 id=\"解决-1\"><a href=\"#解决-1\" class=\"headerlink\" title=\"解决\"></a>解决</h3><pre><code>修改AndroidManifest.xml中Activity的windowSoftInputMode属性\n</code></pre><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">activity</span></div><div class=\"line\">\t<span class=\"attr\">android:name</span>=<span class=\"string\">\".me.MineResumeProjectExperienceActivity\"</span></div><div class=\"line\">\t<span class=\"attr\">android:screenOrientation</span>=<span class=\"string\">\"portrait</div><div class=\"line\">\tandroid:windowSoftInputMode=\"</span><span class=\"attr\">stateHidden</span>|<span class=\"attr\">adjustPan</span>\"/&gt;</span></div></pre></td></tr></table></figure>"},{"title":"Android WebView 相关踩坑","date":"2016-12-15T05:29:00.000Z","_content":"### url 传参 url 嵌套的问题\n#### 问题场景\nget请求链接中： 传参中含有url\n\n\"chinahr://customer/h5page?\" + LEOGAO_PAGE+\"=\"+finishpage+\"&\"+LEOGAO_ACTION+\"=\"+finishaction + \"&\"+INTENT_URL+\"=\" + <b><font color=\"red\">url</font></b>\n\n其中：\n<b><font color=\"red\">url：</font></b>  file:///android_asset/hybird/cp/index.html?uid=\" + cuid +\"&gender=\"+gender +\"&photo=\"+photoPath;\n\n合并之后：\n\"chinahr://customer/h5page?\" + LEOGAO_PAGE+\"=\"+finishpage+\"&\"+LEOGAO_ACTION+\"=\"+finishaction + \"&\"+INTENT_URL+\"=\"+“file:///android_asset/hybird/cp/index.html?uid=\" + cuid +\"&gender=\"+gender +\"&photo=\"+photoPath；\n\n所以这个 url 中的 第二个及以后的参数第一次就会被router解析，并不会将 url 整体作为一个参数传到下一个页面中去再次解析识别。\n#### 解决方法\n##### Android端\n``` java\nJSONObject jsonObject = new JSONObject();\ntry {\n    jsonObject.put(\"uid\", cUid);\n    jsonObject.put(\"gender\", gender);\n    jsonObject.put(\"photo\", potoPath);\n    paramsResult =  URLEncoder.encode(Base64.encodeToString(jsonObject.toString().getBytes(), Base64.DEFAULT));\n} catch (JSONException e) {\n    e.printStackTrace();\n}\n// 此处为加载本地，也可以为网络url\nBaseH5Activity.startWebViewActivity(this, \"file:///android_asset/hybird/cp/index.html?params=\" + paramsResult, \"\",\"\",\"\",\"\");\n```\n##### 前端js\n``` javascript\nvar me = this;\nvar href = window.location.url || window.location.href;\nvar params = me.getParams(href, 'params');\nparams = Base64.decode(decodeURIComponent(params));\ninfo = JSON.parse(params);\nvar uid = info.uid;\nvar photo = info.photo;\nvar gender = info.gender;\n```\n##### 踩坑\n* 第一次使用UrlEncoder编码，k可能会造成浏览器与js解析数据会存在不一致的问题\n解决：先使用base64进行编码，解决数据不一致的问题，再进行UrlEncoder编码（为了防止base64编码后的数据解析时：\"+\" 会当做空格的问题 ） \n* 加载本地 html 时：直接设置 cookie 在 本地url 上是无效的，也是没有必要的。自己遇到的问题是：加载本地 html，此html中使用的 jsonp 请求网络，此时需要的cookie，需要设置 WebView 的cookie，使之持久化，下次会自动带 cookie 访问网络的。\n### Android 5.0 WebView 设置cookie问题\n\n* 对于 Android 5.0 以上的WebView，默认关闭了接收三方cookie，但是提供了设置 cookie的接口，需要开发者去手动设置三方信任cookie。否则，加载本地 html 时，cookie 同步不过去。\n代码如下：\n\n``` java\nCookieManager cookieManager = CookieManager.getInstance();\ncookieManager.setAcceptCookie(true);\ncookieManager.setAcceptFileSchemeCookies(true);\nif (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {\n    cookieManager.setAcceptThirdPartyCookies(webView, true);\n}\n```\n### Android WebView 加载本地 html\n\n* webview 加载 sd 卡下的 html 是不能访问的，权限问题。\n* 如果访问 /data/data/包名/files/index.html，需要开启文件访问权限（默认是开启的，不要动态设置关闭）\n``` java\nwebSettings.setAllowFileAccess(false);// 关闭\n```\n\n### 补充\n在线加解密、编码解析工具：\nhttp://tool.oschina.net/encrypt?type=3","source":"_posts/Android WebView 相关踩坑.md","raw":"---\ntitle: Android WebView 相关踩坑\ndate: 2016-12-15 13:29\ncategories: Hybird\ntags: h5\n---\n### url 传参 url 嵌套的问题\n#### 问题场景\nget请求链接中： 传参中含有url\n\n\"chinahr://customer/h5page?\" + LEOGAO_PAGE+\"=\"+finishpage+\"&\"+LEOGAO_ACTION+\"=\"+finishaction + \"&\"+INTENT_URL+\"=\" + <b><font color=\"red\">url</font></b>\n\n其中：\n<b><font color=\"red\">url：</font></b>  file:///android_asset/hybird/cp/index.html?uid=\" + cuid +\"&gender=\"+gender +\"&photo=\"+photoPath;\n\n合并之后：\n\"chinahr://customer/h5page?\" + LEOGAO_PAGE+\"=\"+finishpage+\"&\"+LEOGAO_ACTION+\"=\"+finishaction + \"&\"+INTENT_URL+\"=\"+“file:///android_asset/hybird/cp/index.html?uid=\" + cuid +\"&gender=\"+gender +\"&photo=\"+photoPath；\n\n所以这个 url 中的 第二个及以后的参数第一次就会被router解析，并不会将 url 整体作为一个参数传到下一个页面中去再次解析识别。\n#### 解决方法\n##### Android端\n``` java\nJSONObject jsonObject = new JSONObject();\ntry {\n    jsonObject.put(\"uid\", cUid);\n    jsonObject.put(\"gender\", gender);\n    jsonObject.put(\"photo\", potoPath);\n    paramsResult =  URLEncoder.encode(Base64.encodeToString(jsonObject.toString().getBytes(), Base64.DEFAULT));\n} catch (JSONException e) {\n    e.printStackTrace();\n}\n// 此处为加载本地，也可以为网络url\nBaseH5Activity.startWebViewActivity(this, \"file:///android_asset/hybird/cp/index.html?params=\" + paramsResult, \"\",\"\",\"\",\"\");\n```\n##### 前端js\n``` javascript\nvar me = this;\nvar href = window.location.url || window.location.href;\nvar params = me.getParams(href, 'params');\nparams = Base64.decode(decodeURIComponent(params));\ninfo = JSON.parse(params);\nvar uid = info.uid;\nvar photo = info.photo;\nvar gender = info.gender;\n```\n##### 踩坑\n* 第一次使用UrlEncoder编码，k可能会造成浏览器与js解析数据会存在不一致的问题\n解决：先使用base64进行编码，解决数据不一致的问题，再进行UrlEncoder编码（为了防止base64编码后的数据解析时：\"+\" 会当做空格的问题 ） \n* 加载本地 html 时：直接设置 cookie 在 本地url 上是无效的，也是没有必要的。自己遇到的问题是：加载本地 html，此html中使用的 jsonp 请求网络，此时需要的cookie，需要设置 WebView 的cookie，使之持久化，下次会自动带 cookie 访问网络的。\n### Android 5.0 WebView 设置cookie问题\n\n* 对于 Android 5.0 以上的WebView，默认关闭了接收三方cookie，但是提供了设置 cookie的接口，需要开发者去手动设置三方信任cookie。否则，加载本地 html 时，cookie 同步不过去。\n代码如下：\n\n``` java\nCookieManager cookieManager = CookieManager.getInstance();\ncookieManager.setAcceptCookie(true);\ncookieManager.setAcceptFileSchemeCookies(true);\nif (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {\n    cookieManager.setAcceptThirdPartyCookies(webView, true);\n}\n```\n### Android WebView 加载本地 html\n\n* webview 加载 sd 卡下的 html 是不能访问的，权限问题。\n* 如果访问 /data/data/包名/files/index.html，需要开启文件访问权限（默认是开启的，不要动态设置关闭）\n``` java\nwebSettings.setAllowFileAccess(false);// 关闭\n```\n\n### 补充\n在线加解密、编码解析工具：\nhttp://tool.oschina.net/encrypt?type=3","slug":"Android WebView 相关踩坑","published":1,"updated":"2017-02-08T11:53:18.000Z","_id":"cix1byekj0000gcv70eoeb2ws","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"url-传参-url-嵌套的问题\"><a href=\"#url-传参-url-嵌套的问题\" class=\"headerlink\" title=\"url 传参 url 嵌套的问题\"></a>url 传参 url 嵌套的问题</h3><h4 id=\"问题场景\"><a href=\"#问题场景\" class=\"headerlink\" title=\"问题场景\"></a>问题场景</h4><p>get请求链接中： 传参中含有url</p>\n<p>“chinahr://customer/h5page?” + LEOGAO_PAGE+”=”+finishpage+”&amp;”+LEOGAO_ACTION+”=”+finishaction + “&amp;”+INTENT_URL+”=” + <b><font color=\"red\">url</font></b></p>\n<p>其中：<br><b><font color=\"red\">url：</font></b>  file:///android_asset/hybird/cp/index.html?uid=” + cuid +”&amp;gender=”+gender +”&amp;photo=”+photoPath;</p>\n<p>合并之后：<br>“chinahr://customer/h5page?” + LEOGAO_PAGE+”=”+finishpage+”&amp;”+LEOGAO_ACTION+”=”+finishaction + “&amp;”+INTENT_URL+”=”+“file:///android_asset/hybird/cp/index.html?uid=” + cuid +”&amp;gender=”+gender +”&amp;photo=”+photoPath；</p>\n<p>所以这个 url 中的 第二个及以后的参数第一次就会被router解析，并不会将 url 整体作为一个参数传到下一个页面中去再次解析识别。</p>\n<h4 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h4><h5 id=\"Android端\"><a href=\"#Android端\" class=\"headerlink\" title=\"Android端\"></a>Android端</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">JSONObject jsonObject = <span class=\"keyword\">new</span> JSONObject();</div><div class=\"line\"><span class=\"keyword\">try</span> &#123;</div><div class=\"line\">    jsonObject.put(<span class=\"string\">\"uid\"</span>, cUid);</div><div class=\"line\">    jsonObject.put(<span class=\"string\">\"gender\"</span>, gender);</div><div class=\"line\">    jsonObject.put(<span class=\"string\">\"photo\"</span>, potoPath);</div><div class=\"line\">    paramsResult =  URLEncoder.encode(Base64.encodeToString(jsonObject.toString().getBytes(), Base64.DEFAULT));</div><div class=\"line\">&#125; <span class=\"keyword\">catch</span> (JSONException e) &#123;</div><div class=\"line\">    e.printStackTrace();</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 此处为加载本地，也可以为网络url</span></div><div class=\"line\">BaseH5Activity.startWebViewActivity(<span class=\"keyword\">this</span>, <span class=\"string\">\"file:///android_asset/hybird/cp/index.html?params=\"</span> + paramsResult, <span class=\"string\">\"\"</span>,<span class=\"string\">\"\"</span>,<span class=\"string\">\"\"</span>,<span class=\"string\">\"\"</span>);</div></pre></td></tr></table></figure>\n<h5 id=\"前端js\"><a href=\"#前端js\" class=\"headerlink\" title=\"前端js\"></a>前端js</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> me = <span class=\"keyword\">this</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> href = <span class=\"built_in\">window</span>.location.url || <span class=\"built_in\">window</span>.location.href;</div><div class=\"line\"><span class=\"keyword\">var</span> params = me.getParams(href, <span class=\"string\">'params'</span>);</div><div class=\"line\">params = Base64.decode(<span class=\"built_in\">decodeURIComponent</span>(params));</div><div class=\"line\">info = <span class=\"built_in\">JSON</span>.parse(params);</div><div class=\"line\"><span class=\"keyword\">var</span> uid = info.uid;</div><div class=\"line\"><span class=\"keyword\">var</span> photo = info.photo;</div><div class=\"line\"><span class=\"keyword\">var</span> gender = info.gender;</div></pre></td></tr></table></figure>\n<h5 id=\"踩坑\"><a href=\"#踩坑\" class=\"headerlink\" title=\"踩坑\"></a>踩坑</h5><ul>\n<li>第一次使用UrlEncoder编码，k可能会造成浏览器与js解析数据会存在不一致的问题<br>解决：先使用base64进行编码，解决数据不一致的问题，再进行UrlEncoder编码（为了防止base64编码后的数据解析时：”+” 会当做空格的问题 ） </li>\n<li><p>加载本地 html 时：直接设置 cookie 在 本地url 上是无效的，也是没有必要的。自己遇到的问题是：加载本地 html，此html中使用的 jsonp 请求网络，此时需要的cookie，需要设置 WebView 的cookie，使之持久化，下次会自动带 cookie 访问网络的。</p>\n<h3 id=\"Android-5-0-WebView-设置cookie问题\"><a href=\"#Android-5-0-WebView-设置cookie问题\" class=\"headerlink\" title=\"Android 5.0 WebView 设置cookie问题\"></a>Android 5.0 WebView 设置cookie问题</h3></li>\n<li><p>对于 Android 5.0 以上的WebView，默认关闭了接收三方cookie，但是提供了设置 cookie的接口，需要开发者去手动设置三方信任cookie。否则，加载本地 html 时，cookie 同步不过去。<br>代码如下：</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">CookieManager cookieManager = CookieManager.getInstance();</div><div class=\"line\">cookieManager.setAcceptCookie(<span class=\"keyword\">true</span>);</div><div class=\"line\">cookieManager.setAcceptFileSchemeCookies(<span class=\"keyword\">true</span>);</div><div class=\"line\"><span class=\"keyword\">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.LOLLIPOP) &#123;</div><div class=\"line\">    cookieManager.setAcceptThirdPartyCookies(webView, <span class=\"keyword\">true</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"Android-WebView-加载本地-html\"><a href=\"#Android-WebView-加载本地-html\" class=\"headerlink\" title=\"Android WebView 加载本地 html\"></a>Android WebView 加载本地 html</h3><ul>\n<li>webview 加载 sd 卡下的 html 是不能访问的，权限问题。</li>\n<li>如果访问 /data/data/包名/files/index.html，需要开启文件访问权限（默认是开启的，不要动态设置关闭）<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">webSettings.setAllowFileAccess(<span class=\"keyword\">false</span>);<span class=\"comment\">// 关闭</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"补充\"><a href=\"#补充\" class=\"headerlink\" title=\"补充\"></a>补充</h3><p>在线加解密、编码解析工具：<br><a href=\"http://tool.oschina.net/encrypt?type=3\" target=\"_blank\" rel=\"external\">http://tool.oschina.net/encrypt?type=3</a></p>\n","excerpt":"","more":"<h3 id=\"url-传参-url-嵌套的问题\"><a href=\"#url-传参-url-嵌套的问题\" class=\"headerlink\" title=\"url 传参 url 嵌套的问题\"></a>url 传参 url 嵌套的问题</h3><h4 id=\"问题场景\"><a href=\"#问题场景\" class=\"headerlink\" title=\"问题场景\"></a>问题场景</h4><p>get请求链接中： 传参中含有url</p>\n<p>“chinahr://customer/h5page?” + LEOGAO_PAGE+”=”+finishpage+”&amp;”+LEOGAO_ACTION+”=”+finishaction + “&amp;”+INTENT_URL+”=” + <b><font color=\"red\">url</font></b></p>\n<p>其中：<br><b><font color=\"red\">url：</font></b>  file:///android_asset/hybird/cp/index.html?uid=” + cuid +”&amp;gender=”+gender +”&amp;photo=”+photoPath;</p>\n<p>合并之后：<br>“chinahr://customer/h5page?” + LEOGAO_PAGE+”=”+finishpage+”&amp;”+LEOGAO_ACTION+”=”+finishaction + “&amp;”+INTENT_URL+”=”+“file:///android_asset/hybird/cp/index.html?uid=” + cuid +”&amp;gender=”+gender +”&amp;photo=”+photoPath；</p>\n<p>所以这个 url 中的 第二个及以后的参数第一次就会被router解析，并不会将 url 整体作为一个参数传到下一个页面中去再次解析识别。</p>\n<h4 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h4><h5 id=\"Android端\"><a href=\"#Android端\" class=\"headerlink\" title=\"Android端\"></a>Android端</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">JSONObject jsonObject = <span class=\"keyword\">new</span> JSONObject();</div><div class=\"line\"><span class=\"keyword\">try</span> &#123;</div><div class=\"line\">    jsonObject.put(<span class=\"string\">\"uid\"</span>, cUid);</div><div class=\"line\">    jsonObject.put(<span class=\"string\">\"gender\"</span>, gender);</div><div class=\"line\">    jsonObject.put(<span class=\"string\">\"photo\"</span>, potoPath);</div><div class=\"line\">    paramsResult =  URLEncoder.encode(Base64.encodeToString(jsonObject.toString().getBytes(), Base64.DEFAULT));</div><div class=\"line\">&#125; <span class=\"keyword\">catch</span> (JSONException e) &#123;</div><div class=\"line\">    e.printStackTrace();</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 此处为加载本地，也可以为网络url</span></div><div class=\"line\">BaseH5Activity.startWebViewActivity(<span class=\"keyword\">this</span>, <span class=\"string\">\"file:///android_asset/hybird/cp/index.html?params=\"</span> + paramsResult, <span class=\"string\">\"\"</span>,<span class=\"string\">\"\"</span>,<span class=\"string\">\"\"</span>,<span class=\"string\">\"\"</span>);</div></pre></td></tr></table></figure>\n<h5 id=\"前端js\"><a href=\"#前端js\" class=\"headerlink\" title=\"前端js\"></a>前端js</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> me = <span class=\"keyword\">this</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> href = <span class=\"built_in\">window</span>.location.url || <span class=\"built_in\">window</span>.location.href;</div><div class=\"line\"><span class=\"keyword\">var</span> params = me.getParams(href, <span class=\"string\">'params'</span>);</div><div class=\"line\">params = Base64.decode(<span class=\"built_in\">decodeURIComponent</span>(params));</div><div class=\"line\">info = <span class=\"built_in\">JSON</span>.parse(params);</div><div class=\"line\"><span class=\"keyword\">var</span> uid = info.uid;</div><div class=\"line\"><span class=\"keyword\">var</span> photo = info.photo;</div><div class=\"line\"><span class=\"keyword\">var</span> gender = info.gender;</div></pre></td></tr></table></figure>\n<h5 id=\"踩坑\"><a href=\"#踩坑\" class=\"headerlink\" title=\"踩坑\"></a>踩坑</h5><ul>\n<li>第一次使用UrlEncoder编码，k可能会造成浏览器与js解析数据会存在不一致的问题<br>解决：先使用base64进行编码，解决数据不一致的问题，再进行UrlEncoder编码（为了防止base64编码后的数据解析时：”+” 会当做空格的问题 ） </li>\n<li><p>加载本地 html 时：直接设置 cookie 在 本地url 上是无效的，也是没有必要的。自己遇到的问题是：加载本地 html，此html中使用的 jsonp 请求网络，此时需要的cookie，需要设置 WebView 的cookie，使之持久化，下次会自动带 cookie 访问网络的。</p>\n<h3 id=\"Android-5-0-WebView-设置cookie问题\"><a href=\"#Android-5-0-WebView-设置cookie问题\" class=\"headerlink\" title=\"Android 5.0 WebView 设置cookie问题\"></a>Android 5.0 WebView 设置cookie问题</h3></li>\n<li><p>对于 Android 5.0 以上的WebView，默认关闭了接收三方cookie，但是提供了设置 cookie的接口，需要开发者去手动设置三方信任cookie。否则，加载本地 html 时，cookie 同步不过去。<br>代码如下：</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">CookieManager cookieManager = CookieManager.getInstance();</div><div class=\"line\">cookieManager.setAcceptCookie(<span class=\"keyword\">true</span>);</div><div class=\"line\">cookieManager.setAcceptFileSchemeCookies(<span class=\"keyword\">true</span>);</div><div class=\"line\"><span class=\"keyword\">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.LOLLIPOP) &#123;</div><div class=\"line\">    cookieManager.setAcceptThirdPartyCookies(webView, <span class=\"keyword\">true</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"Android-WebView-加载本地-html\"><a href=\"#Android-WebView-加载本地-html\" class=\"headerlink\" title=\"Android WebView 加载本地 html\"></a>Android WebView 加载本地 html</h3><ul>\n<li>webview 加载 sd 卡下的 html 是不能访问的，权限问题。</li>\n<li>如果访问 /data/data/包名/files/index.html，需要开启文件访问权限（默认是开启的，不要动态设置关闭）<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">webSettings.setAllowFileAccess(<span class=\"keyword\">false</span>);<span class=\"comment\">// 关闭</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"补充\"><a href=\"#补充\" class=\"headerlink\" title=\"补充\"></a>补充</h3><p>在线加解密、编码解析工具：<br><a href=\"http://tool.oschina.net/encrypt?type=3\">http://tool.oschina.net/encrypt?type=3</a></p>\n"},{"title":"Gradle实现自动拉取git及压缩文件","date":"2017-02-01T07:00:00.000Z","_content":"### 问题\n在实现 hybird 相关开发时，h5文件需要不断重新拉取，并解压文件，拷贝至项目的相关目录下。手工完成比较繁琐且耗时。自己查阅 gradle 相关文档，将其过程实现脚本自动化。\n可实现：自动拉取相关 git 服务器上最新文件，并压缩至 src/main/assets/hybird目录下，打包时就会自动带上最新的h5文件了。\n\n### 解决\n上代码：\n\n``` gradle\nafterEvaluate {\n    tasks.matching {\n        it.name.startsWith('process') && (it.name.endsWith('ReleaseJavaRes') || it.name.endsWith\n                ('DebugJavaRes'))\n    }.each { tk ->\n        tk.dependsOn(deletehybird)\n    }\n}\n\n// clone hybird 文件\ntask cloneHybird(type: Exec){\n    delete file(\"src/main/assets/hybird\")\n\n    def osName = System.getProperty(\"os.name\")\n    if (osName.contains(\"Windows\")) {\n        commandLine 'cmd', '/c', 'git clone  https://github.com/fenglincanyi/…… .git src/main/assets/hybird'\n    } else if (osName.contains(\"Mac OS\")) {\n        commandLine 'git', 'clone', ' https://github.com/fenglincanyi/…… .git', 'src/main/assets/hybird'\n    } else if (osName.contains(\"LINUX\")){\n        commandLine 'git', 'clone', ' https://github.com/fenglincanyi/…… .git', 'src/main/assets/hybird'\n    }\n    println(\"============== task cloneHybird ==============\")\n}\n\n// 压缩 hybird文件\ntask zipHybird(type: Zip) {\n    dependsOn cloneHybird\n\n    if (file('src/main/assets/hybird.zip').lastModified() >= file('src/main/assets/hybird').lastModified()) {// 保证zip包最新\n        delete file(\"src/main/assets/hybird.zip\")\n    }\n\n    archiveName = 'hybird.zip'\n    destinationDir = file('src/main/assets')\n    from 'src/main/assets/hybird/0.1'\n    println(\"============== task hybirdZip ==============\")\n}\n\n// 删除 hybird 目录及文件，只留 hybird.zip\ntask deletehybird(type: Delete) {\n    dependsOn zipHybird\n\n    delete \"src/main/assets/hybird\"\n    println(\"============== deletehybird ==============\")\n}\n```\n\n<br>\n此处，单独运行 task，演示效果：\n![](http://7xr1vo.com1.z0.glb.clouddn.com/5FAACC49-BCE0-44ED-A60C-30378795BF74.png)\n\nbuild 结果：\n![](http://7xr1vo.com1.z0.glb.clouddn.com/22.png)\n\n在 assets 目录下生成：\n![](http://7xr1vo.com1.z0.glb.clouddn.com/33.png)\n\n### 遇到的问题\nMac系统执行 commandLine 去 clone 时，每次都报错：\n\n``` java\nCaused by: org.gradle.process.internal.ExecException: A problem occurred starting process 'command 'git clone https://github.com/fenglincanyi/…… .git''\n11:38:32.043 [ERROR] [org.gradle.BuildExceptionReporter]      at org.gradle.process.internal.DefaultExecHandle.setEndStateInfo(DefaultExecHandle.java:197)\n11:38:32.043 [ERROR] [org.gradle.BuildExceptionReporter]      at org.gradle.process.internal.DefaultExecHandle.failed(DefaultExecHandle.java:327)\n11:38:32.043 [ERROR] [org.gradle.BuildExceptionReporter]      at org.gradle.process.internal.ExecHandleRunner.run(ExecHandleRunner.java:86)\n11:38:32.043 [ERROR] [org.gradle.BuildExceptionReporter]      ... 2 more\n11:38:32.043 [ERROR] [org.gradle.BuildExceptionReporter] Caused by: net.rubygrapefruit.platform.NativeException: Could not start 'git clone https://github.com/fenglincanyi/…… .git'\n11:38:32.043 [ERROR] [org.gradle.BuildExceptionReporter]      at net.rubygrapefruit.platform.internal.DefaultProcessLauncher.start(DefaultProcessLauncher.java:27)\n11:38:32.043 [ERROR] [org.gradle.BuildExceptionReporter]      at net.rubygrapefruit.platform.internal.WrapperProcessLauncher.start(WrapperProcessLauncher.java:36)\n11:38:32.043 [ERROR] [org.gradle.BuildExceptionReporter]      at org.gradle.process.internal.ExecHandleRunner.run(ExecHandleRunner.java:68)\n11:38:32.043 [ERROR] [org.gradle.BuildExceptionReporter]      ... 2 more\n11:38:32.043 [ERROR] [org.gradle.BuildExceptionReporter] Caused by: java.io.IOException: Cannot run program \"git clone https://github.com/fenglincanyi/…… .git\" (in directory \"/Users/geng/AndroidStudioProjects/GradleTest/app\"): error=2, No such file or directory\n11:38:32.043 [ERROR] [org.gradle.BuildExceptionReporter]      at net.rubygrapefruit.platform.internal.DefaultProcessLauncher.start(DefaultProcessLauncher.java:25)\n11:38:32.044 [ERROR] [org.gradle.BuildExceptionReporter]      ... 4 more\n11:38:32.044 [ERROR] [org.gradle.BuildExceptionReporter] Caused by: java.io.IOException: error=2, No such file or directory\n11:38:32.044 [ERROR] [org.gradle.BuildExceptionReporter]      ... 5 more\n11:38:32.044 [ERROR] [org.gradle.BuildExceptionReporter]\n```\n最后Google半天，在 Mac 或 Linux 系统下，需要将命令中的字符串 逐个分割：\n\n``` gradle\ncommandLine 'git', 'clone', ' https://github.com/fenglincanyi/…… .git', 'src/main/assets/hybird'\n```\nGradle 官网的文档，说明的并不是很详细，这里要吐槽下。。。\n\n### 总结\n* Gradle 基于Groovy实现，内置了许多好用的API，如：copy，zip等等，这些都可以将传统开发中的手动执行实现自动化\n* Gradle 的确方便了开发者，使用脚本来实现繁琐和重复的工作，也将开发过程中配置工作变得更加灵活\n\n<br>\n参考：\nhttps://www.jeeboot.com/archives/1563.html\nhttp://stackoverflow.com/questions/15776431/in-gradle-tasks-of-type-exec-why-do-commandline-and-executable-behave-different\nhttps://docs.gradle.org/current/dsl/org.gradle.api.tasks.Exec.html#org.gradle.api.tasks.Exec:commandLine(java.lang.Object%5B%5D\nhttps://segmentfault.com/q/1010000004503896","source":"_posts/Gradle实现自动拉取git及压缩文件.md","raw":"---\ntitle: Gradle实现自动拉取git及压缩文件\ndate: 2017-2-1 15:00\ncategories: Gradle\ntags: Gradle\n---\n### 问题\n在实现 hybird 相关开发时，h5文件需要不断重新拉取，并解压文件，拷贝至项目的相关目录下。手工完成比较繁琐且耗时。自己查阅 gradle 相关文档，将其过程实现脚本自动化。\n可实现：自动拉取相关 git 服务器上最新文件，并压缩至 src/main/assets/hybird目录下，打包时就会自动带上最新的h5文件了。\n\n### 解决\n上代码：\n\n``` gradle\nafterEvaluate {\n    tasks.matching {\n        it.name.startsWith('process') && (it.name.endsWith('ReleaseJavaRes') || it.name.endsWith\n                ('DebugJavaRes'))\n    }.each { tk ->\n        tk.dependsOn(deletehybird)\n    }\n}\n\n// clone hybird 文件\ntask cloneHybird(type: Exec){\n    delete file(\"src/main/assets/hybird\")\n\n    def osName = System.getProperty(\"os.name\")\n    if (osName.contains(\"Windows\")) {\n        commandLine 'cmd', '/c', 'git clone  https://github.com/fenglincanyi/…… .git src/main/assets/hybird'\n    } else if (osName.contains(\"Mac OS\")) {\n        commandLine 'git', 'clone', ' https://github.com/fenglincanyi/…… .git', 'src/main/assets/hybird'\n    } else if (osName.contains(\"LINUX\")){\n        commandLine 'git', 'clone', ' https://github.com/fenglincanyi/…… .git', 'src/main/assets/hybird'\n    }\n    println(\"============== task cloneHybird ==============\")\n}\n\n// 压缩 hybird文件\ntask zipHybird(type: Zip) {\n    dependsOn cloneHybird\n\n    if (file('src/main/assets/hybird.zip').lastModified() >= file('src/main/assets/hybird').lastModified()) {// 保证zip包最新\n        delete file(\"src/main/assets/hybird.zip\")\n    }\n\n    archiveName = 'hybird.zip'\n    destinationDir = file('src/main/assets')\n    from 'src/main/assets/hybird/0.1'\n    println(\"============== task hybirdZip ==============\")\n}\n\n// 删除 hybird 目录及文件，只留 hybird.zip\ntask deletehybird(type: Delete) {\n    dependsOn zipHybird\n\n    delete \"src/main/assets/hybird\"\n    println(\"============== deletehybird ==============\")\n}\n```\n\n<br>\n此处，单独运行 task，演示效果：\n![](http://7xr1vo.com1.z0.glb.clouddn.com/5FAACC49-BCE0-44ED-A60C-30378795BF74.png)\n\nbuild 结果：\n![](http://7xr1vo.com1.z0.glb.clouddn.com/22.png)\n\n在 assets 目录下生成：\n![](http://7xr1vo.com1.z0.glb.clouddn.com/33.png)\n\n### 遇到的问题\nMac系统执行 commandLine 去 clone 时，每次都报错：\n\n``` java\nCaused by: org.gradle.process.internal.ExecException: A problem occurred starting process 'command 'git clone https://github.com/fenglincanyi/…… .git''\n11:38:32.043 [ERROR] [org.gradle.BuildExceptionReporter]      at org.gradle.process.internal.DefaultExecHandle.setEndStateInfo(DefaultExecHandle.java:197)\n11:38:32.043 [ERROR] [org.gradle.BuildExceptionReporter]      at org.gradle.process.internal.DefaultExecHandle.failed(DefaultExecHandle.java:327)\n11:38:32.043 [ERROR] [org.gradle.BuildExceptionReporter]      at org.gradle.process.internal.ExecHandleRunner.run(ExecHandleRunner.java:86)\n11:38:32.043 [ERROR] [org.gradle.BuildExceptionReporter]      ... 2 more\n11:38:32.043 [ERROR] [org.gradle.BuildExceptionReporter] Caused by: net.rubygrapefruit.platform.NativeException: Could not start 'git clone https://github.com/fenglincanyi/…… .git'\n11:38:32.043 [ERROR] [org.gradle.BuildExceptionReporter]      at net.rubygrapefruit.platform.internal.DefaultProcessLauncher.start(DefaultProcessLauncher.java:27)\n11:38:32.043 [ERROR] [org.gradle.BuildExceptionReporter]      at net.rubygrapefruit.platform.internal.WrapperProcessLauncher.start(WrapperProcessLauncher.java:36)\n11:38:32.043 [ERROR] [org.gradle.BuildExceptionReporter]      at org.gradle.process.internal.ExecHandleRunner.run(ExecHandleRunner.java:68)\n11:38:32.043 [ERROR] [org.gradle.BuildExceptionReporter]      ... 2 more\n11:38:32.043 [ERROR] [org.gradle.BuildExceptionReporter] Caused by: java.io.IOException: Cannot run program \"git clone https://github.com/fenglincanyi/…… .git\" (in directory \"/Users/geng/AndroidStudioProjects/GradleTest/app\"): error=2, No such file or directory\n11:38:32.043 [ERROR] [org.gradle.BuildExceptionReporter]      at net.rubygrapefruit.platform.internal.DefaultProcessLauncher.start(DefaultProcessLauncher.java:25)\n11:38:32.044 [ERROR] [org.gradle.BuildExceptionReporter]      ... 4 more\n11:38:32.044 [ERROR] [org.gradle.BuildExceptionReporter] Caused by: java.io.IOException: error=2, No such file or directory\n11:38:32.044 [ERROR] [org.gradle.BuildExceptionReporter]      ... 5 more\n11:38:32.044 [ERROR] [org.gradle.BuildExceptionReporter]\n```\n最后Google半天，在 Mac 或 Linux 系统下，需要将命令中的字符串 逐个分割：\n\n``` gradle\ncommandLine 'git', 'clone', ' https://github.com/fenglincanyi/…… .git', 'src/main/assets/hybird'\n```\nGradle 官网的文档，说明的并不是很详细，这里要吐槽下。。。\n\n### 总结\n* Gradle 基于Groovy实现，内置了许多好用的API，如：copy，zip等等，这些都可以将传统开发中的手动执行实现自动化\n* Gradle 的确方便了开发者，使用脚本来实现繁琐和重复的工作，也将开发过程中配置工作变得更加灵活\n\n<br>\n参考：\nhttps://www.jeeboot.com/archives/1563.html\nhttp://stackoverflow.com/questions/15776431/in-gradle-tasks-of-type-exec-why-do-commandline-and-executable-behave-different\nhttps://docs.gradle.org/current/dsl/org.gradle.api.tasks.Exec.html#org.gradle.api.tasks.Exec:commandLine(java.lang.Object%5B%5D\nhttps://segmentfault.com/q/1010000004503896","slug":"Gradle实现自动拉取git及压缩文件","published":1,"updated":"2017-02-08T11:55:44.000Z","_id":"ciypiymm80000ylqwmxl4bcxk","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h3><p>在实现 hybird 相关开发时，h5文件需要不断重新拉取，并解压文件，拷贝至项目的相关目录下。手工完成比较繁琐且耗时。自己查阅 gradle 相关文档，将其过程实现脚本自动化。<br>可实现：自动拉取相关 git 服务器上最新文件，并压缩至 src/main/assets/hybird目录下，打包时就会自动带上最新的h5文件了。</p>\n<h3 id=\"解决\"><a href=\"#解决\" class=\"headerlink\" title=\"解决\"></a>解决</h3><p>上代码：</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div></pre></td><td class=\"code\"><pre><div class=\"line\">afterEvaluate &#123;</div><div class=\"line\">    tasks.matching &#123;</div><div class=\"line\">        it.name.startsWith(<span class=\"string\">'process'</span>) &amp;&amp; (it.name.endsWith(<span class=\"string\">'ReleaseJavaRes'</span>) || it.name.endsWith</div><div class=\"line\">                (<span class=\"string\">'DebugJavaRes'</span>))</div><div class=\"line\">    &#125;.<span class=\"keyword\">each</span> &#123; tk -&gt;</div><div class=\"line\">        tk.dependsOn(deletehybird)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// clone hybird 文件</span></div><div class=\"line\"><span class=\"keyword\">task</span> cloneHybird(type: Exec)&#123;</div><div class=\"line\">    <span class=\"keyword\">delete</span> <span class=\"keyword\">file</span>(<span class=\"string\">\"src/main/assets/hybird\"</span>)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">def</span> osName = System.getProperty(<span class=\"string\">\"os.name\"</span>)</div><div class=\"line\">    <span class=\"keyword\">if</span> (osName.contains(<span class=\"string\">\"Windows\"</span>)) &#123;</div><div class=\"line\">        commandLine <span class=\"string\">'cmd'</span>, <span class=\"string\">'/c'</span>, <span class=\"string\">'git clone  https://github.com/fenglincanyi/…… .git src/main/assets/hybird'</span></div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (osName.contains(<span class=\"string\">\"Mac OS\"</span>)) &#123;</div><div class=\"line\">        commandLine <span class=\"string\">'git'</span>, <span class=\"string\">'clone'</span>, <span class=\"string\">' https://github.com/fenglincanyi/…… .git'</span>, <span class=\"string\">'src/main/assets/hybird'</span></div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (osName.contains(<span class=\"string\">\"LINUX\"</span>))&#123;</div><div class=\"line\">        commandLine <span class=\"string\">'git'</span>, <span class=\"string\">'clone'</span>, <span class=\"string\">' https://github.com/fenglincanyi/…… .git'</span>, <span class=\"string\">'src/main/assets/hybird'</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">println</span>(<span class=\"string\">\"============== task cloneHybird ==============\"</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 压缩 hybird文件</span></div><div class=\"line\"><span class=\"keyword\">task</span> zipHybird(type: Zip) &#123;</div><div class=\"line\">    dependsOn cloneHybird</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">file</span>(<span class=\"string\">'src/main/assets/hybird.zip'</span>).lastModified() &gt;= <span class=\"keyword\">file</span>(<span class=\"string\">'src/main/assets/hybird'</span>).lastModified()) &#123;<span class=\"comment\">// 保证zip包最新</span></div><div class=\"line\">        <span class=\"keyword\">delete</span> <span class=\"keyword\">file</span>(<span class=\"string\">\"src/main/assets/hybird.zip\"</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    archiveName = <span class=\"string\">'hybird.zip'</span></div><div class=\"line\">    <span class=\"keyword\">destinationDir</span> = <span class=\"keyword\">file</span>(<span class=\"string\">'src/main/assets'</span>)</div><div class=\"line\">    <span class=\"keyword\">from</span> <span class=\"string\">'src/main/assets/hybird/0.1'</span></div><div class=\"line\">    <span class=\"keyword\">println</span>(<span class=\"string\">\"============== task hybirdZip ==============\"</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 删除 hybird 目录及文件，只留 hybird.zip</span></div><div class=\"line\"><span class=\"keyword\">task</span> deletehybird(type: <span class=\"keyword\">Delete</span>) &#123;</div><div class=\"line\">    dependsOn zipHybird</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">delete</span> <span class=\"string\">\"src/main/assets/hybird\"</span></div><div class=\"line\">    <span class=\"keyword\">println</span>(<span class=\"string\">\"============== deletehybird ==============\"</span>)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><br><br>此处，单独运行 task，演示效果：<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/5FAACC49-BCE0-44ED-A60C-30378795BF74.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure></p>\n<p>build 结果：<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/22.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure></p>\n<p>在 assets 目录下生成：<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/33.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure></p>\n<h3 id=\"遇到的问题\"><a href=\"#遇到的问题\" class=\"headerlink\" title=\"遇到的问题\"></a>遇到的问题</h3><p>Mac系统执行 commandLine 去 clone 时，每次都报错：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">Caused by: org.gradle.process.internal.ExecException: A problem occurred starting process <span class=\"string\">'command '</span>git clone https:<span class=\"comment\">//github.com/fenglincanyi/…… .git''</span></div><div class=\"line\"><span class=\"number\">11</span>:<span class=\"number\">38</span>:<span class=\"number\">32.043</span> [ERROR] [org.gradle.BuildExceptionReporter]      at org.gradle.process.internal.DefaultExecHandle.setEndStateInfo(DefaultExecHandle.java:<span class=\"number\">197</span>)</div><div class=\"line\"><span class=\"number\">11</span>:<span class=\"number\">38</span>:<span class=\"number\">32.043</span> [ERROR] [org.gradle.BuildExceptionReporter]      at org.gradle.process.internal.DefaultExecHandle.failed(DefaultExecHandle.java:<span class=\"number\">327</span>)</div><div class=\"line\"><span class=\"number\">11</span>:<span class=\"number\">38</span>:<span class=\"number\">32.043</span> [ERROR] [org.gradle.BuildExceptionReporter]      at org.gradle.process.internal.ExecHandleRunner.run(ExecHandleRunner.java:<span class=\"number\">86</span>)</div><div class=\"line\"><span class=\"number\">11</span>:<span class=\"number\">38</span>:<span class=\"number\">32.043</span> [ERROR] [org.gradle.BuildExceptionReporter]      ... <span class=\"number\">2</span> more</div><div class=\"line\"><span class=\"number\">11</span>:<span class=\"number\">38</span>:<span class=\"number\">32.043</span> [ERROR] [org.gradle.BuildExceptionReporter] Caused by: net.rubygrapefruit.platform.NativeException: Could not start <span class=\"string\">'git clone https://github.com/fenglincanyi/…… .git'</span></div><div class=\"line\"><span class=\"number\">11</span>:<span class=\"number\">38</span>:<span class=\"number\">32.043</span> [ERROR] [org.gradle.BuildExceptionReporter]      at net.rubygrapefruit.platform.internal.DefaultProcessLauncher.start(DefaultProcessLauncher.java:<span class=\"number\">27</span>)</div><div class=\"line\"><span class=\"number\">11</span>:<span class=\"number\">38</span>:<span class=\"number\">32.043</span> [ERROR] [org.gradle.BuildExceptionReporter]      at net.rubygrapefruit.platform.internal.WrapperProcessLauncher.start(WrapperProcessLauncher.java:<span class=\"number\">36</span>)</div><div class=\"line\"><span class=\"number\">11</span>:<span class=\"number\">38</span>:<span class=\"number\">32.043</span> [ERROR] [org.gradle.BuildExceptionReporter]      at org.gradle.process.internal.ExecHandleRunner.run(ExecHandleRunner.java:<span class=\"number\">68</span>)</div><div class=\"line\"><span class=\"number\">11</span>:<span class=\"number\">38</span>:<span class=\"number\">32.043</span> [ERROR] [org.gradle.BuildExceptionReporter]      ... <span class=\"number\">2</span> more</div><div class=\"line\"><span class=\"number\">11</span>:<span class=\"number\">38</span>:<span class=\"number\">32.043</span> [ERROR] [org.gradle.BuildExceptionReporter] Caused by: java.io.IOException: Cannot run program <span class=\"string\">\"git clone https://github.com/fenglincanyi/…… .git\"</span> (in directory <span class=\"string\">\"/Users/geng/AndroidStudioProjects/GradleTest/app\"</span>): error=<span class=\"number\">2</span>, No such file or directory</div><div class=\"line\"><span class=\"number\">11</span>:<span class=\"number\">38</span>:<span class=\"number\">32.043</span> [ERROR] [org.gradle.BuildExceptionReporter]      at net.rubygrapefruit.platform.internal.DefaultProcessLauncher.start(DefaultProcessLauncher.java:<span class=\"number\">25</span>)</div><div class=\"line\"><span class=\"number\">11</span>:<span class=\"number\">38</span>:<span class=\"number\">32.044</span> [ERROR] [org.gradle.BuildExceptionReporter]      ... <span class=\"number\">4</span> more</div><div class=\"line\"><span class=\"number\">11</span>:<span class=\"number\">38</span>:<span class=\"number\">32.044</span> [ERROR] [org.gradle.BuildExceptionReporter] Caused by: java.io.IOException: error=<span class=\"number\">2</span>, No such file or directory</div><div class=\"line\"><span class=\"number\">11</span>:<span class=\"number\">38</span>:<span class=\"number\">32.044</span> [ERROR] [org.gradle.BuildExceptionReporter]      ... <span class=\"number\">5</span> more</div><div class=\"line\"><span class=\"number\">11</span>:<span class=\"number\">38</span>:<span class=\"number\">32.044</span> [ERROR] [org.gradle.BuildExceptionReporter]</div></pre></td></tr></table></figure>\n<p>最后Google半天，在 Mac 或 Linux 系统下，需要将命令中的字符串 逐个分割：</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">commandLine <span class=\"string\">'git'</span>, <span class=\"string\">'clone'</span>, <span class=\"string\">' https://github.com/fenglincanyi/…… .git'</span>, <span class=\"string\">'src/main/assets/hybird'</span></div></pre></td></tr></table></figure>\n<p>Gradle 官网的文档，说明的并不是很详细，这里要吐槽下。。。</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><ul>\n<li>Gradle 基于Groovy实现，内置了许多好用的API，如：copy，zip等等，这些都可以将传统开发中的手动执行实现自动化</li>\n<li>Gradle 的确方便了开发者，使用脚本来实现繁琐和重复的工作，也将开发过程中配置工作变得更加灵活</li>\n</ul>\n<p><br><br>参考：<br><a href=\"https://www.jeeboot.com/archives/1563.html\" target=\"_blank\" rel=\"external\">https://www.jeeboot.com/archives/1563.html</a><br><a href=\"http://stackoverflow.com/questions/15776431/in-gradle-tasks-of-type-exec-why-do-commandline-and-executable-behave-different\" target=\"_blank\" rel=\"external\">http://stackoverflow.com/questions/15776431/in-gradle-tasks-of-type-exec-why-do-commandline-and-executable-behave-different</a><br><a href=\"https://docs.gradle.org/current/dsl/org.gradle.api.tasks.Exec.html#org.gradle.api.tasks.Exec:commandLine(java.lang.Object%5B%5D\" target=\"_blank\" rel=\"external\">https://docs.gradle.org/current/dsl/org.gradle.api.tasks.Exec.html#org.gradle.api.tasks.Exec:commandLine(java.lang.Object%5B%5D</a><br><a href=\"https://segmentfault.com/q/1010000004503896\" target=\"_blank\" rel=\"external\">https://segmentfault.com/q/1010000004503896</a></p>\n","excerpt":"","more":"<h3 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h3><p>在实现 hybird 相关开发时，h5文件需要不断重新拉取，并解压文件，拷贝至项目的相关目录下。手工完成比较繁琐且耗时。自己查阅 gradle 相关文档，将其过程实现脚本自动化。<br>可实现：自动拉取相关 git 服务器上最新文件，并压缩至 src/main/assets/hybird目录下，打包时就会自动带上最新的h5文件了。</p>\n<h3 id=\"解决\"><a href=\"#解决\" class=\"headerlink\" title=\"解决\"></a>解决</h3><p>上代码：</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div></pre></td><td class=\"code\"><pre><div class=\"line\">afterEvaluate &#123;</div><div class=\"line\">    tasks.matching &#123;</div><div class=\"line\">        it.name.startsWith(<span class=\"string\">'process'</span>) &amp;&amp; (it.name.endsWith(<span class=\"string\">'ReleaseJavaRes'</span>) || it.name.endsWith</div><div class=\"line\">                (<span class=\"string\">'DebugJavaRes'</span>))</div><div class=\"line\">    &#125;.<span class=\"keyword\">each</span> &#123; tk -&gt;</div><div class=\"line\">        tk.dependsOn(deletehybird)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// clone hybird 文件</span></div><div class=\"line\"><span class=\"keyword\">task</span> cloneHybird(type: Exec)&#123;</div><div class=\"line\">    <span class=\"keyword\">delete</span> <span class=\"keyword\">file</span>(<span class=\"string\">\"src/main/assets/hybird\"</span>)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">def</span> osName = System.getProperty(<span class=\"string\">\"os.name\"</span>)</div><div class=\"line\">    <span class=\"keyword\">if</span> (osName.contains(<span class=\"string\">\"Windows\"</span>)) &#123;</div><div class=\"line\">        commandLine <span class=\"string\">'cmd'</span>, <span class=\"string\">'/c'</span>, <span class=\"string\">'git clone  https://github.com/fenglincanyi/…… .git src/main/assets/hybird'</span></div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (osName.contains(<span class=\"string\">\"Mac OS\"</span>)) &#123;</div><div class=\"line\">        commandLine <span class=\"string\">'git'</span>, <span class=\"string\">'clone'</span>, <span class=\"string\">' https://github.com/fenglincanyi/…… .git'</span>, <span class=\"string\">'src/main/assets/hybird'</span></div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (osName.contains(<span class=\"string\">\"LINUX\"</span>))&#123;</div><div class=\"line\">        commandLine <span class=\"string\">'git'</span>, <span class=\"string\">'clone'</span>, <span class=\"string\">' https://github.com/fenglincanyi/…… .git'</span>, <span class=\"string\">'src/main/assets/hybird'</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">println</span>(<span class=\"string\">\"============== task cloneHybird ==============\"</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 压缩 hybird文件</span></div><div class=\"line\"><span class=\"keyword\">task</span> zipHybird(type: Zip) &#123;</div><div class=\"line\">    dependsOn cloneHybird</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">file</span>(<span class=\"string\">'src/main/assets/hybird.zip'</span>).lastModified() &gt;= <span class=\"keyword\">file</span>(<span class=\"string\">'src/main/assets/hybird'</span>).lastModified()) &#123;<span class=\"comment\">// 保证zip包最新</span></div><div class=\"line\">        <span class=\"keyword\">delete</span> <span class=\"keyword\">file</span>(<span class=\"string\">\"src/main/assets/hybird.zip\"</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    archiveName = <span class=\"string\">'hybird.zip'</span></div><div class=\"line\">    <span class=\"keyword\">destinationDir</span> = <span class=\"keyword\">file</span>(<span class=\"string\">'src/main/assets'</span>)</div><div class=\"line\">    <span class=\"keyword\">from</span> <span class=\"string\">'src/main/assets/hybird/0.1'</span></div><div class=\"line\">    <span class=\"keyword\">println</span>(<span class=\"string\">\"============== task hybirdZip ==============\"</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 删除 hybird 目录及文件，只留 hybird.zip</span></div><div class=\"line\"><span class=\"keyword\">task</span> deletehybird(type: <span class=\"keyword\">Delete</span>) &#123;</div><div class=\"line\">    dependsOn zipHybird</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">delete</span> <span class=\"string\">\"src/main/assets/hybird\"</span></div><div class=\"line\">    <span class=\"keyword\">println</span>(<span class=\"string\">\"============== deletehybird ==============\"</span>)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><br><br>此处，单独运行 task，演示效果：<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/5FAACC49-BCE0-44ED-A60C-30378795BF74.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure></p>\n<p>build 结果：<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/22.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure></p>\n<p>在 assets 目录下生成：<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/33.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure></p>\n<h3 id=\"遇到的问题\"><a href=\"#遇到的问题\" class=\"headerlink\" title=\"遇到的问题\"></a>遇到的问题</h3><p>Mac系统执行 commandLine 去 clone 时，每次都报错：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">Caused by: org.gradle.process.internal.ExecException: A problem occurred starting process <span class=\"string\">'command '</span>git clone https:<span class=\"comment\">//github.com/fenglincanyi/…… .git''</span></div><div class=\"line\"><span class=\"number\">11</span>:<span class=\"number\">38</span>:<span class=\"number\">32.043</span> [ERROR] [org.gradle.BuildExceptionReporter]      at org.gradle.process.internal.DefaultExecHandle.setEndStateInfo(DefaultExecHandle.java:<span class=\"number\">197</span>)</div><div class=\"line\"><span class=\"number\">11</span>:<span class=\"number\">38</span>:<span class=\"number\">32.043</span> [ERROR] [org.gradle.BuildExceptionReporter]      at org.gradle.process.internal.DefaultExecHandle.failed(DefaultExecHandle.java:<span class=\"number\">327</span>)</div><div class=\"line\"><span class=\"number\">11</span>:<span class=\"number\">38</span>:<span class=\"number\">32.043</span> [ERROR] [org.gradle.BuildExceptionReporter]      at org.gradle.process.internal.ExecHandleRunner.run(ExecHandleRunner.java:<span class=\"number\">86</span>)</div><div class=\"line\"><span class=\"number\">11</span>:<span class=\"number\">38</span>:<span class=\"number\">32.043</span> [ERROR] [org.gradle.BuildExceptionReporter]      ... <span class=\"number\">2</span> more</div><div class=\"line\"><span class=\"number\">11</span>:<span class=\"number\">38</span>:<span class=\"number\">32.043</span> [ERROR] [org.gradle.BuildExceptionReporter] Caused by: net.rubygrapefruit.platform.NativeException: Could not start <span class=\"string\">'git clone https://github.com/fenglincanyi/…… .git'</span></div><div class=\"line\"><span class=\"number\">11</span>:<span class=\"number\">38</span>:<span class=\"number\">32.043</span> [ERROR] [org.gradle.BuildExceptionReporter]      at net.rubygrapefruit.platform.internal.DefaultProcessLauncher.start(DefaultProcessLauncher.java:<span class=\"number\">27</span>)</div><div class=\"line\"><span class=\"number\">11</span>:<span class=\"number\">38</span>:<span class=\"number\">32.043</span> [ERROR] [org.gradle.BuildExceptionReporter]      at net.rubygrapefruit.platform.internal.WrapperProcessLauncher.start(WrapperProcessLauncher.java:<span class=\"number\">36</span>)</div><div class=\"line\"><span class=\"number\">11</span>:<span class=\"number\">38</span>:<span class=\"number\">32.043</span> [ERROR] [org.gradle.BuildExceptionReporter]      at org.gradle.process.internal.ExecHandleRunner.run(ExecHandleRunner.java:<span class=\"number\">68</span>)</div><div class=\"line\"><span class=\"number\">11</span>:<span class=\"number\">38</span>:<span class=\"number\">32.043</span> [ERROR] [org.gradle.BuildExceptionReporter]      ... <span class=\"number\">2</span> more</div><div class=\"line\"><span class=\"number\">11</span>:<span class=\"number\">38</span>:<span class=\"number\">32.043</span> [ERROR] [org.gradle.BuildExceptionReporter] Caused by: java.io.IOException: Cannot run program <span class=\"string\">\"git clone https://github.com/fenglincanyi/…… .git\"</span> (in directory <span class=\"string\">\"/Users/geng/AndroidStudioProjects/GradleTest/app\"</span>): error=<span class=\"number\">2</span>, No such file or directory</div><div class=\"line\"><span class=\"number\">11</span>:<span class=\"number\">38</span>:<span class=\"number\">32.043</span> [ERROR] [org.gradle.BuildExceptionReporter]      at net.rubygrapefruit.platform.internal.DefaultProcessLauncher.start(DefaultProcessLauncher.java:<span class=\"number\">25</span>)</div><div class=\"line\"><span class=\"number\">11</span>:<span class=\"number\">38</span>:<span class=\"number\">32.044</span> [ERROR] [org.gradle.BuildExceptionReporter]      ... <span class=\"number\">4</span> more</div><div class=\"line\"><span class=\"number\">11</span>:<span class=\"number\">38</span>:<span class=\"number\">32.044</span> [ERROR] [org.gradle.BuildExceptionReporter] Caused by: java.io.IOException: error=<span class=\"number\">2</span>, No such file or directory</div><div class=\"line\"><span class=\"number\">11</span>:<span class=\"number\">38</span>:<span class=\"number\">32.044</span> [ERROR] [org.gradle.BuildExceptionReporter]      ... <span class=\"number\">5</span> more</div><div class=\"line\"><span class=\"number\">11</span>:<span class=\"number\">38</span>:<span class=\"number\">32.044</span> [ERROR] [org.gradle.BuildExceptionReporter]</div></pre></td></tr></table></figure>\n<p>最后Google半天，在 Mac 或 Linux 系统下，需要将命令中的字符串 逐个分割：</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">commandLine <span class=\"string\">'git'</span>, <span class=\"string\">'clone'</span>, <span class=\"string\">' https://github.com/fenglincanyi/…… .git'</span>, <span class=\"string\">'src/main/assets/hybird'</span></div></pre></td></tr></table></figure>\n<p>Gradle 官网的文档，说明的并不是很详细，这里要吐槽下。。。</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><ul>\n<li>Gradle 基于Groovy实现，内置了许多好用的API，如：copy，zip等等，这些都可以将传统开发中的手动执行实现自动化</li>\n<li>Gradle 的确方便了开发者，使用脚本来实现繁琐和重复的工作，也将开发过程中配置工作变得更加灵活</li>\n</ul>\n<p><br><br>参考：<br><a href=\"https://www.jeeboot.com/archives/1563.html\">https://www.jeeboot.com/archives/1563.html</a><br><a href=\"http://stackoverflow.com/questions/15776431/in-gradle-tasks-of-type-exec-why-do-commandline-and-executable-behave-different\">http://stackoverflow.com/questions/15776431/in-gradle-tasks-of-type-exec-why-do-commandline-and-executable-behave-different</a><br><a href=\"https://docs.gradle.org/current/dsl/org.gradle.api.tasks.Exec.html#org.gradle.api.tasks.Exec:commandLine(java.lang.Object%5B%5D\">https://docs.gradle.org/current/dsl/org.gradle.api.tasks.Exec.html#org.gradle.api.tasks.Exec:commandLine(java.lang.Object%5B%5D</a><br><a href=\"https://segmentfault.com/q/1010000004503896\">https://segmentfault.com/q/1010000004503896</a></p>\n"},{"title":"Spring 学习（一）","date":"2016-12-26T06:06:00.000Z","_content":"## Spring的2个基本概念\n* aop\n面向切面编程\n在原有的基础上进行扩展，而不是进行修改。符合 开闭原则\n* ioc\n控制反转\n不通过手动 new 方式，来创建对象，而是交给Spring 容器根据配置，进行创建。从而将类的对象交给Spring 进行控制管理\n\n    * ioc 的2种方式来创建对象：\n    （1）通过配置文件\n    （2）通过注解\n<br>\n    * ioc 实现原理\n    \n    通过dom4j 解析 xml 文件，拿到类的全路径，然后通过反射的技术创建该类的对象，结合工厂模式返给调用方\n伪代码实现说明：\n\n``` xml\n<bean id=“userService” class=“com.geng.UserService” />\n```\n``` java\npublic class Factory {\n    public static UserService getUserService() {\n        String classValue = dom4j.getValue(“userService”);\n        Class clazz = Class.forName(“classValue”);\n        return clazz.newInstance();\n    }\n}\n```\n## Spring 运行时\n![](http://7xr1vo.com1.z0.glb.clouddn.com/spring-overview.png)\nSpring 提供了全面的Java web 服务框架，从web层到业务层，再到持久层，都有着相关模块的实现。\n对于Spring 最基本使用，必须尹若 Core Container中的4个重要的部分，方可使用。\n若只引用某部分的库，maven也会自动引用最核心的jar包到你的应用中。\n\n## Spring 第一个Demo 开发\n在 idea 中，创建 maven 项目，然后，编辑 pom.xml 文件。\n引入：Spring 主要的几个库，log4j，junit\n\n``` xml\n<dependencies>\n    <dependency>\n        <groupId>org.springframework</groupId>\n        <artifactId>spring-context</artifactId>\n        <version>4.3.5.RELEASE</version>\n    </dependency>\n    <dependency>\n        <groupId>log4j</groupId>\n        <artifactId>log4j</artifactId>\n        <version>1.2.17</version>\n    </dependency>\n    <dependency>\n        <groupId>junit</groupId>\n        <artifactId>junit</artifactId>\n        <version>4.12</version>\n    </dependency>\n</dependencies>\n```\n\n在resource 目录下，创建 xml 配置文件，如图：\n![](http://7xr1vo.com1.z0.glb.clouddn.com/A5CEBFD6-CFE5-404A-A42F-CF521BAB4B47.png)\n\nIdea 在你编辑时候，会提示相关的属性，方便书写配置\n\n``` xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd”>\n\n    <bean id=\"user\" class=\"com.geng.ioc.User\"/>\n\n</beans>\n```\n![](http://7xr1vo.com1.z0.glb.clouddn.com/9FEC554D-7DDC-48C7-BA89-3FAAAC181312.png)\n\n创建测试用例：\n\n``` java\npublic class UserTest {\n\n    private ApplicationContext context;\n\n    @Before\n    public void setUp() throws Exception {\n        context = new ClassPathXmlApplicationContext(\"beans1.xml\");\n    }\n\n    @Test\n    public void add() throws Exception {\n        User user = (User) context.getBean(\"user\");\n        user.add();\n    }\n\n}\n```\n![](http://7xr1vo.com1.z0.glb.clouddn.com/979F1DF8-ADF4-499F-8119-62CDDE033AD4.png)\n\n至此，我们完成了第一个 Spring demo\n## bean 的管理\n* 通过无参构造创建（前面第一个demo）\n* 通过静态工厂实现对象创建\n代码示例：\n\n\n``` java\npublic class BeanFactory {\n\n    public static User2 createUser2() {\n        return new User2();\n    }\n}\n\npublic class User2 {\n\n    public void add() {\n        System.out.println(\"user2.....”);\n    }\n}\n```\n\nxml中配置：\n\n``` xml\n<!--用静态工厂创建-->\n<bean id=\"user2\" class=\"com.geng.ioc.BeanFactory\" factory-method=\"createUser2”/>\n```\n测试：\n\n``` java\npublic class User2Test {\n\n    private ApplicationContext context;\n\n    @Before\n    public void setUp() throws Exception {\n        context = new ClassPathXmlApplicationContext(\"beans1.xml\");\n    }\n\n    @Test\n    public void add() throws Exception {\n        User2 user2 = (User2) context.getBean(\"user2\");\n        System.out.println(user2);\n        user2.add();\n    }\n\n}\n```\n![](http://7xr1vo.com1.z0.glb.clouddn.com/0815D096-5833-4AA4-9BD8-EE493BE15F32.png)\n* 通过实例工厂创建对象\n\n``` xml\n<!--用实例工厂创建—>\n<bean id=\"bean2Factory\" class=\"com.geng.ioc.Bean2Factory\" />\n<bean id=\"user2\" factory-bean=\"bean2Factory\" factory-method=\"getBean\"/>\n```\n这里不再验证。。。\n\n## Spring配置文件中的几个重要属性\n\nid：不能还有特殊符号，“_”是可以的\nname：可以含有特殊符号，如：#，历史版本中使用的，后期不推荐使用。context.getBean() 方法可以获取这两种属性的值\nclass：类的全路径\nscope：作用域  \n\n    singleton(默认)  \n    prototype(多例)\n    request 创建对象放在request域\n    session 创建对象放在session域\n    globalSession 一次登陆，任何地方都保存有登录状态\n\n## 附录：IDEA Resource 目录下，存放的文件类型\n![](http://7xr1vo.com1.z0.glb.clouddn.com/23395798-F73A-4EBB-95E2-1641C5EF8A24.png)\n\n（IDEA 官网：https://www.jetbrains.com/help/idea/2016.3/resource-files.html ）\n\n所以，在此目录下，我们一般存放配置文件，或一些必要的资源文件。\n\nDemo 地址：\nhttps://github.com/fenglincanyi/springdemo1","source":"_posts/Spring 学习（一）.md","raw":"---\ntitle: Spring 学习（一）\ndate: 2016-12-26 14:06\ncategories: Java后台\ntags: Spring\n---\n## Spring的2个基本概念\n* aop\n面向切面编程\n在原有的基础上进行扩展，而不是进行修改。符合 开闭原则\n* ioc\n控制反转\n不通过手动 new 方式，来创建对象，而是交给Spring 容器根据配置，进行创建。从而将类的对象交给Spring 进行控制管理\n\n    * ioc 的2种方式来创建对象：\n    （1）通过配置文件\n    （2）通过注解\n<br>\n    * ioc 实现原理\n    \n    通过dom4j 解析 xml 文件，拿到类的全路径，然后通过反射的技术创建该类的对象，结合工厂模式返给调用方\n伪代码实现说明：\n\n``` xml\n<bean id=“userService” class=“com.geng.UserService” />\n```\n``` java\npublic class Factory {\n    public static UserService getUserService() {\n        String classValue = dom4j.getValue(“userService”);\n        Class clazz = Class.forName(“classValue”);\n        return clazz.newInstance();\n    }\n}\n```\n## Spring 运行时\n![](http://7xr1vo.com1.z0.glb.clouddn.com/spring-overview.png)\nSpring 提供了全面的Java web 服务框架，从web层到业务层，再到持久层，都有着相关模块的实现。\n对于Spring 最基本使用，必须尹若 Core Container中的4个重要的部分，方可使用。\n若只引用某部分的库，maven也会自动引用最核心的jar包到你的应用中。\n\n## Spring 第一个Demo 开发\n在 idea 中，创建 maven 项目，然后，编辑 pom.xml 文件。\n引入：Spring 主要的几个库，log4j，junit\n\n``` xml\n<dependencies>\n    <dependency>\n        <groupId>org.springframework</groupId>\n        <artifactId>spring-context</artifactId>\n        <version>4.3.5.RELEASE</version>\n    </dependency>\n    <dependency>\n        <groupId>log4j</groupId>\n        <artifactId>log4j</artifactId>\n        <version>1.2.17</version>\n    </dependency>\n    <dependency>\n        <groupId>junit</groupId>\n        <artifactId>junit</artifactId>\n        <version>4.12</version>\n    </dependency>\n</dependencies>\n```\n\n在resource 目录下，创建 xml 配置文件，如图：\n![](http://7xr1vo.com1.z0.glb.clouddn.com/A5CEBFD6-CFE5-404A-A42F-CF521BAB4B47.png)\n\nIdea 在你编辑时候，会提示相关的属性，方便书写配置\n\n``` xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd”>\n\n    <bean id=\"user\" class=\"com.geng.ioc.User\"/>\n\n</beans>\n```\n![](http://7xr1vo.com1.z0.glb.clouddn.com/9FEC554D-7DDC-48C7-BA89-3FAAAC181312.png)\n\n创建测试用例：\n\n``` java\npublic class UserTest {\n\n    private ApplicationContext context;\n\n    @Before\n    public void setUp() throws Exception {\n        context = new ClassPathXmlApplicationContext(\"beans1.xml\");\n    }\n\n    @Test\n    public void add() throws Exception {\n        User user = (User) context.getBean(\"user\");\n        user.add();\n    }\n\n}\n```\n![](http://7xr1vo.com1.z0.glb.clouddn.com/979F1DF8-ADF4-499F-8119-62CDDE033AD4.png)\n\n至此，我们完成了第一个 Spring demo\n## bean 的管理\n* 通过无参构造创建（前面第一个demo）\n* 通过静态工厂实现对象创建\n代码示例：\n\n\n``` java\npublic class BeanFactory {\n\n    public static User2 createUser2() {\n        return new User2();\n    }\n}\n\npublic class User2 {\n\n    public void add() {\n        System.out.println(\"user2.....”);\n    }\n}\n```\n\nxml中配置：\n\n``` xml\n<!--用静态工厂创建-->\n<bean id=\"user2\" class=\"com.geng.ioc.BeanFactory\" factory-method=\"createUser2”/>\n```\n测试：\n\n``` java\npublic class User2Test {\n\n    private ApplicationContext context;\n\n    @Before\n    public void setUp() throws Exception {\n        context = new ClassPathXmlApplicationContext(\"beans1.xml\");\n    }\n\n    @Test\n    public void add() throws Exception {\n        User2 user2 = (User2) context.getBean(\"user2\");\n        System.out.println(user2);\n        user2.add();\n    }\n\n}\n```\n![](http://7xr1vo.com1.z0.glb.clouddn.com/0815D096-5833-4AA4-9BD8-EE493BE15F32.png)\n* 通过实例工厂创建对象\n\n``` xml\n<!--用实例工厂创建—>\n<bean id=\"bean2Factory\" class=\"com.geng.ioc.Bean2Factory\" />\n<bean id=\"user2\" factory-bean=\"bean2Factory\" factory-method=\"getBean\"/>\n```\n这里不再验证。。。\n\n## Spring配置文件中的几个重要属性\n\nid：不能还有特殊符号，“_”是可以的\nname：可以含有特殊符号，如：#，历史版本中使用的，后期不推荐使用。context.getBean() 方法可以获取这两种属性的值\nclass：类的全路径\nscope：作用域  \n\n    singleton(默认)  \n    prototype(多例)\n    request 创建对象放在request域\n    session 创建对象放在session域\n    globalSession 一次登陆，任何地方都保存有登录状态\n\n## 附录：IDEA Resource 目录下，存放的文件类型\n![](http://7xr1vo.com1.z0.glb.clouddn.com/23395798-F73A-4EBB-95E2-1641C5EF8A24.png)\n\n（IDEA 官网：https://www.jetbrains.com/help/idea/2016.3/resource-files.html ）\n\n所以，在此目录下，我们一般存放配置文件，或一些必要的资源文件。\n\nDemo 地址：\nhttps://github.com/fenglincanyi/springdemo1","slug":"Spring 学习（一）","published":1,"updated":"2017-02-08T12:03:31.000Z","_id":"ciyu9qvkq00003dqwzt7bhyly","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"Spring的2个基本概念\"><a href=\"#Spring的2个基本概念\" class=\"headerlink\" title=\"Spring的2个基本概念\"></a>Spring的2个基本概念</h2><ul>\n<li>aop<br>面向切面编程<br>在原有的基础上进行扩展，而不是进行修改。符合 开闭原则</li>\n<li><p>ioc<br>控制反转<br>不通过手动 new 方式，来创建对象，而是交给Spring 容器根据配置，进行创建。从而将类的对象交给Spring 进行控制管理</p>\n<ul>\n<li>ioc 的2种方式来创建对象：<br>（1）通过配置文件<br>（2）通过注解<br><br></li>\n<li><p>ioc 实现原理</p>\n<p>通过dom4j 解析 xml 文件，拿到类的全路径，然后通过反射的技术创建该类的对象，结合工厂模式返给调用方<br>伪代码实现说明：</p>\n</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">“userService”</span> <span class=\"attr\">class</span>=<span class=\"string\">“com.geng.UserService”</span> /&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Factory</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> UserService <span class=\"title\">getUserService</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        String classValue = dom4j.getValue(“userService”);</div><div class=\"line\">        Class clazz = Class.forName(“classValue”);</div><div class=\"line\">        <span class=\"keyword\">return</span> clazz.newInstance();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"Spring-运行时\"><a href=\"#Spring-运行时\" class=\"headerlink\" title=\"Spring 运行时\"></a>Spring 运行时</h2><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/spring-overview.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>Spring 提供了全面的Java web 服务框架，从web层到业务层，再到持久层，都有着相关模块的实现。<br>对于Spring 最基本使用，必须尹若 Core Container中的4个重要的部分，方可使用。<br>若只引用某部分的库，maven也会自动引用最核心的jar包到你的应用中。</p>\n<h2 id=\"Spring-第一个Demo-开发\"><a href=\"#Spring-第一个Demo-开发\" class=\"headerlink\" title=\"Spring 第一个Demo 开发\"></a>Spring 第一个Demo 开发</h2><p>在 idea 中，创建 maven 项目，然后，编辑 pom.xml 文件。<br>引入：Spring 主要的几个库，log4j，junit</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-context<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>4.3.5.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>log4j<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>log4j<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.2.17<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>junit<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>junit<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>4.12<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>在resource 目录下，创建 xml 配置文件，如图：<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/A5CEBFD6-CFE5-404A-A42F-CF521BAB4B47.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure></p>\n<p>Idea 在你编辑时候，会提示相关的属性，方便书写配置</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans\"</span></span></div><div class=\"line\">       <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></div><div class=\"line\">       <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd”&gt;</span></div><div class=\"line\"></div><div class=\"line\">    &lt;bean id=\"<span class=\"attr\">user</span>\" <span class=\"attr\">class</span>=<span class=\"string\">\"com.geng.ioc.User\"</span>/&gt;</div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/9FEC554D-7DDC-48C7-BA89-3FAAAC181312.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>创建测试用例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserTest</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> ApplicationContext context;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Before</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setUp</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">        context = <span class=\"keyword\">new</span> ClassPathXmlApplicationContext(<span class=\"string\">\"beans1.xml\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Test</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">        User user = (User) context.getBean(<span class=\"string\">\"user\"</span>);</div><div class=\"line\">        user.add();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/979F1DF8-ADF4-499F-8119-62CDDE033AD4.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>至此，我们完成了第一个 Spring demo</p>\n<h2 id=\"bean-的管理\"><a href=\"#bean-的管理\" class=\"headerlink\" title=\"bean 的管理\"></a>bean 的管理</h2><ul>\n<li>通过无参构造创建（前面第一个demo）</li>\n<li>通过静态工厂实现对象创建<br>代码示例：</li>\n</ul>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class BeanFactory &#123;</div><div class=\"line\"></div><div class=\"line\">    public static User2 createUser2() &#123;</div><div class=\"line\">        return new User2();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">public class User2 &#123;</div><div class=\"line\"></div><div class=\"line\">    public void add() &#123;</div><div class=\"line\">        System.out.println(\"user2.....”);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>xml中配置：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!--用静态工厂创建--&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"user2\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.geng.ioc.BeanFactory\"</span> <span class=\"attr\">factory-method</span>=<span class=\"string\">\"createUser2”/&gt;</span></span></div></pre></td></tr></table></figure>\n<p>测试：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User2Test</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> ApplicationContext context;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Before</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setUp</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">        context = <span class=\"keyword\">new</span> ClassPathXmlApplicationContext(<span class=\"string\">\"beans1.xml\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Test</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">        User2 user2 = (User2) context.getBean(<span class=\"string\">\"user2\"</span>);</div><div class=\"line\">        System.out.println(user2);</div><div class=\"line\">        user2.add();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/0815D096-5833-4AA4-9BD8-EE493BE15F32.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<ul>\n<li>通过实例工厂创建对象</li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!--用实例工厂创建—&gt;</span></div><div class=\"line\">&lt;bean id=\"bean2Factory\" class=\"com.geng.ioc.Bean2Factory\" /&gt;</div><div class=\"line\">&lt;bean id=\"user2\" factory-bean=\"bean2Factory\" factory-method=\"getBean\"/&gt;</div></pre></td></tr></table></figure>\n<p>这里不再验证。。。</p>\n<h2 id=\"Spring配置文件中的几个重要属性\"><a href=\"#Spring配置文件中的几个重要属性\" class=\"headerlink\" title=\"Spring配置文件中的几个重要属性\"></a>Spring配置文件中的几个重要属性</h2><p>id：不能还有特殊符号，“_”是可以的<br>name：可以含有特殊符号，如：#，历史版本中使用的，后期不推荐使用。context.getBean() 方法可以获取这两种属性的值<br>class：类的全路径<br>scope：作用域  </p>\n<pre><code>singleton(默认)  \nprototype(多例)\nrequest 创建对象放在request域\nsession 创建对象放在session域\nglobalSession 一次登陆，任何地方都保存有登录状态\n</code></pre><h2 id=\"附录：IDEA-Resource-目录下，存放的文件类型\"><a href=\"#附录：IDEA-Resource-目录下，存放的文件类型\" class=\"headerlink\" title=\"附录：IDEA Resource 目录下，存放的文件类型\"></a>附录：IDEA Resource 目录下，存放的文件类型</h2><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/23395798-F73A-4EBB-95E2-1641C5EF8A24.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>（IDEA 官网：<a href=\"https://www.jetbrains.com/help/idea/2016.3/resource-files.html\" target=\"_blank\" rel=\"external\">https://www.jetbrains.com/help/idea/2016.3/resource-files.html</a> ）</p>\n<p>所以，在此目录下，我们一般存放配置文件，或一些必要的资源文件。</p>\n<p>Demo 地址：<br><a href=\"https://github.com/fenglincanyi/springdemo1\" target=\"_blank\" rel=\"external\">https://github.com/fenglincanyi/springdemo1</a></p>\n","excerpt":"","more":"<h2 id=\"Spring的2个基本概念\"><a href=\"#Spring的2个基本概念\" class=\"headerlink\" title=\"Spring的2个基本概念\"></a>Spring的2个基本概念</h2><ul>\n<li>aop<br>面向切面编程<br>在原有的基础上进行扩展，而不是进行修改。符合 开闭原则</li>\n<li><p>ioc<br>控制反转<br>不通过手动 new 方式，来创建对象，而是交给Spring 容器根据配置，进行创建。从而将类的对象交给Spring 进行控制管理</p>\n<ul>\n<li>ioc 的2种方式来创建对象：<br>（1）通过配置文件<br>（2）通过注解<br><br></li>\n<li><p>ioc 实现原理</p>\n<p>通过dom4j 解析 xml 文件，拿到类的全路径，然后通过反射的技术创建该类的对象，结合工厂模式返给调用方<br>伪代码实现说明：</p>\n</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">“userService”</span> <span class=\"attr\">class</span>=<span class=\"string\">“com.geng.UserService”</span> /&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Factory</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> UserService <span class=\"title\">getUserService</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        String classValue = dom4j.getValue(“userService”);</div><div class=\"line\">        Class clazz = Class.forName(“classValue”);</div><div class=\"line\">        <span class=\"keyword\">return</span> clazz.newInstance();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"Spring-运行时\"><a href=\"#Spring-运行时\" class=\"headerlink\" title=\"Spring 运行时\"></a>Spring 运行时</h2><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/spring-overview.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>Spring 提供了全面的Java web 服务框架，从web层到业务层，再到持久层，都有着相关模块的实现。<br>对于Spring 最基本使用，必须尹若 Core Container中的4个重要的部分，方可使用。<br>若只引用某部分的库，maven也会自动引用最核心的jar包到你的应用中。</p>\n<h2 id=\"Spring-第一个Demo-开发\"><a href=\"#Spring-第一个Demo-开发\" class=\"headerlink\" title=\"Spring 第一个Demo 开发\"></a>Spring 第一个Demo 开发</h2><p>在 idea 中，创建 maven 项目，然后，编辑 pom.xml 文件。<br>引入：Spring 主要的几个库，log4j，junit</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-context<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>4.3.5.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>log4j<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>log4j<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.2.17<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>junit<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>junit<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>4.12<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>在resource 目录下，创建 xml 配置文件，如图：<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/A5CEBFD6-CFE5-404A-A42F-CF521BAB4B47.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure></p>\n<p>Idea 在你编辑时候，会提示相关的属性，方便书写配置</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans\"</span></div><div class=\"line\">       <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></div><div class=\"line\">       <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd”&gt;</div><div class=\"line\"></div><div class=\"line\">    &lt;bean id=\"</span><span class=\"attr\">user</span>\" <span class=\"attr\">class</span>=<span class=\"string\">\"com.geng.ioc.User\"</span>/&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/9FEC554D-7DDC-48C7-BA89-3FAAAC181312.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>创建测试用例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserTest</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> ApplicationContext context;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Before</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setUp</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">        context = <span class=\"keyword\">new</span> ClassPathXmlApplicationContext(<span class=\"string\">\"beans1.xml\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Test</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">        User user = (User) context.getBean(<span class=\"string\">\"user\"</span>);</div><div class=\"line\">        user.add();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/979F1DF8-ADF4-499F-8119-62CDDE033AD4.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>至此，我们完成了第一个 Spring demo</p>\n<h2 id=\"bean-的管理\"><a href=\"#bean-的管理\" class=\"headerlink\" title=\"bean 的管理\"></a>bean 的管理</h2><ul>\n<li>通过无参构造创建（前面第一个demo）</li>\n<li>通过静态工厂实现对象创建<br>代码示例：</li>\n</ul>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class BeanFactory &#123;</div><div class=\"line\"></div><div class=\"line\">    public static User2 createUser2() &#123;</div><div class=\"line\">        return new User2();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">public class User2 &#123;</div><div class=\"line\"></div><div class=\"line\">    public void add() &#123;</div><div class=\"line\">        System.out.println(\"user2.....”);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>xml中配置：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!--用静态工厂创建--&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"user2\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.geng.ioc.BeanFactory\"</span> <span class=\"attr\">factory-method</span>=<span class=\"string\">\"createUser2”/&gt;</span></span></div></pre></td></tr></table></figure>\n<p>测试：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User2Test</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> ApplicationContext context;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Before</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setUp</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">        context = <span class=\"keyword\">new</span> ClassPathXmlApplicationContext(<span class=\"string\">\"beans1.xml\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Test</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">        User2 user2 = (User2) context.getBean(<span class=\"string\">\"user2\"</span>);</div><div class=\"line\">        System.out.println(user2);</div><div class=\"line\">        user2.add();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/0815D096-5833-4AA4-9BD8-EE493BE15F32.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<ul>\n<li>通过实例工厂创建对象</li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!--用实例工厂创建—&gt;</div><div class=\"line\">&lt;bean id=\"bean2Factory\" class=\"com.geng.ioc.Bean2Factory\" /&gt;</div><div class=\"line\">&lt;bean id=\"user2\" factory-bean=\"bean2Factory\" factory-method=\"getBean\"/&gt;</span></div></pre></td></tr></table></figure>\n<p>这里不再验证。。。</p>\n<h2 id=\"Spring配置文件中的几个重要属性\"><a href=\"#Spring配置文件中的几个重要属性\" class=\"headerlink\" title=\"Spring配置文件中的几个重要属性\"></a>Spring配置文件中的几个重要属性</h2><p>id：不能还有特殊符号，“_”是可以的<br>name：可以含有特殊符号，如：#，历史版本中使用的，后期不推荐使用。context.getBean() 方法可以获取这两种属性的值<br>class：类的全路径<br>scope：作用域  </p>\n<pre><code>singleton(默认)  \nprototype(多例)\nrequest 创建对象放在request域\nsession 创建对象放在session域\nglobalSession 一次登陆，任何地方都保存有登录状态\n</code></pre><h2 id=\"附录：IDEA-Resource-目录下，存放的文件类型\"><a href=\"#附录：IDEA-Resource-目录下，存放的文件类型\" class=\"headerlink\" title=\"附录：IDEA Resource 目录下，存放的文件类型\"></a>附录：IDEA Resource 目录下，存放的文件类型</h2><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/23395798-F73A-4EBB-95E2-1641C5EF8A24.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>（IDEA 官网：<a href=\"https://www.jetbrains.com/help/idea/2016.3/resource-files.html\">https://www.jetbrains.com/help/idea/2016.3/resource-files.html</a> ）</p>\n<p>所以，在此目录下，我们一般存放配置文件，或一些必要的资源文件。</p>\n<p>Demo 地址：<br><a href=\"https://github.com/fenglincanyi/springdemo1\">https://github.com/fenglincanyi/springdemo1</a></p>\n"},{"title":"Spring 学习（二）","date":"2016-12-27T09:01:00.000Z","_content":"> 本次学习内容：Spring 依赖注入相关，本次通过xml配置实现\n\n## setXXX() 方法注入\n\n``` xml\n<bean id=\"book\" class=\"com.geng.attr.Book\">\n    <property name=\"bookName\" value=\"西游记\"/>\n</bean>\n```\n## 构造方法注入\n\n``` xml\n// 这里通过有参构造注入\n<bean id=\"people\" class=\"com.geng.attr.People\">\n    <constructor-arg name=\"name\" value=\"小明\"/>\n</bean>\n```\n## 对象注入\n\n``` xml\n<bean id=\"userDao\" class=\"com.geng.obj.UserDao\"/>\n<bean id=\"userService\" class=\"com.geng.obj.UserService\">\n    <property name=\"userDao\" ref=\"userDao\"/>\n</bean>\n```\n\n``` java\npublic class UserDao {\n\n    public void showUserDao() {\n        System.out.println(\"show user dao...\");\n    }\n}\n```\n\n``` java\npublic class UserService {\n\n    private UserDao userDao;\n\n    public void setUserDao(UserDao userDao) {\n        this.userDao = userDao;\n    }\n\n    public void showService() {\n        System.out.println(\"show Service....\");\n\n        userDao.showUserDao();\n    }\n}\n```\n测试：\n\n``` java\npublic class UserServiceTest {\n\n    private ApplicationContext context;\n\n    @Before\n    public void setUp() throws Exception {\n        context = new ClassPathXmlApplicationContext(\"beans1.xml\");\n    }\n\n    @Test\n    public void showService() throws Exception {\n        UserService userService = (UserService) context.getBean(\"userService\");\n        userService.showService();\n    }\n\n}\n```\n![](http://7xr1vo.com1.z0.glb.clouddn.com/40B10214-301C-4735-8CE0-8DB0F4CCCC8B.png)\n\n## p命名空间注入\nxml 头部加入：\n\n``` xml\nxmlns:p=\"http://www.springframework.org/schema/p\"\n```\n配置：\n\n``` xml\n<bean id=\"person\" class=\"com.geng.attr.Person\" p:pName=\"呵呵哒”/>\n```\n\n``` java\npublic class Person {\n\n    private String pName;\n\n    public void setpName(String pName) {\n        this.pName = pName;\n    }\n\n    public void test() {\n        System.out.println(\"result: \" + pName);\n    }\n}\n```\n![](http://7xr1vo.com1.z0.glb.clouddn.com/EA20EBAD-5360-4197-BA0C-4059ABF7636F.png)\n\n## 复杂类型注入\n\n``` java\npublic class MulitDemo {\n\n    private String[] arrs;\n    private List<String> list;\n    private Map<String, String> map;\n    private Properties properties;\n\n    public void setArrs(String[] arrs) {\n        this.arrs = arrs;\n    }\n\n    public void setList(List<String> list) {\n        this.list = list;\n    }\n\n    public void setMap(Map<String, String> map) {\n        this.map = map;\n    }\n\n    public void setProperties(Properties properties) {\n        this.properties = properties;\n    }\n\n    public void showAll() {\n        System.out.println(arrs);\n        System.out.println(list);\n        System.out.println(map);\n        System.out.println(properties);\n    }\n}\n```\nxml 分别配置：\n``` xml\n<bean id=\"mulitDemo\" class=\"com.geng.collection.MulitDemo\">\n    <property name=\"arrs\">\n        <array>\n            <value>小红</value>\n            <value>小白</value>\n            <value>小绿</value>\n        </array>\n    </property>\n\n    <property name=\"list\">\n        <list>\n            <value>大白</value>\n            <value>大春</value>\n            <value>大花</value>\n        </list>\n    </property>\n\n    <property name=\"map\">\n        <map>\n            <entry key=\"001\" value=\"小白\" />\n            <entry key=\"002\" value=\"小刘\" />\n            <entry key=\"003\" value=\"小东\" />\n        </map>\n    </property>\n\n    <property name=\"properties\">\n        <props>\n            <prop key=\"driveClass\">com.mysql.jdbc.Driver</prop>\n            <prop key=\"userName\">root</prop>\n            <prop key=\"userPwd\">root</prop>\n        </props>\n    </property>\n</bean>\n```\n测试：\n![](http://7xr1vo.com1.z0.glb.clouddn.com/76FF4DDF-95DD-4F5A-B43F-30946D328A30.png)\n\n<br>\n附录：\ndemo地址：\nhttps://github.com/fenglincanyi/springdemo1","source":"_posts/Spring 学习（二）.md","raw":"---\ntitle: Spring 学习（二）\ndate: 2016-12-27 17:01\ncategories: Java后台\ntags: Spring\n---\n> 本次学习内容：Spring 依赖注入相关，本次通过xml配置实现\n\n## setXXX() 方法注入\n\n``` xml\n<bean id=\"book\" class=\"com.geng.attr.Book\">\n    <property name=\"bookName\" value=\"西游记\"/>\n</bean>\n```\n## 构造方法注入\n\n``` xml\n// 这里通过有参构造注入\n<bean id=\"people\" class=\"com.geng.attr.People\">\n    <constructor-arg name=\"name\" value=\"小明\"/>\n</bean>\n```\n## 对象注入\n\n``` xml\n<bean id=\"userDao\" class=\"com.geng.obj.UserDao\"/>\n<bean id=\"userService\" class=\"com.geng.obj.UserService\">\n    <property name=\"userDao\" ref=\"userDao\"/>\n</bean>\n```\n\n``` java\npublic class UserDao {\n\n    public void showUserDao() {\n        System.out.println(\"show user dao...\");\n    }\n}\n```\n\n``` java\npublic class UserService {\n\n    private UserDao userDao;\n\n    public void setUserDao(UserDao userDao) {\n        this.userDao = userDao;\n    }\n\n    public void showService() {\n        System.out.println(\"show Service....\");\n\n        userDao.showUserDao();\n    }\n}\n```\n测试：\n\n``` java\npublic class UserServiceTest {\n\n    private ApplicationContext context;\n\n    @Before\n    public void setUp() throws Exception {\n        context = new ClassPathXmlApplicationContext(\"beans1.xml\");\n    }\n\n    @Test\n    public void showService() throws Exception {\n        UserService userService = (UserService) context.getBean(\"userService\");\n        userService.showService();\n    }\n\n}\n```\n![](http://7xr1vo.com1.z0.glb.clouddn.com/40B10214-301C-4735-8CE0-8DB0F4CCCC8B.png)\n\n## p命名空间注入\nxml 头部加入：\n\n``` xml\nxmlns:p=\"http://www.springframework.org/schema/p\"\n```\n配置：\n\n``` xml\n<bean id=\"person\" class=\"com.geng.attr.Person\" p:pName=\"呵呵哒”/>\n```\n\n``` java\npublic class Person {\n\n    private String pName;\n\n    public void setpName(String pName) {\n        this.pName = pName;\n    }\n\n    public void test() {\n        System.out.println(\"result: \" + pName);\n    }\n}\n```\n![](http://7xr1vo.com1.z0.glb.clouddn.com/EA20EBAD-5360-4197-BA0C-4059ABF7636F.png)\n\n## 复杂类型注入\n\n``` java\npublic class MulitDemo {\n\n    private String[] arrs;\n    private List<String> list;\n    private Map<String, String> map;\n    private Properties properties;\n\n    public void setArrs(String[] arrs) {\n        this.arrs = arrs;\n    }\n\n    public void setList(List<String> list) {\n        this.list = list;\n    }\n\n    public void setMap(Map<String, String> map) {\n        this.map = map;\n    }\n\n    public void setProperties(Properties properties) {\n        this.properties = properties;\n    }\n\n    public void showAll() {\n        System.out.println(arrs);\n        System.out.println(list);\n        System.out.println(map);\n        System.out.println(properties);\n    }\n}\n```\nxml 分别配置：\n``` xml\n<bean id=\"mulitDemo\" class=\"com.geng.collection.MulitDemo\">\n    <property name=\"arrs\">\n        <array>\n            <value>小红</value>\n            <value>小白</value>\n            <value>小绿</value>\n        </array>\n    </property>\n\n    <property name=\"list\">\n        <list>\n            <value>大白</value>\n            <value>大春</value>\n            <value>大花</value>\n        </list>\n    </property>\n\n    <property name=\"map\">\n        <map>\n            <entry key=\"001\" value=\"小白\" />\n            <entry key=\"002\" value=\"小刘\" />\n            <entry key=\"003\" value=\"小东\" />\n        </map>\n    </property>\n\n    <property name=\"properties\">\n        <props>\n            <prop key=\"driveClass\">com.mysql.jdbc.Driver</prop>\n            <prop key=\"userName\">root</prop>\n            <prop key=\"userPwd\">root</prop>\n        </props>\n    </property>\n</bean>\n```\n测试：\n![](http://7xr1vo.com1.z0.glb.clouddn.com/76FF4DDF-95DD-4F5A-B43F-30946D328A30.png)\n\n<br>\n附录：\ndemo地址：\nhttps://github.com/fenglincanyi/springdemo1","slug":"Spring 学习（二）","published":1,"updated":"2017-02-08T11:58:46.000Z","_id":"ciyv4qztk000081qwsxfvmb1z","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>本次学习内容：Spring 依赖注入相关，本次通过xml配置实现</p>\n</blockquote>\n<h2 id=\"setXXX-方法注入\"><a href=\"#setXXX-方法注入\" class=\"headerlink\" title=\"setXXX() 方法注入\"></a>setXXX() 方法注入</h2><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"book\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.geng.attr.Book\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"bookName\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"西游记\"</span>/&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></div></pre></td></tr></table></figure>\n<h2 id=\"构造方法注入\"><a href=\"#构造方法注入\" class=\"headerlink\" title=\"构造方法注入\"></a>构造方法注入</h2><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 这里通过有参构造注入</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"people\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.geng.attr.People\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">constructor-arg</span> <span class=\"attr\">name</span>=<span class=\"string\">\"name\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"小明\"</span>/&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></div></pre></td></tr></table></figure>\n<h2 id=\"对象注入\"><a href=\"#对象注入\" class=\"headerlink\" title=\"对象注入\"></a>对象注入</h2><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"userDao\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.geng.obj.UserDao\"</span>/&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"userService\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.geng.obj.UserService\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"userDao\"</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"userDao\"</span>/&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserDao</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">showUserDao</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        System.out.println(<span class=\"string\">\"show user dao...\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserService</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> UserDao userDao;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setUserDao</span><span class=\"params\">(UserDao userDao)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.userDao = userDao;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">showService</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        System.out.println(<span class=\"string\">\"show Service....\"</span>);</div><div class=\"line\"></div><div class=\"line\">        userDao.showUserDao();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>测试：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserServiceTest</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> ApplicationContext context;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Before</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setUp</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">        context = <span class=\"keyword\">new</span> ClassPathXmlApplicationContext(<span class=\"string\">\"beans1.xml\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Test</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">showService</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">        UserService userService = (UserService) context.getBean(<span class=\"string\">\"userService\"</span>);</div><div class=\"line\">        userService.showService();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/40B10214-301C-4735-8CE0-8DB0F4CCCC8B.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<h2 id=\"p命名空间注入\"><a href=\"#p命名空间注入\" class=\"headerlink\" title=\"p命名空间注入\"></a>p命名空间注入</h2><p>xml 头部加入：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">xmlns:p=\"http://www.springframework.org/schema/p\"</div></pre></td></tr></table></figure>\n<p>配置：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"person\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.geng.attr.Person\"</span> <span class=\"attr\">p:pName</span>=<span class=\"string\">\"呵呵哒”/&gt;</span></span></div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> String pName;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setpName</span><span class=\"params\">(String pName)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.pName = pName;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        System.out.println(<span class=\"string\">\"result: \"</span> + pName);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/EA20EBAD-5360-4197-BA0C-4059ABF7636F.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<h2 id=\"复杂类型注入\"><a href=\"#复杂类型注入\" class=\"headerlink\" title=\"复杂类型注入\"></a>复杂类型注入</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MulitDemo</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> String[] arrs;</div><div class=\"line\">    <span class=\"keyword\">private</span> List&lt;String&gt; list;</div><div class=\"line\">    <span class=\"keyword\">private</span> Map&lt;String, String&gt; map;</div><div class=\"line\">    <span class=\"keyword\">private</span> Properties properties;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setArrs</span><span class=\"params\">(String[] arrs)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.arrs = arrs;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setList</span><span class=\"params\">(List&lt;String&gt; list)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.list = list;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setMap</span><span class=\"params\">(Map&lt;String, String&gt; map)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.map = map;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setProperties</span><span class=\"params\">(Properties properties)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.properties = properties;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">showAll</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        System.out.println(arrs);</div><div class=\"line\">        System.out.println(list);</div><div class=\"line\">        System.out.println(map);</div><div class=\"line\">        System.out.println(properties);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>xml 分别配置：<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"mulitDemo\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.geng.collection.MulitDemo\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"arrs\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">array</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>小红<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>小白<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>小绿<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">array</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"list\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">list</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>大白<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>大春<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>大花<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">list</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"map\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">map</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">entry</span> <span class=\"attr\">key</span>=<span class=\"string\">\"001\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"小白\"</span> /&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">entry</span> <span class=\"attr\">key</span>=<span class=\"string\">\"002\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"小刘\"</span> /&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">entry</span> <span class=\"attr\">key</span>=<span class=\"string\">\"003\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"小东\"</span> /&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">map</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"properties\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">props</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">prop</span> <span class=\"attr\">key</span>=<span class=\"string\">\"driveClass\"</span>&gt;</span>com.mysql.jdbc.Driver<span class=\"tag\">&lt;/<span class=\"name\">prop</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">prop</span> <span class=\"attr\">key</span>=<span class=\"string\">\"userName\"</span>&gt;</span>root<span class=\"tag\">&lt;/<span class=\"name\">prop</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">prop</span> <span class=\"attr\">key</span>=<span class=\"string\">\"userPwd\"</span>&gt;</span>root<span class=\"tag\">&lt;/<span class=\"name\">prop</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">props</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>测试：<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/76FF4DDF-95DD-4F5A-B43F-30946D328A30.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure></p>\n<p><br><br>附录：<br>demo地址：<br><a href=\"https://github.com/fenglincanyi/springdemo1\" target=\"_blank\" rel=\"external\">https://github.com/fenglincanyi/springdemo1</a></p>\n","excerpt":"","more":"<blockquote>\n<p>本次学习内容：Spring 依赖注入相关，本次通过xml配置实现</p>\n</blockquote>\n<h2 id=\"setXXX-方法注入\"><a href=\"#setXXX-方法注入\" class=\"headerlink\" title=\"setXXX() 方法注入\"></a>setXXX() 方法注入</h2><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"book\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.geng.attr.Book\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"bookName\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"西游记\"</span>/&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></div></pre></td></tr></table></figure>\n<h2 id=\"构造方法注入\"><a href=\"#构造方法注入\" class=\"headerlink\" title=\"构造方法注入\"></a>构造方法注入</h2><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 这里通过有参构造注入</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"people\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.geng.attr.People\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">constructor-arg</span> <span class=\"attr\">name</span>=<span class=\"string\">\"name\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"小明\"</span>/&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></div></pre></td></tr></table></figure>\n<h2 id=\"对象注入\"><a href=\"#对象注入\" class=\"headerlink\" title=\"对象注入\"></a>对象注入</h2><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"userDao\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.geng.obj.UserDao\"</span>/&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"userService\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.geng.obj.UserService\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"userDao\"</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"userDao\"</span>/&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserDao</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">showUserDao</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        System.out.println(<span class=\"string\">\"show user dao...\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserService</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> UserDao userDao;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setUserDao</span><span class=\"params\">(UserDao userDao)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.userDao = userDao;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">showService</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        System.out.println(<span class=\"string\">\"show Service....\"</span>);</div><div class=\"line\"></div><div class=\"line\">        userDao.showUserDao();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>测试：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserServiceTest</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> ApplicationContext context;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Before</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setUp</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">        context = <span class=\"keyword\">new</span> ClassPathXmlApplicationContext(<span class=\"string\">\"beans1.xml\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Test</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">showService</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">        UserService userService = (UserService) context.getBean(<span class=\"string\">\"userService\"</span>);</div><div class=\"line\">        userService.showService();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/40B10214-301C-4735-8CE0-8DB0F4CCCC8B.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<h2 id=\"p命名空间注入\"><a href=\"#p命名空间注入\" class=\"headerlink\" title=\"p命名空间注入\"></a>p命名空间注入</h2><p>xml 头部加入：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">xmlns:p=\"http://www.springframework.org/schema/p\"</div></pre></td></tr></table></figure>\n<p>配置：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"person\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.geng.attr.Person\"</span> <span class=\"attr\">p:pName</span>=<span class=\"string\">\"呵呵哒”/&gt;</span></span></div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> String pName;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setpName</span><span class=\"params\">(String pName)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.pName = pName;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        System.out.println(<span class=\"string\">\"result: \"</span> + pName);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/EA20EBAD-5360-4197-BA0C-4059ABF7636F.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<h2 id=\"复杂类型注入\"><a href=\"#复杂类型注入\" class=\"headerlink\" title=\"复杂类型注入\"></a>复杂类型注入</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MulitDemo</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> String[] arrs;</div><div class=\"line\">    <span class=\"keyword\">private</span> List&lt;String&gt; list;</div><div class=\"line\">    <span class=\"keyword\">private</span> Map&lt;String, String&gt; map;</div><div class=\"line\">    <span class=\"keyword\">private</span> Properties properties;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setArrs</span><span class=\"params\">(String[] arrs)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.arrs = arrs;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setList</span><span class=\"params\">(List&lt;String&gt; list)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.list = list;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setMap</span><span class=\"params\">(Map&lt;String, String&gt; map)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.map = map;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setProperties</span><span class=\"params\">(Properties properties)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.properties = properties;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">showAll</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        System.out.println(arrs);</div><div class=\"line\">        System.out.println(list);</div><div class=\"line\">        System.out.println(map);</div><div class=\"line\">        System.out.println(properties);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>xml 分别配置：<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"mulitDemo\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.geng.collection.MulitDemo\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"arrs\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">array</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>小红<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>小白<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>小绿<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">array</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"list\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">list</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>大白<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>大春<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>大花<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">list</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"map\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">map</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">entry</span> <span class=\"attr\">key</span>=<span class=\"string\">\"001\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"小白\"</span> /&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">entry</span> <span class=\"attr\">key</span>=<span class=\"string\">\"002\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"小刘\"</span> /&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">entry</span> <span class=\"attr\">key</span>=<span class=\"string\">\"003\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"小东\"</span> /&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">map</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"properties\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">props</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">prop</span> <span class=\"attr\">key</span>=<span class=\"string\">\"driveClass\"</span>&gt;</span>com.mysql.jdbc.Driver<span class=\"tag\">&lt;/<span class=\"name\">prop</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">prop</span> <span class=\"attr\">key</span>=<span class=\"string\">\"userName\"</span>&gt;</span>root<span class=\"tag\">&lt;/<span class=\"name\">prop</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">prop</span> <span class=\"attr\">key</span>=<span class=\"string\">\"userPwd\"</span>&gt;</span>root<span class=\"tag\">&lt;/<span class=\"name\">prop</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">props</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>测试：<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/76FF4DDF-95DD-4F5A-B43F-30946D328A30.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure></p>\n<p><br><br>附录：<br>demo地址：<br><a href=\"https://github.com/fenglincanyi/springdemo1\">https://github.com/fenglincanyi/springdemo1</a></p>\n"},{"title":"Dalvik中PreVerify问题","date":"2016-11-24T05:01:00.000Z","_content":"## PreVerify（预校验）的由来\nDalvik 虚拟机在启动的时候，会有许多的启动参数，其中有一项就是verify，当verify被打开的时候，doVerify变量为true，则进行类的校验（dvmVerifyClass方法调用）。若校验成功，则这个类会被打上标记：CLASS_ISPREVERIFIED。\n上面描述的过程是dex -> odex (dexopt 过程)时，做的一个优化。当从classes.dex 变为 odex 后，才会被拿去执行。\n\n## Class 被 Preverify 的过程\n在dex 被 dexopt 的过程中，源码中有校验和优化 Class 相关的操作：\n\n``` cpp\n/*\n * Verify and/or optimize a specific class.\n */\nstatic void verifyAndOptimizeClass(DexFile* pDexFile, ClassObject* clazz,\n    const DexClassDef* pClassDef, bool doVerify, bool doOpt)\n{\n    const char* classDescriptor;\n    bool verified = false;\n\n    if (clazz->pDvmDex->pDexFile != pDexFile) {\n        /*\n         * The current DEX file defined a class that is also present in the\n         * bootstrap class path.  The class loader favored the bootstrap\n         * version, which means that we have a pointer to a class that is\n         * (a) not the one we want to examine, and (b) mapped read-only,\n         * so we will seg fault if we try to rewrite instructions inside it.\n         */\n        ALOGD(\"DexOpt: not verifying/optimizing '%s': multiple definitions\",\n            clazz->descriptor);\n        return;\n    }\n\n    classDescriptor = dexStringByTypeIdx(pDexFile, pClassDef->classIdx);\n\n    /*\n     * First, try to verify it.\n     */\n    if (doVerify) {\n        if (dvmVerifyClass(clazz)) {\n            /*\n             * Set the \"is preverified\" flag in the DexClassDef.  We\n             * do it here, rather than in the ClassObject structure,\n             * because the DexClassDef is part of the odex file.\n             */\n            assert((clazz->accessFlags & JAVA_FLAGS_MASK) ==\n                pClassDef->accessFlags);\n            ((DexClassDef*)pClassDef)->accessFlags |= CLASS_ISPREVERIFIED;\n            verified = true;\n        } else {\n            // TODO: log when in verbose mode\n            ALOGV(\"DexOpt: '%s' failed verification\", classDescriptor);\n        }\n    }\n\n    if (doOpt) {\n        bool needVerify = (gDvm.dexOptMode == OPTIMIZE_MODE_VERIFIED ||\n                           gDvm.dexOptMode == OPTIMIZE_MODE_FULL);\n        if (!verified && needVerify) {\n            ALOGV(\"DexOpt: not optimizing '%s': not verified\",\n                classDescriptor);\n        } else {\n            dvmOptimizeClass(clazz, false);// 优化 Class 操作\n\n            /* set the flag whether or not we actually changed anything */\n            ((DexClassDef*)pClassDef)->accessFlags |= CLASS_ISOPTIMIZED;// Class被优化过后，也会打上被优化过的标记 CLASS_ISOPTIMIZED\n        }\n    }\n}\n```\n\ndvmVerifyClass 的具体过程，源码中是这样描述的：\n\n``` cpp\n/*\n * Verify a class.\n *\n * By the time we get here, the value of gDvm.classVerifyMode should already\n * have been factored in.  If you want to call into the verifier even\n * though verification is disabled, that's your business.\n *\n * Returns \"true\" on success.\n */\nbool dvmVerifyClass(ClassObject*clazz) {\n    int i;\n    if (dvmIsClassVerified(clazz)) {\n        ALOGD(\"Ignoring duplicate verify attempt on %s\", clazz -> descriptor);\n        return true;\n    }\n    for (i = 0; i < clazz -> directMethodCount; i++) {\n        if (!verifyMethod( & clazz -> directMethods[i])){\n            LOG_VFY(\"Verifier rejected class %s\", clazz -> descriptor);\n            return false;\n        }\n    }\n    for (i = 0; i < clazz -> virtualMethodCount; i++) {\n        if (!verifyMethod( & clazz -> virtualMethods[i])){\n            LOG_VFY(\"Verifier rejected class %s\", clazz -> descriptor);\n            return false;\n        }\n    }\n    return true;\n}\n```\n\n其中，dvmVerifyClass中又去调用了 方法的校验 verifyMethod, 再去追源码：\n\n``` cpp\n/*\n * Perform verification on a single method.\n */\nstatic bool verifyMethod(Method* meth)\n{\n    bool result = false;\n\n    /*\n     * Verifier state blob.  Various values will be cached here so we\n     * can avoid expensive lookups and pass fewer arguments around.\n     */\n    VerifierData vdata;\n#if 1   // ndef NDEBUG\n    memset(&vdata, 0x99, sizeof(vdata));\n#endif\n\n    vdata.method = meth;\n    vdata.insnsSize = dvmGetMethodInsnsSize(meth);\n    vdata.insnRegCount = meth->registersSize;\n    vdata.insnFlags = NULL;\n    vdata.uninitMap = NULL;\n    vdata.basicBlocks = NULL;\n\n    /*\n     * If there aren't any instructions, make sure that's expected, then\n     * exit successfully.  Note: for native methods, meth->insns gets set\n     * to a native function pointer on first call, so don't use that as\n     * an indicator.\n     */\n    if (vdata.insnsSize == 0) {\n        if (!dvmIsNativeMethod(meth) && !dvmIsAbstractMethod(meth)) {\n            LOG_VFY_METH(meth,\n                \"VFY: zero-length code in concrete non-native method\");\n            goto bail;\n        }\n\n        goto success;\n    }\n\n    /*\n     * Sanity-check the register counts.  ins + locals = registers, so make\n     * sure that ins <= registers.\n     */\n    if (meth->insSize > meth->registersSize) {\n        LOG_VFY_METH(meth, \"VFY: bad register counts (ins=%d regs=%d)\",\n            meth->insSize, meth->registersSize);\n        goto bail;\n    }\n\n    /*\n     * Allocate and populate an array to hold instruction data.\n     *\n     * TODO: Consider keeping a reusable pre-allocated array sitting\n     * around for smaller methods.\n     */\n    vdata.insnFlags = (InsnFlags*) calloc(vdata.insnsSize, sizeof(InsnFlags));\n    if (vdata.insnFlags == NULL)\n        goto bail;\n\n    /*\n     * Compute the width of each instruction and store the result in insnFlags.\n     * Count up the #of occurrences of certain opcodes while we're at it.\n     */\n    if (!computeWidthsAndCountOps(&vdata))\n        goto bail;\n\n    /*\n     * Allocate a map to hold the classes of uninitialized instances.\n     */\n    vdata.uninitMap = dvmCreateUninitInstanceMap(meth, vdata.insnFlags,\n        vdata.newInstanceCount);\n    if (vdata.uninitMap == NULL)\n        goto bail;\n\n    /*\n     * Set the \"in try\" flags for all instructions guarded by a \"try\" block.\n     * Also sets the \"branch target\" flag on exception handlers.\n     */\n    if (!scanTryCatchBlocks(meth, vdata.insnFlags))\n        goto bail;\n\n    /*\n     * Perform static instruction verification.  Also sets the \"branch\n     * target\" flags.\n     */\n    if (!verifyInstructions(&vdata))\n        goto bail;\n\n    /*\n     * Do code-flow analysis.\n     *\n     * We could probably skip this for a method with no registers, but\n     * that's so rare that there's little point in checking.\n     */\n    if (!dvmVerifyCodeFlow(&vdata)) {\n        //ALOGD(\"+++ %s failed code flow\", meth->name);\n        goto bail;\n    }\n\nsuccess:\n    result = true;\n\nbail:\n    dvmFreeVfyBasicBlocks(&vdata);\n    dvmFreeUninitInstanceMap(vdata.uninitMap);\n    free(vdata.insnFlags);\n    return result;\n}\n```\n\ndvmVerifyClass 具体过程中，会去校验 这个 Class中的所有的 directMethod 方法，和 virtualMethod 方法。具体这些方法包含哪些呢？ 其中时包含了：\n* static 方法\n* private 方法\n* 构造方法\n* ... ...\n\n由此可知：  如果这些方法中直接引用到的类（第一层级关系，不会进行递归搜索） 和 class (源码中的clazz) 在同一个 dex 中的话，这个类就会被打上  CLASS_ISPREVERIFY 标记\n\n## PreVerify 缘由\n\n* 一方面，Dalvik 虚拟机在安装期间，为Class 打上 CLASS_ISPREVERIFIED 是为了提高性能，下次使用时，则会省去校验操作，提高访问效率。\n* 另一方面，被标上“CLASS_ISPREVERIFIED”的类，dvm在运行期载入Class时候，会对其内存中对应的直接引用类进行校验，如果该类存在与直接引用类所在的dex不是同一个，则直接报“pre-verification” 错误，该类无法加载。\n\n``` cpp\nClassObject* dvmResolveClass(const ClassObject* referrer, u4 classIdx,\n    bool fromUnverifiedConstant)\n{\n    DvmDex* pDvmDex = referrer->pDvmDex;\n    ClassObject* resClass;\n    const char* className;\n    /*\n     * Check the table first -- this gets called from the other \"resolve\"\n     * methods.\n     */\n    resClass = dvmDexGetResolvedClass(pDvmDex, classIdx); // 预先在dex的缓存表里查\n    if (resClass != NULL)\n        return resClass;\n    LOGVV(\"--- resolving class %u (referrer=%s cl=%p)\",\n        classIdx, referrer->descriptor, referrer->classLoader);\n    /*\n     * Class hasn't been loaded yet, or is in the process of being loaded\n     * and initialized now.  Try to get a copy.  If we find one, put the\n     * pointer in the DexTypeId.  There isn't a race condition here --\n     * 32-bit writes are guaranteed atomic on all target platforms.  Worst\n     * case we have two threads storing the same value.\n     *\n     * If this is an array class, we'll generate it here.\n     */\n    className = dexStringByTypeIdx(pDvmDex->pDexFile, classIdx);\n    if (className[0] != '\\0' && className[1] == '\\0') {\n        /* primitive type */\n        resClass = dvmFindPrimitiveClass(className[0]);\n    } else {\n        resClass = dvmFindClassNoInit(className, referrer->classLoader);\n    }\n    if (resClass != NULL) {\n        /*\n         * If the referrer was pre-verified, the resolved class must come\n         * from the same DEX or from a bootstrap class.  The pre-verifier\n         * makes assumptions that could be invalidated by a wacky class\n         * loader.  (See the notes at the top of oo/Class.c.)\n         *\n         * The verifier does *not* fail a class for using a const-class\n         * or instance-of instruction referring to an unresolveable class,\n         * because the result of the instruction is simply a Class object\n         * or boolean -- there's no need to resolve the class object during\n         * verification.  Instance field and virtual method accesses can\n         * break dangerously if we get the wrong class, but const-class and\n         * instance-of are only interesting at execution time.  So, if we\n         * we got here as part of executing one of the \"unverified class\"\n         * instructions, we skip the additional check.\n         *\n         * Ditto for class references from annotations and exception\n         * handler lists.\n         */\n        if (!fromUnverifiedConstant &&\n            IS_CLASS_FLAG_SET(referrer, CLASS_ISPREVERIFIED))\n        {\n            ClassObject* resClassCheck = resClass;\n            if (dvmIsArrayClass(resClassCheck))\n                resClassCheck = resClassCheck->elementClass;\n            if (referrer->pDvmDex != resClassCheck->pDvmDex &&\n                resClassCheck->classLoader != NULL)  // 校验dex是否是安装时的同一个dex\n            {\n                ALOGW(\"Class resolved by unexpected DEX:\"\n                     \" %s(%p):%p ref [%s] %s(%p):%p\",\n                    referrer->descriptor, referrer->classLoader,\n                    referrer->pDvmDex,\n                    resClass->descriptor, resClassCheck->descriptor,\n                    resClassCheck->classLoader, resClassCheck->pDvmDex);\n                ALOGW(\"(%s had used a different %s during pre-verification)\",\n                    referrer->descriptor, resClass->descriptor);\n                dvmThrowIllegalAccessError(\n                    \"Class ref in pre-verified class resolved to unexpected \"\n                    \"implementation\");\n                return NULL;\n            }\n        }\n        LOGVV(\"##### +ResolveClass(%s): referrer=%s dex=%p ldr=%p ref=%d\",\n            resClass->descriptor, referrer->descriptor, referrer->pDvmDex,\n            referrer->classLoader, classIdx);\n        /*\n         * Add what we found to the list so we can skip the class search\n         * next time through.\n         *\n         * TODO: should we be doing this when fromUnverifiedConstant==true?\n         * (see comments at top of oo/Class.c)\n         */\n        dvmDexSetResolvedClass(pDvmDex, classIdx, resClass);\n    } else {\n        /* not found, exception should be raised */\n        LOGVV(\"Class not found: %s\",\n            dexStringByTypeIdx(pDvmDex->pDexFile, classIdx));\n        assert(dvmCheckException(dvmThreadSelf()));\n    }\n    return resClass;\n}\n```\n\n实际上，这一步dex的一致性判断，也是google为了防止外部DEX注入的一个安全方案，即保证运行期的Class与其直接引用类之间所在的DEX关系要与安装时候一致\n\n\n<br>\n源码链接:\nhttp://osxr.org:8080/android/source/dalvik/vm/analysis/DexPrepare.cpp\nhttp://osxr.org:8080/android/source/dalvik/vm/analysis/DexVerify.cpp\nhttp://osxr.org:8080/android/source/dalvik/vm/oo/Resolve.cpp\n\n","source":"_posts/Dalvik中PreVerify问题.md","raw":"---\ntitle: Dalvik中PreVerify问题\ndate: 2016-11-24 13:01\ncategories: Android\ntags: Dalvik\n---\n## PreVerify（预校验）的由来\nDalvik 虚拟机在启动的时候，会有许多的启动参数，其中有一项就是verify，当verify被打开的时候，doVerify变量为true，则进行类的校验（dvmVerifyClass方法调用）。若校验成功，则这个类会被打上标记：CLASS_ISPREVERIFIED。\n上面描述的过程是dex -> odex (dexopt 过程)时，做的一个优化。当从classes.dex 变为 odex 后，才会被拿去执行。\n\n## Class 被 Preverify 的过程\n在dex 被 dexopt 的过程中，源码中有校验和优化 Class 相关的操作：\n\n``` cpp\n/*\n * Verify and/or optimize a specific class.\n */\nstatic void verifyAndOptimizeClass(DexFile* pDexFile, ClassObject* clazz,\n    const DexClassDef* pClassDef, bool doVerify, bool doOpt)\n{\n    const char* classDescriptor;\n    bool verified = false;\n\n    if (clazz->pDvmDex->pDexFile != pDexFile) {\n        /*\n         * The current DEX file defined a class that is also present in the\n         * bootstrap class path.  The class loader favored the bootstrap\n         * version, which means that we have a pointer to a class that is\n         * (a) not the one we want to examine, and (b) mapped read-only,\n         * so we will seg fault if we try to rewrite instructions inside it.\n         */\n        ALOGD(\"DexOpt: not verifying/optimizing '%s': multiple definitions\",\n            clazz->descriptor);\n        return;\n    }\n\n    classDescriptor = dexStringByTypeIdx(pDexFile, pClassDef->classIdx);\n\n    /*\n     * First, try to verify it.\n     */\n    if (doVerify) {\n        if (dvmVerifyClass(clazz)) {\n            /*\n             * Set the \"is preverified\" flag in the DexClassDef.  We\n             * do it here, rather than in the ClassObject structure,\n             * because the DexClassDef is part of the odex file.\n             */\n            assert((clazz->accessFlags & JAVA_FLAGS_MASK) ==\n                pClassDef->accessFlags);\n            ((DexClassDef*)pClassDef)->accessFlags |= CLASS_ISPREVERIFIED;\n            verified = true;\n        } else {\n            // TODO: log when in verbose mode\n            ALOGV(\"DexOpt: '%s' failed verification\", classDescriptor);\n        }\n    }\n\n    if (doOpt) {\n        bool needVerify = (gDvm.dexOptMode == OPTIMIZE_MODE_VERIFIED ||\n                           gDvm.dexOptMode == OPTIMIZE_MODE_FULL);\n        if (!verified && needVerify) {\n            ALOGV(\"DexOpt: not optimizing '%s': not verified\",\n                classDescriptor);\n        } else {\n            dvmOptimizeClass(clazz, false);// 优化 Class 操作\n\n            /* set the flag whether or not we actually changed anything */\n            ((DexClassDef*)pClassDef)->accessFlags |= CLASS_ISOPTIMIZED;// Class被优化过后，也会打上被优化过的标记 CLASS_ISOPTIMIZED\n        }\n    }\n}\n```\n\ndvmVerifyClass 的具体过程，源码中是这样描述的：\n\n``` cpp\n/*\n * Verify a class.\n *\n * By the time we get here, the value of gDvm.classVerifyMode should already\n * have been factored in.  If you want to call into the verifier even\n * though verification is disabled, that's your business.\n *\n * Returns \"true\" on success.\n */\nbool dvmVerifyClass(ClassObject*clazz) {\n    int i;\n    if (dvmIsClassVerified(clazz)) {\n        ALOGD(\"Ignoring duplicate verify attempt on %s\", clazz -> descriptor);\n        return true;\n    }\n    for (i = 0; i < clazz -> directMethodCount; i++) {\n        if (!verifyMethod( & clazz -> directMethods[i])){\n            LOG_VFY(\"Verifier rejected class %s\", clazz -> descriptor);\n            return false;\n        }\n    }\n    for (i = 0; i < clazz -> virtualMethodCount; i++) {\n        if (!verifyMethod( & clazz -> virtualMethods[i])){\n            LOG_VFY(\"Verifier rejected class %s\", clazz -> descriptor);\n            return false;\n        }\n    }\n    return true;\n}\n```\n\n其中，dvmVerifyClass中又去调用了 方法的校验 verifyMethod, 再去追源码：\n\n``` cpp\n/*\n * Perform verification on a single method.\n */\nstatic bool verifyMethod(Method* meth)\n{\n    bool result = false;\n\n    /*\n     * Verifier state blob.  Various values will be cached here so we\n     * can avoid expensive lookups and pass fewer arguments around.\n     */\n    VerifierData vdata;\n#if 1   // ndef NDEBUG\n    memset(&vdata, 0x99, sizeof(vdata));\n#endif\n\n    vdata.method = meth;\n    vdata.insnsSize = dvmGetMethodInsnsSize(meth);\n    vdata.insnRegCount = meth->registersSize;\n    vdata.insnFlags = NULL;\n    vdata.uninitMap = NULL;\n    vdata.basicBlocks = NULL;\n\n    /*\n     * If there aren't any instructions, make sure that's expected, then\n     * exit successfully.  Note: for native methods, meth->insns gets set\n     * to a native function pointer on first call, so don't use that as\n     * an indicator.\n     */\n    if (vdata.insnsSize == 0) {\n        if (!dvmIsNativeMethod(meth) && !dvmIsAbstractMethod(meth)) {\n            LOG_VFY_METH(meth,\n                \"VFY: zero-length code in concrete non-native method\");\n            goto bail;\n        }\n\n        goto success;\n    }\n\n    /*\n     * Sanity-check the register counts.  ins + locals = registers, so make\n     * sure that ins <= registers.\n     */\n    if (meth->insSize > meth->registersSize) {\n        LOG_VFY_METH(meth, \"VFY: bad register counts (ins=%d regs=%d)\",\n            meth->insSize, meth->registersSize);\n        goto bail;\n    }\n\n    /*\n     * Allocate and populate an array to hold instruction data.\n     *\n     * TODO: Consider keeping a reusable pre-allocated array sitting\n     * around for smaller methods.\n     */\n    vdata.insnFlags = (InsnFlags*) calloc(vdata.insnsSize, sizeof(InsnFlags));\n    if (vdata.insnFlags == NULL)\n        goto bail;\n\n    /*\n     * Compute the width of each instruction and store the result in insnFlags.\n     * Count up the #of occurrences of certain opcodes while we're at it.\n     */\n    if (!computeWidthsAndCountOps(&vdata))\n        goto bail;\n\n    /*\n     * Allocate a map to hold the classes of uninitialized instances.\n     */\n    vdata.uninitMap = dvmCreateUninitInstanceMap(meth, vdata.insnFlags,\n        vdata.newInstanceCount);\n    if (vdata.uninitMap == NULL)\n        goto bail;\n\n    /*\n     * Set the \"in try\" flags for all instructions guarded by a \"try\" block.\n     * Also sets the \"branch target\" flag on exception handlers.\n     */\n    if (!scanTryCatchBlocks(meth, vdata.insnFlags))\n        goto bail;\n\n    /*\n     * Perform static instruction verification.  Also sets the \"branch\n     * target\" flags.\n     */\n    if (!verifyInstructions(&vdata))\n        goto bail;\n\n    /*\n     * Do code-flow analysis.\n     *\n     * We could probably skip this for a method with no registers, but\n     * that's so rare that there's little point in checking.\n     */\n    if (!dvmVerifyCodeFlow(&vdata)) {\n        //ALOGD(\"+++ %s failed code flow\", meth->name);\n        goto bail;\n    }\n\nsuccess:\n    result = true;\n\nbail:\n    dvmFreeVfyBasicBlocks(&vdata);\n    dvmFreeUninitInstanceMap(vdata.uninitMap);\n    free(vdata.insnFlags);\n    return result;\n}\n```\n\ndvmVerifyClass 具体过程中，会去校验 这个 Class中的所有的 directMethod 方法，和 virtualMethod 方法。具体这些方法包含哪些呢？ 其中时包含了：\n* static 方法\n* private 方法\n* 构造方法\n* ... ...\n\n由此可知：  如果这些方法中直接引用到的类（第一层级关系，不会进行递归搜索） 和 class (源码中的clazz) 在同一个 dex 中的话，这个类就会被打上  CLASS_ISPREVERIFY 标记\n\n## PreVerify 缘由\n\n* 一方面，Dalvik 虚拟机在安装期间，为Class 打上 CLASS_ISPREVERIFIED 是为了提高性能，下次使用时，则会省去校验操作，提高访问效率。\n* 另一方面，被标上“CLASS_ISPREVERIFIED”的类，dvm在运行期载入Class时候，会对其内存中对应的直接引用类进行校验，如果该类存在与直接引用类所在的dex不是同一个，则直接报“pre-verification” 错误，该类无法加载。\n\n``` cpp\nClassObject* dvmResolveClass(const ClassObject* referrer, u4 classIdx,\n    bool fromUnverifiedConstant)\n{\n    DvmDex* pDvmDex = referrer->pDvmDex;\n    ClassObject* resClass;\n    const char* className;\n    /*\n     * Check the table first -- this gets called from the other \"resolve\"\n     * methods.\n     */\n    resClass = dvmDexGetResolvedClass(pDvmDex, classIdx); // 预先在dex的缓存表里查\n    if (resClass != NULL)\n        return resClass;\n    LOGVV(\"--- resolving class %u (referrer=%s cl=%p)\",\n        classIdx, referrer->descriptor, referrer->classLoader);\n    /*\n     * Class hasn't been loaded yet, or is in the process of being loaded\n     * and initialized now.  Try to get a copy.  If we find one, put the\n     * pointer in the DexTypeId.  There isn't a race condition here --\n     * 32-bit writes are guaranteed atomic on all target platforms.  Worst\n     * case we have two threads storing the same value.\n     *\n     * If this is an array class, we'll generate it here.\n     */\n    className = dexStringByTypeIdx(pDvmDex->pDexFile, classIdx);\n    if (className[0] != '\\0' && className[1] == '\\0') {\n        /* primitive type */\n        resClass = dvmFindPrimitiveClass(className[0]);\n    } else {\n        resClass = dvmFindClassNoInit(className, referrer->classLoader);\n    }\n    if (resClass != NULL) {\n        /*\n         * If the referrer was pre-verified, the resolved class must come\n         * from the same DEX or from a bootstrap class.  The pre-verifier\n         * makes assumptions that could be invalidated by a wacky class\n         * loader.  (See the notes at the top of oo/Class.c.)\n         *\n         * The verifier does *not* fail a class for using a const-class\n         * or instance-of instruction referring to an unresolveable class,\n         * because the result of the instruction is simply a Class object\n         * or boolean -- there's no need to resolve the class object during\n         * verification.  Instance field and virtual method accesses can\n         * break dangerously if we get the wrong class, but const-class and\n         * instance-of are only interesting at execution time.  So, if we\n         * we got here as part of executing one of the \"unverified class\"\n         * instructions, we skip the additional check.\n         *\n         * Ditto for class references from annotations and exception\n         * handler lists.\n         */\n        if (!fromUnverifiedConstant &&\n            IS_CLASS_FLAG_SET(referrer, CLASS_ISPREVERIFIED))\n        {\n            ClassObject* resClassCheck = resClass;\n            if (dvmIsArrayClass(resClassCheck))\n                resClassCheck = resClassCheck->elementClass;\n            if (referrer->pDvmDex != resClassCheck->pDvmDex &&\n                resClassCheck->classLoader != NULL)  // 校验dex是否是安装时的同一个dex\n            {\n                ALOGW(\"Class resolved by unexpected DEX:\"\n                     \" %s(%p):%p ref [%s] %s(%p):%p\",\n                    referrer->descriptor, referrer->classLoader,\n                    referrer->pDvmDex,\n                    resClass->descriptor, resClassCheck->descriptor,\n                    resClassCheck->classLoader, resClassCheck->pDvmDex);\n                ALOGW(\"(%s had used a different %s during pre-verification)\",\n                    referrer->descriptor, resClass->descriptor);\n                dvmThrowIllegalAccessError(\n                    \"Class ref in pre-verified class resolved to unexpected \"\n                    \"implementation\");\n                return NULL;\n            }\n        }\n        LOGVV(\"##### +ResolveClass(%s): referrer=%s dex=%p ldr=%p ref=%d\",\n            resClass->descriptor, referrer->descriptor, referrer->pDvmDex,\n            referrer->classLoader, classIdx);\n        /*\n         * Add what we found to the list so we can skip the class search\n         * next time through.\n         *\n         * TODO: should we be doing this when fromUnverifiedConstant==true?\n         * (see comments at top of oo/Class.c)\n         */\n        dvmDexSetResolvedClass(pDvmDex, classIdx, resClass);\n    } else {\n        /* not found, exception should be raised */\n        LOGVV(\"Class not found: %s\",\n            dexStringByTypeIdx(pDvmDex->pDexFile, classIdx));\n        assert(dvmCheckException(dvmThreadSelf()));\n    }\n    return resClass;\n}\n```\n\n实际上，这一步dex的一致性判断，也是google为了防止外部DEX注入的一个安全方案，即保证运行期的Class与其直接引用类之间所在的DEX关系要与安装时候一致\n\n\n<br>\n源码链接:\nhttp://osxr.org:8080/android/source/dalvik/vm/analysis/DexPrepare.cpp\nhttp://osxr.org:8080/android/source/dalvik/vm/analysis/DexVerify.cpp\nhttp://osxr.org:8080/android/source/dalvik/vm/oo/Resolve.cpp\n\n","slug":"Dalvik中PreVerify问题","published":1,"updated":"2017-02-08T11:27:41.000Z","_id":"ciywl09rc0000d2qw7yeoqb5x","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"PreVerify（预校验）的由来\"><a href=\"#PreVerify（预校验）的由来\" class=\"headerlink\" title=\"PreVerify（预校验）的由来\"></a>PreVerify（预校验）的由来</h2><p>Dalvik 虚拟机在启动的时候，会有许多的启动参数，其中有一项就是verify，当verify被打开的时候，doVerify变量为true，则进行类的校验（dvmVerifyClass方法调用）。若校验成功，则这个类会被打上标记：CLASS_ISPREVERIFIED。<br>上面描述的过程是dex -&gt; odex (dexopt 过程)时，做的一个优化。当从classes.dex 变为 odex 后，才会被拿去执行。</p>\n<h2 id=\"Class-被-Preverify-的过程\"><a href=\"#Class-被-Preverify-的过程\" class=\"headerlink\" title=\"Class 被 Preverify 的过程\"></a>Class 被 Preverify 的过程</h2><p>在dex 被 dexopt 的过程中，源码中有校验和优化 Class 相关的操作：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/*</span></div><div class=\"line\"> * Verify and/or optimize a specific class.</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">verifyAndOptimizeClass</span><span class=\"params\">(DexFile* pDexFile, ClassObject* clazz,</span></span></div><div class=\"line\">    <span class=\"keyword\">const</span> DexClassDef* pClassDef, <span class=\"keyword\">bool</span> doVerify, <span class=\"keyword\">bool</span> doOpt)</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* classDescriptor;</div><div class=\"line\">    <span class=\"keyword\">bool</span> verified = <span class=\"literal\">false</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (clazz-&gt;pDvmDex-&gt;pDexFile != pDexFile) &#123;</div><div class=\"line\">        <span class=\"comment\">/*</span></div><div class=\"line\">         * The current DEX file defined a class that is also present in the</div><div class=\"line\">         * bootstrap class path.  The class loader favored the bootstrap</div><div class=\"line\">         * version, which means that we have a pointer to a class that is</div><div class=\"line\">         * (a) not the one we want to examine, and (b) mapped read-only,</div><div class=\"line\">         * so we will seg fault if we try to rewrite instructions inside it.</div><div class=\"line\">         */</div><div class=\"line\">        ALOGD(<span class=\"string\">\"DexOpt: not verifying/optimizing '%s': multiple definitions\"</span>,</div><div class=\"line\">            clazz-&gt;descriptor);</div><div class=\"line\">        <span class=\"keyword\">return</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    classDescriptor = dexStringByTypeIdx(pDexFile, pClassDef-&gt;classIdx);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/*</span></div><div class=\"line\">     * First, try to verify it.</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"keyword\">if</span> (doVerify) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (dvmVerifyClass(clazz)) &#123;</div><div class=\"line\">            <span class=\"comment\">/*</span></div><div class=\"line\">             * Set the \"is preverified\" flag in the DexClassDef.  We</div><div class=\"line\">             * do it here, rather than in the ClassObject structure,</div><div class=\"line\">             * because the DexClassDef is part of the odex file.</div><div class=\"line\">             */</div><div class=\"line\">            assert((clazz-&gt;accessFlags &amp; JAVA_FLAGS_MASK) ==</div><div class=\"line\">                pClassDef-&gt;accessFlags);</div><div class=\"line\">            ((DexClassDef*)pClassDef)-&gt;accessFlags |= CLASS_ISPREVERIFIED;</div><div class=\"line\">            verified = <span class=\"literal\">true</span>;</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"comment\">// <span class=\"doctag\">TODO:</span> log when in verbose mode</span></div><div class=\"line\">            ALOGV(<span class=\"string\">\"DexOpt: '%s' failed verification\"</span>, classDescriptor);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (doOpt) &#123;</div><div class=\"line\">        <span class=\"keyword\">bool</span> needVerify = (gDvm.dexOptMode == OPTIMIZE_MODE_VERIFIED ||</div><div class=\"line\">                           gDvm.dexOptMode == OPTIMIZE_MODE_FULL);</div><div class=\"line\">        <span class=\"keyword\">if</span> (!verified &amp;&amp; needVerify) &#123;</div><div class=\"line\">            ALOGV(<span class=\"string\">\"DexOpt: not optimizing '%s': not verified\"</span>,</div><div class=\"line\">                classDescriptor);</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            dvmOptimizeClass(clazz, <span class=\"literal\">false</span>);<span class=\"comment\">// 优化 Class 操作</span></div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">/* set the flag whether or not we actually changed anything */</span></div><div class=\"line\">            ((DexClassDef*)pClassDef)-&gt;accessFlags |= CLASS_ISOPTIMIZED;<span class=\"comment\">// Class被优化过后，也会打上被优化过的标记 CLASS_ISOPTIMIZED</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>dvmVerifyClass 的具体过程，源码中是这样描述的：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/*</span></div><div class=\"line\"> * Verify a class.</div><div class=\"line\"> *</div><div class=\"line\"> * By the time we get here, the value of gDvm.classVerifyMode should already</div><div class=\"line\"> * have been factored in.  If you want to call into the verifier even</div><div class=\"line\"> * though verification is disabled, that's your business.</div><div class=\"line\"> *</div><div class=\"line\"> * Returns \"true\" on success.</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">dvmVerifyClass</span><span class=\"params\">(ClassObject*clazz)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> i;</div><div class=\"line\">    <span class=\"keyword\">if</span> (dvmIsClassVerified(clazz)) &#123;</div><div class=\"line\">        ALOGD(<span class=\"string\">\"Ignoring duplicate verify attempt on %s\"</span>, clazz -&gt; descriptor);</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; clazz -&gt; directMethodCount; i++) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (!verifyMethod( &amp; clazz -&gt; directMethods[i]))&#123;</div><div class=\"line\">            LOG_VFY(<span class=\"string\">\"Verifier rejected class %s\"</span>, clazz -&gt; descriptor);</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; clazz -&gt; virtualMethodCount; i++) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (!verifyMethod( &amp; clazz -&gt; virtualMethods[i]))&#123;</div><div class=\"line\">            LOG_VFY(<span class=\"string\">\"Verifier rejected class %s\"</span>, clazz -&gt; descriptor);</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>其中，dvmVerifyClass中又去调用了 方法的校验 verifyMethod, 再去追源码：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/*</span></div><div class=\"line\"> * Perform verification on a single method.</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">bool</span> <span class=\"title\">verifyMethod</span><span class=\"params\">(Method* meth)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">bool</span> result = <span class=\"literal\">false</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/*</span></div><div class=\"line\">     * Verifier state blob.  Various values will be cached here so we</div><div class=\"line\">     * can avoid expensive lookups and pass fewer arguments around.</div><div class=\"line\">     */</div><div class=\"line\">    VerifierData vdata;</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">if</span> 1   <span class=\"comment\">// ndef NDEBUG</span></span></div><div class=\"line\">    <span class=\"built_in\">memset</span>(&amp;vdata, <span class=\"number\">0x99</span>, <span class=\"keyword\">sizeof</span>(vdata));</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></div><div class=\"line\"></div><div class=\"line\">    vdata.method = meth;</div><div class=\"line\">    vdata.insnsSize = dvmGetMethodInsnsSize(meth);</div><div class=\"line\">    vdata.insnRegCount = meth-&gt;registersSize;</div><div class=\"line\">    vdata.insnFlags = <span class=\"literal\">NULL</span>;</div><div class=\"line\">    vdata.uninitMap = <span class=\"literal\">NULL</span>;</div><div class=\"line\">    vdata.basicBlocks = <span class=\"literal\">NULL</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/*</span></div><div class=\"line\">     * If there aren't any instructions, make sure that's expected, then</div><div class=\"line\">     * exit successfully.  Note: for native methods, meth-&gt;insns gets set</div><div class=\"line\">     * to a native function pointer on first call, so don't use that as</div><div class=\"line\">     * an indicator.</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"keyword\">if</span> (vdata.insnsSize == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (!dvmIsNativeMethod(meth) &amp;&amp; !dvmIsAbstractMethod(meth)) &#123;</div><div class=\"line\">            LOG_VFY_METH(meth,</div><div class=\"line\">                <span class=\"string\">\"VFY: zero-length code in concrete non-native method\"</span>);</div><div class=\"line\">            <span class=\"keyword\">goto</span> bail;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">goto</span> success;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/*</span></div><div class=\"line\">     * Sanity-check the register counts.  ins + locals = registers, so make</div><div class=\"line\">     * sure that ins &lt;= registers.</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"keyword\">if</span> (meth-&gt;insSize &gt; meth-&gt;registersSize) &#123;</div><div class=\"line\">        LOG_VFY_METH(meth, <span class=\"string\">\"VFY: bad register counts (ins=%d regs=%d)\"</span>,</div><div class=\"line\">            meth-&gt;insSize, meth-&gt;registersSize);</div><div class=\"line\">        <span class=\"keyword\">goto</span> bail;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/*</span></div><div class=\"line\">     * Allocate and populate an array to hold instruction data.</div><div class=\"line\">     *</div><div class=\"line\">     * <span class=\"doctag\">TODO:</span> Consider keeping a reusable pre-allocated array sitting</div><div class=\"line\">     * around for smaller methods.</div><div class=\"line\">     */</div><div class=\"line\">    vdata.insnFlags = (InsnFlags*) <span class=\"built_in\">calloc</span>(vdata.insnsSize, <span class=\"keyword\">sizeof</span>(InsnFlags));</div><div class=\"line\">    <span class=\"keyword\">if</span> (vdata.insnFlags == <span class=\"literal\">NULL</span>)</div><div class=\"line\">        <span class=\"keyword\">goto</span> bail;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/*</span></div><div class=\"line\">     * Compute the width of each instruction and store the result in insnFlags.</div><div class=\"line\">     * Count up the #of occurrences of certain opcodes while we're at it.</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"keyword\">if</span> (!computeWidthsAndCountOps(&amp;vdata))</div><div class=\"line\">        <span class=\"keyword\">goto</span> bail;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/*</span></div><div class=\"line\">     * Allocate a map to hold the classes of uninitialized instances.</div><div class=\"line\">     */</div><div class=\"line\">    vdata.uninitMap = dvmCreateUninitInstanceMap(meth, vdata.insnFlags,</div><div class=\"line\">        vdata.newInstanceCount);</div><div class=\"line\">    <span class=\"keyword\">if</span> (vdata.uninitMap == <span class=\"literal\">NULL</span>)</div><div class=\"line\">        <span class=\"keyword\">goto</span> bail;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/*</span></div><div class=\"line\">     * Set the \"in try\" flags for all instructions guarded by a \"try\" block.</div><div class=\"line\">     * Also sets the \"branch target\" flag on exception handlers.</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"keyword\">if</span> (!scanTryCatchBlocks(meth, vdata.insnFlags))</div><div class=\"line\">        <span class=\"keyword\">goto</span> bail;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/*</span></div><div class=\"line\">     * Perform static instruction verification.  Also sets the \"branch</div><div class=\"line\">     * target\" flags.</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"keyword\">if</span> (!verifyInstructions(&amp;vdata))</div><div class=\"line\">        <span class=\"keyword\">goto</span> bail;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/*</span></div><div class=\"line\">     * Do code-flow analysis.</div><div class=\"line\">     *</div><div class=\"line\">     * We could probably skip this for a method with no registers, but</div><div class=\"line\">     * that's so rare that there's little point in checking.</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"keyword\">if</span> (!dvmVerifyCodeFlow(&amp;vdata)) &#123;</div><div class=\"line\">        <span class=\"comment\">//ALOGD(\"+++ %s failed code flow\", meth-&gt;name);</span></div><div class=\"line\">        <span class=\"keyword\">goto</span> bail;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">success:</div><div class=\"line\">    result = <span class=\"literal\">true</span>;</div><div class=\"line\"></div><div class=\"line\">bail:</div><div class=\"line\">    dvmFreeVfyBasicBlocks(&amp;vdata);</div><div class=\"line\">    dvmFreeUninitInstanceMap(vdata.uninitMap);</div><div class=\"line\">    <span class=\"built_in\">free</span>(vdata.insnFlags);</div><div class=\"line\">    <span class=\"keyword\">return</span> result;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>dvmVerifyClass 具体过程中，会去校验 这个 Class中的所有的 directMethod 方法，和 virtualMethod 方法。具体这些方法包含哪些呢？ 其中时包含了：</p>\n<ul>\n<li>static 方法</li>\n<li>private 方法</li>\n<li>构造方法</li>\n<li>… …</li>\n</ul>\n<p>由此可知：  如果这些方法中直接引用到的类（第一层级关系，不会进行递归搜索） 和 class (源码中的clazz) 在同一个 dex 中的话，这个类就会被打上  CLASS_ISPREVERIFY 标记</p>\n<h2 id=\"PreVerify-缘由\"><a href=\"#PreVerify-缘由\" class=\"headerlink\" title=\"PreVerify 缘由\"></a>PreVerify 缘由</h2><ul>\n<li>一方面，Dalvik 虚拟机在安装期间，为Class 打上 CLASS_ISPREVERIFIED 是为了提高性能，下次使用时，则会省去校验操作，提高访问效率。</li>\n<li>另一方面，被标上“CLASS_ISPREVERIFIED”的类，dvm在运行期载入Class时候，会对其内存中对应的直接引用类进行校验，如果该类存在与直接引用类所在的dex不是同一个，则直接报“pre-verification” 错误，该类无法加载。</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\">ClassObject* <span class=\"title\">dvmResolveClass</span><span class=\"params\">(<span class=\"keyword\">const</span> ClassObject* referrer, u4 classIdx,</span></span></div><div class=\"line\">    <span class=\"keyword\">bool</span> fromUnverifiedConstant)</div><div class=\"line\">&#123;</div><div class=\"line\">    DvmDex* pDvmDex = referrer-&gt;pDvmDex;</div><div class=\"line\">    ClassObject* resClass;</div><div class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* className;</div><div class=\"line\">    <span class=\"comment\">/*</span></div><div class=\"line\">     * Check the table first -- this gets called from the other \"resolve\"</div><div class=\"line\">     * methods.</div><div class=\"line\">     */</div><div class=\"line\">    resClass = dvmDexGetResolvedClass(pDvmDex, classIdx); <span class=\"comment\">// 预先在dex的缓存表里查</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (resClass != <span class=\"literal\">NULL</span>)</div><div class=\"line\">        <span class=\"keyword\">return</span> resClass;</div><div class=\"line\">    LOGVV(<span class=\"string\">\"--- resolving class %u (referrer=%s cl=%p)\"</span>,</div><div class=\"line\">        classIdx, referrer-&gt;descriptor, referrer-&gt;classLoader);</div><div class=\"line\">    <span class=\"comment\">/*</span></div><div class=\"line\">     * Class hasn't been loaded yet, or is in the process of being loaded</div><div class=\"line\">     * and initialized now.  Try to get a copy.  If we find one, put the</div><div class=\"line\">     * pointer in the DexTypeId.  There isn't a race condition here --</div><div class=\"line\">     * 32-bit writes are guaranteed atomic on all target platforms.  Worst</div><div class=\"line\">     * case we have two threads storing the same value.</div><div class=\"line\">     *</div><div class=\"line\">     * If this is an array class, we'll generate it here.</div><div class=\"line\">     */</div><div class=\"line\">    className = dexStringByTypeIdx(pDvmDex-&gt;pDexFile, classIdx);</div><div class=\"line\">    <span class=\"keyword\">if</span> (className[<span class=\"number\">0</span>] != <span class=\"string\">'\\0'</span> &amp;&amp; className[<span class=\"number\">1</span>] == <span class=\"string\">'\\0'</span>) &#123;</div><div class=\"line\">        <span class=\"comment\">/* primitive type */</span></div><div class=\"line\">        resClass = dvmFindPrimitiveClass(className[<span class=\"number\">0</span>]);</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        resClass = dvmFindClassNoInit(className, referrer-&gt;classLoader);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> (resClass != <span class=\"literal\">NULL</span>) &#123;</div><div class=\"line\">        <span class=\"comment\">/*</span></div><div class=\"line\">         * If the referrer was pre-verified, the resolved class must come</div><div class=\"line\">         * from the same DEX or from a bootstrap class.  The pre-verifier</div><div class=\"line\">         * makes assumptions that could be invalidated by a wacky class</div><div class=\"line\">         * loader.  (See the notes at the top of oo/Class.c.)</div><div class=\"line\">         *</div><div class=\"line\">         * The verifier does *not* fail a class for using a const-class</div><div class=\"line\">         * or instance-of instruction referring to an unresolveable class,</div><div class=\"line\">         * because the result of the instruction is simply a Class object</div><div class=\"line\">         * or boolean -- there's no need to resolve the class object during</div><div class=\"line\">         * verification.  Instance field and virtual method accesses can</div><div class=\"line\">         * break dangerously if we get the wrong class, but const-class and</div><div class=\"line\">         * instance-of are only interesting at execution time.  So, if we</div><div class=\"line\">         * we got here as part of executing one of the \"unverified class\"</div><div class=\"line\">         * instructions, we skip the additional check.</div><div class=\"line\">         *</div><div class=\"line\">         * Ditto for class references from annotations and exception</div><div class=\"line\">         * handler lists.</div><div class=\"line\">         */</div><div class=\"line\">        <span class=\"keyword\">if</span> (!fromUnverifiedConstant &amp;&amp;</div><div class=\"line\">            IS_CLASS_FLAG_SET(referrer, CLASS_ISPREVERIFIED))</div><div class=\"line\">        &#123;</div><div class=\"line\">            ClassObject* resClassCheck = resClass;</div><div class=\"line\">            <span class=\"keyword\">if</span> (dvmIsArrayClass(resClassCheck))</div><div class=\"line\">                resClassCheck = resClassCheck-&gt;elementClass;</div><div class=\"line\">            <span class=\"keyword\">if</span> (referrer-&gt;pDvmDex != resClassCheck-&gt;pDvmDex &amp;&amp;</div><div class=\"line\">                resClassCheck-&gt;classLoader != <span class=\"literal\">NULL</span>)  <span class=\"comment\">// 校验dex是否是安装时的同一个dex</span></div><div class=\"line\">            &#123;</div><div class=\"line\">                ALOGW(<span class=\"string\">\"Class resolved by unexpected DEX:\"</span></div><div class=\"line\">                     <span class=\"string\">\" %s(%p):%p ref [%s] %s(%p):%p\"</span>,</div><div class=\"line\">                    referrer-&gt;descriptor, referrer-&gt;classLoader,</div><div class=\"line\">                    referrer-&gt;pDvmDex,</div><div class=\"line\">                    resClass-&gt;descriptor, resClassCheck-&gt;descriptor,</div><div class=\"line\">                    resClassCheck-&gt;classLoader, resClassCheck-&gt;pDvmDex);</div><div class=\"line\">                ALOGW(<span class=\"string\">\"(%s had used a different %s during pre-verification)\"</span>,</div><div class=\"line\">                    referrer-&gt;descriptor, resClass-&gt;descriptor);</div><div class=\"line\">                dvmThrowIllegalAccessError(</div><div class=\"line\">                    <span class=\"string\">\"Class ref in pre-verified class resolved to unexpected \"</span></div><div class=\"line\">                    <span class=\"string\">\"implementation\"</span>);</div><div class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        LOGVV(<span class=\"string\">\"##### +ResolveClass(%s): referrer=%s dex=%p ldr=%p ref=%d\"</span>,</div><div class=\"line\">            resClass-&gt;descriptor, referrer-&gt;descriptor, referrer-&gt;pDvmDex,</div><div class=\"line\">            referrer-&gt;classLoader, classIdx);</div><div class=\"line\">        <span class=\"comment\">/*</span></div><div class=\"line\">         * Add what we found to the list so we can skip the class search</div><div class=\"line\">         * next time through.</div><div class=\"line\">         *</div><div class=\"line\">         * <span class=\"doctag\">TODO:</span> should we be doing this when fromUnverifiedConstant==true?</div><div class=\"line\">         * (see comments at top of oo/Class.c)</div><div class=\"line\">         */</div><div class=\"line\">        dvmDexSetResolvedClass(pDvmDex, classIdx, resClass);</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"comment\">/* not found, exception should be raised */</span></div><div class=\"line\">        LOGVV(<span class=\"string\">\"Class not found: %s\"</span>,</div><div class=\"line\">            dexStringByTypeIdx(pDvmDex-&gt;pDexFile, classIdx));</div><div class=\"line\">        assert(dvmCheckException(dvmThreadSelf()));</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> resClass;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>实际上，这一步dex的一致性判断，也是google为了防止外部DEX注入的一个安全方案，即保证运行期的Class与其直接引用类之间所在的DEX关系要与安装时候一致</p>\n<p><br><br>源码链接:<br><a href=\"http://osxr.org:8080/android/source/dalvik/vm/analysis/DexPrepare.cpp\" target=\"_blank\" rel=\"external\">http://osxr.org:8080/android/source/dalvik/vm/analysis/DexPrepare.cpp</a><br><a href=\"http://osxr.org:8080/android/source/dalvik/vm/analysis/DexVerify.cpp\" target=\"_blank\" rel=\"external\">http://osxr.org:8080/android/source/dalvik/vm/analysis/DexVerify.cpp</a><br><a href=\"http://osxr.org:8080/android/source/dalvik/vm/oo/Resolve.cpp\" target=\"_blank\" rel=\"external\">http://osxr.org:8080/android/source/dalvik/vm/oo/Resolve.cpp</a></p>\n","excerpt":"","more":"<h2 id=\"PreVerify（预校验）的由来\"><a href=\"#PreVerify（预校验）的由来\" class=\"headerlink\" title=\"PreVerify（预校验）的由来\"></a>PreVerify（预校验）的由来</h2><p>Dalvik 虚拟机在启动的时候，会有许多的启动参数，其中有一项就是verify，当verify被打开的时候，doVerify变量为true，则进行类的校验（dvmVerifyClass方法调用）。若校验成功，则这个类会被打上标记：CLASS_ISPREVERIFIED。<br>上面描述的过程是dex -&gt; odex (dexopt 过程)时，做的一个优化。当从classes.dex 变为 odex 后，才会被拿去执行。</p>\n<h2 id=\"Class-被-Preverify-的过程\"><a href=\"#Class-被-Preverify-的过程\" class=\"headerlink\" title=\"Class 被 Preverify 的过程\"></a>Class 被 Preverify 的过程</h2><p>在dex 被 dexopt 的过程中，源码中有校验和优化 Class 相关的操作：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/*</div><div class=\"line\"> * Verify and/or optimize a specific class.</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">verifyAndOptimizeClass</span><span class=\"params\">(DexFile* pDexFile, ClassObject* clazz,</div><div class=\"line\">    <span class=\"keyword\">const</span> DexClassDef* pClassDef, <span class=\"keyword\">bool</span> doVerify, <span class=\"keyword\">bool</span> doOpt)</span></div><div class=\"line\"></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* classDescriptor;</div><div class=\"line\">    <span class=\"keyword\">bool</span> verified = <span class=\"literal\">false</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (clazz-&gt;pDvmDex-&gt;pDexFile != pDexFile) &#123;</div><div class=\"line\">        <span class=\"comment\">/*</div><div class=\"line\">         * The current DEX file defined a class that is also present in the</div><div class=\"line\">         * bootstrap class path.  The class loader favored the bootstrap</div><div class=\"line\">         * version, which means that we have a pointer to a class that is</div><div class=\"line\">         * (a) not the one we want to examine, and (b) mapped read-only,</div><div class=\"line\">         * so we will seg fault if we try to rewrite instructions inside it.</div><div class=\"line\">         */</span></div><div class=\"line\">        ALOGD(<span class=\"string\">\"DexOpt: not verifying/optimizing '%s': multiple definitions\"</span>,</div><div class=\"line\">            clazz-&gt;descriptor);</div><div class=\"line\">        <span class=\"keyword\">return</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    classDescriptor = dexStringByTypeIdx(pDexFile, pClassDef-&gt;classIdx);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/*</div><div class=\"line\">     * First, try to verify it.</div><div class=\"line\">     */</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (doVerify) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (dvmVerifyClass(clazz)) &#123;</div><div class=\"line\">            <span class=\"comment\">/*</div><div class=\"line\">             * Set the \"is preverified\" flag in the DexClassDef.  We</div><div class=\"line\">             * do it here, rather than in the ClassObject structure,</div><div class=\"line\">             * because the DexClassDef is part of the odex file.</div><div class=\"line\">             */</span></div><div class=\"line\">            assert((clazz-&gt;accessFlags &amp; JAVA_FLAGS_MASK) ==</div><div class=\"line\">                pClassDef-&gt;accessFlags);</div><div class=\"line\">            ((DexClassDef*)pClassDef)-&gt;accessFlags |= CLASS_ISPREVERIFIED;</div><div class=\"line\">            verified = <span class=\"literal\">true</span>;</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"comment\">// <span class=\"doctag\">TODO:</span> log when in verbose mode</span></div><div class=\"line\">            ALOGV(<span class=\"string\">\"DexOpt: '%s' failed verification\"</span>, classDescriptor);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (doOpt) &#123;</div><div class=\"line\">        <span class=\"keyword\">bool</span> needVerify = (gDvm.dexOptMode == OPTIMIZE_MODE_VERIFIED ||</div><div class=\"line\">                           gDvm.dexOptMode == OPTIMIZE_MODE_FULL);</div><div class=\"line\">        <span class=\"keyword\">if</span> (!verified &amp;&amp; needVerify) &#123;</div><div class=\"line\">            ALOGV(<span class=\"string\">\"DexOpt: not optimizing '%s': not verified\"</span>,</div><div class=\"line\">                classDescriptor);</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            dvmOptimizeClass(clazz, <span class=\"literal\">false</span>);<span class=\"comment\">// 优化 Class 操作</span></div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">/* set the flag whether or not we actually changed anything */</span></div><div class=\"line\">            ((DexClassDef*)pClassDef)-&gt;accessFlags |= CLASS_ISOPTIMIZED;<span class=\"comment\">// Class被优化过后，也会打上被优化过的标记 CLASS_ISOPTIMIZED</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>dvmVerifyClass 的具体过程，源码中是这样描述的：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/*</div><div class=\"line\"> * Verify a class.</div><div class=\"line\"> *</div><div class=\"line\"> * By the time we get here, the value of gDvm.classVerifyMode should already</div><div class=\"line\"> * have been factored in.  If you want to call into the verifier even</div><div class=\"line\"> * though verification is disabled, that's your business.</div><div class=\"line\"> *</div><div class=\"line\"> * Returns \"true\" on success.</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">dvmVerifyClass</span><span class=\"params\">(ClassObject*clazz)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> i;</div><div class=\"line\">    <span class=\"keyword\">if</span> (dvmIsClassVerified(clazz)) &#123;</div><div class=\"line\">        ALOGD(<span class=\"string\">\"Ignoring duplicate verify attempt on %s\"</span>, clazz -&gt; descriptor);</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; clazz -&gt; directMethodCount; i++) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (!verifyMethod( &amp; clazz -&gt; directMethods[i]))&#123;</div><div class=\"line\">            LOG_VFY(<span class=\"string\">\"Verifier rejected class %s\"</span>, clazz -&gt; descriptor);</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; clazz -&gt; virtualMethodCount; i++) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (!verifyMethod( &amp; clazz -&gt; virtualMethods[i]))&#123;</div><div class=\"line\">            LOG_VFY(<span class=\"string\">\"Verifier rejected class %s\"</span>, clazz -&gt; descriptor);</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>其中，dvmVerifyClass中又去调用了 方法的校验 verifyMethod, 再去追源码：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/*</div><div class=\"line\"> * Perform verification on a single method.</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">bool</span> <span class=\"title\">verifyMethod</span><span class=\"params\">(Method* meth)</span></div><div class=\"line\"></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">bool</span> result = <span class=\"literal\">false</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/*</div><div class=\"line\">     * Verifier state blob.  Various values will be cached here so we</div><div class=\"line\">     * can avoid expensive lookups and pass fewer arguments around.</div><div class=\"line\">     */</span></div><div class=\"line\">    VerifierData vdata;</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">if</span> 1   <span class=\"comment\">// ndef NDEBUG</span></span></div><div class=\"line\">    <span class=\"built_in\">memset</span>(&amp;vdata, <span class=\"number\">0x99</span>, <span class=\"keyword\">sizeof</span>(vdata));</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></div><div class=\"line\"></div><div class=\"line\">    vdata.method = meth;</div><div class=\"line\">    vdata.insnsSize = dvmGetMethodInsnsSize(meth);</div><div class=\"line\">    vdata.insnRegCount = meth-&gt;registersSize;</div><div class=\"line\">    vdata.insnFlags = <span class=\"literal\">NULL</span>;</div><div class=\"line\">    vdata.uninitMap = <span class=\"literal\">NULL</span>;</div><div class=\"line\">    vdata.basicBlocks = <span class=\"literal\">NULL</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/*</div><div class=\"line\">     * If there aren't any instructions, make sure that's expected, then</div><div class=\"line\">     * exit successfully.  Note: for native methods, meth-&gt;insns gets set</div><div class=\"line\">     * to a native function pointer on first call, so don't use that as</div><div class=\"line\">     * an indicator.</div><div class=\"line\">     */</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (vdata.insnsSize == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (!dvmIsNativeMethod(meth) &amp;&amp; !dvmIsAbstractMethod(meth)) &#123;</div><div class=\"line\">            LOG_VFY_METH(meth,</div><div class=\"line\">                <span class=\"string\">\"VFY: zero-length code in concrete non-native method\"</span>);</div><div class=\"line\">            <span class=\"keyword\">goto</span> bail;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">goto</span> success;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/*</div><div class=\"line\">     * Sanity-check the register counts.  ins + locals = registers, so make</div><div class=\"line\">     * sure that ins &lt;= registers.</div><div class=\"line\">     */</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (meth-&gt;insSize &gt; meth-&gt;registersSize) &#123;</div><div class=\"line\">        LOG_VFY_METH(meth, <span class=\"string\">\"VFY: bad register counts (ins=%d regs=%d)\"</span>,</div><div class=\"line\">            meth-&gt;insSize, meth-&gt;registersSize);</div><div class=\"line\">        <span class=\"keyword\">goto</span> bail;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/*</div><div class=\"line\">     * Allocate and populate an array to hold instruction data.</div><div class=\"line\">     *</div><div class=\"line\">     * <span class=\"doctag\">TODO:</span> Consider keeping a reusable pre-allocated array sitting</div><div class=\"line\">     * around for smaller methods.</div><div class=\"line\">     */</span></div><div class=\"line\">    vdata.insnFlags = (InsnFlags*) <span class=\"built_in\">calloc</span>(vdata.insnsSize, <span class=\"keyword\">sizeof</span>(InsnFlags));</div><div class=\"line\">    <span class=\"keyword\">if</span> (vdata.insnFlags == <span class=\"literal\">NULL</span>)</div><div class=\"line\">        <span class=\"keyword\">goto</span> bail;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/*</div><div class=\"line\">     * Compute the width of each instruction and store the result in insnFlags.</div><div class=\"line\">     * Count up the #of occurrences of certain opcodes while we're at it.</div><div class=\"line\">     */</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (!computeWidthsAndCountOps(&amp;vdata))</div><div class=\"line\">        <span class=\"keyword\">goto</span> bail;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/*</div><div class=\"line\">     * Allocate a map to hold the classes of uninitialized instances.</div><div class=\"line\">     */</span></div><div class=\"line\">    vdata.uninitMap = dvmCreateUninitInstanceMap(meth, vdata.insnFlags,</div><div class=\"line\">        vdata.newInstanceCount);</div><div class=\"line\">    <span class=\"keyword\">if</span> (vdata.uninitMap == <span class=\"literal\">NULL</span>)</div><div class=\"line\">        <span class=\"keyword\">goto</span> bail;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/*</div><div class=\"line\">     * Set the \"in try\" flags for all instructions guarded by a \"try\" block.</div><div class=\"line\">     * Also sets the \"branch target\" flag on exception handlers.</div><div class=\"line\">     */</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (!scanTryCatchBlocks(meth, vdata.insnFlags))</div><div class=\"line\">        <span class=\"keyword\">goto</span> bail;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/*</div><div class=\"line\">     * Perform static instruction verification.  Also sets the \"branch</div><div class=\"line\">     * target\" flags.</div><div class=\"line\">     */</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (!verifyInstructions(&amp;vdata))</div><div class=\"line\">        <span class=\"keyword\">goto</span> bail;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/*</div><div class=\"line\">     * Do code-flow analysis.</div><div class=\"line\">     *</div><div class=\"line\">     * We could probably skip this for a method with no registers, but</div><div class=\"line\">     * that's so rare that there's little point in checking.</div><div class=\"line\">     */</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (!dvmVerifyCodeFlow(&amp;vdata)) &#123;</div><div class=\"line\">        <span class=\"comment\">//ALOGD(\"+++ %s failed code flow\", meth-&gt;name);</span></div><div class=\"line\">        <span class=\"keyword\">goto</span> bail;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">success:</div><div class=\"line\">    result = <span class=\"literal\">true</span>;</div><div class=\"line\"></div><div class=\"line\">bail:</div><div class=\"line\">    dvmFreeVfyBasicBlocks(&amp;vdata);</div><div class=\"line\">    dvmFreeUninitInstanceMap(vdata.uninitMap);</div><div class=\"line\">    <span class=\"built_in\">free</span>(vdata.insnFlags);</div><div class=\"line\">    <span class=\"keyword\">return</span> result;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>dvmVerifyClass 具体过程中，会去校验 这个 Class中的所有的 directMethod 方法，和 virtualMethod 方法。具体这些方法包含哪些呢？ 其中时包含了：</p>\n<ul>\n<li>static 方法</li>\n<li>private 方法</li>\n<li>构造方法</li>\n<li>… …</li>\n</ul>\n<p>由此可知：  如果这些方法中直接引用到的类（第一层级关系，不会进行递归搜索） 和 class (源码中的clazz) 在同一个 dex 中的话，这个类就会被打上  CLASS_ISPREVERIFY 标记</p>\n<h2 id=\"PreVerify-缘由\"><a href=\"#PreVerify-缘由\" class=\"headerlink\" title=\"PreVerify 缘由\"></a>PreVerify 缘由</h2><ul>\n<li>一方面，Dalvik 虚拟机在安装期间，为Class 打上 CLASS_ISPREVERIFIED 是为了提高性能，下次使用时，则会省去校验操作，提高访问效率。</li>\n<li>另一方面，被标上“CLASS_ISPREVERIFIED”的类，dvm在运行期载入Class时候，会对其内存中对应的直接引用类进行校验，如果该类存在与直接引用类所在的dex不是同一个，则直接报“pre-verification” 错误，该类无法加载。</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\">ClassObject* <span class=\"title\">dvmResolveClass</span><span class=\"params\">(<span class=\"keyword\">const</span> ClassObject* referrer, u4 classIdx,</div><div class=\"line\">    <span class=\"keyword\">bool</span> fromUnverifiedConstant)</span></div><div class=\"line\"></span>&#123;</div><div class=\"line\">    DvmDex* pDvmDex = referrer-&gt;pDvmDex;</div><div class=\"line\">    ClassObject* resClass;</div><div class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* className;</div><div class=\"line\">    <span class=\"comment\">/*</div><div class=\"line\">     * Check the table first -- this gets called from the other \"resolve\"</div><div class=\"line\">     * methods.</div><div class=\"line\">     */</span></div><div class=\"line\">    resClass = dvmDexGetResolvedClass(pDvmDex, classIdx); <span class=\"comment\">// 预先在dex的缓存表里查</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (resClass != <span class=\"literal\">NULL</span>)</div><div class=\"line\">        <span class=\"keyword\">return</span> resClass;</div><div class=\"line\">    LOGVV(<span class=\"string\">\"--- resolving class %u (referrer=%s cl=%p)\"</span>,</div><div class=\"line\">        classIdx, referrer-&gt;descriptor, referrer-&gt;classLoader);</div><div class=\"line\">    <span class=\"comment\">/*</div><div class=\"line\">     * Class hasn't been loaded yet, or is in the process of being loaded</div><div class=\"line\">     * and initialized now.  Try to get a copy.  If we find one, put the</div><div class=\"line\">     * pointer in the DexTypeId.  There isn't a race condition here --</div><div class=\"line\">     * 32-bit writes are guaranteed atomic on all target platforms.  Worst</div><div class=\"line\">     * case we have two threads storing the same value.</div><div class=\"line\">     *</div><div class=\"line\">     * If this is an array class, we'll generate it here.</div><div class=\"line\">     */</span></div><div class=\"line\">    className = dexStringByTypeIdx(pDvmDex-&gt;pDexFile, classIdx);</div><div class=\"line\">    <span class=\"keyword\">if</span> (className[<span class=\"number\">0</span>] != <span class=\"string\">'\\0'</span> &amp;&amp; className[<span class=\"number\">1</span>] == <span class=\"string\">'\\0'</span>) &#123;</div><div class=\"line\">        <span class=\"comment\">/* primitive type */</span></div><div class=\"line\">        resClass = dvmFindPrimitiveClass(className[<span class=\"number\">0</span>]);</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        resClass = dvmFindClassNoInit(className, referrer-&gt;classLoader);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> (resClass != <span class=\"literal\">NULL</span>) &#123;</div><div class=\"line\">        <span class=\"comment\">/*</div><div class=\"line\">         * If the referrer was pre-verified, the resolved class must come</div><div class=\"line\">         * from the same DEX or from a bootstrap class.  The pre-verifier</div><div class=\"line\">         * makes assumptions that could be invalidated by a wacky class</div><div class=\"line\">         * loader.  (See the notes at the top of oo/Class.c.)</div><div class=\"line\">         *</div><div class=\"line\">         * The verifier does *not* fail a class for using a const-class</div><div class=\"line\">         * or instance-of instruction referring to an unresolveable class,</div><div class=\"line\">         * because the result of the instruction is simply a Class object</div><div class=\"line\">         * or boolean -- there's no need to resolve the class object during</div><div class=\"line\">         * verification.  Instance field and virtual method accesses can</div><div class=\"line\">         * break dangerously if we get the wrong class, but const-class and</div><div class=\"line\">         * instance-of are only interesting at execution time.  So, if we</div><div class=\"line\">         * we got here as part of executing one of the \"unverified class\"</div><div class=\"line\">         * instructions, we skip the additional check.</div><div class=\"line\">         *</div><div class=\"line\">         * Ditto for class references from annotations and exception</div><div class=\"line\">         * handler lists.</div><div class=\"line\">         */</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (!fromUnverifiedConstant &amp;&amp;</div><div class=\"line\">            IS_CLASS_FLAG_SET(referrer, CLASS_ISPREVERIFIED))</div><div class=\"line\">        &#123;</div><div class=\"line\">            ClassObject* resClassCheck = resClass;</div><div class=\"line\">            <span class=\"keyword\">if</span> (dvmIsArrayClass(resClassCheck))</div><div class=\"line\">                resClassCheck = resClassCheck-&gt;elementClass;</div><div class=\"line\">            <span class=\"keyword\">if</span> (referrer-&gt;pDvmDex != resClassCheck-&gt;pDvmDex &amp;&amp;</div><div class=\"line\">                resClassCheck-&gt;classLoader != <span class=\"literal\">NULL</span>)  <span class=\"comment\">// 校验dex是否是安装时的同一个dex</span></div><div class=\"line\">            &#123;</div><div class=\"line\">                ALOGW(<span class=\"string\">\"Class resolved by unexpected DEX:\"</span></div><div class=\"line\">                     <span class=\"string\">\" %s(%p):%p ref [%s] %s(%p):%p\"</span>,</div><div class=\"line\">                    referrer-&gt;descriptor, referrer-&gt;classLoader,</div><div class=\"line\">                    referrer-&gt;pDvmDex,</div><div class=\"line\">                    resClass-&gt;descriptor, resClassCheck-&gt;descriptor,</div><div class=\"line\">                    resClassCheck-&gt;classLoader, resClassCheck-&gt;pDvmDex);</div><div class=\"line\">                ALOGW(<span class=\"string\">\"(%s had used a different %s during pre-verification)\"</span>,</div><div class=\"line\">                    referrer-&gt;descriptor, resClass-&gt;descriptor);</div><div class=\"line\">                dvmThrowIllegalAccessError(</div><div class=\"line\">                    <span class=\"string\">\"Class ref in pre-verified class resolved to unexpected \"</span></div><div class=\"line\">                    <span class=\"string\">\"implementation\"</span>);</div><div class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        LOGVV(<span class=\"string\">\"##### +ResolveClass(%s): referrer=%s dex=%p ldr=%p ref=%d\"</span>,</div><div class=\"line\">            resClass-&gt;descriptor, referrer-&gt;descriptor, referrer-&gt;pDvmDex,</div><div class=\"line\">            referrer-&gt;classLoader, classIdx);</div><div class=\"line\">        <span class=\"comment\">/*</div><div class=\"line\">         * Add what we found to the list so we can skip the class search</div><div class=\"line\">         * next time through.</div><div class=\"line\">         *</div><div class=\"line\">         * <span class=\"doctag\">TODO:</span> should we be doing this when fromUnverifiedConstant==true?</div><div class=\"line\">         * (see comments at top of oo/Class.c)</div><div class=\"line\">         */</span></div><div class=\"line\">        dvmDexSetResolvedClass(pDvmDex, classIdx, resClass);</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"comment\">/* not found, exception should be raised */</span></div><div class=\"line\">        LOGVV(<span class=\"string\">\"Class not found: %s\"</span>,</div><div class=\"line\">            dexStringByTypeIdx(pDvmDex-&gt;pDexFile, classIdx));</div><div class=\"line\">        assert(dvmCheckException(dvmThreadSelf()));</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> resClass;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>实际上，这一步dex的一致性判断，也是google为了防止外部DEX注入的一个安全方案，即保证运行期的Class与其直接引用类之间所在的DEX关系要与安装时候一致</p>\n<p><br><br>源码链接:<br><a href=\"http://osxr.org:8080/android/source/dalvik/vm/analysis/DexPrepare.cpp\">http://osxr.org:8080/android/source/dalvik/vm/analysis/DexPrepare.cpp</a><br><a href=\"http://osxr.org:8080/android/source/dalvik/vm/analysis/DexVerify.cpp\">http://osxr.org:8080/android/source/dalvik/vm/analysis/DexVerify.cpp</a><br><a href=\"http://osxr.org:8080/android/source/dalvik/vm/oo/Resolve.cpp\">http://osxr.org:8080/android/source/dalvik/vm/oo/Resolve.cpp</a></p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"ciwvuocs40006f0v7be57jg6p","category_id":"ciwvuocrt0003f0v717ihjd7s","_id":"ciwvuocsc000cf0v7624bwkkp"},{"post_id":"ciwvuocqq0000f0v7p5bb78tf","category_id":"ciwvuocrt0003f0v717ihjd7s","_id":"ciwvuocsh000gf0v7mkvpepol"},{"post_id":"ciwvuocs9000bf0v73wl32sq3","category_id":"ciwvuocrt0003f0v717ihjd7s","_id":"ciwvuocsl000jf0v70ims8haa"},{"post_id":"ciwvuocrz0005f0v7znwootzm","category_id":"ciwvuocrt0003f0v717ihjd7s","_id":"ciwvuoct0000qf0v7bi20dsgx"},{"post_id":"ciwvuocsm000kf0v7k80ga9kb","category_id":"ciwvuocrt0003f0v717ihjd7s","_id":"ciwvuoct4000uf0v7k17hpza4"},{"post_id":"ciwvuocsr000of0v7v5dwv489","category_id":"ciwvuocrt0003f0v717ihjd7s","_id":"ciwvuoct6000xf0v7kzeyy0xu"},{"post_id":"ciwvuocs60007f0v7xmaut2cs","category_id":"ciwvuocsp000lf0v7meexivi2","_id":"ciwvuoct80010f0v7867l294q"},{"post_id":"ciwvuocsz000pf0v72rx8h8jl","category_id":"ciwvuocrt0003f0v717ihjd7s","_id":"ciwvuoct90012f0v76ngcvsi5"},{"post_id":"ciwvuocse000df0v7nzmv4sxm","category_id":"ciwvuocsp000lf0v7meexivi2","_id":"ciwvuoctb0014f0v7u6bqeuf1"},{"post_id":"ciwvuocsi000hf0v7b3qtp7hh","category_id":"ciwvuoct7000yf0v72eyacfow","_id":"ciwvuoctd0017f0v7mx522kqu"},{"post_id":"ciwvuoct3000tf0v78rxqi5uc","category_id":"ciwvuocta0013f0v71sgcnlqa","_id":"ciwvuocti001cf0v7cakjd7fo"},{"post_id":"ciwvuoct6000wf0v7tgs5tb4l","category_id":"ciwvuoctd0018f0v7b9p76pyv","_id":"ciwvuoctm001ff0v7nvnoqkef"},{"post_id":"ciwvuocub001vf0v7wev75e53","category_id":"ciwvuocrt0003f0v717ihjd7s","_id":"ciwvuocue001zf0v7j3t8bo8w"},{"post_id":"cix1byekj0000gcv70eoeb2ws","category_id":"ciwvuocs70008f0v7yhu3mxyn","_id":"cix1byeld0002gcv7tfbv2zte"},{"post_id":"ciypiymm80000ylqwmxl4bcxk","category_id":"ciypj474i0000leqwm3z3t6ja","_id":"ciypj474k0001leqwq8hquov6"},{"post_id":"ciyu9qvkq00003dqwzt7bhyly","category_id":"ciyu9qvky00013dqw0ggdcxrf","_id":"ciyu9qvl800043dqwc75uq1xs"},{"post_id":"ciyv4qztk000081qwsxfvmb1z","category_id":"ciyu9qvky00013dqw0ggdcxrf","_id":"ciyv4qztu000281qwfjbvhooa"},{"post_id":"ciywl09rc0000d2qw7yeoqb5x","category_id":"ciwvuocrt0003f0v717ihjd7s","_id":"ciywl09rj0002d2qwupqf8lhx"}],"PostTag":[{"post_id":"ciwvuocqq0000f0v7p5bb78tf","tag_id":"ciwvuocry0004f0v706sdvsv3","_id":"ciwvuocs9000af0v75j0sjasn"},{"post_id":"ciwvuocrz0005f0v7znwootzm","tag_id":"ciwvuocsg000ff0v7uby2g3b1","_id":"ciwvuoct5000vf0v73h9hl4di"},{"post_id":"ciwvuocrz0005f0v7znwootzm","tag_id":"ciwvuocsp000mf0v71ydf9o09","_id":"ciwvuoct7000zf0v7od20l3rs"},{"post_id":"ciwvuocs40006f0v7be57jg6p","tag_id":"ciwvuoct2000sf0v7ittnds9o","_id":"ciwvuoctc0016f0v7dyueggn6"},{"post_id":"ciwvuocs40006f0v7be57jg6p","tag_id":"ciwvuoct80011f0v7utrigwcg","_id":"ciwvuoctd0019f0v74wqumvy7"},{"post_id":"ciwvuocs60007f0v7xmaut2cs","tag_id":"ciwvuoctb0015f0v7hyb0hu45","_id":"ciwvuoctg001bf0v7iwvgh08h"},{"post_id":"ciwvuocs9000bf0v73wl32sq3","tag_id":"ciwvuocte001af0v7d01ivimn","_id":"ciwvuoctm001ef0v7vxbufiwl"},{"post_id":"ciwvuocse000df0v7nzmv4sxm","tag_id":"ciwvuoctb0015f0v7hyb0hu45","_id":"ciwvuoctn001hf0v7df0hylos"},{"post_id":"ciwvuocsi000hf0v7b3qtp7hh","tag_id":"ciwvuoctm001gf0v74zk03ab6","_id":"ciwvuoctq001jf0v77n5ssj0o"},{"post_id":"ciwvuocsm000kf0v7k80ga9kb","tag_id":"ciwvuoctp001if0v7xk2v8xrw","_id":"ciwvuoctu001lf0v77w6jpqw7"},{"post_id":"ciwvuocsr000of0v7v5dwv489","tag_id":"ciwvuocts001kf0v7zogqubbm","_id":"ciwvuoctv001nf0v7ln5k0ydg"},{"post_id":"ciwvuocsz000pf0v72rx8h8jl","tag_id":"ciwvuoctu001mf0v7izx5n096","_id":"ciwvuoctw001pf0v7f6lqxxb1"},{"post_id":"ciwvuoct3000tf0v78rxqi5uc","tag_id":"ciwvuoctv001of0v7em9zp9ki","_id":"ciwvuoctx001sf0v75rztbj09"},{"post_id":"ciwvuoct3000tf0v78rxqi5uc","tag_id":"ciwvuoctw001qf0v79hif87lg","_id":"ciwvuoctx001tf0v7s96oru1v"},{"post_id":"ciwvuoct6000wf0v7tgs5tb4l","tag_id":"ciwvuoctw001rf0v7ps8ekvay","_id":"ciwvuocty001uf0v7hxq47arb"},{"post_id":"ciwvuocub001vf0v7wev75e53","tag_id":"ciwvuocue001yf0v7od2y5dd5","_id":"ciwvuocue0020f0v7ll1svcg2"},{"post_id":"cix1byekj0000gcv70eoeb2ws","tag_id":"cix1byekw0001gcv7jdbwf676","_id":"cix1byelh0003gcv7jj8u586a"},{"post_id":"ciypiymm80000ylqwmxl4bcxk","tag_id":"ciwvuocts001kf0v7zogqubbm","_id":"ciypiymmh0001ylqw50ybv39u"},{"post_id":"ciyu9qvkq00003dqwzt7bhyly","tag_id":"ciyu9qvl700023dqw2thj4use","_id":"ciyu9qvl800033dqwsleskd7v"},{"post_id":"ciyv4qztk000081qwsxfvmb1z","tag_id":"ciyu9qvl700023dqw2thj4use","_id":"ciyv4qztt000181qw5kfq83kc"},{"post_id":"ciywl09rc0000d2qw7yeoqb5x","tag_id":"ciwvuocsg000ff0v7uby2g3b1","_id":"ciywl09rj0001d2qw6x5fasqj"}],"Tag":[{"name":"SingleTask","_id":"ciwvuocry0004f0v706sdvsv3"},{"name":"JS","_id":"ciwvuocs80009f0v7mpaq0nrk"},{"name":"Dalvik","_id":"ciwvuocsg000ff0v7uby2g3b1"},{"name":"ART","_id":"ciwvuocsp000mf0v71ydf9o09"},{"name":"JNI","_id":"ciwvuoct2000sf0v7ittnds9o"},{"name":"NDK","_id":"ciwvuoct80011f0v7utrigwcg"},{"name":"Git","_id":"ciwvuoctb0015f0v7hyb0hu45"},{"name":"ClassLoader","_id":"ciwvuocte001af0v7d01ivimn"},{"name":"RxJava","_id":"ciwvuoctm001gf0v74zk03ab6"},{"name":"Radiobutton","_id":"ciwvuoctp001if0v7xk2v8xrw"},{"name":"Gradle","_id":"ciwvuocts001kf0v7zogqubbm"},{"name":"instant run","_id":"ciwvuoctu001mf0v7izx5n096"},{"name":"加密","_id":"ciwvuoctv001of0v7em9zp9ki"},{"name":"签名","_id":"ciwvuoctw001qf0v79hif87lg"},{"name":"LRU","_id":"ciwvuoctw001rf0v7ps8ekvay"},{"name":"滑动冲突","_id":"ciwvuocue001yf0v7od2y5dd5"},{"name":"h5","_id":"cix1byekw0001gcv7jdbwf676"},{"name":"Spring","_id":"ciyu9qvl700023dqw2thj4use"}]}}