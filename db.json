{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/indigo/source/css/style.less","path":"css/style.less","modified":0,"renderable":1},{"_id":"themes/indigo/source/img/brand.jpg","path":"img/brand.jpg","modified":0,"renderable":1},{"_id":"themes/indigo/source/img/cc.png","path":"img/cc.png","modified":0,"renderable":1},{"_id":"themes/indigo/source/img/img-err.png","path":"img/img-err.png","modified":0,"renderable":1},{"_id":"themes/indigo/source/img/img-loading.png","path":"img/img-loading.png","modified":0,"renderable":1},{"_id":"themes/indigo/source/img/wechat.jpg","path":"img/wechat.jpg","modified":0,"renderable":1},{"_id":"themes/indigo/source/img/site_icon.jpg","path":"img/site_icon.jpg","modified":0,"renderable":1},{"_id":"themes/indigo/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/indigo/source/js/main.min.js","path":"js/main.min.js","modified":0,"renderable":1},{"_id":"themes/indigo/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"themes/indigo/source/js/search.min.js","path":"js/search.min.js","modified":0,"renderable":1},{"_id":"themes/indigo/source/img/me.jpg","path":"img/me.jpg","modified":1,"renderable":1},{"_id":"themes/indigo/source/js/embed.min.js","path":"js/embed.min.js","modified":0,"renderable":1},{"_id":"themes/indigo/source/js/embed.js","path":"js/embed.js","modified":0,"renderable":1},{"_id":"themes/indigo/source/img/alipay.jpg","path":"img/alipay.jpg","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.eot","path":"css/fonts/roboto/Roboto-Bold.eot","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.woff","path":"css/fonts/roboto/Roboto-Bold.woff","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.woff2","path":"css/fonts/roboto/Roboto-Bold.woff2","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.eot","path":"css/fonts/roboto/Roboto-Light.eot","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.woff","path":"css/fonts/roboto/Roboto-Light.woff","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.eot","path":"css/fonts/roboto/Roboto-Medium.eot","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.woff2","path":"css/fonts/roboto/Roboto-Light.woff2","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.woff","path":"css/fonts/roboto/Roboto-Medium.woff","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.eot","path":"css/fonts/roboto/Roboto-Regular.eot","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.woff2","path":"css/fonts/roboto/Roboto-Medium.woff2","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.woff","path":"css/fonts/roboto/Roboto-Regular.woff","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.woff2","path":"css/fonts/roboto/Roboto-Regular.woff2","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.eot","path":"css/fonts/roboto/Roboto-Thin.eot","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.woff","path":"css/fonts/roboto/Roboto-Thin.woff","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.woff2","path":"css/fonts/roboto/Roboto-Thin.woff2","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.woff","path":"css/fonts/fontawesome/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.woff2","path":"css/fonts/fontawesome/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.ttf","path":"css/fonts/roboto/Roboto-Bold.ttf","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.ttf","path":"css/fonts/roboto/Roboto-Light.ttf","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.ttf","path":"css/fonts/roboto/Roboto-Medium.ttf","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.ttf","path":"css/fonts/roboto/Roboto-Regular.ttf","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.ttf","path":"css/fonts/roboto/Roboto-Thin.ttf","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/fontawesome/FontAwesome.otf","path":"css/fonts/fontawesome/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.eot","path":"css/fonts/fontawesome/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.ttf","path":"css/fonts/fontawesome/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.svg","path":"css/fonts/fontawesome/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"3ee31d083cfcbe67da9a3b4a7a25eecc5bc5af88","modified":1512823883388},{"_id":"themes/indigo/.DS_Store","hash":"d104df71dda3096d6298b8cf17527f0f9cdfaddd","modified":1512823305933},{"_id":"themes/indigo/.editorconfig","hash":"9b0445427777519defe360ea38c61729d847b3d3","modified":1484814055000},{"_id":"themes/indigo/README.md","hash":"0d9232edd25c8de4070715cc900c93282f3a2dc2","modified":1484814055000},{"_id":"themes/indigo/_config.yml","hash":"cce0f75500da53dc0232be1689278e59257dc712","modified":1486479135000},{"_id":"themes/indigo/package.json","hash":"f6e4c3326a222cd16a3fdb53656c90e0f9ab80ff","modified":1484814055000},{"_id":"source/about/about_me.md","hash":"1806a56f75043590ce1d1010a2bf29f488b0492f","modified":1484814055000},{"_id":"source/_posts/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1486395715000},{"_id":"source/_posts/Android SingleTask 探究.md","hash":"dfe7d7a3c7846587b8e9bb5ae3981b7727b2b4f3","modified":1484814055000},{"_id":"source/_posts/Android Studio NDK开发环境搭建及Demo示例.md","hash":"d826fa41123ce295553ed7448ba4f11ae88992e5","modified":1486554546000},{"_id":"source/_posts/Android WebView 相关踩坑.md","hash":"c1d0c45d4d6ed10323e7d903a9fa1672e09ad3f5","modified":1503541503000},{"_id":"source/_posts/Android apk安装过程实例分析.md","hash":"ed54f9821f72c9d558114bf6a0c0b8a8cdac4967","modified":1484814055000},{"_id":"source/_posts/Android 类加载初探.md","hash":"0b9a67ee5732a4c842d09943bc3d8f1195546f54","modified":1484814055000},{"_id":"source/_posts/Dalvik中PreVerify问题.md","hash":"640b236a184a5806589e61307fa1a92fc49f97ce","modified":1486553261000},{"_id":"source/_posts/Git学习笔记（一）.md","hash":"658d2d1f9d00c9fa1afe2dbc917fb1d6bf700f1d","modified":1484814055000},{"_id":"source/_posts/Git学习笔记（二）.md","hash":"fa615908b242a0f89a5b591e35c5faf1897b8cd0","modified":1484814055000},{"_id":"source/_posts/Gradle实现自动拉取git及压缩文件.md","hash":"b342ea8ed05672b9959b5e27d666f28705e4f809","modified":1486554944000},{"_id":"source/_posts/Gradle相关配置.md","hash":"9243b28cd2d779aa10242e80e62c3c6ccc123da5","modified":1486555027000},{"_id":"source/_posts/RadioGroup、RadioButton动态创建并定制icon显示.md","hash":"b3801e25edfeaedeb47703cdaa966dc94a8e808c","modified":1486555076000},{"_id":"source/_posts/RxJava 初探（一）.md","hash":"d8d4e0b8bd8be7b4d97219f979b4e4260b93ce05","modified":1484814055000},{"_id":"source/_posts/Spring 学习（一）.md","hash":"6bf0e0d45bb7be691e5cb4f92d56cd02038d82cb","modified":1486555411000},{"_id":"source/_posts/Spring 学习（二）.md","hash":"d4430551966a968909453a8ef32680c7caa1cd1d","modified":1488703310000},{"_id":"source/_posts/Weex SDK源码分析（一）.md","hash":"1ee07d1c225483e459018c089a09e491887247bb","modified":1488286979000},{"_id":"source/_posts/Weex SDK源码分析（二）.md","hash":"8e0e6a88bdc486ebb6514197fc8da778ed73067f","modified":1488286715000},{"_id":"source/_posts/对称、非对称加密技术初探.md","hash":"4919efcfde34e54353e1f9124ddcf537ea061961","modified":1505019523000},{"_id":"source/_posts/instant run 相关分析.md","hash":"22066cb89e7daedd83fcefae87c8daa09ecc646e","modified":1486555059000},{"_id":"source/_posts/滑动冲突之EditText-ScrollView.md","hash":"2b90a92b83fb9ca5dfa168b9228b829455a4ff8c","modified":1487214549000},{"_id":"source/_posts/简单的页面置换算法分析.md","hash":"8f6299058981835523f09167154f3855547a4371","modified":1484814055000},{"_id":"source/categories/index.md","hash":"941bef254f35eca9b9e98863e75a83723d684dbb","modified":1484814055000},{"_id":"source/tags/index.md","hash":"5871c77738f47fee359277cc29f0729e0d3125e3","modified":1484814055000},{"_id":"themes/indigo/layout/archive.ejs","hash":"d039719e21f6a6fa2925b00aaa623a180a78c818","modified":1484814055000},{"_id":"themes/indigo/layout/categories.ejs","hash":"62488be0c5db55718594143a603b98ab84dd981c","modified":1484814055000},{"_id":"themes/indigo/layout/category.ejs","hash":"7ea26a8a935886963eda82f41c7bd5270cf780d9","modified":1484814055000},{"_id":"themes/indigo/layout/index.ejs","hash":"39477807b98b2d2df78f3b82498a11e90be8222c","modified":1484814055000},{"_id":"themes/indigo/layout/layout.ejs","hash":"d52f43fa9572d70cae834e4887c8897b43744805","modified":1484814055000},{"_id":"themes/indigo/layout/page.ejs","hash":"afb98face24d39a21ebbbde6592a9afc98572aa4","modified":1484814055000},{"_id":"themes/indigo/layout/post.ejs","hash":"afbf8532dc8d148ca4dff2ca127a3382907cf2f5","modified":1484814055000},{"_id":"themes/indigo/layout/tag.ejs","hash":"36786a3de7f6cad58209603f7d84ba23addea174","modified":1484814055000},{"_id":"themes/indigo/layout/tags.ejs","hash":"8a31c65cfbef999da1c89d4ab2ae79970ee892ed","modified":1484814055000},{"_id":"themes/indigo/source/.DS_Store","hash":"8aae67b143fe41e5b800ff7f470714e9c6765367","modified":1512823902401},{"_id":"themes/indigo/scripts/plugins.js","hash":"a73fc4e34e761f019b90046c67d87b4fb44a4a20","modified":1484814055000},{"_id":"themes/indigo/layout/_partial/after-footer.ejs","hash":"9ac30b9439fab69973cf4722dbf2945a18fd3804","modified":1484814055000},{"_id":"themes/indigo/layout/_partial/archive.ejs","hash":"55cd81ef9183426d6d99fd91550fce0a9cc92aa0","modified":1484814055000},{"_id":"themes/indigo/layout/_partial/footer.ejs","hash":"18e361f260eb37a03069d6e3f6ccf0327fc5b75b","modified":1484814055000},{"_id":"themes/indigo/layout/_partial/head.ejs","hash":"178d676eae4351774e7b9a121191a24fe5e46dae","modified":1484814055000},{"_id":"themes/indigo/layout/_partial/header.ejs","hash":"af85a963119861ada586f3a32be3f951252976a2","modified":1484814055000},{"_id":"themes/indigo/layout/_partial/index-item.ejs","hash":"c324ab0e8ac5475adaa506f424447e615c1f210c","modified":1484814055000},{"_id":"themes/indigo/layout/_partial/loading.ejs","hash":"bc4cb19b20de55a0332647f4dca9684184383685","modified":1484814055000},{"_id":"themes/indigo/layout/_partial/menu.ejs","hash":"da480b3f2f0f20e3a2d0db9a8371d13fb7cbfc6f","modified":1484814055000},{"_id":"themes/indigo/layout/_partial/paginator.ejs","hash":"dc27242927890f130a64400596b9b7ad5fca8972","modified":1484814055000},{"_id":"themes/indigo/layout/_partial/post.ejs","hash":"27f37ef30ea3651940be6f3f16f33ec492b252e5","modified":1484814055000},{"_id":"themes/indigo/layout/_partial/script.ejs","hash":"2c85661cd13dc8a153c328020ded60c8e7d36892","modified":1484814055000},{"_id":"themes/indigo/layout/_partial/search.ejs","hash":"c2091c621b5480ef1e69d72027028cec8e929892","modified":1484814055000},{"_id":"themes/indigo/layout/_partial/tags-bar.ejs","hash":"cd8e1ef7024a38b2ba1c9b3a4af12f54bb2d3d96","modified":1484814055000},{"_id":"themes/indigo/source/css/.DS_Store","hash":"b2229336b4bdd6869c95d6859594a4a25f3eb56c","modified":1486536583000},{"_id":"themes/indigo/source/css/style.less","hash":"6e8609fa857be01f0206209a746c9872389c42c3","modified":1484814055000},{"_id":"themes/indigo/source/img/brand.jpg","hash":"0e237f1b433851c156e1f1cdaeb044054b3b9879","modified":1484814055000},{"_id":"themes/indigo/source/img/cc.png","hash":"ebce75a62b40976a72d43f0bd937d859ac24d87c","modified":1484814055000},{"_id":"themes/indigo/source/img/img-err.png","hash":"23a63ea26eb3c1d5e677d9883cf36cc1a1a1228b","modified":1484814055000},{"_id":"themes/indigo/source/img/img-loading.png","hash":"a9cd5cd11866824f31e3d1c5e23badfeb3f73031","modified":1484814055000},{"_id":"themes/indigo/source/img/wechat.jpg","hash":"afe55e0ada74d0add2e3758f8bc6a6c9c40475ab","modified":1484814055000},{"_id":"themes/indigo/source/img/site_icon.jpg","hash":"a78f48fe9f9114f315dc79eff29452e93ffd709a","modified":1484814055000},{"_id":"themes/indigo/source/js/main.js","hash":"f7636eda390a77574e8df4b655eb0167f0386776","modified":1484814055000},{"_id":"themes/indigo/source/js/main.min.js","hash":"3de7801b80c04432870bc270127d4102a10f45dd","modified":1484814055000},{"_id":"themes/indigo/source/js/search.js","hash":"ae7c7c544dadebeb75b0d3cdad7d5bf9be16f637","modified":1484814055000},{"_id":"themes/indigo/source/js/search.min.js","hash":"b37a264a13785e08760cadee3309a172269dff63","modified":1484814055000},{"_id":"themes/indigo/source/img/me.jpg","hash":"9cc44ae66158f29c6dd9e27ecfcb4c2cdc562d26","modified":1512823496056},{"_id":"themes/indigo/source/js/embed.min.js","hash":"c2ad9ec865e531f47bb7db5cc032be44d7fe73a2","modified":1484814055000},{"_id":"themes/indigo/layout/_partial/plugins/disqus.ejs","hash":"4a0c01e4195f685f9825fcd016d01249dbdd52ca","modified":1484814055000},{"_id":"themes/indigo/layout/_partial/plugins/baidu.ejs","hash":"e44d526029f122e9c2c74f3a647c35002c818cbe","modified":1484814055000},{"_id":"themes/indigo/layout/_partial/plugins/duoshuo-count.ejs","hash":"de23dfaaaed783f6ade86084fb7bcee531dce4d0","modified":1484814055000},{"_id":"themes/indigo/layout/_partial/plugins/duoshuo-js.ejs","hash":"1698376d86761762ccbeb9f5818a919437e7d13b","modified":1484814055000},{"_id":"themes/indigo/layout/_partial/plugins/duoshuo.ejs","hash":"edc98c8015ab1deff32507d5f563f5cab0bd7f68","modified":1484814055000},{"_id":"themes/indigo/layout/_partial/plugins/google-analytics.ejs","hash":"a947f4076b54b48d4df5baf2d5b3c39b632c7576","modified":1484814055000},{"_id":"themes/indigo/layout/_partial/plugins/mathjax.ejs","hash":"90d43c469931ce5db5f4bb66f0bd9378532aea30","modified":1484814055000},{"_id":"themes/indigo/layout/_partial/plugins/page-visit.ejs","hash":"2decb77bf3c1a064ea6ce1d4e78892c434d9c884","modified":1484814055000},{"_id":"themes/indigo/layout/_partial/plugins/site-visit.ejs","hash":"8fbd0910828f1ab6eba728bdecc9811d623baae2","modified":1484814055000},{"_id":"themes/indigo/layout/_partial/post/category.ejs","hash":"c7476165721a3a5e34d00d8c5c07e1e5474cd800","modified":1484814055000},{"_id":"themes/indigo/layout/_partial/plugins/tajs.ejs","hash":"97b48fe10be1c71d4ff25ccec3bd92d97466c9c5","modified":1484814055000},{"_id":"themes/indigo/layout/_partial/post/comment.ejs","hash":"18206ba13fcd0484e299aa61986afb0de9daec6d","modified":1484814055000},{"_id":"themes/indigo/layout/_partial/post/copyright.ejs","hash":"210d63adf95a79f560e380b24bcdc25a3dd43077","modified":1484814055000},{"_id":"themes/indigo/layout/_partial/post/date.ejs","hash":"1fa66e299500927c3fda64b36c5a1fbd277fb696","modified":1484814055000},{"_id":"themes/indigo/layout/_partial/post/head-meta.ejs","hash":"b0c680ce5b8aaf461a6731b1ff1287bd140c168a","modified":1484814055000},{"_id":"themes/indigo/layout/_partial/post/nav.ejs","hash":"11e7d504f7c7a3c4c052da13cfa8ea4862c9383e","modified":1484814055000},{"_id":"themes/indigo/layout/_partial/post/reward-btn.ejs","hash":"41c242fe3159dc68cec8dd00ab6d2663f5a51179","modified":1484814055000},{"_id":"themes/indigo/layout/_partial/post/reward.ejs","hash":"ce764334c94e198fde3d222eadedc8813f026fca","modified":1484814055000},{"_id":"themes/indigo/layout/_partial/post/share-fab.ejs","hash":"93482ad7d1e01b966f5ee1c5d12b88564e02b349","modified":1484814055000},{"_id":"themes/indigo/layout/_partial/post/share.ejs","hash":"8df0d7bf6f8e106cdbdac2dd10a97367aa0695f8","modified":1484814055000},{"_id":"themes/indigo/layout/_partial/post/tag.ejs","hash":"b3dc38652c4a018a37418136478dcd522fc49f79","modified":1484814055000},{"_id":"themes/indigo/layout/_partial/post/title.ejs","hash":"062d56cb88ae2be3a6616b911d4ebeffcbfe3cff","modified":1484814055000},{"_id":"themes/indigo/layout/_partial/post/toc.ejs","hash":"b6123e895c16ace651f1832281ff655776d4068c","modified":1484814055000},{"_id":"themes/indigo/layout/_partial/post/updated.ejs","hash":"1eb9620f1efc58b68a4f1dab10543741d5f142ef","modified":1484814055000},{"_id":"themes/indigo/source/css/_duoshuo/custom.less","hash":"10c3e846afb891edf847cdc150bb842371458172","modified":1484814055000},{"_id":"themes/indigo/source/css/_duoshuo/common.less","hash":"cf669f01788aac984cf295842c53d28844d256ba","modified":1484814055000},{"_id":"themes/indigo/source/css/_duoshuo/dialog.less","hash":"d320c0c5eb467695f8e3298ccc05926e1dcaf350","modified":1484814055000},{"_id":"themes/indigo/source/css/_duoshuo/embed.less","hash":"a09aeb68646e6309d737dddea237a2d160608bbf","modified":1484814055000},{"_id":"themes/indigo/source/css/_duoshuo/global.less","hash":"b95ac4f80d83595186e158a05f9e5551fb199171","modified":1484814055000},{"_id":"themes/indigo/source/css/_duoshuo/login.less","hash":"6a7962f817199802f91d32d4e9bb87098683d84c","modified":1484814055000},{"_id":"themes/indigo/source/css/_duoshuo/mixins.less","hash":"caf782f681fc97ecdab34bc34e16e3353bcd1eb6","modified":1484814055000},{"_id":"themes/indigo/source/css/_duoshuo/notify.less","hash":"de48d76de6b99d7aa3f176cb1345b5bd1a6e3ec0","modified":1484814055000},{"_id":"themes/indigo/source/css/_duoshuo/recent-comments.less","hash":"1e2a57b7dc9ca3ef46d9966b49d0a8e614920c0a","modified":1484814055000},{"_id":"themes/indigo/source/css/_duoshuo/recent-visitors.less","hash":"9494e2183ce7a7a3f5742e3ba42b3514312a5006","modified":1484814055000},{"_id":"themes/indigo/source/css/_duoshuo/share.less","hash":"4218e03b97d12b006dc01c78f02f76a1e0daafb7","modified":1484814055000},{"_id":"themes/indigo/source/css/_duoshuo/thread.less","hash":"954e1c6af84c13940c8fd8c035bc4d2b273ab992","modified":1484814055000},{"_id":"themes/indigo/source/css/_duoshuo/variables.less","hash":"5b4e813e3141d5509ee80fa319ae4cf3adfdd7da","modified":1484814055000},{"_id":"themes/indigo/source/css/_partial/archives.less","hash":"3325d75dde92d1ccfdf3e817794da4334c7c2133","modified":1484814055000},{"_id":"themes/indigo/source/css/_partial/article.less","hash":"eef9507d6fa7b7959b7a0b5b7df27a87879aa767","modified":1484814055000},{"_id":"themes/indigo/source/css/_partial/header.less","hash":"90f0948a9182c14b1dac1e9dbed3c883543266f9","modified":1484814055000},{"_id":"themes/indigo/source/css/_partial/gotop.less","hash":"b7db31b9bc563c10b9e3cf3e6d9cfddfeb3e805a","modified":1484814055000},{"_id":"themes/indigo/source/css/_partial/highlight.less","hash":"58492b7cdb45fe09b026b2f34e8ae69c2ddb8228","modified":1484814055000},{"_id":"themes/indigo/source/css/_partial/layout.less","hash":"43765a1b8dd041854ac2386955e9f68d5b6be5c1","modified":1484814055000},{"_id":"themes/indigo/source/css/_partial/lightbox.less","hash":"9b961eb1d70e7658f42cf2ca895fa5e35a6b6541","modified":1484814055000},{"_id":"themes/indigo/source/css/_partial/loading.less","hash":"f9d06a1e24fb4857fd18d7a0bfbb3a0ab2d1c742","modified":1484814055000},{"_id":"themes/indigo/source/css/_partial/page.less","hash":"e92ccb53e6ac73a51498c6a9672db9d0d2bc7f1a","modified":1484814055000},{"_id":"themes/indigo/source/css/_partial/postlist.less","hash":"156b5d2c2b83d2fd768c83119bd1dc23756f657d","modified":1484814055000},{"_id":"themes/indigo/source/css/_partial/reward.less","hash":"15e2bcbdf2ffb44707e4c7d0b6ba166fe1598ac0","modified":1484814055000},{"_id":"themes/indigo/source/css/_partial/roboto.less","hash":"2e0469ed8161d5672d903ca1a8027cd65fe007f1","modified":1484814055000},{"_id":"themes/indigo/source/css/_partial/search.less","hash":"d73a12ca56cd710a13cb61074958c82a5cb95d63","modified":1484814055000},{"_id":"themes/indigo/source/css/_partial/share.less","hash":"27d80bcc96a53dd1e7eaa9a7d746e4b212357302","modified":1484814055000},{"_id":"themes/indigo/source/css/_partial/tags.less","hash":"959f4373fda6e45f6a4041a995ed3ea8a05a5170","modified":1484814055000},{"_id":"themes/indigo/source/css/_partial/variable.less","hash":"d3a56e0b4a457ceec90cf90cb8320404f335bf89","modified":1484814055000},{"_id":"themes/indigo/source/css/_partial/waves.less","hash":"77bfd0b373b0469eb0176167fb076ccda4edf2a7","modified":1484814055000},{"_id":"themes/indigo/source/css/fonts/.DS_Store","hash":"9cdfd30d7bcf88f685d33df0f43b4ae4a2c40823","modified":1486479349000},{"_id":"themes/indigo/source/js/embed.js","hash":"0a99baa3a205f94b16ce9134fc14375178912401","modified":1484814055000},{"_id":"themes/indigo/source/css/_partial/fontawesome.less","hash":"c19f5e28365c7ba6fa938591a8021da7d603253d","modified":1484814055000},{"_id":"themes/indigo/source/img/alipay.jpg","hash":"964d2c9dc1935ed8afc4dbf4ae62819a01a60345","modified":1484814055000},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.eot","hash":"a76cd602f5188b9fbd4ba7443dcb9c064e3dbf10","modified":1484814055000},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.woff","hash":"ee99cd87a59a9a5d4092c83232bb3eec67547425","modified":1484814055000},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.woff2","hash":"933b866d09c2b087707a98dab64b3888865eeb96","modified":1484814055000},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.eot","hash":"42fe156996197e5eb0c0264c5d1bb3b4681f4595","modified":1484814055000},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.woff","hash":"6300f659be9e834ab263efe2fb3c581d48b1e7b2","modified":1484814055000},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.eot","hash":"1517f4b6e1c5d0e5198f937557253aac8fab0416","modified":1484814055000},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.woff2","hash":"bbdc28b887400fcb340b504ec2904993af42a5d7","modified":1484814055000},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.woff","hash":"d45f84922131364989ad6578c7a06b6b4fc22c34","modified":1484814055000},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.eot","hash":"77ae3e980ec03863ebe2587a8ef9ddfd06941db0","modified":1484814055000},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.woff2","hash":"6cc1b73571af9e827c4e7e91418f476703cd4c4b","modified":1484814055000},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.woff","hash":"74734dde8d94e7268170f9b994dedfbdcb5b3a15","modified":1484814055000},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.woff2","hash":"ed1558b0541f5e01ce48c7db1588371b990eec19","modified":1484814055000},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.eot","hash":"0790a51a848dbe7292c98f9d0459218bf1a8ffdd","modified":1484814055000},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.woff","hash":"fbc3e71d456c96667d8082ab910e3946ef89240b","modified":1484814055000},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.woff2","hash":"2449e3dac5ddb7c3da8bb07450493b62d052758c","modified":1484814055000},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1484814055000},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1484814055000},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.ttf","hash":"47327df0f35e7cd7c8645874897a7449697544ae","modified":1484814055000},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.ttf","hash":"e321c183e2b75ee19813892b7bac8d7c411cb88a","modified":1484814055000},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.ttf","hash":"6060ca726b9760b76f7c347dce9d2fa1fe42ec92","modified":1484814055000},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.ttf","hash":"824b5480c977a8166e177e5357d13164ccc45f47","modified":1484814055000},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.ttf","hash":"173ed64528b4d010a76d8d38deb1d7e7eed58eda","modified":1484814055000},{"_id":"themes/indigo/source/css/fonts/fontawesome/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1484814055000},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1484814055000},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1484814055000},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1484814055000},{"_id":"public/atom.xml","hash":"f53692d969b353a1d7e91160b8e2e4521d1e7f18","modified":1488710971352},{"_id":"public/content.json","hash":"a6320b59dd9e87c5b617ae349c100d35fd7b4a55","modified":1488710972840},{"_id":"public/archives/2016/page/2/index.html","hash":"0ab4f2a77f0bac8e815a14ce95327167abef2e29","modified":1488702279526},{"_id":"public/archives/2016/01/index.html","hash":"e71f25d9ed9b505999518e74da2ac0b66188fa6b","modified":1488702279527},{"_id":"public/archives/2016/02/index.html","hash":"c5295fcbe18c2a60812db530517dbe3b0f5c17d4","modified":1488700785576},{"_id":"public/archives/2016/05/index.html","hash":"d367e258805f873bd51c3b1ef322c4d98cda1fa2","modified":1488700785576},{"_id":"public/archives/2016/06/index.html","hash":"b4c057ffd03e632b9013da03d672f90966fbf7ab","modified":1488700785576},{"_id":"public/archives/2016/08/index.html","hash":"42bd20885e05aa5f8100cccecb7c73e4121bb8f4","modified":1488700785576},{"_id":"public/archives/2016/09/index.html","hash":"2f47e9e06f65760761faced7609044698a44fa5c","modified":1488700785576},{"_id":"public/archives/2016/10/index.html","hash":"afde2e2d1b8c608d66a23570fb3103067666de88","modified":1488700785576},{"_id":"public/archives/2016/11/index.html","hash":"22e905f7ea5879af3beb2b1350bc22ce4ab1b6a3","modified":1488706484670},{"_id":"public/archives/2016/12/index.html","hash":"839f6b75d6ed36eaf6eb549fb4a9951898a188ec","modified":1488700785576},{"_id":"public/archives/2017/index.html","hash":"cf988f135d1df8186178ced81fab3f82d4c431ba","modified":1488710835336},{"_id":"public/archives/2017/02/index.html","hash":"7fdc6ed83b1ab9d55c3f8844ad40b1ffde1ffb10","modified":1488700785576},{"_id":"public/categories/Hybird/index.html","hash":"6e9f750068ead660dbbf7660ffc86ab8f2ee2642","modified":1488700785576},{"_id":"public/categories/工具/index.html","hash":"eeae367edfb93d4795c49ebf358400626733a3ab","modified":1488700785576},{"_id":"public/categories/Gradle/index.html","hash":"487f35131d8cf3a4a13995665187cb83aba5d050","modified":1488700785576},{"_id":"public/categories/RxJava/index.html","hash":"24f255094d3ecfc92f62342c495f9a87a78d82d9","modified":1488700785577},{"_id":"public/categories/Java后台/index.html","hash":"c7bfdaf212c9698366fbee945d71f75a0cc3d61b","modified":1488710835339},{"_id":"public/categories/Weex/index.html","hash":"71855c8be7851fa09ea0190bd66a3dd8fb89a2c9","modified":1488700785577},{"_id":"public/categories/网络/index.html","hash":"0aa26d8aefec401549811b1ddb4a69ecccf93bd0","modified":1488700785577},{"_id":"public/categories/算法/index.html","hash":"a2aad5d3120f84941c8f51aff47a728b600a9b30","modified":1488700785577},{"_id":"public/tags/SingleTask/index.html","hash":"3d92daa8d5f24d90fe470d668735a32de21a70c2","modified":1488710835336},{"_id":"public/tags/JNI/index.html","hash":"a6060ee84e06a274fae5d3e5650f953c94d4be2b","modified":1488710835336},{"_id":"public/tags/NDK/index.html","hash":"ba687f672085f183724426e3a538f3634d44e2bc","modified":1488710835336},{"_id":"public/tags/h5/index.html","hash":"70d4fa08845303bd35ba99f367acb63c99737700","modified":1488710835336},{"_id":"public/tags/Dalvik/index.html","hash":"1d5781c7cb06f31d905a25c3d6fbd45210022734","modified":1488710835336},{"_id":"public/tags/ART/index.html","hash":"5052cba978ee455aa08ef2743b82cec1c73ca659","modified":1488710835336},{"_id":"public/tags/ClassLoader/index.html","hash":"70ce10f015cd4f6e186f7134a5c3e30beffdbd04","modified":1488710835336},{"_id":"public/tags/Git/index.html","hash":"5d399c719b86805ae18753ad8531bb78d5c52e0a","modified":1488710835337},{"_id":"public/tags/Gradle/index.html","hash":"3baa336a518b78d273aab9ebc7b5dcc72e506856","modified":1488710835337},{"_id":"public/tags/Radiobutton/index.html","hash":"e3f4c74b3e39d270b200f95f58713d58ce4488df","modified":1488710835337},{"_id":"public/tags/RxJava/index.html","hash":"c5fe5127ec98b3287ac49957477e8bf372209d5e","modified":1488710835337},{"_id":"public/tags/Spring/index.html","hash":"c93bb407330ceca11ba3f51327d78f6822409e17","modified":1488710835337},{"_id":"public/tags/Weex/index.html","hash":"0529e733307bcb2b1f42cd2e994db09647fb5dec","modified":1488710835337},{"_id":"public/tags/Android/index.html","hash":"ddcb3095b8d849ac4d8158f55e702875100c6c05","modified":1488710835337},{"_id":"public/tags/加密/index.html","hash":"1a9b9840a335433edf2231ab06eb23664ad01e9d","modified":1488710835337},{"_id":"public/tags/签名/index.html","hash":"4893f0d05d2fdb6322299b7af9ef1deb073e1319","modified":1488710835337},{"_id":"public/tags/instant-run/index.html","hash":"7fef52cc696518a9c72c8263bbfd2407f6816f89","modified":1488710835337},{"_id":"public/tags/滑动冲突/index.html","hash":"15604c30cb5bc9c05c9db4c87c8cb084855203a3","modified":1488710835338},{"_id":"public/tags/LRU/index.html","hash":"765aeb986f3a8a7a1b8c6f00d34ea77a1750b559","modified":1488710835338},{"_id":"public/about/about_me.html","hash":"d7d5a9022599cc0244c19d53355c4a2084d00c30","modified":1488710835339},{"_id":"public/categories/index.html","hash":"b178997d281ea17681357dc0c39602c4170d0459","modified":1488710835339},{"_id":"public/tags/index.html","hash":"b46a201382694cf20fc108feb9bb09841d9996ba","modified":1488710835339},{"_id":"public/2017/02/28/Weex SDK源码分析（二）/index.html","hash":"5dbfc1429821ef10f828b10ba578db63a7defa97","modified":1488700785580},{"_id":"public/2017/02/28/Weex SDK源码分析（一）/index.html","hash":"ea00c408bf65138cbd0671380709f76c8287e7ec","modified":1488700785580},{"_id":"public/2017/02/01/Gradle实现自动拉取git及压缩文件/index.html","hash":"9da57c0f579142e33c50b5ceafaed0100e6df7ac","modified":1488710835339},{"_id":"public/2016/12/27/Spring 学习（二）/index.html","hash":"a8ae1429a55553f22e8d2cbe667d4b68787dc41b","modified":1488704005505},{"_id":"public/2016/12/26/Spring 学习（一）/index.html","hash":"fdf695bc298d398aebbcd22fcbd7273698de15c9","modified":1488700785580},{"_id":"public/2016/12/17/instant run 相关分析/index.html","hash":"e3c24159abe0e86d7cd6e2645fb3a5b70dd9cf1b","modified":1488700785580},{"_id":"public/2016/12/15/Android WebView 相关踩坑/index.html","hash":"6fd2172ebeb50b2868d37799d4ea04d56ac7b215","modified":1488700785580},{"_id":"public/2016/11/24/Dalvik中PreVerify问题/index.html","hash":"3601089225bdd6e0049b1424732c78c58f9d72fe","modified":1488706484671},{"_id":"public/2016/11/17/Android 类加载初探/index.html","hash":"3596feeb85462761fabafe61b22eaddd5f6dfbbb","modified":1488706484671},{"_id":"public/2016/11/17/Android apk安装过程实例分析/index.html","hash":"a927e96b053dfb9b8fbe93ec68d83f26c497e8e5","modified":1488706484671},{"_id":"public/2016/10/25/RadioGroup、RadioButton动态创建并定制icon显示/index.html","hash":"7d6b9903b7af0e834ced03d93ae53d8eff05b9bb","modified":1488706484671},{"_id":"public/2016/10/06/RxJava 初探（一）/index.html","hash":"a25f3ec6390539371958b5e05ef619bd0b1317d9","modified":1488700785581},{"_id":"public/2016/09/09/Gradle相关配置/index.html","hash":"71cbf012609d3b211e88c7beda681691719d2483","modified":1488700785582},{"_id":"public/2016/08/16/滑动冲突之EditText-ScrollView/index.html","hash":"c87ba6a3cfa43fcb1f11a05396e818df9df833fb","modified":1488700785582},{"_id":"public/2016/06/04/简单的页面置换算法分析/index.html","hash":"8934bc2ae10bf24b126260b2a6463a98ab15eef2","modified":1488700785582},{"_id":"public/2016/05/16/Android SingleTask 探究/index.html","hash":"8488b4c04773a353550dbbfce5c30a591f80f3fe","modified":1488700785582},{"_id":"public/2016/02/28/对称、非对称加密技术初探/index.html","hash":"55f360a3d1cb445baa4c5202f80d82dedd6d819a","modified":1488700785582},{"_id":"public/2016/02/19/Git学习笔记（二）/index.html","hash":"d7093ee1069559989329c602f1e1a07aa35d9702","modified":1488700785582},{"_id":"public/2016/02/19/Git学习笔记（一）/index.html","hash":"600c938a8e5bb3a8b3deea1778ff0d330f483d25","modified":1488700785582},{"_id":"public/2016/01/16/Android Studio NDK开发环境搭建及Demo示例/index.html","hash":"b868e7e75f31afcf75e546a0a10cfb0afa507d95","modified":1488702279527},{"_id":"public/archives/index.html","hash":"9d645268b04b77c436d65ffa7b2bc28b3723670a","modified":1488710835339},{"_id":"public/archives/page/2/index.html","hash":"e5c31ea48978e669802e45f94b8f9ae2052016d0","modified":1488710835339},{"_id":"public/archives/2016/index.html","hash":"927bb485c827fe46e7ebce1a03da910524d99d66","modified":1488706484671},{"_id":"public/categories/Android/index.html","hash":"4cb2a43a1265af1558a565b2875d7984c488e185","modified":1488700785582},{"_id":"public/index.html","hash":"2463a2575a4552e84f9fdf57fe1621fdd49d001c","modified":1488710835339},{"_id":"public/page/2/index.html","hash":"9d4f05616851d1b2e6a149ce0cd33fbd8a328ea5","modified":1488710835339},{"_id":"source/_posts/Spring 学习（三）.md","hash":"7236b1540254294fe4a53e0d5c9ded76905e8281","modified":1488703995000},{"_id":"public/archives/page/3/index.html","hash":"51fb9acfe1314501a7ec51d064c1e92cd5caadc9","modified":1488710835297},{"_id":"public/page/3/index.html","hash":"dd7ff05112a67ef8d2231212eb3ec1b15eb5da68","modified":1488710835339},{"_id":"public/2016/01/07/Spring 学习（三）/index.html","hash":"a6fc0c25b2a1e642a2a4044111055ce5f6c8fd51","modified":1488702204367},{"_id":"public/archives/2017/01/index.html","hash":"84e18f80dcb3a2a3ae6e843404d60a915e54de46","modified":1488710835336},{"_id":"public/2017/01/07/Spring 学习（三）/index.html","hash":"a591d9c346da1cb885741f3318848d791e63d720","modified":1488705288082},{"_id":"source/_posts/Mybatis 学习（一）.md","hash":"5b8a98acf4d16b45110e2dbc6034d67f90068d1b","modified":1488705277000},{"_id":"public/tags/Mybatis/index.html","hash":"1fcb849f7728a7a9eb0acbaaceae49d8c38b7c1b","modified":1488710835338},{"_id":"public/2017/01/11/Mybatis 学习（一）/index.html","hash":"8f01d628601a737873d61aa76b87071d5d7b4b91","modified":1488706484671},{"_id":"source/_posts/Mybatis 学习（二）.md","hash":"63f195330df15354e0e1503057d64898714d9b28","modified":1488707147000},{"_id":"public/2017/01/15/Mybatis 学习（二）/index.html","hash":"f3bed3b9eb32d9cb95e9a37218cd7ed9ceb2afc1","modified":1488708864858},{"_id":"source/_posts/Mybatis 逆向工程.md","hash":"3ff11d466c44e4954c67a654d7c86b1213ece226","modified":1488708854000},{"_id":"public/2017/01/17/Mybatis 逆向工程/index.html","hash":"f801da6ff38a51d1de01381e8f68150897097e16","modified":1488710835339},{"_id":"source/_posts/Springmvc 相关.md","hash":"0e6833563b97fabaf50f9c7b9338be303b9423b2","modified":1488710964000},{"_id":"public/tags/Springmvc/index.html","hash":"c93b87194020a9d6d0ba1d7991548d394d79e153","modified":1488710835341},{"_id":"public/2017/01/21/Springmvc 相关/index.html","hash":"88f2059abeaba2b6321b4ba3910b4b7c2f3dfb26","modified":1488710972871},{"_id":"source/Dalvik中PreVerify问题.md","hash":"640b236a184a5806589e61307fa1a92fc49f97ce","modified":1486553261000},{"_id":"source/_posts/常见排序算法（C++实现）.md","hash":"1243703986a98687ddfc28a4176c493104a49334","modified":1489495539000},{"_id":"source/_posts/Android 增量编译方案总结.md","hash":"085cda8ffb5202fe64402df1ff0dfdbce7a27020","modified":1495700628000},{"_id":"source/_posts/Android 6.0适配.md","hash":"5dbee99ee40cdee4f569fe43525f466342c02671","modified":1496986596000},{"_id":"source/_posts/Android 7.0适配.md","hash":"04897878f8ab3091c6f669546c80c5ac652c678b","modified":1496998644000},{"_id":"source/_posts/Vue 从入门到搬砖.md","hash":"11066f2d1514ca0b4b46d301410242bec932968a","modified":1503829313000},{"_id":"source/_posts/滑动相关 ScrollView & ListView.md","hash":"0585a560c11c5ea25c530ea0690bc77013959a7b","modified":1504953692000},{"_id":"source/_posts/View 测量相关总结.md","hash":"a0a2cb1873f77dd80c1415533aed5e4d0792355a","modified":1504953669000},{"_id":"source/_posts/RePlugin 插件化方案分析（一）.md","hash":"63e33741c17b01a2ca54e57c1ac06062f9895594","modified":1509456053000},{"_id":"source/_posts/注解基础及相关应用.md","hash":"12fee4f3d0b2f0463130cf9b229c6fe9c4c0e2a2","modified":1512578857324},{"_id":"themes/indigo/source/img/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1512823523511}],"Category":[{"name":"Android","_id":"cizpjnf1u0003baqwu9end35d"},{"name":"Hybird","_id":"cizpjnf29000ebaqwp7wo104k"},{"name":"工具","_id":"cizpjnf2f000kbaqwgaunj3ht"},{"name":"Gradle","_id":"cizpjnf2r000zbaqwyaswakfg"},{"name":"RxJava","_id":"cizpjnf2v0016baqwvxmo7try"},{"name":"Java后台","_id":"cizpjnf2z001dbaqwy1oiy5ur"},{"name":"Weex","_id":"cizpjnf3b001pbaqwvlu71ak3"},{"name":"网络","_id":"cizpjnf3f001ybaqwmt9jh7ub"},{"name":"算法","_id":"cizpjnf3g0022baqwuzovgm92"},{"name":"前端","_id":"cj6ul19ur00019jqwo0y58zgb"},{"name":"插件化","_id":"cjanfw0cr0001g8ntnun8a5df"},{"name":"Android, Java","_id":"cjav9njxy0001n9ntrfpgl3e0"}],"Data":[],"Page":[{"title":"about me","date":"2016-12-12T16:15:52.000Z","layout":"tags","comments":0,"_content":"","source":"about/about_me.md","raw":"---\ntitle: about me\ndate: 2016-12-13 00:15:52\nlayout: tags\ncomments: false\n---\n","updated":"2017-01-19T08:20:55.000Z","path":"about/about_me.html","_id":"cizpjnf1m0000baqwdfpghcb6","content":"","excerpt":"","more":""},{"title":"categories","date":"2016-12-12T16:17:28.000Z","layout":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2016-12-13 00:17:28\nlayout: categories\ncomments: false\n---\n","updated":"2017-01-19T08:20:55.000Z","path":"categories/index.html","_id":"cizpjnf45002wbaqwucxrx43m","content":"","excerpt":"","more":""},{"title":"tags","date":"2016-12-12T16:15:52.000Z","layout":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2016-12-13 00:15:52\nlayout: tags\ncomments: false\n---\n","updated":"2017-01-19T08:20:55.000Z","path":"tags/index.html","_id":"cizpjnf4b002xbaqwo9fcyvgo","content":"","excerpt":"","more":""},{"title":"Dalvik中PreVerify问题","date":"2016-11-24T05:01:00.000Z","categories":"Android","tags":"Dalvik","_content":"## PreVerify（预校验）的由来\nDalvik 虚拟机在启动的时候，会有许多的启动参数，其中有一项就是verify，当verify被打开的时候，doVerify变量为true，则进行类的校验（dvmVerifyClass方法调用）。若校验成功，则这个类会被打上标记：CLASS_ISPREVERIFIED。\n上面描述的过程是dex -> odex (dexopt 过程)时，做的一个优化。当从classes.dex 变为 odex 后，才会被拿去执行。\n\n## Class 被 Preverify 的过程\n在dex 被 dexopt 的过程中，源码中有校验和优化 Class 相关的操作：\n\n``` cpp\n/*\n * Verify and/or optimize a specific class.\n */\nstatic void verifyAndOptimizeClass(DexFile* pDexFile, ClassObject* clazz,\n    const DexClassDef* pClassDef, bool doVerify, bool doOpt)\n{\n    const char* classDescriptor;\n    bool verified = false;\n\n    if (clazz->pDvmDex->pDexFile != pDexFile) {\n        /*\n         * The current DEX file defined a class that is also present in the\n         * bootstrap class path.  The class loader favored the bootstrap\n         * version, which means that we have a pointer to a class that is\n         * (a) not the one we want to examine, and (b) mapped read-only,\n         * so we will seg fault if we try to rewrite instructions inside it.\n         */\n        ALOGD(\"DexOpt: not verifying/optimizing '%s': multiple definitions\",\n            clazz->descriptor);\n        return;\n    }\n\n    classDescriptor = dexStringByTypeIdx(pDexFile, pClassDef->classIdx);\n\n    /*\n     * First, try to verify it.\n     */\n    if (doVerify) {\n        if (dvmVerifyClass(clazz)) {\n            /*\n             * Set the \"is preverified\" flag in the DexClassDef.  We\n             * do it here, rather than in the ClassObject structure,\n             * because the DexClassDef is part of the odex file.\n             */\n            assert((clazz->accessFlags & JAVA_FLAGS_MASK) ==\n                pClassDef->accessFlags);\n            ((DexClassDef*)pClassDef)->accessFlags |= CLASS_ISPREVERIFIED;\n            verified = true;\n        } else {\n            // TODO: log when in verbose mode\n            ALOGV(\"DexOpt: '%s' failed verification\", classDescriptor);\n        }\n    }\n\n    if (doOpt) {\n        bool needVerify = (gDvm.dexOptMode == OPTIMIZE_MODE_VERIFIED ||\n                           gDvm.dexOptMode == OPTIMIZE_MODE_FULL);\n        if (!verified && needVerify) {\n            ALOGV(\"DexOpt: not optimizing '%s': not verified\",\n                classDescriptor);\n        } else {\n            dvmOptimizeClass(clazz, false);// 优化 Class 操作\n\n            /* set the flag whether or not we actually changed anything */\n            ((DexClassDef*)pClassDef)->accessFlags |= CLASS_ISOPTIMIZED;// Class被优化过后，也会打上被优化过的标记 CLASS_ISOPTIMIZED\n        }\n    }\n}\n```\n\ndvmVerifyClass 的具体过程，源码中是这样描述的：\n\n``` cpp\n/*\n * Verify a class.\n *\n * By the time we get here, the value of gDvm.classVerifyMode should already\n * have been factored in.  If you want to call into the verifier even\n * though verification is disabled, that's your business.\n *\n * Returns \"true\" on success.\n */\nbool dvmVerifyClass(ClassObject*clazz) {\n    int i;\n    if (dvmIsClassVerified(clazz)) {\n        ALOGD(\"Ignoring duplicate verify attempt on %s\", clazz -> descriptor);\n        return true;\n    }\n    for (i = 0; i < clazz -> directMethodCount; i++) {\n        if (!verifyMethod( & clazz -> directMethods[i])){\n            LOG_VFY(\"Verifier rejected class %s\", clazz -> descriptor);\n            return false;\n        }\n    }\n    for (i = 0; i < clazz -> virtualMethodCount; i++) {\n        if (!verifyMethod( & clazz -> virtualMethods[i])){\n            LOG_VFY(\"Verifier rejected class %s\", clazz -> descriptor);\n            return false;\n        }\n    }\n    return true;\n}\n```\n\n其中，dvmVerifyClass中又去调用了 方法的校验 verifyMethod, 再去追源码：\n\n``` cpp\n/*\n * Perform verification on a single method.\n */\nstatic bool verifyMethod(Method* meth)\n{\n    bool result = false;\n\n    /*\n     * Verifier state blob.  Various values will be cached here so we\n     * can avoid expensive lookups and pass fewer arguments around.\n     */\n    VerifierData vdata;\n#if 1   // ndef NDEBUG\n    memset(&vdata, 0x99, sizeof(vdata));\n#endif\n\n    vdata.method = meth;\n    vdata.insnsSize = dvmGetMethodInsnsSize(meth);\n    vdata.insnRegCount = meth->registersSize;\n    vdata.insnFlags = NULL;\n    vdata.uninitMap = NULL;\n    vdata.basicBlocks = NULL;\n\n    /*\n     * If there aren't any instructions, make sure that's expected, then\n     * exit successfully.  Note: for native methods, meth->insns gets set\n     * to a native function pointer on first call, so don't use that as\n     * an indicator.\n     */\n    if (vdata.insnsSize == 0) {\n        if (!dvmIsNativeMethod(meth) && !dvmIsAbstractMethod(meth)) {\n            LOG_VFY_METH(meth,\n                \"VFY: zero-length code in concrete non-native method\");\n            goto bail;\n        }\n\n        goto success;\n    }\n\n    /*\n     * Sanity-check the register counts.  ins + locals = registers, so make\n     * sure that ins <= registers.\n     */\n    if (meth->insSize > meth->registersSize) {\n        LOG_VFY_METH(meth, \"VFY: bad register counts (ins=%d regs=%d)\",\n            meth->insSize, meth->registersSize);\n        goto bail;\n    }\n\n    /*\n     * Allocate and populate an array to hold instruction data.\n     *\n     * TODO: Consider keeping a reusable pre-allocated array sitting\n     * around for smaller methods.\n     */\n    vdata.insnFlags = (InsnFlags*) calloc(vdata.insnsSize, sizeof(InsnFlags));\n    if (vdata.insnFlags == NULL)\n        goto bail;\n\n    /*\n     * Compute the width of each instruction and store the result in insnFlags.\n     * Count up the #of occurrences of certain opcodes while we're at it.\n     */\n    if (!computeWidthsAndCountOps(&vdata))\n        goto bail;\n\n    /*\n     * Allocate a map to hold the classes of uninitialized instances.\n     */\n    vdata.uninitMap = dvmCreateUninitInstanceMap(meth, vdata.insnFlags,\n        vdata.newInstanceCount);\n    if (vdata.uninitMap == NULL)\n        goto bail;\n\n    /*\n     * Set the \"in try\" flags for all instructions guarded by a \"try\" block.\n     * Also sets the \"branch target\" flag on exception handlers.\n     */\n    if (!scanTryCatchBlocks(meth, vdata.insnFlags))\n        goto bail;\n\n    /*\n     * Perform static instruction verification.  Also sets the \"branch\n     * target\" flags.\n     */\n    if (!verifyInstructions(&vdata))\n        goto bail;\n\n    /*\n     * Do code-flow analysis.\n     *\n     * We could probably skip this for a method with no registers, but\n     * that's so rare that there's little point in checking.\n     */\n    if (!dvmVerifyCodeFlow(&vdata)) {\n        //ALOGD(\"+++ %s failed code flow\", meth->name);\n        goto bail;\n    }\n\nsuccess:\n    result = true;\n\nbail:\n    dvmFreeVfyBasicBlocks(&vdata);\n    dvmFreeUninitInstanceMap(vdata.uninitMap);\n    free(vdata.insnFlags);\n    return result;\n}\n```\n\ndvmVerifyClass 具体过程中，会去校验 这个 Class中的所有的 directMethod 方法，和 virtualMethod 方法。具体这些方法包含哪些呢？ 其中时包含了：\n* static 方法\n* private 方法\n* 构造方法\n* ... ...\n\n由此可知：  如果这些方法中直接引用到的类（第一层级关系，不会进行递归搜索） 和 class (源码中的clazz) 在同一个 dex 中的话，这个类就会被打上  CLASS_ISPREVERIFY 标记\n\n## PreVerify 缘由\n\n* 一方面，Dalvik 虚拟机在安装期间，为Class 打上 CLASS_ISPREVERIFIED 是为了提高性能，下次使用时，则会省去校验操作，提高访问效率。\n* 另一方面，被标上“CLASS_ISPREVERIFIED”的类，dvm在运行期载入Class时候，会对其内存中对应的直接引用类进行校验，如果该类存在与直接引用类所在的dex不是同一个，则直接报“pre-verification” 错误，该类无法加载。\n\n``` cpp\nClassObject* dvmResolveClass(const ClassObject* referrer, u4 classIdx,\n    bool fromUnverifiedConstant)\n{\n    DvmDex* pDvmDex = referrer->pDvmDex;\n    ClassObject* resClass;\n    const char* className;\n    /*\n     * Check the table first -- this gets called from the other \"resolve\"\n     * methods.\n     */\n    resClass = dvmDexGetResolvedClass(pDvmDex, classIdx); // 预先在dex的缓存表里查\n    if (resClass != NULL)\n        return resClass;\n    LOGVV(\"--- resolving class %u (referrer=%s cl=%p)\",\n        classIdx, referrer->descriptor, referrer->classLoader);\n    /*\n     * Class hasn't been loaded yet, or is in the process of being loaded\n     * and initialized now.  Try to get a copy.  If we find one, put the\n     * pointer in the DexTypeId.  There isn't a race condition here --\n     * 32-bit writes are guaranteed atomic on all target platforms.  Worst\n     * case we have two threads storing the same value.\n     *\n     * If this is an array class, we'll generate it here.\n     */\n    className = dexStringByTypeIdx(pDvmDex->pDexFile, classIdx);\n    if (className[0] != '\\0' && className[1] == '\\0') {\n        /* primitive type */\n        resClass = dvmFindPrimitiveClass(className[0]);\n    } else {\n        resClass = dvmFindClassNoInit(className, referrer->classLoader);\n    }\n    if (resClass != NULL) {\n        /*\n         * If the referrer was pre-verified, the resolved class must come\n         * from the same DEX or from a bootstrap class.  The pre-verifier\n         * makes assumptions that could be invalidated by a wacky class\n         * loader.  (See the notes at the top of oo/Class.c.)\n         *\n         * The verifier does *not* fail a class for using a const-class\n         * or instance-of instruction referring to an unresolveable class,\n         * because the result of the instruction is simply a Class object\n         * or boolean -- there's no need to resolve the class object during\n         * verification.  Instance field and virtual method accesses can\n         * break dangerously if we get the wrong class, but const-class and\n         * instance-of are only interesting at execution time.  So, if we\n         * we got here as part of executing one of the \"unverified class\"\n         * instructions, we skip the additional check.\n         *\n         * Ditto for class references from annotations and exception\n         * handler lists.\n         */\n        if (!fromUnverifiedConstant &&\n            IS_CLASS_FLAG_SET(referrer, CLASS_ISPREVERIFIED))\n        {\n            ClassObject* resClassCheck = resClass;\n            if (dvmIsArrayClass(resClassCheck))\n                resClassCheck = resClassCheck->elementClass;\n            if (referrer->pDvmDex != resClassCheck->pDvmDex &&\n                resClassCheck->classLoader != NULL)  // 校验dex是否是安装时的同一个dex\n            {\n                ALOGW(\"Class resolved by unexpected DEX:\"\n                     \" %s(%p):%p ref [%s] %s(%p):%p\",\n                    referrer->descriptor, referrer->classLoader,\n                    referrer->pDvmDex,\n                    resClass->descriptor, resClassCheck->descriptor,\n                    resClassCheck->classLoader, resClassCheck->pDvmDex);\n                ALOGW(\"(%s had used a different %s during pre-verification)\",\n                    referrer->descriptor, resClass->descriptor);\n                dvmThrowIllegalAccessError(\n                    \"Class ref in pre-verified class resolved to unexpected \"\n                    \"implementation\");\n                return NULL;\n            }\n        }\n        LOGVV(\"##### +ResolveClass(%s): referrer=%s dex=%p ldr=%p ref=%d\",\n            resClass->descriptor, referrer->descriptor, referrer->pDvmDex,\n            referrer->classLoader, classIdx);\n        /*\n         * Add what we found to the list so we can skip the class search\n         * next time through.\n         *\n         * TODO: should we be doing this when fromUnverifiedConstant==true?\n         * (see comments at top of oo/Class.c)\n         */\n        dvmDexSetResolvedClass(pDvmDex, classIdx, resClass);\n    } else {\n        /* not found, exception should be raised */\n        LOGVV(\"Class not found: %s\",\n            dexStringByTypeIdx(pDvmDex->pDexFile, classIdx));\n        assert(dvmCheckException(dvmThreadSelf()));\n    }\n    return resClass;\n}\n```\n\n实际上，这一步dex的一致性判断，也是google为了防止外部DEX注入的一个安全方案，即保证运行期的Class与其直接引用类之间所在的DEX关系要与安装时候一致\n\n\n<br>\n源码链接:\nhttp://osxr.org:8080/android/source/dalvik/vm/analysis/DexPrepare.cpp\nhttp://osxr.org:8080/android/source/dalvik/vm/analysis/DexVerify.cpp\nhttp://osxr.org:8080/android/source/dalvik/vm/oo/Resolve.cpp\n\n","source":"Dalvik中PreVerify问题.md","raw":"---\ntitle: Dalvik中PreVerify问题\ndate: 2016-11-24 13:01\ncategories: Android\ntags: Dalvik\n---\n## PreVerify（预校验）的由来\nDalvik 虚拟机在启动的时候，会有许多的启动参数，其中有一项就是verify，当verify被打开的时候，doVerify变量为true，则进行类的校验（dvmVerifyClass方法调用）。若校验成功，则这个类会被打上标记：CLASS_ISPREVERIFIED。\n上面描述的过程是dex -> odex (dexopt 过程)时，做的一个优化。当从classes.dex 变为 odex 后，才会被拿去执行。\n\n## Class 被 Preverify 的过程\n在dex 被 dexopt 的过程中，源码中有校验和优化 Class 相关的操作：\n\n``` cpp\n/*\n * Verify and/or optimize a specific class.\n */\nstatic void verifyAndOptimizeClass(DexFile* pDexFile, ClassObject* clazz,\n    const DexClassDef* pClassDef, bool doVerify, bool doOpt)\n{\n    const char* classDescriptor;\n    bool verified = false;\n\n    if (clazz->pDvmDex->pDexFile != pDexFile) {\n        /*\n         * The current DEX file defined a class that is also present in the\n         * bootstrap class path.  The class loader favored the bootstrap\n         * version, which means that we have a pointer to a class that is\n         * (a) not the one we want to examine, and (b) mapped read-only,\n         * so we will seg fault if we try to rewrite instructions inside it.\n         */\n        ALOGD(\"DexOpt: not verifying/optimizing '%s': multiple definitions\",\n            clazz->descriptor);\n        return;\n    }\n\n    classDescriptor = dexStringByTypeIdx(pDexFile, pClassDef->classIdx);\n\n    /*\n     * First, try to verify it.\n     */\n    if (doVerify) {\n        if (dvmVerifyClass(clazz)) {\n            /*\n             * Set the \"is preverified\" flag in the DexClassDef.  We\n             * do it here, rather than in the ClassObject structure,\n             * because the DexClassDef is part of the odex file.\n             */\n            assert((clazz->accessFlags & JAVA_FLAGS_MASK) ==\n                pClassDef->accessFlags);\n            ((DexClassDef*)pClassDef)->accessFlags |= CLASS_ISPREVERIFIED;\n            verified = true;\n        } else {\n            // TODO: log when in verbose mode\n            ALOGV(\"DexOpt: '%s' failed verification\", classDescriptor);\n        }\n    }\n\n    if (doOpt) {\n        bool needVerify = (gDvm.dexOptMode == OPTIMIZE_MODE_VERIFIED ||\n                           gDvm.dexOptMode == OPTIMIZE_MODE_FULL);\n        if (!verified && needVerify) {\n            ALOGV(\"DexOpt: not optimizing '%s': not verified\",\n                classDescriptor);\n        } else {\n            dvmOptimizeClass(clazz, false);// 优化 Class 操作\n\n            /* set the flag whether or not we actually changed anything */\n            ((DexClassDef*)pClassDef)->accessFlags |= CLASS_ISOPTIMIZED;// Class被优化过后，也会打上被优化过的标记 CLASS_ISOPTIMIZED\n        }\n    }\n}\n```\n\ndvmVerifyClass 的具体过程，源码中是这样描述的：\n\n``` cpp\n/*\n * Verify a class.\n *\n * By the time we get here, the value of gDvm.classVerifyMode should already\n * have been factored in.  If you want to call into the verifier even\n * though verification is disabled, that's your business.\n *\n * Returns \"true\" on success.\n */\nbool dvmVerifyClass(ClassObject*clazz) {\n    int i;\n    if (dvmIsClassVerified(clazz)) {\n        ALOGD(\"Ignoring duplicate verify attempt on %s\", clazz -> descriptor);\n        return true;\n    }\n    for (i = 0; i < clazz -> directMethodCount; i++) {\n        if (!verifyMethod( & clazz -> directMethods[i])){\n            LOG_VFY(\"Verifier rejected class %s\", clazz -> descriptor);\n            return false;\n        }\n    }\n    for (i = 0; i < clazz -> virtualMethodCount; i++) {\n        if (!verifyMethod( & clazz -> virtualMethods[i])){\n            LOG_VFY(\"Verifier rejected class %s\", clazz -> descriptor);\n            return false;\n        }\n    }\n    return true;\n}\n```\n\n其中，dvmVerifyClass中又去调用了 方法的校验 verifyMethod, 再去追源码：\n\n``` cpp\n/*\n * Perform verification on a single method.\n */\nstatic bool verifyMethod(Method* meth)\n{\n    bool result = false;\n\n    /*\n     * Verifier state blob.  Various values will be cached here so we\n     * can avoid expensive lookups and pass fewer arguments around.\n     */\n    VerifierData vdata;\n#if 1   // ndef NDEBUG\n    memset(&vdata, 0x99, sizeof(vdata));\n#endif\n\n    vdata.method = meth;\n    vdata.insnsSize = dvmGetMethodInsnsSize(meth);\n    vdata.insnRegCount = meth->registersSize;\n    vdata.insnFlags = NULL;\n    vdata.uninitMap = NULL;\n    vdata.basicBlocks = NULL;\n\n    /*\n     * If there aren't any instructions, make sure that's expected, then\n     * exit successfully.  Note: for native methods, meth->insns gets set\n     * to a native function pointer on first call, so don't use that as\n     * an indicator.\n     */\n    if (vdata.insnsSize == 0) {\n        if (!dvmIsNativeMethod(meth) && !dvmIsAbstractMethod(meth)) {\n            LOG_VFY_METH(meth,\n                \"VFY: zero-length code in concrete non-native method\");\n            goto bail;\n        }\n\n        goto success;\n    }\n\n    /*\n     * Sanity-check the register counts.  ins + locals = registers, so make\n     * sure that ins <= registers.\n     */\n    if (meth->insSize > meth->registersSize) {\n        LOG_VFY_METH(meth, \"VFY: bad register counts (ins=%d regs=%d)\",\n            meth->insSize, meth->registersSize);\n        goto bail;\n    }\n\n    /*\n     * Allocate and populate an array to hold instruction data.\n     *\n     * TODO: Consider keeping a reusable pre-allocated array sitting\n     * around for smaller methods.\n     */\n    vdata.insnFlags = (InsnFlags*) calloc(vdata.insnsSize, sizeof(InsnFlags));\n    if (vdata.insnFlags == NULL)\n        goto bail;\n\n    /*\n     * Compute the width of each instruction and store the result in insnFlags.\n     * Count up the #of occurrences of certain opcodes while we're at it.\n     */\n    if (!computeWidthsAndCountOps(&vdata))\n        goto bail;\n\n    /*\n     * Allocate a map to hold the classes of uninitialized instances.\n     */\n    vdata.uninitMap = dvmCreateUninitInstanceMap(meth, vdata.insnFlags,\n        vdata.newInstanceCount);\n    if (vdata.uninitMap == NULL)\n        goto bail;\n\n    /*\n     * Set the \"in try\" flags for all instructions guarded by a \"try\" block.\n     * Also sets the \"branch target\" flag on exception handlers.\n     */\n    if (!scanTryCatchBlocks(meth, vdata.insnFlags))\n        goto bail;\n\n    /*\n     * Perform static instruction verification.  Also sets the \"branch\n     * target\" flags.\n     */\n    if (!verifyInstructions(&vdata))\n        goto bail;\n\n    /*\n     * Do code-flow analysis.\n     *\n     * We could probably skip this for a method with no registers, but\n     * that's so rare that there's little point in checking.\n     */\n    if (!dvmVerifyCodeFlow(&vdata)) {\n        //ALOGD(\"+++ %s failed code flow\", meth->name);\n        goto bail;\n    }\n\nsuccess:\n    result = true;\n\nbail:\n    dvmFreeVfyBasicBlocks(&vdata);\n    dvmFreeUninitInstanceMap(vdata.uninitMap);\n    free(vdata.insnFlags);\n    return result;\n}\n```\n\ndvmVerifyClass 具体过程中，会去校验 这个 Class中的所有的 directMethod 方法，和 virtualMethod 方法。具体这些方法包含哪些呢？ 其中时包含了：\n* static 方法\n* private 方法\n* 构造方法\n* ... ...\n\n由此可知：  如果这些方法中直接引用到的类（第一层级关系，不会进行递归搜索） 和 class (源码中的clazz) 在同一个 dex 中的话，这个类就会被打上  CLASS_ISPREVERIFY 标记\n\n## PreVerify 缘由\n\n* 一方面，Dalvik 虚拟机在安装期间，为Class 打上 CLASS_ISPREVERIFIED 是为了提高性能，下次使用时，则会省去校验操作，提高访问效率。\n* 另一方面，被标上“CLASS_ISPREVERIFIED”的类，dvm在运行期载入Class时候，会对其内存中对应的直接引用类进行校验，如果该类存在与直接引用类所在的dex不是同一个，则直接报“pre-verification” 错误，该类无法加载。\n\n``` cpp\nClassObject* dvmResolveClass(const ClassObject* referrer, u4 classIdx,\n    bool fromUnverifiedConstant)\n{\n    DvmDex* pDvmDex = referrer->pDvmDex;\n    ClassObject* resClass;\n    const char* className;\n    /*\n     * Check the table first -- this gets called from the other \"resolve\"\n     * methods.\n     */\n    resClass = dvmDexGetResolvedClass(pDvmDex, classIdx); // 预先在dex的缓存表里查\n    if (resClass != NULL)\n        return resClass;\n    LOGVV(\"--- resolving class %u (referrer=%s cl=%p)\",\n        classIdx, referrer->descriptor, referrer->classLoader);\n    /*\n     * Class hasn't been loaded yet, or is in the process of being loaded\n     * and initialized now.  Try to get a copy.  If we find one, put the\n     * pointer in the DexTypeId.  There isn't a race condition here --\n     * 32-bit writes are guaranteed atomic on all target platforms.  Worst\n     * case we have two threads storing the same value.\n     *\n     * If this is an array class, we'll generate it here.\n     */\n    className = dexStringByTypeIdx(pDvmDex->pDexFile, classIdx);\n    if (className[0] != '\\0' && className[1] == '\\0') {\n        /* primitive type */\n        resClass = dvmFindPrimitiveClass(className[0]);\n    } else {\n        resClass = dvmFindClassNoInit(className, referrer->classLoader);\n    }\n    if (resClass != NULL) {\n        /*\n         * If the referrer was pre-verified, the resolved class must come\n         * from the same DEX or from a bootstrap class.  The pre-verifier\n         * makes assumptions that could be invalidated by a wacky class\n         * loader.  (See the notes at the top of oo/Class.c.)\n         *\n         * The verifier does *not* fail a class for using a const-class\n         * or instance-of instruction referring to an unresolveable class,\n         * because the result of the instruction is simply a Class object\n         * or boolean -- there's no need to resolve the class object during\n         * verification.  Instance field and virtual method accesses can\n         * break dangerously if we get the wrong class, but const-class and\n         * instance-of are only interesting at execution time.  So, if we\n         * we got here as part of executing one of the \"unverified class\"\n         * instructions, we skip the additional check.\n         *\n         * Ditto for class references from annotations and exception\n         * handler lists.\n         */\n        if (!fromUnverifiedConstant &&\n            IS_CLASS_FLAG_SET(referrer, CLASS_ISPREVERIFIED))\n        {\n            ClassObject* resClassCheck = resClass;\n            if (dvmIsArrayClass(resClassCheck))\n                resClassCheck = resClassCheck->elementClass;\n            if (referrer->pDvmDex != resClassCheck->pDvmDex &&\n                resClassCheck->classLoader != NULL)  // 校验dex是否是安装时的同一个dex\n            {\n                ALOGW(\"Class resolved by unexpected DEX:\"\n                     \" %s(%p):%p ref [%s] %s(%p):%p\",\n                    referrer->descriptor, referrer->classLoader,\n                    referrer->pDvmDex,\n                    resClass->descriptor, resClassCheck->descriptor,\n                    resClassCheck->classLoader, resClassCheck->pDvmDex);\n                ALOGW(\"(%s had used a different %s during pre-verification)\",\n                    referrer->descriptor, resClass->descriptor);\n                dvmThrowIllegalAccessError(\n                    \"Class ref in pre-verified class resolved to unexpected \"\n                    \"implementation\");\n                return NULL;\n            }\n        }\n        LOGVV(\"##### +ResolveClass(%s): referrer=%s dex=%p ldr=%p ref=%d\",\n            resClass->descriptor, referrer->descriptor, referrer->pDvmDex,\n            referrer->classLoader, classIdx);\n        /*\n         * Add what we found to the list so we can skip the class search\n         * next time through.\n         *\n         * TODO: should we be doing this when fromUnverifiedConstant==true?\n         * (see comments at top of oo/Class.c)\n         */\n        dvmDexSetResolvedClass(pDvmDex, classIdx, resClass);\n    } else {\n        /* not found, exception should be raised */\n        LOGVV(\"Class not found: %s\",\n            dexStringByTypeIdx(pDvmDex->pDexFile, classIdx));\n        assert(dvmCheckException(dvmThreadSelf()));\n    }\n    return resClass;\n}\n```\n\n实际上，这一步dex的一致性判断，也是google为了防止外部DEX注入的一个安全方案，即保证运行期的Class与其直接引用类之间所在的DEX关系要与安装时候一致\n\n\n<br>\n源码链接:\nhttp://osxr.org:8080/android/source/dalvik/vm/analysis/DexPrepare.cpp\nhttp://osxr.org:8080/android/source/dalvik/vm/analysis/DexVerify.cpp\nhttp://osxr.org:8080/android/source/dalvik/vm/oo/Resolve.cpp\n\n","updated":"2017-02-08T11:27:41.000Z","path":"Dalvik中PreVerify问题.html","comments":1,"layout":"page","_id":"cj09j1r7k0000c1qwvmqjj8cg","content":"<h2 id=\"PreVerify（预校验）的由来\"><a href=\"#PreVerify（预校验）的由来\" class=\"headerlink\" title=\"PreVerify（预校验）的由来\"></a>PreVerify（预校验）的由来</h2><p>Dalvik 虚拟机在启动的时候，会有许多的启动参数，其中有一项就是verify，当verify被打开的时候，doVerify变量为true，则进行类的校验（dvmVerifyClass方法调用）。若校验成功，则这个类会被打上标记：CLASS_ISPREVERIFIED。<br>上面描述的过程是dex -&gt; odex (dexopt 过程)时，做的一个优化。当从classes.dex 变为 odex 后，才会被拿去执行。</p>\n<h2 id=\"Class-被-Preverify-的过程\"><a href=\"#Class-被-Preverify-的过程\" class=\"headerlink\" title=\"Class 被 Preverify 的过程\"></a>Class 被 Preverify 的过程</h2><p>在dex 被 dexopt 的过程中，源码中有校验和优化 Class 相关的操作：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/*</span></div><div class=\"line\"> * Verify and/or optimize a specific class.</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">verifyAndOptimizeClass</span><span class=\"params\">(DexFile* pDexFile, ClassObject* clazz,</span></span></div><div class=\"line\">    <span class=\"keyword\">const</span> DexClassDef* pClassDef, <span class=\"keyword\">bool</span> doVerify, <span class=\"keyword\">bool</span> doOpt)</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* classDescriptor;</div><div class=\"line\">    <span class=\"keyword\">bool</span> verified = <span class=\"literal\">false</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (clazz-&gt;pDvmDex-&gt;pDexFile != pDexFile) &#123;</div><div class=\"line\">        <span class=\"comment\">/*</span></div><div class=\"line\">         * The current DEX file defined a class that is also present in the</div><div class=\"line\">         * bootstrap class path.  The class loader favored the bootstrap</div><div class=\"line\">         * version, which means that we have a pointer to a class that is</div><div class=\"line\">         * (a) not the one we want to examine, and (b) mapped read-only,</div><div class=\"line\">         * so we will seg fault if we try to rewrite instructions inside it.</div><div class=\"line\">         */</div><div class=\"line\">        ALOGD(<span class=\"string\">\"DexOpt: not verifying/optimizing '%s': multiple definitions\"</span>,</div><div class=\"line\">            clazz-&gt;descriptor);</div><div class=\"line\">        <span class=\"keyword\">return</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    classDescriptor = dexStringByTypeIdx(pDexFile, pClassDef-&gt;classIdx);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/*</span></div><div class=\"line\">     * First, try to verify it.</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"keyword\">if</span> (doVerify) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (dvmVerifyClass(clazz)) &#123;</div><div class=\"line\">            <span class=\"comment\">/*</span></div><div class=\"line\">             * Set the \"is preverified\" flag in the DexClassDef.  We</div><div class=\"line\">             * do it here, rather than in the ClassObject structure,</div><div class=\"line\">             * because the DexClassDef is part of the odex file.</div><div class=\"line\">             */</div><div class=\"line\">            assert((clazz-&gt;accessFlags &amp; JAVA_FLAGS_MASK) ==</div><div class=\"line\">                pClassDef-&gt;accessFlags);</div><div class=\"line\">            ((DexClassDef*)pClassDef)-&gt;accessFlags |= CLASS_ISPREVERIFIED;</div><div class=\"line\">            verified = <span class=\"literal\">true</span>;</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"comment\">// <span class=\"doctag\">TODO:</span> log when in verbose mode</span></div><div class=\"line\">            ALOGV(<span class=\"string\">\"DexOpt: '%s' failed verification\"</span>, classDescriptor);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (doOpt) &#123;</div><div class=\"line\">        <span class=\"keyword\">bool</span> needVerify = (gDvm.dexOptMode == OPTIMIZE_MODE_VERIFIED ||</div><div class=\"line\">                           gDvm.dexOptMode == OPTIMIZE_MODE_FULL);</div><div class=\"line\">        <span class=\"keyword\">if</span> (!verified &amp;&amp; needVerify) &#123;</div><div class=\"line\">            ALOGV(<span class=\"string\">\"DexOpt: not optimizing '%s': not verified\"</span>,</div><div class=\"line\">                classDescriptor);</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            dvmOptimizeClass(clazz, <span class=\"literal\">false</span>);<span class=\"comment\">// 优化 Class 操作</span></div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">/* set the flag whether or not we actually changed anything */</span></div><div class=\"line\">            ((DexClassDef*)pClassDef)-&gt;accessFlags |= CLASS_ISOPTIMIZED;<span class=\"comment\">// Class被优化过后，也会打上被优化过的标记 CLASS_ISOPTIMIZED</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>dvmVerifyClass 的具体过程，源码中是这样描述的：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/*</span></div><div class=\"line\"> * Verify a class.</div><div class=\"line\"> *</div><div class=\"line\"> * By the time we get here, the value of gDvm.classVerifyMode should already</div><div class=\"line\"> * have been factored in.  If you want to call into the verifier even</div><div class=\"line\"> * though verification is disabled, that's your business.</div><div class=\"line\"> *</div><div class=\"line\"> * Returns \"true\" on success.</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">dvmVerifyClass</span><span class=\"params\">(ClassObject*clazz)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> i;</div><div class=\"line\">    <span class=\"keyword\">if</span> (dvmIsClassVerified(clazz)) &#123;</div><div class=\"line\">        ALOGD(<span class=\"string\">\"Ignoring duplicate verify attempt on %s\"</span>, clazz -&gt; descriptor);</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; clazz -&gt; directMethodCount; i++) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (!verifyMethod( &amp; clazz -&gt; directMethods[i]))&#123;</div><div class=\"line\">            LOG_VFY(<span class=\"string\">\"Verifier rejected class %s\"</span>, clazz -&gt; descriptor);</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; clazz -&gt; virtualMethodCount; i++) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (!verifyMethod( &amp; clazz -&gt; virtualMethods[i]))&#123;</div><div class=\"line\">            LOG_VFY(<span class=\"string\">\"Verifier rejected class %s\"</span>, clazz -&gt; descriptor);</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>其中，dvmVerifyClass中又去调用了 方法的校验 verifyMethod, 再去追源码：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/*</span></div><div class=\"line\"> * Perform verification on a single method.</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">bool</span> <span class=\"title\">verifyMethod</span><span class=\"params\">(Method* meth)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">bool</span> result = <span class=\"literal\">false</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/*</span></div><div class=\"line\">     * Verifier state blob.  Various values will be cached here so we</div><div class=\"line\">     * can avoid expensive lookups and pass fewer arguments around.</div><div class=\"line\">     */</div><div class=\"line\">    VerifierData vdata;</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">if</span> 1   <span class=\"comment\">// ndef NDEBUG</span></span></div><div class=\"line\">    <span class=\"built_in\">memset</span>(&amp;vdata, <span class=\"number\">0x99</span>, <span class=\"keyword\">sizeof</span>(vdata));</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></div><div class=\"line\"></div><div class=\"line\">    vdata.method = meth;</div><div class=\"line\">    vdata.insnsSize = dvmGetMethodInsnsSize(meth);</div><div class=\"line\">    vdata.insnRegCount = meth-&gt;registersSize;</div><div class=\"line\">    vdata.insnFlags = <span class=\"literal\">NULL</span>;</div><div class=\"line\">    vdata.uninitMap = <span class=\"literal\">NULL</span>;</div><div class=\"line\">    vdata.basicBlocks = <span class=\"literal\">NULL</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/*</span></div><div class=\"line\">     * If there aren't any instructions, make sure that's expected, then</div><div class=\"line\">     * exit successfully.  Note: for native methods, meth-&gt;insns gets set</div><div class=\"line\">     * to a native function pointer on first call, so don't use that as</div><div class=\"line\">     * an indicator.</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"keyword\">if</span> (vdata.insnsSize == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (!dvmIsNativeMethod(meth) &amp;&amp; !dvmIsAbstractMethod(meth)) &#123;</div><div class=\"line\">            LOG_VFY_METH(meth,</div><div class=\"line\">                <span class=\"string\">\"VFY: zero-length code in concrete non-native method\"</span>);</div><div class=\"line\">            <span class=\"keyword\">goto</span> bail;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">goto</span> success;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/*</span></div><div class=\"line\">     * Sanity-check the register counts.  ins + locals = registers, so make</div><div class=\"line\">     * sure that ins &lt;= registers.</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"keyword\">if</span> (meth-&gt;insSize &gt; meth-&gt;registersSize) &#123;</div><div class=\"line\">        LOG_VFY_METH(meth, <span class=\"string\">\"VFY: bad register counts (ins=%d regs=%d)\"</span>,</div><div class=\"line\">            meth-&gt;insSize, meth-&gt;registersSize);</div><div class=\"line\">        <span class=\"keyword\">goto</span> bail;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/*</span></div><div class=\"line\">     * Allocate and populate an array to hold instruction data.</div><div class=\"line\">     *</div><div class=\"line\">     * <span class=\"doctag\">TODO:</span> Consider keeping a reusable pre-allocated array sitting</div><div class=\"line\">     * around for smaller methods.</div><div class=\"line\">     */</div><div class=\"line\">    vdata.insnFlags = (InsnFlags*) <span class=\"built_in\">calloc</span>(vdata.insnsSize, <span class=\"keyword\">sizeof</span>(InsnFlags));</div><div class=\"line\">    <span class=\"keyword\">if</span> (vdata.insnFlags == <span class=\"literal\">NULL</span>)</div><div class=\"line\">        <span class=\"keyword\">goto</span> bail;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/*</span></div><div class=\"line\">     * Compute the width of each instruction and store the result in insnFlags.</div><div class=\"line\">     * Count up the #of occurrences of certain opcodes while we're at it.</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"keyword\">if</span> (!computeWidthsAndCountOps(&amp;vdata))</div><div class=\"line\">        <span class=\"keyword\">goto</span> bail;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/*</span></div><div class=\"line\">     * Allocate a map to hold the classes of uninitialized instances.</div><div class=\"line\">     */</div><div class=\"line\">    vdata.uninitMap = dvmCreateUninitInstanceMap(meth, vdata.insnFlags,</div><div class=\"line\">        vdata.newInstanceCount);</div><div class=\"line\">    <span class=\"keyword\">if</span> (vdata.uninitMap == <span class=\"literal\">NULL</span>)</div><div class=\"line\">        <span class=\"keyword\">goto</span> bail;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/*</span></div><div class=\"line\">     * Set the \"in try\" flags for all instructions guarded by a \"try\" block.</div><div class=\"line\">     * Also sets the \"branch target\" flag on exception handlers.</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"keyword\">if</span> (!scanTryCatchBlocks(meth, vdata.insnFlags))</div><div class=\"line\">        <span class=\"keyword\">goto</span> bail;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/*</span></div><div class=\"line\">     * Perform static instruction verification.  Also sets the \"branch</div><div class=\"line\">     * target\" flags.</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"keyword\">if</span> (!verifyInstructions(&amp;vdata))</div><div class=\"line\">        <span class=\"keyword\">goto</span> bail;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/*</span></div><div class=\"line\">     * Do code-flow analysis.</div><div class=\"line\">     *</div><div class=\"line\">     * We could probably skip this for a method with no registers, but</div><div class=\"line\">     * that's so rare that there's little point in checking.</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"keyword\">if</span> (!dvmVerifyCodeFlow(&amp;vdata)) &#123;</div><div class=\"line\">        <span class=\"comment\">//ALOGD(\"+++ %s failed code flow\", meth-&gt;name);</span></div><div class=\"line\">        <span class=\"keyword\">goto</span> bail;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">success:</div><div class=\"line\">    result = <span class=\"literal\">true</span>;</div><div class=\"line\"></div><div class=\"line\">bail:</div><div class=\"line\">    dvmFreeVfyBasicBlocks(&amp;vdata);</div><div class=\"line\">    dvmFreeUninitInstanceMap(vdata.uninitMap);</div><div class=\"line\">    <span class=\"built_in\">free</span>(vdata.insnFlags);</div><div class=\"line\">    <span class=\"keyword\">return</span> result;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>dvmVerifyClass 具体过程中，会去校验 这个 Class中的所有的 directMethod 方法，和 virtualMethod 方法。具体这些方法包含哪些呢？ 其中时包含了：</p>\n<ul>\n<li>static 方法</li>\n<li>private 方法</li>\n<li>构造方法</li>\n<li>… …</li>\n</ul>\n<p>由此可知：  如果这些方法中直接引用到的类（第一层级关系，不会进行递归搜索） 和 class (源码中的clazz) 在同一个 dex 中的话，这个类就会被打上  CLASS_ISPREVERIFY 标记</p>\n<h2 id=\"PreVerify-缘由\"><a href=\"#PreVerify-缘由\" class=\"headerlink\" title=\"PreVerify 缘由\"></a>PreVerify 缘由</h2><ul>\n<li>一方面，Dalvik 虚拟机在安装期间，为Class 打上 CLASS_ISPREVERIFIED 是为了提高性能，下次使用时，则会省去校验操作，提高访问效率。</li>\n<li>另一方面，被标上“CLASS_ISPREVERIFIED”的类，dvm在运行期载入Class时候，会对其内存中对应的直接引用类进行校验，如果该类存在与直接引用类所在的dex不是同一个，则直接报“pre-verification” 错误，该类无法加载。</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\">ClassObject* <span class=\"title\">dvmResolveClass</span><span class=\"params\">(<span class=\"keyword\">const</span> ClassObject* referrer, u4 classIdx,</span></span></div><div class=\"line\">    <span class=\"keyword\">bool</span> fromUnverifiedConstant)</div><div class=\"line\">&#123;</div><div class=\"line\">    DvmDex* pDvmDex = referrer-&gt;pDvmDex;</div><div class=\"line\">    ClassObject* resClass;</div><div class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* className;</div><div class=\"line\">    <span class=\"comment\">/*</span></div><div class=\"line\">     * Check the table first -- this gets called from the other \"resolve\"</div><div class=\"line\">     * methods.</div><div class=\"line\">     */</div><div class=\"line\">    resClass = dvmDexGetResolvedClass(pDvmDex, classIdx); <span class=\"comment\">// 预先在dex的缓存表里查</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (resClass != <span class=\"literal\">NULL</span>)</div><div class=\"line\">        <span class=\"keyword\">return</span> resClass;</div><div class=\"line\">    LOGVV(<span class=\"string\">\"--- resolving class %u (referrer=%s cl=%p)\"</span>,</div><div class=\"line\">        classIdx, referrer-&gt;descriptor, referrer-&gt;classLoader);</div><div class=\"line\">    <span class=\"comment\">/*</span></div><div class=\"line\">     * Class hasn't been loaded yet, or is in the process of being loaded</div><div class=\"line\">     * and initialized now.  Try to get a copy.  If we find one, put the</div><div class=\"line\">     * pointer in the DexTypeId.  There isn't a race condition here --</div><div class=\"line\">     * 32-bit writes are guaranteed atomic on all target platforms.  Worst</div><div class=\"line\">     * case we have two threads storing the same value.</div><div class=\"line\">     *</div><div class=\"line\">     * If this is an array class, we'll generate it here.</div><div class=\"line\">     */</div><div class=\"line\">    className = dexStringByTypeIdx(pDvmDex-&gt;pDexFile, classIdx);</div><div class=\"line\">    <span class=\"keyword\">if</span> (className[<span class=\"number\">0</span>] != <span class=\"string\">'\\0'</span> &amp;&amp; className[<span class=\"number\">1</span>] == <span class=\"string\">'\\0'</span>) &#123;</div><div class=\"line\">        <span class=\"comment\">/* primitive type */</span></div><div class=\"line\">        resClass = dvmFindPrimitiveClass(className[<span class=\"number\">0</span>]);</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        resClass = dvmFindClassNoInit(className, referrer-&gt;classLoader);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> (resClass != <span class=\"literal\">NULL</span>) &#123;</div><div class=\"line\">        <span class=\"comment\">/*</span></div><div class=\"line\">         * If the referrer was pre-verified, the resolved class must come</div><div class=\"line\">         * from the same DEX or from a bootstrap class.  The pre-verifier</div><div class=\"line\">         * makes assumptions that could be invalidated by a wacky class</div><div class=\"line\">         * loader.  (See the notes at the top of oo/Class.c.)</div><div class=\"line\">         *</div><div class=\"line\">         * The verifier does *not* fail a class for using a const-class</div><div class=\"line\">         * or instance-of instruction referring to an unresolveable class,</div><div class=\"line\">         * because the result of the instruction is simply a Class object</div><div class=\"line\">         * or boolean -- there's no need to resolve the class object during</div><div class=\"line\">         * verification.  Instance field and virtual method accesses can</div><div class=\"line\">         * break dangerously if we get the wrong class, but const-class and</div><div class=\"line\">         * instance-of are only interesting at execution time.  So, if we</div><div class=\"line\">         * we got here as part of executing one of the \"unverified class\"</div><div class=\"line\">         * instructions, we skip the additional check.</div><div class=\"line\">         *</div><div class=\"line\">         * Ditto for class references from annotations and exception</div><div class=\"line\">         * handler lists.</div><div class=\"line\">         */</div><div class=\"line\">        <span class=\"keyword\">if</span> (!fromUnverifiedConstant &amp;&amp;</div><div class=\"line\">            IS_CLASS_FLAG_SET(referrer, CLASS_ISPREVERIFIED))</div><div class=\"line\">        &#123;</div><div class=\"line\">            ClassObject* resClassCheck = resClass;</div><div class=\"line\">            <span class=\"keyword\">if</span> (dvmIsArrayClass(resClassCheck))</div><div class=\"line\">                resClassCheck = resClassCheck-&gt;elementClass;</div><div class=\"line\">            <span class=\"keyword\">if</span> (referrer-&gt;pDvmDex != resClassCheck-&gt;pDvmDex &amp;&amp;</div><div class=\"line\">                resClassCheck-&gt;classLoader != <span class=\"literal\">NULL</span>)  <span class=\"comment\">// 校验dex是否是安装时的同一个dex</span></div><div class=\"line\">            &#123;</div><div class=\"line\">                ALOGW(<span class=\"string\">\"Class resolved by unexpected DEX:\"</span></div><div class=\"line\">                     <span class=\"string\">\" %s(%p):%p ref [%s] %s(%p):%p\"</span>,</div><div class=\"line\">                    referrer-&gt;descriptor, referrer-&gt;classLoader,</div><div class=\"line\">                    referrer-&gt;pDvmDex,</div><div class=\"line\">                    resClass-&gt;descriptor, resClassCheck-&gt;descriptor,</div><div class=\"line\">                    resClassCheck-&gt;classLoader, resClassCheck-&gt;pDvmDex);</div><div class=\"line\">                ALOGW(<span class=\"string\">\"(%s had used a different %s during pre-verification)\"</span>,</div><div class=\"line\">                    referrer-&gt;descriptor, resClass-&gt;descriptor);</div><div class=\"line\">                dvmThrowIllegalAccessError(</div><div class=\"line\">                    <span class=\"string\">\"Class ref in pre-verified class resolved to unexpected \"</span></div><div class=\"line\">                    <span class=\"string\">\"implementation\"</span>);</div><div class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        LOGVV(<span class=\"string\">\"##### +ResolveClass(%s): referrer=%s dex=%p ldr=%p ref=%d\"</span>,</div><div class=\"line\">            resClass-&gt;descriptor, referrer-&gt;descriptor, referrer-&gt;pDvmDex,</div><div class=\"line\">            referrer-&gt;classLoader, classIdx);</div><div class=\"line\">        <span class=\"comment\">/*</span></div><div class=\"line\">         * Add what we found to the list so we can skip the class search</div><div class=\"line\">         * next time through.</div><div class=\"line\">         *</div><div class=\"line\">         * <span class=\"doctag\">TODO:</span> should we be doing this when fromUnverifiedConstant==true?</div><div class=\"line\">         * (see comments at top of oo/Class.c)</div><div class=\"line\">         */</div><div class=\"line\">        dvmDexSetResolvedClass(pDvmDex, classIdx, resClass);</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"comment\">/* not found, exception should be raised */</span></div><div class=\"line\">        LOGVV(<span class=\"string\">\"Class not found: %s\"</span>,</div><div class=\"line\">            dexStringByTypeIdx(pDvmDex-&gt;pDexFile, classIdx));</div><div class=\"line\">        assert(dvmCheckException(dvmThreadSelf()));</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> resClass;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>实际上，这一步dex的一致性判断，也是google为了防止外部DEX注入的一个安全方案，即保证运行期的Class与其直接引用类之间所在的DEX关系要与安装时候一致</p>\n<p><br><br>源码链接:<br><a href=\"http://osxr.org:8080/android/source/dalvik/vm/analysis/DexPrepare.cpp\" target=\"_blank\" rel=\"external\">http://osxr.org:8080/android/source/dalvik/vm/analysis/DexPrepare.cpp</a><br><a href=\"http://osxr.org:8080/android/source/dalvik/vm/analysis/DexVerify.cpp\" target=\"_blank\" rel=\"external\">http://osxr.org:8080/android/source/dalvik/vm/analysis/DexVerify.cpp</a><br><a href=\"http://osxr.org:8080/android/source/dalvik/vm/oo/Resolve.cpp\" target=\"_blank\" rel=\"external\">http://osxr.org:8080/android/source/dalvik/vm/oo/Resolve.cpp</a></p>\n","excerpt":"","more":"<h2 id=\"PreVerify（预校验）的由来\"><a href=\"#PreVerify（预校验）的由来\" class=\"headerlink\" title=\"PreVerify（预校验）的由来\"></a>PreVerify（预校验）的由来</h2><p>Dalvik 虚拟机在启动的时候，会有许多的启动参数，其中有一项就是verify，当verify被打开的时候，doVerify变量为true，则进行类的校验（dvmVerifyClass方法调用）。若校验成功，则这个类会被打上标记：CLASS_ISPREVERIFIED。<br>上面描述的过程是dex -&gt; odex (dexopt 过程)时，做的一个优化。当从classes.dex 变为 odex 后，才会被拿去执行。</p>\n<h2 id=\"Class-被-Preverify-的过程\"><a href=\"#Class-被-Preverify-的过程\" class=\"headerlink\" title=\"Class 被 Preverify 的过程\"></a>Class 被 Preverify 的过程</h2><p>在dex 被 dexopt 的过程中，源码中有校验和优化 Class 相关的操作：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/*</div><div class=\"line\"> * Verify and/or optimize a specific class.</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">verifyAndOptimizeClass</span><span class=\"params\">(DexFile* pDexFile, ClassObject* clazz,</div><div class=\"line\">    <span class=\"keyword\">const</span> DexClassDef* pClassDef, <span class=\"keyword\">bool</span> doVerify, <span class=\"keyword\">bool</span> doOpt)</span></div><div class=\"line\"></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* classDescriptor;</div><div class=\"line\">    <span class=\"keyword\">bool</span> verified = <span class=\"literal\">false</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (clazz-&gt;pDvmDex-&gt;pDexFile != pDexFile) &#123;</div><div class=\"line\">        <span class=\"comment\">/*</div><div class=\"line\">         * The current DEX file defined a class that is also present in the</div><div class=\"line\">         * bootstrap class path.  The class loader favored the bootstrap</div><div class=\"line\">         * version, which means that we have a pointer to a class that is</div><div class=\"line\">         * (a) not the one we want to examine, and (b) mapped read-only,</div><div class=\"line\">         * so we will seg fault if we try to rewrite instructions inside it.</div><div class=\"line\">         */</span></div><div class=\"line\">        ALOGD(<span class=\"string\">\"DexOpt: not verifying/optimizing '%s': multiple definitions\"</span>,</div><div class=\"line\">            clazz-&gt;descriptor);</div><div class=\"line\">        <span class=\"keyword\">return</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    classDescriptor = dexStringByTypeIdx(pDexFile, pClassDef-&gt;classIdx);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/*</div><div class=\"line\">     * First, try to verify it.</div><div class=\"line\">     */</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (doVerify) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (dvmVerifyClass(clazz)) &#123;</div><div class=\"line\">            <span class=\"comment\">/*</div><div class=\"line\">             * Set the \"is preverified\" flag in the DexClassDef.  We</div><div class=\"line\">             * do it here, rather than in the ClassObject structure,</div><div class=\"line\">             * because the DexClassDef is part of the odex file.</div><div class=\"line\">             */</span></div><div class=\"line\">            assert((clazz-&gt;accessFlags &amp; JAVA_FLAGS_MASK) ==</div><div class=\"line\">                pClassDef-&gt;accessFlags);</div><div class=\"line\">            ((DexClassDef*)pClassDef)-&gt;accessFlags |= CLASS_ISPREVERIFIED;</div><div class=\"line\">            verified = <span class=\"literal\">true</span>;</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"comment\">// <span class=\"doctag\">TODO:</span> log when in verbose mode</span></div><div class=\"line\">            ALOGV(<span class=\"string\">\"DexOpt: '%s' failed verification\"</span>, classDescriptor);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (doOpt) &#123;</div><div class=\"line\">        <span class=\"keyword\">bool</span> needVerify = (gDvm.dexOptMode == OPTIMIZE_MODE_VERIFIED ||</div><div class=\"line\">                           gDvm.dexOptMode == OPTIMIZE_MODE_FULL);</div><div class=\"line\">        <span class=\"keyword\">if</span> (!verified &amp;&amp; needVerify) &#123;</div><div class=\"line\">            ALOGV(<span class=\"string\">\"DexOpt: not optimizing '%s': not verified\"</span>,</div><div class=\"line\">                classDescriptor);</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            dvmOptimizeClass(clazz, <span class=\"literal\">false</span>);<span class=\"comment\">// 优化 Class 操作</span></div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">/* set the flag whether or not we actually changed anything */</span></div><div class=\"line\">            ((DexClassDef*)pClassDef)-&gt;accessFlags |= CLASS_ISOPTIMIZED;<span class=\"comment\">// Class被优化过后，也会打上被优化过的标记 CLASS_ISOPTIMIZED</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>dvmVerifyClass 的具体过程，源码中是这样描述的：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/*</div><div class=\"line\"> * Verify a class.</div><div class=\"line\"> *</div><div class=\"line\"> * By the time we get here, the value of gDvm.classVerifyMode should already</div><div class=\"line\"> * have been factored in.  If you want to call into the verifier even</div><div class=\"line\"> * though verification is disabled, that's your business.</div><div class=\"line\"> *</div><div class=\"line\"> * Returns \"true\" on success.</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">dvmVerifyClass</span><span class=\"params\">(ClassObject*clazz)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> i;</div><div class=\"line\">    <span class=\"keyword\">if</span> (dvmIsClassVerified(clazz)) &#123;</div><div class=\"line\">        ALOGD(<span class=\"string\">\"Ignoring duplicate verify attempt on %s\"</span>, clazz -&gt; descriptor);</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; clazz -&gt; directMethodCount; i++) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (!verifyMethod( &amp; clazz -&gt; directMethods[i]))&#123;</div><div class=\"line\">            LOG_VFY(<span class=\"string\">\"Verifier rejected class %s\"</span>, clazz -&gt; descriptor);</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; clazz -&gt; virtualMethodCount; i++) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (!verifyMethod( &amp; clazz -&gt; virtualMethods[i]))&#123;</div><div class=\"line\">            LOG_VFY(<span class=\"string\">\"Verifier rejected class %s\"</span>, clazz -&gt; descriptor);</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>其中，dvmVerifyClass中又去调用了 方法的校验 verifyMethod, 再去追源码：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/*</div><div class=\"line\"> * Perform verification on a single method.</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">bool</span> <span class=\"title\">verifyMethod</span><span class=\"params\">(Method* meth)</span></div><div class=\"line\"></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">bool</span> result = <span class=\"literal\">false</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/*</div><div class=\"line\">     * Verifier state blob.  Various values will be cached here so we</div><div class=\"line\">     * can avoid expensive lookups and pass fewer arguments around.</div><div class=\"line\">     */</span></div><div class=\"line\">    VerifierData vdata;</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">if</span> 1   <span class=\"comment\">// ndef NDEBUG</span></span></div><div class=\"line\">    <span class=\"built_in\">memset</span>(&amp;vdata, <span class=\"number\">0x99</span>, <span class=\"keyword\">sizeof</span>(vdata));</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></div><div class=\"line\"></div><div class=\"line\">    vdata.method = meth;</div><div class=\"line\">    vdata.insnsSize = dvmGetMethodInsnsSize(meth);</div><div class=\"line\">    vdata.insnRegCount = meth-&gt;registersSize;</div><div class=\"line\">    vdata.insnFlags = <span class=\"literal\">NULL</span>;</div><div class=\"line\">    vdata.uninitMap = <span class=\"literal\">NULL</span>;</div><div class=\"line\">    vdata.basicBlocks = <span class=\"literal\">NULL</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/*</div><div class=\"line\">     * If there aren't any instructions, make sure that's expected, then</div><div class=\"line\">     * exit successfully.  Note: for native methods, meth-&gt;insns gets set</div><div class=\"line\">     * to a native function pointer on first call, so don't use that as</div><div class=\"line\">     * an indicator.</div><div class=\"line\">     */</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (vdata.insnsSize == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (!dvmIsNativeMethod(meth) &amp;&amp; !dvmIsAbstractMethod(meth)) &#123;</div><div class=\"line\">            LOG_VFY_METH(meth,</div><div class=\"line\">                <span class=\"string\">\"VFY: zero-length code in concrete non-native method\"</span>);</div><div class=\"line\">            <span class=\"keyword\">goto</span> bail;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">goto</span> success;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/*</div><div class=\"line\">     * Sanity-check the register counts.  ins + locals = registers, so make</div><div class=\"line\">     * sure that ins &lt;= registers.</div><div class=\"line\">     */</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (meth-&gt;insSize &gt; meth-&gt;registersSize) &#123;</div><div class=\"line\">        LOG_VFY_METH(meth, <span class=\"string\">\"VFY: bad register counts (ins=%d regs=%d)\"</span>,</div><div class=\"line\">            meth-&gt;insSize, meth-&gt;registersSize);</div><div class=\"line\">        <span class=\"keyword\">goto</span> bail;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/*</div><div class=\"line\">     * Allocate and populate an array to hold instruction data.</div><div class=\"line\">     *</div><div class=\"line\">     * <span class=\"doctag\">TODO:</span> Consider keeping a reusable pre-allocated array sitting</div><div class=\"line\">     * around for smaller methods.</div><div class=\"line\">     */</span></div><div class=\"line\">    vdata.insnFlags = (InsnFlags*) <span class=\"built_in\">calloc</span>(vdata.insnsSize, <span class=\"keyword\">sizeof</span>(InsnFlags));</div><div class=\"line\">    <span class=\"keyword\">if</span> (vdata.insnFlags == <span class=\"literal\">NULL</span>)</div><div class=\"line\">        <span class=\"keyword\">goto</span> bail;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/*</div><div class=\"line\">     * Compute the width of each instruction and store the result in insnFlags.</div><div class=\"line\">     * Count up the #of occurrences of certain opcodes while we're at it.</div><div class=\"line\">     */</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (!computeWidthsAndCountOps(&amp;vdata))</div><div class=\"line\">        <span class=\"keyword\">goto</span> bail;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/*</div><div class=\"line\">     * Allocate a map to hold the classes of uninitialized instances.</div><div class=\"line\">     */</span></div><div class=\"line\">    vdata.uninitMap = dvmCreateUninitInstanceMap(meth, vdata.insnFlags,</div><div class=\"line\">        vdata.newInstanceCount);</div><div class=\"line\">    <span class=\"keyword\">if</span> (vdata.uninitMap == <span class=\"literal\">NULL</span>)</div><div class=\"line\">        <span class=\"keyword\">goto</span> bail;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/*</div><div class=\"line\">     * Set the \"in try\" flags for all instructions guarded by a \"try\" block.</div><div class=\"line\">     * Also sets the \"branch target\" flag on exception handlers.</div><div class=\"line\">     */</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (!scanTryCatchBlocks(meth, vdata.insnFlags))</div><div class=\"line\">        <span class=\"keyword\">goto</span> bail;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/*</div><div class=\"line\">     * Perform static instruction verification.  Also sets the \"branch</div><div class=\"line\">     * target\" flags.</div><div class=\"line\">     */</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (!verifyInstructions(&amp;vdata))</div><div class=\"line\">        <span class=\"keyword\">goto</span> bail;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/*</div><div class=\"line\">     * Do code-flow analysis.</div><div class=\"line\">     *</div><div class=\"line\">     * We could probably skip this for a method with no registers, but</div><div class=\"line\">     * that's so rare that there's little point in checking.</div><div class=\"line\">     */</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (!dvmVerifyCodeFlow(&amp;vdata)) &#123;</div><div class=\"line\">        <span class=\"comment\">//ALOGD(\"+++ %s failed code flow\", meth-&gt;name);</span></div><div class=\"line\">        <span class=\"keyword\">goto</span> bail;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">success:</div><div class=\"line\">    result = <span class=\"literal\">true</span>;</div><div class=\"line\"></div><div class=\"line\">bail:</div><div class=\"line\">    dvmFreeVfyBasicBlocks(&amp;vdata);</div><div class=\"line\">    dvmFreeUninitInstanceMap(vdata.uninitMap);</div><div class=\"line\">    <span class=\"built_in\">free</span>(vdata.insnFlags);</div><div class=\"line\">    <span class=\"keyword\">return</span> result;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>dvmVerifyClass 具体过程中，会去校验 这个 Class中的所有的 directMethod 方法，和 virtualMethod 方法。具体这些方法包含哪些呢？ 其中时包含了：</p>\n<ul>\n<li>static 方法</li>\n<li>private 方法</li>\n<li>构造方法</li>\n<li>… …</li>\n</ul>\n<p>由此可知：  如果这些方法中直接引用到的类（第一层级关系，不会进行递归搜索） 和 class (源码中的clazz) 在同一个 dex 中的话，这个类就会被打上  CLASS_ISPREVERIFY 标记</p>\n<h2 id=\"PreVerify-缘由\"><a href=\"#PreVerify-缘由\" class=\"headerlink\" title=\"PreVerify 缘由\"></a>PreVerify 缘由</h2><ul>\n<li>一方面，Dalvik 虚拟机在安装期间，为Class 打上 CLASS_ISPREVERIFIED 是为了提高性能，下次使用时，则会省去校验操作，提高访问效率。</li>\n<li>另一方面，被标上“CLASS_ISPREVERIFIED”的类，dvm在运行期载入Class时候，会对其内存中对应的直接引用类进行校验，如果该类存在与直接引用类所在的dex不是同一个，则直接报“pre-verification” 错误，该类无法加载。</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\">ClassObject* <span class=\"title\">dvmResolveClass</span><span class=\"params\">(<span class=\"keyword\">const</span> ClassObject* referrer, u4 classIdx,</div><div class=\"line\">    <span class=\"keyword\">bool</span> fromUnverifiedConstant)</span></div><div class=\"line\"></span>&#123;</div><div class=\"line\">    DvmDex* pDvmDex = referrer-&gt;pDvmDex;</div><div class=\"line\">    ClassObject* resClass;</div><div class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* className;</div><div class=\"line\">    <span class=\"comment\">/*</div><div class=\"line\">     * Check the table first -- this gets called from the other \"resolve\"</div><div class=\"line\">     * methods.</div><div class=\"line\">     */</span></div><div class=\"line\">    resClass = dvmDexGetResolvedClass(pDvmDex, classIdx); <span class=\"comment\">// 预先在dex的缓存表里查</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (resClass != <span class=\"literal\">NULL</span>)</div><div class=\"line\">        <span class=\"keyword\">return</span> resClass;</div><div class=\"line\">    LOGVV(<span class=\"string\">\"--- resolving class %u (referrer=%s cl=%p)\"</span>,</div><div class=\"line\">        classIdx, referrer-&gt;descriptor, referrer-&gt;classLoader);</div><div class=\"line\">    <span class=\"comment\">/*</div><div class=\"line\">     * Class hasn't been loaded yet, or is in the process of being loaded</div><div class=\"line\">     * and initialized now.  Try to get a copy.  If we find one, put the</div><div class=\"line\">     * pointer in the DexTypeId.  There isn't a race condition here --</div><div class=\"line\">     * 32-bit writes are guaranteed atomic on all target platforms.  Worst</div><div class=\"line\">     * case we have two threads storing the same value.</div><div class=\"line\">     *</div><div class=\"line\">     * If this is an array class, we'll generate it here.</div><div class=\"line\">     */</span></div><div class=\"line\">    className = dexStringByTypeIdx(pDvmDex-&gt;pDexFile, classIdx);</div><div class=\"line\">    <span class=\"keyword\">if</span> (className[<span class=\"number\">0</span>] != <span class=\"string\">'\\0'</span> &amp;&amp; className[<span class=\"number\">1</span>] == <span class=\"string\">'\\0'</span>) &#123;</div><div class=\"line\">        <span class=\"comment\">/* primitive type */</span></div><div class=\"line\">        resClass = dvmFindPrimitiveClass(className[<span class=\"number\">0</span>]);</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        resClass = dvmFindClassNoInit(className, referrer-&gt;classLoader);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> (resClass != <span class=\"literal\">NULL</span>) &#123;</div><div class=\"line\">        <span class=\"comment\">/*</div><div class=\"line\">         * If the referrer was pre-verified, the resolved class must come</div><div class=\"line\">         * from the same DEX or from a bootstrap class.  The pre-verifier</div><div class=\"line\">         * makes assumptions that could be invalidated by a wacky class</div><div class=\"line\">         * loader.  (See the notes at the top of oo/Class.c.)</div><div class=\"line\">         *</div><div class=\"line\">         * The verifier does *not* fail a class for using a const-class</div><div class=\"line\">         * or instance-of instruction referring to an unresolveable class,</div><div class=\"line\">         * because the result of the instruction is simply a Class object</div><div class=\"line\">         * or boolean -- there's no need to resolve the class object during</div><div class=\"line\">         * verification.  Instance field and virtual method accesses can</div><div class=\"line\">         * break dangerously if we get the wrong class, but const-class and</div><div class=\"line\">         * instance-of are only interesting at execution time.  So, if we</div><div class=\"line\">         * we got here as part of executing one of the \"unverified class\"</div><div class=\"line\">         * instructions, we skip the additional check.</div><div class=\"line\">         *</div><div class=\"line\">         * Ditto for class references from annotations and exception</div><div class=\"line\">         * handler lists.</div><div class=\"line\">         */</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (!fromUnverifiedConstant &amp;&amp;</div><div class=\"line\">            IS_CLASS_FLAG_SET(referrer, CLASS_ISPREVERIFIED))</div><div class=\"line\">        &#123;</div><div class=\"line\">            ClassObject* resClassCheck = resClass;</div><div class=\"line\">            <span class=\"keyword\">if</span> (dvmIsArrayClass(resClassCheck))</div><div class=\"line\">                resClassCheck = resClassCheck-&gt;elementClass;</div><div class=\"line\">            <span class=\"keyword\">if</span> (referrer-&gt;pDvmDex != resClassCheck-&gt;pDvmDex &amp;&amp;</div><div class=\"line\">                resClassCheck-&gt;classLoader != <span class=\"literal\">NULL</span>)  <span class=\"comment\">// 校验dex是否是安装时的同一个dex</span></div><div class=\"line\">            &#123;</div><div class=\"line\">                ALOGW(<span class=\"string\">\"Class resolved by unexpected DEX:\"</span></div><div class=\"line\">                     <span class=\"string\">\" %s(%p):%p ref [%s] %s(%p):%p\"</span>,</div><div class=\"line\">                    referrer-&gt;descriptor, referrer-&gt;classLoader,</div><div class=\"line\">                    referrer-&gt;pDvmDex,</div><div class=\"line\">                    resClass-&gt;descriptor, resClassCheck-&gt;descriptor,</div><div class=\"line\">                    resClassCheck-&gt;classLoader, resClassCheck-&gt;pDvmDex);</div><div class=\"line\">                ALOGW(<span class=\"string\">\"(%s had used a different %s during pre-verification)\"</span>,</div><div class=\"line\">                    referrer-&gt;descriptor, resClass-&gt;descriptor);</div><div class=\"line\">                dvmThrowIllegalAccessError(</div><div class=\"line\">                    <span class=\"string\">\"Class ref in pre-verified class resolved to unexpected \"</span></div><div class=\"line\">                    <span class=\"string\">\"implementation\"</span>);</div><div class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        LOGVV(<span class=\"string\">\"##### +ResolveClass(%s): referrer=%s dex=%p ldr=%p ref=%d\"</span>,</div><div class=\"line\">            resClass-&gt;descriptor, referrer-&gt;descriptor, referrer-&gt;pDvmDex,</div><div class=\"line\">            referrer-&gt;classLoader, classIdx);</div><div class=\"line\">        <span class=\"comment\">/*</div><div class=\"line\">         * Add what we found to the list so we can skip the class search</div><div class=\"line\">         * next time through.</div><div class=\"line\">         *</div><div class=\"line\">         * <span class=\"doctag\">TODO:</span> should we be doing this when fromUnverifiedConstant==true?</div><div class=\"line\">         * (see comments at top of oo/Class.c)</div><div class=\"line\">         */</span></div><div class=\"line\">        dvmDexSetResolvedClass(pDvmDex, classIdx, resClass);</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"comment\">/* not found, exception should be raised */</span></div><div class=\"line\">        LOGVV(<span class=\"string\">\"Class not found: %s\"</span>,</div><div class=\"line\">            dexStringByTypeIdx(pDvmDex-&gt;pDexFile, classIdx));</div><div class=\"line\">        assert(dvmCheckException(dvmThreadSelf()));</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> resClass;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>实际上，这一步dex的一致性判断，也是google为了防止外部DEX注入的一个安全方案，即保证运行期的Class与其直接引用类之间所在的DEX关系要与安装时候一致</p>\n<p><br><br>源码链接:<br><a href=\"http://osxr.org:8080/android/source/dalvik/vm/analysis/DexPrepare.cpp\">http://osxr.org:8080/android/source/dalvik/vm/analysis/DexPrepare.cpp</a><br><a href=\"http://osxr.org:8080/android/source/dalvik/vm/analysis/DexVerify.cpp\">http://osxr.org:8080/android/source/dalvik/vm/analysis/DexVerify.cpp</a><br><a href=\"http://osxr.org:8080/android/source/dalvik/vm/oo/Resolve.cpp\">http://osxr.org:8080/android/source/dalvik/vm/oo/Resolve.cpp</a></p>\n"}],"Post":[{"title":"Android SingleTask 探究","date":"2016-05-16T03:12:00.000Z","_content":"> Android 4种启动模式来说，用法说明此处不再提及主要介绍SingleTop，SingleTask相关的问题\n\n### 说明\n\n* 先分析 官方文档 中的一段话：\n\n    > As shown in the table above, standard is the default mode and is appropriate for most types of activities. SingleTop is also a common and useful launch mode for many types of activities. The other modes — singleTask and singleInstance — <font color=\"red\">are not appropriate for most applications</font>, since they result in an interaction model that is likely to be unfamiliar to users and is very different from most other applications.\n\n&emsp;&emsp;对于大多数应用来说，SingleTask 和 SingleInstance 并不适用，standrd 和 SingleTop对于普通的大部分Activity启动是适用的。\n之所以使用singleTask，是存在这样一类问题，想要从后面的Activity 直接跳转到前面某一个Activity时，可能会采用的，如一个应用的MainActivity，LoginActivity等。\n\n&emsp;&emsp;对于SingleTask模式，官方文档的这么一句话，坑了不少人（我还比较幸运，没被坑惨）,也带给我对之前知识的迷惑。\n> The system creates a new task and instantiates the activity at the root of the new task\n\n&emsp;&emsp;**其实事实根本不是这样的**！！！\n\n### 场景复现\n\n* 下面用代码事实说话：建立3个Activity，分别为Main1Activity、Main2Activity、Main3Activity，前两个都设定单击事件，跳转逻辑为：main1 -> main2 -> main3，其中 Main2Activity 为 SingleTask（AndroidManifest.xml中设置）。打印相应的生命周期方法和所在的 **taskId**\n\n    ![](http://7xr1vo.com1.z0.glb.clouddn.com/SingleTask%20%E5%9B%BE1.png)\n\n\n&emsp;&emsp;这些taskid都是一样的，所以它们都是同一个Task中的。事实胜于雄辩。然后搜了一下相关问题，老罗的博客还是给力，彻彻底底的分析了这个坑。致谢老罗的开源精神！\n&emsp;&emsp;链接：[http://blog.csdn.net/luoshengyang/article/details/6714543](http://blog.csdn.net/luoshengyang/article/details/6714543)\n\n* 同时为了解释项目中类似的一个页面跳转问题，对于上面的demo做了修改：\n    \n    将 Main1Activity 设置为 SingleTask，其余2个为standrd\n    \n    操作步骤：\n    1. 点击图标启动此应用\n    2. 依次点击进入 Main2，Main3，再点击Home键\n    3. 点击应用图标重新进入\n\n    操作结果：结果再次显示的是Main1Activity，而不是Main3Activity。\n\n    先看看打印的日志：\n    \n    ![](http://7xr1vo.com1.z0.glb.clouddn.com/SingleTask%E5%9B%BE2.png)\n    \n    再次点击图标进入应用时，实际上是Main2Activity，Main3Activity 出栈了。\n    分析下这个过程：\n    \n    Main1，Main2，Main3 依次压入栈中，然后 Home 键，则整个Task处于stop状态，是一个background Task。当再次点击应用图标时，系统检测到此时已经存在一个该应用的Task的，此时就将此Background Task 移至前台，成为Foreground Task，而且由于Main1Activity是SingleTask，且位于task底部，所以，再次启动时，将前两个Activity移除，且按照启动顺序依次移除，所以打出的日志是：Main2 desotry，Main3 destory，Main1 onResume。\n    \n    * **看来，SingleTask这种特殊的模式引起的Task内Activity的变化是值得注意的**\n\n    之前我在Stackoverflow上问相关的问题，和我猜想的原因比较类似，链接如下：\n        \n    [http://stackoverflow.com/questions/36933755/activity-is-singletask-and-is-root-in-task-restrart-activity-of-top-is-destorye](http://stackoverflow.com/questions/36933755/activity-is-singletask-and-is-root-in-task-restrart-activity-of-top-is-destorye) （可供参考）\n\n那么，如何才能在一个新的任务栈里创建新的Activity呢？\n\n* 只需要在AndroidManifest.xml中配置即可\n    \n    在SingleTask的基础之上，再增加设置 **taskAffinify** 属性即可，默认情况下，taskAffinity属性值为 包名，所以可以自定义一个taskAffinity值，便可以实现一个新的Task,新的Activity处于这个新的Task的root。如，我的 Demo 代码如下：\n    \n    ![](http://7xr1vo.com1.z0.glb.clouddn.com/SingleTask%E5%9B%BE3.png)\n\n### 总结\n* SingleTask的启动模式并不会启动一个新的任务栈来承载Activity，而是在原来的Task中\n* SingleTask的启动模式，在官方文档的说明中，日常开发中并不建议使用，SingleInstance更是如此。\n* Activity的启动模式会带来的Task的变化和Activity的生命周期变化都会在ActivityRecord中体现的，通过源码分析可以发现。\n* 通过以下命令，可以查看Task内的Activity的变化：\n\n        adb shell dumpsys activity  获取所有应用的activity堆栈信息\n        adb shell dumpsys activity | grep com.xxx.xxx.xxx   获取某个应用的activity 堆栈信息\n        adb shell dumpsys activity | grep mFocusedActivity  获取处于栈顶的Activity\n\n* [http://blog.piasy.com/2016/03/19/Android-Task-And-Back-Stack/](http://blog.piasy.com/2016/03/19/Android-Task-And-Back-Stack/) (写完此文后，发现有高人已经写得很全面很详尽了)","source":"_posts/Android SingleTask 探究.md","raw":"---\ntitle: Android SingleTask 探究\ndate: 2016-05-16 11:12\ncategories: Android \ntags: SingleTask\n---\n> Android 4种启动模式来说，用法说明此处不再提及主要介绍SingleTop，SingleTask相关的问题\n\n### 说明\n\n* 先分析 官方文档 中的一段话：\n\n    > As shown in the table above, standard is the default mode and is appropriate for most types of activities. SingleTop is also a common and useful launch mode for many types of activities. The other modes — singleTask and singleInstance — <font color=\"red\">are not appropriate for most applications</font>, since they result in an interaction model that is likely to be unfamiliar to users and is very different from most other applications.\n\n&emsp;&emsp;对于大多数应用来说，SingleTask 和 SingleInstance 并不适用，standrd 和 SingleTop对于普通的大部分Activity启动是适用的。\n之所以使用singleTask，是存在这样一类问题，想要从后面的Activity 直接跳转到前面某一个Activity时，可能会采用的，如一个应用的MainActivity，LoginActivity等。\n\n&emsp;&emsp;对于SingleTask模式，官方文档的这么一句话，坑了不少人（我还比较幸运，没被坑惨）,也带给我对之前知识的迷惑。\n> The system creates a new task and instantiates the activity at the root of the new task\n\n&emsp;&emsp;**其实事实根本不是这样的**！！！\n\n### 场景复现\n\n* 下面用代码事实说话：建立3个Activity，分别为Main1Activity、Main2Activity、Main3Activity，前两个都设定单击事件，跳转逻辑为：main1 -> main2 -> main3，其中 Main2Activity 为 SingleTask（AndroidManifest.xml中设置）。打印相应的生命周期方法和所在的 **taskId**\n\n    ![](http://7xr1vo.com1.z0.glb.clouddn.com/SingleTask%20%E5%9B%BE1.png)\n\n\n&emsp;&emsp;这些taskid都是一样的，所以它们都是同一个Task中的。事实胜于雄辩。然后搜了一下相关问题，老罗的博客还是给力，彻彻底底的分析了这个坑。致谢老罗的开源精神！\n&emsp;&emsp;链接：[http://blog.csdn.net/luoshengyang/article/details/6714543](http://blog.csdn.net/luoshengyang/article/details/6714543)\n\n* 同时为了解释项目中类似的一个页面跳转问题，对于上面的demo做了修改：\n    \n    将 Main1Activity 设置为 SingleTask，其余2个为standrd\n    \n    操作步骤：\n    1. 点击图标启动此应用\n    2. 依次点击进入 Main2，Main3，再点击Home键\n    3. 点击应用图标重新进入\n\n    操作结果：结果再次显示的是Main1Activity，而不是Main3Activity。\n\n    先看看打印的日志：\n    \n    ![](http://7xr1vo.com1.z0.glb.clouddn.com/SingleTask%E5%9B%BE2.png)\n    \n    再次点击图标进入应用时，实际上是Main2Activity，Main3Activity 出栈了。\n    分析下这个过程：\n    \n    Main1，Main2，Main3 依次压入栈中，然后 Home 键，则整个Task处于stop状态，是一个background Task。当再次点击应用图标时，系统检测到此时已经存在一个该应用的Task的，此时就将此Background Task 移至前台，成为Foreground Task，而且由于Main1Activity是SingleTask，且位于task底部，所以，再次启动时，将前两个Activity移除，且按照启动顺序依次移除，所以打出的日志是：Main2 desotry，Main3 destory，Main1 onResume。\n    \n    * **看来，SingleTask这种特殊的模式引起的Task内Activity的变化是值得注意的**\n\n    之前我在Stackoverflow上问相关的问题，和我猜想的原因比较类似，链接如下：\n        \n    [http://stackoverflow.com/questions/36933755/activity-is-singletask-and-is-root-in-task-restrart-activity-of-top-is-destorye](http://stackoverflow.com/questions/36933755/activity-is-singletask-and-is-root-in-task-restrart-activity-of-top-is-destorye) （可供参考）\n\n那么，如何才能在一个新的任务栈里创建新的Activity呢？\n\n* 只需要在AndroidManifest.xml中配置即可\n    \n    在SingleTask的基础之上，再增加设置 **taskAffinify** 属性即可，默认情况下，taskAffinity属性值为 包名，所以可以自定义一个taskAffinity值，便可以实现一个新的Task,新的Activity处于这个新的Task的root。如，我的 Demo 代码如下：\n    \n    ![](http://7xr1vo.com1.z0.glb.clouddn.com/SingleTask%E5%9B%BE3.png)\n\n### 总结\n* SingleTask的启动模式并不会启动一个新的任务栈来承载Activity，而是在原来的Task中\n* SingleTask的启动模式，在官方文档的说明中，日常开发中并不建议使用，SingleInstance更是如此。\n* Activity的启动模式会带来的Task的变化和Activity的生命周期变化都会在ActivityRecord中体现的，通过源码分析可以发现。\n* 通过以下命令，可以查看Task内的Activity的变化：\n\n        adb shell dumpsys activity  获取所有应用的activity堆栈信息\n        adb shell dumpsys activity | grep com.xxx.xxx.xxx   获取某个应用的activity 堆栈信息\n        adb shell dumpsys activity | grep mFocusedActivity  获取处于栈顶的Activity\n\n* [http://blog.piasy.com/2016/03/19/Android-Task-And-Back-Stack/](http://blog.piasy.com/2016/03/19/Android-Task-And-Back-Stack/) (写完此文后，发现有高人已经写得很全面很详尽了)","slug":"Android SingleTask 探究","published":1,"updated":"2017-01-19T08:20:55.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cizpjnf1o0001baqwev5rauix","content":"<blockquote>\n<p>Android 4种启动模式来说，用法说明此处不再提及主要介绍SingleTop，SingleTask相关的问题</p>\n</blockquote>\n<h3 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h3><ul>\n<li><p>先分析 官方文档 中的一段话：</p>\n<blockquote>\n<p>As shown in the table above, standard is the default mode and is appropriate for most types of activities. SingleTop is also a common and useful launch mode for many types of activities. The other modes — singleTask and singleInstance — <font color=\"red\">are not appropriate for most applications</font>, since they result in an interaction model that is likely to be unfamiliar to users and is very different from most other applications.</p>\n</blockquote>\n</li>\n</ul>\n<p>&emsp;&emsp;对于大多数应用来说，SingleTask 和 SingleInstance 并不适用，standrd 和 SingleTop对于普通的大部分Activity启动是适用的。<br>之所以使用singleTask，是存在这样一类问题，想要从后面的Activity 直接跳转到前面某一个Activity时，可能会采用的，如一个应用的MainActivity，LoginActivity等。</p>\n<p>&emsp;&emsp;对于SingleTask模式，官方文档的这么一句话，坑了不少人（我还比较幸运，没被坑惨）,也带给我对之前知识的迷惑。</p>\n<blockquote>\n<p>The system creates a new task and instantiates the activity at the root of the new task</p>\n</blockquote>\n<p>&emsp;&emsp;<strong>其实事实根本不是这样的</strong>！！！</p>\n<h3 id=\"场景复现\"><a href=\"#场景复现\" class=\"headerlink\" title=\"场景复现\"></a>场景复现</h3><ul>\n<li><p>下面用代码事实说话：建立3个Activity，分别为Main1Activity、Main2Activity、Main3Activity，前两个都设定单击事件，跳转逻辑为：main1 -&gt; main2 -&gt; main3，其中 Main2Activity 为 SingleTask（AndroidManifest.xml中设置）。打印相应的生命周期方法和所在的 <strong>taskId</strong></p>\n<p>  <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/SingleTask%20%E5%9B%BE1.png\" alt=\"\"></p>\n</li>\n</ul>\n<p>&emsp;&emsp;这些taskid都是一样的，所以它们都是同一个Task中的。事实胜于雄辩。然后搜了一下相关问题，老罗的博客还是给力，彻彻底底的分析了这个坑。致谢老罗的开源精神！<br>&emsp;&emsp;链接：<a href=\"http://blog.csdn.net/luoshengyang/article/details/6714543\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/luoshengyang/article/details/6714543</a></p>\n<ul>\n<li><p>同时为了解释项目中类似的一个页面跳转问题，对于上面的demo做了修改：</p>\n<p>  将 Main1Activity 设置为 SingleTask，其余2个为standrd</p>\n<p>  操作步骤：</p>\n<ol>\n<li>点击图标启动此应用</li>\n<li>依次点击进入 Main2，Main3，再点击Home键</li>\n<li><p>点击应用图标重新进入</p>\n<p>操作结果：结果再次显示的是Main1Activity，而不是Main3Activity。</p>\n<p>先看看打印的日志：</p>\n<p><img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/SingleTask%E5%9B%BE2.png\" alt=\"\"></p>\n<p>再次点击图标进入应用时，实际上是Main2Activity，Main3Activity 出栈了。<br>分析下这个过程：</p>\n<p>Main1，Main2，Main3 依次压入栈中，然后 Home 键，则整个Task处于stop状态，是一个background Task。当再次点击应用图标时，系统检测到此时已经存在一个该应用的Task的，此时就将此Background Task 移至前台，成为Foreground Task，而且由于Main1Activity是SingleTask，且位于task底部，所以，再次启动时，将前两个Activity移除，且按照启动顺序依次移除，所以打出的日志是：Main2 desotry，Main3 destory，Main1 onResume。</p>\n</li>\n</ol>\n<ul>\n<li><p><strong>看来，SingleTask这种特殊的模式引起的Task内Activity的变化是值得注意的</strong></p>\n<p>之前我在Stackoverflow上问相关的问题，和我猜想的原因比较类似，链接如下：</p>\n<p><a href=\"http://stackoverflow.com/questions/36933755/activity-is-singletask-and-is-root-in-task-restrart-activity-of-top-is-destorye\" target=\"_blank\" rel=\"external\">http://stackoverflow.com/questions/36933755/activity-is-singletask-and-is-root-in-task-restrart-activity-of-top-is-destorye</a> （可供参考）</p>\n</li>\n</ul>\n</li>\n</ul>\n<p>那么，如何才能在一个新的任务栈里创建新的Activity呢？</p>\n<ul>\n<li><p>只需要在AndroidManifest.xml中配置即可</p>\n<p>  在SingleTask的基础之上，再增加设置 <strong>taskAffinify</strong> 属性即可，默认情况下，taskAffinity属性值为 包名，所以可以自定义一个taskAffinity值，便可以实现一个新的Task,新的Activity处于这个新的Task的root。如，我的 Demo 代码如下：</p>\n<p>  <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/SingleTask%E5%9B%BE3.png\" alt=\"\"></p>\n</li>\n</ul>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><ul>\n<li>SingleTask的启动模式并不会启动一个新的任务栈来承载Activity，而是在原来的Task中</li>\n<li>SingleTask的启动模式，在官方文档的说明中，日常开发中并不建议使用，SingleInstance更是如此。</li>\n<li>Activity的启动模式会带来的Task的变化和Activity的生命周期变化都会在ActivityRecord中体现的，通过源码分析可以发现。</li>\n<li><p>通过以下命令，可以查看Task内的Activity的变化：</p>\n<pre><code>adb shell dumpsys activity  获取所有应用的activity堆栈信息\nadb shell dumpsys activity | grep com.xxx.xxx.xxx   获取某个应用的activity 堆栈信息\nadb shell dumpsys activity | grep mFocusedActivity  获取处于栈顶的Activity\n</code></pre></li>\n<li><p><a href=\"http://blog.piasy.com/2016/03/19/Android-Task-And-Back-Stack/\" target=\"_blank\" rel=\"external\">http://blog.piasy.com/2016/03/19/Android-Task-And-Back-Stack/</a> (写完此文后，发现有高人已经写得很全面很详尽了)</p>\n</li>\n</ul>\n","excerpt":"","more":"<blockquote>\n<p>Android 4种启动模式来说，用法说明此处不再提及主要介绍SingleTop，SingleTask相关的问题</p>\n</blockquote>\n<h3 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h3><ul>\n<li><p>先分析 官方文档 中的一段话：</p>\n<blockquote>\n<p>As shown in the table above, standard is the default mode and is appropriate for most types of activities. SingleTop is also a common and useful launch mode for many types of activities. The other modes — singleTask and singleInstance — <font color=\"red\">are not appropriate for most applications</font>, since they result in an interaction model that is likely to be unfamiliar to users and is very different from most other applications.</p>\n</blockquote>\n</li>\n</ul>\n<p>&emsp;&emsp;对于大多数应用来说，SingleTask 和 SingleInstance 并不适用，standrd 和 SingleTop对于普通的大部分Activity启动是适用的。<br>之所以使用singleTask，是存在这样一类问题，想要从后面的Activity 直接跳转到前面某一个Activity时，可能会采用的，如一个应用的MainActivity，LoginActivity等。</p>\n<p>&emsp;&emsp;对于SingleTask模式，官方文档的这么一句话，坑了不少人（我还比较幸运，没被坑惨）,也带给我对之前知识的迷惑。</p>\n<blockquote>\n<p>The system creates a new task and instantiates the activity at the root of the new task</p>\n</blockquote>\n<p>&emsp;&emsp;<strong>其实事实根本不是这样的</strong>！！！</p>\n<h3 id=\"场景复现\"><a href=\"#场景复现\" class=\"headerlink\" title=\"场景复现\"></a>场景复现</h3><ul>\n<li><p>下面用代码事实说话：建立3个Activity，分别为Main1Activity、Main2Activity、Main3Activity，前两个都设定单击事件，跳转逻辑为：main1 -&gt; main2 -&gt; main3，其中 Main2Activity 为 SingleTask（AndroidManifest.xml中设置）。打印相应的生命周期方法和所在的 <strong>taskId</strong></p>\n<p>  <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/SingleTask%20%E5%9B%BE1.png\" alt=\"\"></p>\n</li>\n</ul>\n<p>&emsp;&emsp;这些taskid都是一样的，所以它们都是同一个Task中的。事实胜于雄辩。然后搜了一下相关问题，老罗的博客还是给力，彻彻底底的分析了这个坑。致谢老罗的开源精神！<br>&emsp;&emsp;链接：<a href=\"http://blog.csdn.net/luoshengyang/article/details/6714543\">http://blog.csdn.net/luoshengyang/article/details/6714543</a></p>\n<ul>\n<li><p>同时为了解释项目中类似的一个页面跳转问题，对于上面的demo做了修改：</p>\n<p>  将 Main1Activity 设置为 SingleTask，其余2个为standrd</p>\n<p>  操作步骤：</p>\n<ol>\n<li>点击图标启动此应用</li>\n<li>依次点击进入 Main2，Main3，再点击Home键</li>\n<li><p>点击应用图标重新进入</p>\n<p>操作结果：结果再次显示的是Main1Activity，而不是Main3Activity。</p>\n<p>先看看打印的日志：</p>\n<p><img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/SingleTask%E5%9B%BE2.png\" alt=\"\"></p>\n<p>再次点击图标进入应用时，实际上是Main2Activity，Main3Activity 出栈了。<br>分析下这个过程：</p>\n<p>Main1，Main2，Main3 依次压入栈中，然后 Home 键，则整个Task处于stop状态，是一个background Task。当再次点击应用图标时，系统检测到此时已经存在一个该应用的Task的，此时就将此Background Task 移至前台，成为Foreground Task，而且由于Main1Activity是SingleTask，且位于task底部，所以，再次启动时，将前两个Activity移除，且按照启动顺序依次移除，所以打出的日志是：Main2 desotry，Main3 destory，Main1 onResume。</p>\n</li>\n</ol>\n<ul>\n<li><p><strong>看来，SingleTask这种特殊的模式引起的Task内Activity的变化是值得注意的</strong></p>\n<p>之前我在Stackoverflow上问相关的问题，和我猜想的原因比较类似，链接如下：</p>\n<p><a href=\"http://stackoverflow.com/questions/36933755/activity-is-singletask-and-is-root-in-task-restrart-activity-of-top-is-destorye\">http://stackoverflow.com/questions/36933755/activity-is-singletask-and-is-root-in-task-restrart-activity-of-top-is-destorye</a> （可供参考）</p>\n</li>\n</ul>\n</li>\n</ul>\n<p>那么，如何才能在一个新的任务栈里创建新的Activity呢？</p>\n<ul>\n<li><p>只需要在AndroidManifest.xml中配置即可</p>\n<p>  在SingleTask的基础之上，再增加设置 <strong>taskAffinify</strong> 属性即可，默认情况下，taskAffinity属性值为 包名，所以可以自定义一个taskAffinity值，便可以实现一个新的Task,新的Activity处于这个新的Task的root。如，我的 Demo 代码如下：</p>\n<p>  <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/SingleTask%E5%9B%BE3.png\" alt=\"\"></p>\n</li>\n</ul>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><ul>\n<li>SingleTask的启动模式并不会启动一个新的任务栈来承载Activity，而是在原来的Task中</li>\n<li>SingleTask的启动模式，在官方文档的说明中，日常开发中并不建议使用，SingleInstance更是如此。</li>\n<li>Activity的启动模式会带来的Task的变化和Activity的生命周期变化都会在ActivityRecord中体现的，通过源码分析可以发现。</li>\n<li><p>通过以下命令，可以查看Task内的Activity的变化：</p>\n<pre><code>adb shell dumpsys activity  获取所有应用的activity堆栈信息\nadb shell dumpsys activity | grep com.xxx.xxx.xxx   获取某个应用的activity 堆栈信息\nadb shell dumpsys activity | grep mFocusedActivity  获取处于栈顶的Activity\n</code></pre></li>\n<li><p><a href=\"http://blog.piasy.com/2016/03/19/Android-Task-And-Back-Stack/\">http://blog.piasy.com/2016/03/19/Android-Task-And-Back-Stack/</a> (写完此文后，发现有高人已经写得很全面很详尽了)</p>\n</li>\n</ul>\n"},{"title":"Android Studio NDK开发环境搭建及Demo示例","date":"2016-01-16T11:34:00.000Z","comments":1,"_content":">  说明：Android Studio 1.4后支持C/C++开发，1.3之前的版本坑点较多，所以使用1.4后的版本较为容易\n\n### 所用工具版本\n* Android Studio 1.5\n* android-ndk-r10e-windows-x86_64.exe\n\n### 配置NDK环境\n* 自行下载 **ndk** 工具，在你的要安装 ndk 的目录下，直接双击 此安装包，就会自动安装至此目录下，过程中会打开cmd窗口，命令行不断执行命令，需等待一会即可\n\n* cmd窗口自动关闭后，会出现 **ndk** 的文件夹，如图： \n\n![](http://7xr1vo.com1.z0.glb.clouddn.com/1.jpg)![](http://7xr1vo.com1.z0.glb.clouddn.com/2.png)\n\n* 配置**ndk**环境变量，path 中添加即可，如我的路径如下：\n\n\t> **PATH： D:\\android-ndk-r10e**\n* 保存后，打开cmd,输入命令:\n\t> **ndk-build** \n\n\t出现如下显示，则安装成功：\n\n![](http://7xr1vo.com1.z0.glb.clouddn.com/3.png)\n\n### 第一个NDKDemo\n* studio中，新建一个project，\tname： NDKDemo\n* 在本项目中，配置 **ndk** 路径，如图：\n\n![](http://7xr1vo.com1.z0.glb.clouddn.com/4.png)\n![](http://7xr1vo.com1.z0.glb.clouddn.com/5.png)\n\n点击**OK**， 此时，等待gradle构建，构建完成后，观察 **local.properties** 文件，多出来了 **ndk** 的路径，如图所示：\n![](http://7xr1vo.com1.z0.glb.clouddn.com/6.png)\n* 打开 **grade.properties** 文件，在末尾添加：\n\n\t> **android.useDeprecatedNdk=\"true\"**\n\n\n![](http://7xr1vo.com1.z0.glb.clouddn.com/7.png)\n\t\t\n\t\t* 此步骤，为了防止下一步修改 app/build.gradle 文件后报错\n* 打开 **app/build.gradle** 文件，在 **defaultConfig** 下加入**ndk**相关配置参数：\n\n``` gradle\nndk {\n\tmoduleName \"HelloNDK\"\n}\n```\n\n![](http://7xr1vo.com1.z0.glb.clouddn.com/8.png)\n\n\t* 此处的 modleName 是 加载库文件的标识，必须和后面代码中的 System.loadLibrary(\"HelloNDK\") 保持一致，否则会报错\n\t\n* 书写 **native** 方法 和 加载类库，代码如下：\n\n``` java\nstatic {\n\t// 加载类库\n\tSystem.loadLibrary(\"HelloNDK\");\n}\n\n// native方法 调用 C代码\npublic native String javaCallC();\n```\n如图，我这是后续的图片，过程中的未截：\n\t\n![](http://7xr1vo.com1.z0.glb.clouddn.com/10.png)\n* 打开左下角的 **Terminal**，**cd** 至 **java** 路径下，并执行命令：\n\n\t\tjavah -d jni [native方法所在类的全路径]\n\n\t如图：\n\n![](http://7xr1vo.com1.z0.glb.clouddn.com/11.png)\n\n在studio中：类的全路径可 通过 右击该类 -> Copy Reference获得，执行成功后，刷新下目录，可看到目录中多了一个 **咖啡色的jni目录**，和一个 **.h文件**，如图：\n\n![](http://7xr1vo.com1.z0.glb.clouddn.com/12.png)\n* 右击 **Main目录的图标 -> New -> Floder -> JNI Floder**，之后会出现一个 **蓝色的JNI** 文件夹，如图：\n\n![](http://7xr1vo.com1.z0.glb.clouddn.com/13.png)\n\t\n此时，继续解决上面 **native** 方法名报错（红色）的问题，**Alt + Enter** 选择创建 **.c** 中的方法，这时，会在蓝色的JNI文件夹下自动生成一个 **.c** 文件，并且 含有 **c代码**，里面有复杂的方法头\n\n![](http://7xr1vo.com1.z0.glb.clouddn.com/9.png)\n\n![](http://7xr1vo.com1.z0.glb.clouddn.com/14.png)\n\n\t\t* 可能 native 方法名仍然是红色的，这可能是 Studio 的一个bug，但其实是可以运行的。可能过一段时间红色会消失变为正常，我的就是这种情况\n* 下面就可以书写真正的 **C代码**了，此处 只简单写下，关于更牛逼的用法，将更新在后面blog中，继续总结。\n\n\t此处代码改为：\n\t\t\n``` c\nreturn (*env)->NewStringUTF(env, \"你好，NDK\");\n```\n\n*  OK，第一个NDK Demo可以运行了，上图：\n\n![](http://7xr1vo.com1.z0.glb.clouddn.com/16.png)\n\n### 总结\n* 相比以前在 **eclipse** 中进行 **NDK** 开发，**studio**中显得方便多了，并不用安装 **CDT** 和 **cygwin**，而且 **.c** 文件及其内容可以自动生成\n* 利用命令 **javah -d jni [native方法所在类的全路径]**  生成的  **.h头文件** 可以在 有了 **.c** 文件后删除，此 **.h** 文件主要是用来用于生成 **.c** 文件中相应比较长的方法头。如果之前没有 **.h** 文件，**Alt + Enter** 是无法自动生成 **.c**文件的\n* 必须在 有 **/src/main/jni** 的文件夹（蓝色的jni文件夹）下，才能自动生成**.c** 文件\n* **.c** 文件中要出现了中文，必须是 **UTF-8** 下，否则，运行时会崩溃报错\n* 注意观察 **/app/build/intermediates/ndk** 目录下，有相关的 所有平台的 .so 文件（默认情况下，生成所有平台的；若只想生成某几种平台的，可在 **app/build.gradle（abi-Filters \"armeabi\",\"armeabi-v7a\",\"x86\"）** 中  或者 **Android.mk**中 进行配置）\n\n![](http://7xr1vo.com1.z0.glb.clouddn.com/17.png)\n### 补充\n* so文件和native类与混淆无关，无需keep语句\n* 实现类一定要方法名正确否则会报java.lang.UnsatisfiedLinkError: dlopen failed异常\n* studio工具的提示并不是很智能，所以有时要rebuild project","source":"_posts/Android Studio NDK开发环境搭建及Demo示例.md","raw":"---\ntitle: Android Studio NDK开发环境搭建及Demo示例\ndate: 2016-01-16 19:34\ncomments: true\ncategories: Android\ntags: [JNI, NDK]\n---\n>  说明：Android Studio 1.4后支持C/C++开发，1.3之前的版本坑点较多，所以使用1.4后的版本较为容易\n\n### 所用工具版本\n* Android Studio 1.5\n* android-ndk-r10e-windows-x86_64.exe\n\n### 配置NDK环境\n* 自行下载 **ndk** 工具，在你的要安装 ndk 的目录下，直接双击 此安装包，就会自动安装至此目录下，过程中会打开cmd窗口，命令行不断执行命令，需等待一会即可\n\n* cmd窗口自动关闭后，会出现 **ndk** 的文件夹，如图： \n\n![](http://7xr1vo.com1.z0.glb.clouddn.com/1.jpg)![](http://7xr1vo.com1.z0.glb.clouddn.com/2.png)\n\n* 配置**ndk**环境变量，path 中添加即可，如我的路径如下：\n\n\t> **PATH： D:\\android-ndk-r10e**\n* 保存后，打开cmd,输入命令:\n\t> **ndk-build** \n\n\t出现如下显示，则安装成功：\n\n![](http://7xr1vo.com1.z0.glb.clouddn.com/3.png)\n\n### 第一个NDKDemo\n* studio中，新建一个project，\tname： NDKDemo\n* 在本项目中，配置 **ndk** 路径，如图：\n\n![](http://7xr1vo.com1.z0.glb.clouddn.com/4.png)\n![](http://7xr1vo.com1.z0.glb.clouddn.com/5.png)\n\n点击**OK**， 此时，等待gradle构建，构建完成后，观察 **local.properties** 文件，多出来了 **ndk** 的路径，如图所示：\n![](http://7xr1vo.com1.z0.glb.clouddn.com/6.png)\n* 打开 **grade.properties** 文件，在末尾添加：\n\n\t> **android.useDeprecatedNdk=\"true\"**\n\n\n![](http://7xr1vo.com1.z0.glb.clouddn.com/7.png)\n\t\t\n\t\t* 此步骤，为了防止下一步修改 app/build.gradle 文件后报错\n* 打开 **app/build.gradle** 文件，在 **defaultConfig** 下加入**ndk**相关配置参数：\n\n``` gradle\nndk {\n\tmoduleName \"HelloNDK\"\n}\n```\n\n![](http://7xr1vo.com1.z0.glb.clouddn.com/8.png)\n\n\t* 此处的 modleName 是 加载库文件的标识，必须和后面代码中的 System.loadLibrary(\"HelloNDK\") 保持一致，否则会报错\n\t\n* 书写 **native** 方法 和 加载类库，代码如下：\n\n``` java\nstatic {\n\t// 加载类库\n\tSystem.loadLibrary(\"HelloNDK\");\n}\n\n// native方法 调用 C代码\npublic native String javaCallC();\n```\n如图，我这是后续的图片，过程中的未截：\n\t\n![](http://7xr1vo.com1.z0.glb.clouddn.com/10.png)\n* 打开左下角的 **Terminal**，**cd** 至 **java** 路径下，并执行命令：\n\n\t\tjavah -d jni [native方法所在类的全路径]\n\n\t如图：\n\n![](http://7xr1vo.com1.z0.glb.clouddn.com/11.png)\n\n在studio中：类的全路径可 通过 右击该类 -> Copy Reference获得，执行成功后，刷新下目录，可看到目录中多了一个 **咖啡色的jni目录**，和一个 **.h文件**，如图：\n\n![](http://7xr1vo.com1.z0.glb.clouddn.com/12.png)\n* 右击 **Main目录的图标 -> New -> Floder -> JNI Floder**，之后会出现一个 **蓝色的JNI** 文件夹，如图：\n\n![](http://7xr1vo.com1.z0.glb.clouddn.com/13.png)\n\t\n此时，继续解决上面 **native** 方法名报错（红色）的问题，**Alt + Enter** 选择创建 **.c** 中的方法，这时，会在蓝色的JNI文件夹下自动生成一个 **.c** 文件，并且 含有 **c代码**，里面有复杂的方法头\n\n![](http://7xr1vo.com1.z0.glb.clouddn.com/9.png)\n\n![](http://7xr1vo.com1.z0.glb.clouddn.com/14.png)\n\n\t\t* 可能 native 方法名仍然是红色的，这可能是 Studio 的一个bug，但其实是可以运行的。可能过一段时间红色会消失变为正常，我的就是这种情况\n* 下面就可以书写真正的 **C代码**了，此处 只简单写下，关于更牛逼的用法，将更新在后面blog中，继续总结。\n\n\t此处代码改为：\n\t\t\n``` c\nreturn (*env)->NewStringUTF(env, \"你好，NDK\");\n```\n\n*  OK，第一个NDK Demo可以运行了，上图：\n\n![](http://7xr1vo.com1.z0.glb.clouddn.com/16.png)\n\n### 总结\n* 相比以前在 **eclipse** 中进行 **NDK** 开发，**studio**中显得方便多了，并不用安装 **CDT** 和 **cygwin**，而且 **.c** 文件及其内容可以自动生成\n* 利用命令 **javah -d jni [native方法所在类的全路径]**  生成的  **.h头文件** 可以在 有了 **.c** 文件后删除，此 **.h** 文件主要是用来用于生成 **.c** 文件中相应比较长的方法头。如果之前没有 **.h** 文件，**Alt + Enter** 是无法自动生成 **.c**文件的\n* 必须在 有 **/src/main/jni** 的文件夹（蓝色的jni文件夹）下，才能自动生成**.c** 文件\n* **.c** 文件中要出现了中文，必须是 **UTF-8** 下，否则，运行时会崩溃报错\n* 注意观察 **/app/build/intermediates/ndk** 目录下，有相关的 所有平台的 .so 文件（默认情况下，生成所有平台的；若只想生成某几种平台的，可在 **app/build.gradle（abi-Filters \"armeabi\",\"armeabi-v7a\",\"x86\"）** 中  或者 **Android.mk**中 进行配置）\n\n![](http://7xr1vo.com1.z0.glb.clouddn.com/17.png)\n### 补充\n* so文件和native类与混淆无关，无需keep语句\n* 实现类一定要方法名正确否则会报java.lang.UnsatisfiedLinkError: dlopen failed异常\n* studio工具的提示并不是很智能，所以有时要rebuild project","slug":"Android Studio NDK开发环境搭建及Demo示例","published":1,"updated":"2017-02-08T11:49:06.000Z","layout":"post","photos":[],"link":"","_id":"cizpjnf1r0002baqwfqvngvg0","content":"<blockquote>\n<p> 说明：Android Studio 1.4后支持C/C++开发，1.3之前的版本坑点较多，所以使用1.4后的版本较为容易</p>\n</blockquote>\n<h3 id=\"所用工具版本\"><a href=\"#所用工具版本\" class=\"headerlink\" title=\"所用工具版本\"></a>所用工具版本</h3><ul>\n<li>Android Studio 1.5</li>\n<li>android-ndk-r10e-windows-x86_64.exe</li>\n</ul>\n<h3 id=\"配置NDK环境\"><a href=\"#配置NDK环境\" class=\"headerlink\" title=\"配置NDK环境\"></a>配置NDK环境</h3><ul>\n<li><p>自行下载 <strong>ndk</strong> 工具，在你的要安装 ndk 的目录下，直接双击 此安装包，就会自动安装至此目录下，过程中会打开cmd窗口，命令行不断执行命令，需等待一会即可</p>\n</li>\n<li><p>cmd窗口自动关闭后，会出现 <strong>ndk</strong> 的文件夹，如图： </p>\n</li>\n</ul>\n<p><img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/1.jpg\" alt=\"\"><img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/2.png\" alt=\"\"></p>\n<ul>\n<li><p>配置<strong>ndk</strong>环境变量，path 中添加即可，如我的路径如下：</p>\n<blockquote>\n<p><strong>PATH： D:\\android-ndk-r10e</strong></p>\n</blockquote>\n</li>\n<li><p>保存后，打开cmd,输入命令:</p>\n<blockquote>\n<p><strong>ndk-build</strong> </p>\n</blockquote>\n<p>  出现如下显示，则安装成功：</p>\n</li>\n</ul>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/3.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<h3 id=\"第一个NDKDemo\"><a href=\"#第一个NDKDemo\" class=\"headerlink\" title=\"第一个NDKDemo\"></a>第一个NDKDemo</h3><ul>\n<li>studio中，新建一个project，    name： NDKDemo</li>\n<li>在本项目中，配置 <strong>ndk</strong> 路径，如图：</li>\n</ul>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/4.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/5.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>点击<strong>OK</strong>， 此时，等待gradle构建，构建完成后，观察 <strong>local.properties</strong> 文件，多出来了 <strong>ndk</strong> 的路径，如图所示：<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/6.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure></p>\n<ul>\n<li><p>打开 <strong>grade.properties</strong> 文件，在末尾添加：</p>\n<blockquote>\n<p><strong>android.useDeprecatedNdk=”true”</strong></p>\n</blockquote>\n</li>\n</ul>\n<p><img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/7.png\" alt=\"\"></p>\n<pre><code>* 此步骤，为了防止下一步修改 app/build.gradle 文件后报错\n</code></pre><ul>\n<li>打开 <strong>app/build.gradle</strong> 文件，在 <strong>defaultConfig</strong> 下加入<strong>ndk</strong>相关配置参数：</li>\n</ul>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">ndk &#123;</div><div class=\"line\">\tmoduleName <span class=\"string\">\"HelloNDK\"</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/8.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<pre><code>* 此处的 modleName 是 加载库文件的标识，必须和后面代码中的 System.loadLibrary(&quot;HelloNDK&quot;) 保持一致，否则会报错\n</code></pre><ul>\n<li>书写 <strong>native</strong> 方法 和 加载类库，代码如下：</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">static</span> &#123;</div><div class=\"line\">\t<span class=\"comment\">// 加载类库</span></div><div class=\"line\">\tSystem.loadLibrary(<span class=\"string\">\"HelloNDK\"</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// native方法 调用 C代码</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">native</span> String <span class=\"title\">javaCallC</span><span class=\"params\">()</span></span>;</div></pre></td></tr></table></figure>\n<p>如图，我这是后续的图片，过程中的未截：</p>\n<p><img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/10.png\" alt=\"\"></p>\n<ul>\n<li><p>打开左下角的 <strong>Terminal</strong>，<strong>cd</strong> 至 <strong>java</strong> 路径下，并执行命令：</p>\n<pre><code>javah -d jni [native方法所在类的全路径]\n</code></pre><p>  如图：</p>\n</li>\n</ul>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/11.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>在studio中：类的全路径可 通过 右击该类 -&gt; Copy Reference获得，执行成功后，刷新下目录，可看到目录中多了一个 <strong>咖啡色的jni目录</strong>，和一个 <strong>.h文件</strong>，如图：</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/12.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<ul>\n<li>右击 <strong>Main目录的图标 -&gt; New -&gt; Floder -&gt; JNI Floder</strong>，之后会出现一个 <strong>蓝色的JNI</strong> 文件夹，如图：</li>\n</ul>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/13.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>此时，继续解决上面 <strong>native</strong> 方法名报错（红色）的问题，<strong>Alt + Enter</strong> 选择创建 <strong>.c</strong> 中的方法，这时，会在蓝色的JNI文件夹下自动生成一个 <strong>.c</strong> 文件，并且 含有 <strong>c代码</strong>，里面有复杂的方法头</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/9.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/14.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<pre><code>* 可能 native 方法名仍然是红色的，这可能是 Studio 的一个bug，但其实是可以运行的。可能过一段时间红色会消失变为正常，我的就是这种情况\n</code></pre><ul>\n<li><p>下面就可以书写真正的 <strong>C代码</strong>了，此处 只简单写下，关于更牛逼的用法，将更新在后面blog中，继续总结。</p>\n<p>  此处代码改为：</p>\n</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">return</span> (*env)-&gt;NewStringUTF(env, <span class=\"string\">\"你好，NDK\"</span>);</div></pre></td></tr></table></figure>\n<ul>\n<li>OK，第一个NDK Demo可以运行了，上图：</li>\n</ul>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/16.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><ul>\n<li>相比以前在 <strong>eclipse</strong> 中进行 <strong>NDK</strong> 开发，<strong>studio</strong>中显得方便多了，并不用安装 <strong>CDT</strong> 和 <strong>cygwin</strong>，而且 <strong>.c</strong> 文件及其内容可以自动生成</li>\n<li>利用命令 <strong>javah -d jni [native方法所在类的全路径]</strong>  生成的  <strong>.h头文件</strong> 可以在 有了 <strong>.c</strong> 文件后删除，此 <strong>.h</strong> 文件主要是用来用于生成 <strong>.c</strong> 文件中相应比较长的方法头。如果之前没有 <strong>.h</strong> 文件，<strong>Alt + Enter</strong> 是无法自动生成 <strong>.c</strong>文件的</li>\n<li>必须在 有 <strong>/src/main/jni</strong> 的文件夹（蓝色的jni文件夹）下，才能自动生成<strong>.c</strong> 文件</li>\n<li><strong>.c</strong> 文件中要出现了中文，必须是 <strong>UTF-8</strong> 下，否则，运行时会崩溃报错</li>\n<li>注意观察 <strong>/app/build/intermediates/ndk</strong> 目录下，有相关的 所有平台的 .so 文件（默认情况下，生成所有平台的；若只想生成某几种平台的，可在 <strong>app/build.gradle（abi-Filters “armeabi”,”armeabi-v7a”,”x86”）</strong> 中  或者 <strong>Android.mk</strong>中 进行配置）</li>\n</ul>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/17.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<h3 id=\"补充\"><a href=\"#补充\" class=\"headerlink\" title=\"补充\"></a>补充</h3><ul>\n<li>so文件和native类与混淆无关，无需keep语句</li>\n<li>实现类一定要方法名正确否则会报java.lang.UnsatisfiedLinkError: dlopen failed异常</li>\n<li>studio工具的提示并不是很智能，所以有时要rebuild project</li>\n</ul>\n","excerpt":"","more":"<blockquote>\n<p> 说明：Android Studio 1.4后支持C/C++开发，1.3之前的版本坑点较多，所以使用1.4后的版本较为容易</p>\n</blockquote>\n<h3 id=\"所用工具版本\"><a href=\"#所用工具版本\" class=\"headerlink\" title=\"所用工具版本\"></a>所用工具版本</h3><ul>\n<li>Android Studio 1.5</li>\n<li>android-ndk-r10e-windows-x86_64.exe</li>\n</ul>\n<h3 id=\"配置NDK环境\"><a href=\"#配置NDK环境\" class=\"headerlink\" title=\"配置NDK环境\"></a>配置NDK环境</h3><ul>\n<li><p>自行下载 <strong>ndk</strong> 工具，在你的要安装 ndk 的目录下，直接双击 此安装包，就会自动安装至此目录下，过程中会打开cmd窗口，命令行不断执行命令，需等待一会即可</p>\n</li>\n<li><p>cmd窗口自动关闭后，会出现 <strong>ndk</strong> 的文件夹，如图： </p>\n</li>\n</ul>\n<p><img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/1.jpg\" alt=\"\"><img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/2.png\" alt=\"\"></p>\n<ul>\n<li><p>配置<strong>ndk</strong>环境变量，path 中添加即可，如我的路径如下：</p>\n<blockquote>\n<p><strong>PATH： D:\\android-ndk-r10e</strong></p>\n</blockquote>\n</li>\n<li><p>保存后，打开cmd,输入命令:</p>\n<blockquote>\n<p><strong>ndk-build</strong> </p>\n</blockquote>\n<p>  出现如下显示，则安装成功：</p>\n</li>\n</ul>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/3.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<h3 id=\"第一个NDKDemo\"><a href=\"#第一个NDKDemo\" class=\"headerlink\" title=\"第一个NDKDemo\"></a>第一个NDKDemo</h3><ul>\n<li>studio中，新建一个project，    name： NDKDemo</li>\n<li>在本项目中，配置 <strong>ndk</strong> 路径，如图：</li>\n</ul>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/4.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/5.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>点击<strong>OK</strong>， 此时，等待gradle构建，构建完成后，观察 <strong>local.properties</strong> 文件，多出来了 <strong>ndk</strong> 的路径，如图所示：<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/6.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure></p>\n<ul>\n<li><p>打开 <strong>grade.properties</strong> 文件，在末尾添加：</p>\n<blockquote>\n<p><strong>android.useDeprecatedNdk=”true”</strong></p>\n</blockquote>\n</li>\n</ul>\n<p><img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/7.png\" alt=\"\"></p>\n<pre><code>* 此步骤，为了防止下一步修改 app/build.gradle 文件后报错\n</code></pre><ul>\n<li>打开 <strong>app/build.gradle</strong> 文件，在 <strong>defaultConfig</strong> 下加入<strong>ndk</strong>相关配置参数：</li>\n</ul>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">ndk &#123;</div><div class=\"line\">\tmoduleName <span class=\"string\">\"HelloNDK\"</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/8.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<pre><code>* 此处的 modleName 是 加载库文件的标识，必须和后面代码中的 System.loadLibrary(&quot;HelloNDK&quot;) 保持一致，否则会报错\n</code></pre><ul>\n<li>书写 <strong>native</strong> 方法 和 加载类库，代码如下：</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">static</span> &#123;</div><div class=\"line\">\t<span class=\"comment\">// 加载类库</span></div><div class=\"line\">\tSystem.loadLibrary(<span class=\"string\">\"HelloNDK\"</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// native方法 调用 C代码</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">native</span> String <span class=\"title\">javaCallC</span><span class=\"params\">()</span></span>;</div></pre></td></tr></table></figure>\n<p>如图，我这是后续的图片，过程中的未截：</p>\n<p><img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/10.png\" alt=\"\"></p>\n<ul>\n<li><p>打开左下角的 <strong>Terminal</strong>，<strong>cd</strong> 至 <strong>java</strong> 路径下，并执行命令：</p>\n<pre><code>javah -d jni [native方法所在类的全路径]\n</code></pre><p>  如图：</p>\n</li>\n</ul>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/11.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>在studio中：类的全路径可 通过 右击该类 -&gt; Copy Reference获得，执行成功后，刷新下目录，可看到目录中多了一个 <strong>咖啡色的jni目录</strong>，和一个 <strong>.h文件</strong>，如图：</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/12.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<ul>\n<li>右击 <strong>Main目录的图标 -&gt; New -&gt; Floder -&gt; JNI Floder</strong>，之后会出现一个 <strong>蓝色的JNI</strong> 文件夹，如图：</li>\n</ul>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/13.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>此时，继续解决上面 <strong>native</strong> 方法名报错（红色）的问题，<strong>Alt + Enter</strong> 选择创建 <strong>.c</strong> 中的方法，这时，会在蓝色的JNI文件夹下自动生成一个 <strong>.c</strong> 文件，并且 含有 <strong>c代码</strong>，里面有复杂的方法头</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/9.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/14.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<pre><code>* 可能 native 方法名仍然是红色的，这可能是 Studio 的一个bug，但其实是可以运行的。可能过一段时间红色会消失变为正常，我的就是这种情况\n</code></pre><ul>\n<li><p>下面就可以书写真正的 <strong>C代码</strong>了，此处 只简单写下，关于更牛逼的用法，将更新在后面blog中，继续总结。</p>\n<p>  此处代码改为：</p>\n</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">return</span> (*env)-&gt;NewStringUTF(env, <span class=\"string\">\"你好，NDK\"</span>);</div></pre></td></tr></table></figure>\n<ul>\n<li>OK，第一个NDK Demo可以运行了，上图：</li>\n</ul>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/16.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><ul>\n<li>相比以前在 <strong>eclipse</strong> 中进行 <strong>NDK</strong> 开发，<strong>studio</strong>中显得方便多了，并不用安装 <strong>CDT</strong> 和 <strong>cygwin</strong>，而且 <strong>.c</strong> 文件及其内容可以自动生成</li>\n<li>利用命令 <strong>javah -d jni [native方法所在类的全路径]</strong>  生成的  <strong>.h头文件</strong> 可以在 有了 <strong>.c</strong> 文件后删除，此 <strong>.h</strong> 文件主要是用来用于生成 <strong>.c</strong> 文件中相应比较长的方法头。如果之前没有 <strong>.h</strong> 文件，<strong>Alt + Enter</strong> 是无法自动生成 <strong>.c</strong>文件的</li>\n<li>必须在 有 <strong>/src/main/jni</strong> 的文件夹（蓝色的jni文件夹）下，才能自动生成<strong>.c</strong> 文件</li>\n<li><strong>.c</strong> 文件中要出现了中文，必须是 <strong>UTF-8</strong> 下，否则，运行时会崩溃报错</li>\n<li>注意观察 <strong>/app/build/intermediates/ndk</strong> 目录下，有相关的 所有平台的 .so 文件（默认情况下，生成所有平台的；若只想生成某几种平台的，可在 <strong>app/build.gradle（abi-Filters “armeabi”,”armeabi-v7a”,”x86”）</strong> 中  或者 <strong>Android.mk</strong>中 进行配置）</li>\n</ul>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/17.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<h3 id=\"补充\"><a href=\"#补充\" class=\"headerlink\" title=\"补充\"></a>补充</h3><ul>\n<li>so文件和native类与混淆无关，无需keep语句</li>\n<li>实现类一定要方法名正确否则会报java.lang.UnsatisfiedLinkError: dlopen failed异常</li>\n<li>studio工具的提示并不是很智能，所以有时要rebuild project</li>\n</ul>\n"},{"title":"Android WebView 相关踩坑","date":"2016-12-15T05:29:00.000Z","_content":"### url 传参 url 嵌套的问题\n#### 问题场景\nget请求链接中： 传参中含有url\n\n\"chinahr://customer/h5page?\" + LEOGAO_PAGE+\"=\"+finishpage+\"&\"+LEOGAO_ACTION+\"=\"+finishaction + \"&\"+INTENT_URL+\"=\" + <b><font color=\"red\">url</font></b>\n\n其中：\n<b><font color=\"red\">url：</font></b>  file:///android_asset/hybird/cp/index.html?uid=\" + cuid +\"&gender=\"+gender +\"&photo=\"+photoPath;\n\n合并之后：\n\"chinahr://customer/h5page?\" + LEOGAO_PAGE+\"=\"+finishpage+\"&\"+LEOGAO_ACTION+\"=\"+finishaction + \"&\"+INTENT_URL+\"=\"+“file:///android_asset/hybird/cp/index.html?uid=\" + cuid +\"&gender=\"+gender +\"&photo=\"+photoPath；\n\n所以这个 url 中的 第二个及以后的参数第一次就会被router解析，并不会将 url 整体作为一个参数传到下一个页面中去再次解析识别。\n#### 解决方法\n##### Android端\n``` java\nJSONObject jsonObject = new JSONObject();\ntry {\n    jsonObject.put(\"uid\", cUid);\n    jsonObject.put(\"gender\", gender);\n    jsonObject.put(\"photo\", potoPath);\n    paramsResult =  URLEncoder.encode(Base64.encodeToString(jsonObject.toString().getBytes(), Base64.DEFAULT));\n} catch (JSONException e) {\n    e.printStackTrace();\n}\n// 此处为加载本地，也可以为网络url\nBaseH5Activity.startWebViewActivity(this, \"file:///android_asset/hybird/cp/index.html?params=\" + paramsResult, \"\",\"\",\"\",\"\");\n```\n##### 前端js\n``` javascript\nvar me = this;\nvar href = window.location.url || window.location.href;\nvar params = me.getParams(href, 'params');\nparams = Base64.decode(decodeURIComponent(params));\ninfo = JSON.parse(params);\nvar uid = info.uid;\nvar photo = info.photo;\nvar gender = info.gender;\n```\n##### 踩坑\n* 第一次使用UrlEncoder编码，k可能会造成浏览器与js解析数据会存在不一致的问题\n解决：先使用base64进行编码，解决数据不一致的问题，再进行UrlEncoder编码（为了防止base64编码后的数据解析时：\"+\" 会当做空格的问题 ） \n* 加载本地 html 时：直接设置 cookie 在 本地url 上是无效的，也是没有必要的。自己遇到的问题是：加载本地 html，此html中使用的 jsonp 请求网络，此时需要的cookie，需要设置 WebView 的cookie，使之持久化，下次会自动带 cookie 访问网络的。\n### Android 5.0 WebView 设置cookie问题\n\n* 对于 Android 5.0 以上的WebView，默认关闭了接收三方cookie，但是提供了设置 cookie的接口，需要开发者去手动设置三方信任cookie。否则，加载本地 html 时，cookie 同步不过去。\n代码如下：\n\n``` java\nCookieManager cookieManager = CookieManager.getInstance();\ncookieManager.setAcceptCookie(true);\ncookieManager.setAcceptFileSchemeCookies(true);\nif (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {\n    cookieManager.setAcceptThirdPartyCookies(webView, true);\n}\n```\n### Android WebView 加载本地 html\n\n* webview 加载 sd 卡下的 html 是不能访问的，权限问题。\n* 如果访问 /data/data/包名/files/index.html，需要开启文件访问权限（默认是开启的，不要动态设置关闭）\n``` java\nwebSettings.setAllowFileAccess(false);// 关闭\n```\n\n### 补充\n在线加解密、编码解析工具：\nhttp://tool.oschina.net/encrypt?type=3\nhttp://www.cnblogs.com/wangsu/articles/2917181.html","source":"_posts/Android WebView 相关踩坑.md","raw":"---\ntitle: Android WebView 相关踩坑\ndate: 2016-12-15 13:29\ncategories: Hybird\ntags: h5\n---\n### url 传参 url 嵌套的问题\n#### 问题场景\nget请求链接中： 传参中含有url\n\n\"chinahr://customer/h5page?\" + LEOGAO_PAGE+\"=\"+finishpage+\"&\"+LEOGAO_ACTION+\"=\"+finishaction + \"&\"+INTENT_URL+\"=\" + <b><font color=\"red\">url</font></b>\n\n其中：\n<b><font color=\"red\">url：</font></b>  file:///android_asset/hybird/cp/index.html?uid=\" + cuid +\"&gender=\"+gender +\"&photo=\"+photoPath;\n\n合并之后：\n\"chinahr://customer/h5page?\" + LEOGAO_PAGE+\"=\"+finishpage+\"&\"+LEOGAO_ACTION+\"=\"+finishaction + \"&\"+INTENT_URL+\"=\"+“file:///android_asset/hybird/cp/index.html?uid=\" + cuid +\"&gender=\"+gender +\"&photo=\"+photoPath；\n\n所以这个 url 中的 第二个及以后的参数第一次就会被router解析，并不会将 url 整体作为一个参数传到下一个页面中去再次解析识别。\n#### 解决方法\n##### Android端\n``` java\nJSONObject jsonObject = new JSONObject();\ntry {\n    jsonObject.put(\"uid\", cUid);\n    jsonObject.put(\"gender\", gender);\n    jsonObject.put(\"photo\", potoPath);\n    paramsResult =  URLEncoder.encode(Base64.encodeToString(jsonObject.toString().getBytes(), Base64.DEFAULT));\n} catch (JSONException e) {\n    e.printStackTrace();\n}\n// 此处为加载本地，也可以为网络url\nBaseH5Activity.startWebViewActivity(this, \"file:///android_asset/hybird/cp/index.html?params=\" + paramsResult, \"\",\"\",\"\",\"\");\n```\n##### 前端js\n``` javascript\nvar me = this;\nvar href = window.location.url || window.location.href;\nvar params = me.getParams(href, 'params');\nparams = Base64.decode(decodeURIComponent(params));\ninfo = JSON.parse(params);\nvar uid = info.uid;\nvar photo = info.photo;\nvar gender = info.gender;\n```\n##### 踩坑\n* 第一次使用UrlEncoder编码，k可能会造成浏览器与js解析数据会存在不一致的问题\n解决：先使用base64进行编码，解决数据不一致的问题，再进行UrlEncoder编码（为了防止base64编码后的数据解析时：\"+\" 会当做空格的问题 ） \n* 加载本地 html 时：直接设置 cookie 在 本地url 上是无效的，也是没有必要的。自己遇到的问题是：加载本地 html，此html中使用的 jsonp 请求网络，此时需要的cookie，需要设置 WebView 的cookie，使之持久化，下次会自动带 cookie 访问网络的。\n### Android 5.0 WebView 设置cookie问题\n\n* 对于 Android 5.0 以上的WebView，默认关闭了接收三方cookie，但是提供了设置 cookie的接口，需要开发者去手动设置三方信任cookie。否则，加载本地 html 时，cookie 同步不过去。\n代码如下：\n\n``` java\nCookieManager cookieManager = CookieManager.getInstance();\ncookieManager.setAcceptCookie(true);\ncookieManager.setAcceptFileSchemeCookies(true);\nif (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {\n    cookieManager.setAcceptThirdPartyCookies(webView, true);\n}\n```\n### Android WebView 加载本地 html\n\n* webview 加载 sd 卡下的 html 是不能访问的，权限问题。\n* 如果访问 /data/data/包名/files/index.html，需要开启文件访问权限（默认是开启的，不要动态设置关闭）\n``` java\nwebSettings.setAllowFileAccess(false);// 关闭\n```\n\n### 补充\n在线加解密、编码解析工具：\nhttp://tool.oschina.net/encrypt?type=3\nhttp://www.cnblogs.com/wangsu/articles/2917181.html","slug":"Android WebView 相关踩坑","published":1,"updated":"2017-08-24T02:25:03.000Z","_id":"cizpjnf1x0005baqweniknq6c","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"url-传参-url-嵌套的问题\"><a href=\"#url-传参-url-嵌套的问题\" class=\"headerlink\" title=\"url 传参 url 嵌套的问题\"></a>url 传参 url 嵌套的问题</h3><h4 id=\"问题场景\"><a href=\"#问题场景\" class=\"headerlink\" title=\"问题场景\"></a>问题场景</h4><p>get请求链接中： 传参中含有url</p>\n<p>“chinahr://customer/h5page?” + LEOGAO_PAGE+”=”+finishpage+”&amp;”+LEOGAO_ACTION+”=”+finishaction + “&amp;”+INTENT_URL+”=” + <b><font color=\"red\">url</font></b></p>\n<p>其中：<br><b><font color=\"red\">url：</font></b>  file:///android_asset/hybird/cp/index.html?uid=” + cuid +”&amp;gender=”+gender +”&amp;photo=”+photoPath;</p>\n<p>合并之后：<br>“chinahr://customer/h5page?” + LEOGAO_PAGE+”=”+finishpage+”&amp;”+LEOGAO_ACTION+”=”+finishaction + “&amp;”+INTENT_URL+”=”+“file:///android_asset/hybird/cp/index.html?uid=” + cuid +”&amp;gender=”+gender +”&amp;photo=”+photoPath；</p>\n<p>所以这个 url 中的 第二个及以后的参数第一次就会被router解析，并不会将 url 整体作为一个参数传到下一个页面中去再次解析识别。</p>\n<h4 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h4><h5 id=\"Android端\"><a href=\"#Android端\" class=\"headerlink\" title=\"Android端\"></a>Android端</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">JSONObject jsonObject = <span class=\"keyword\">new</span> JSONObject();</div><div class=\"line\"><span class=\"keyword\">try</span> &#123;</div><div class=\"line\">    jsonObject.put(<span class=\"string\">\"uid\"</span>, cUid);</div><div class=\"line\">    jsonObject.put(<span class=\"string\">\"gender\"</span>, gender);</div><div class=\"line\">    jsonObject.put(<span class=\"string\">\"photo\"</span>, potoPath);</div><div class=\"line\">    paramsResult =  URLEncoder.encode(Base64.encodeToString(jsonObject.toString().getBytes(), Base64.DEFAULT));</div><div class=\"line\">&#125; <span class=\"keyword\">catch</span> (JSONException e) &#123;</div><div class=\"line\">    e.printStackTrace();</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 此处为加载本地，也可以为网络url</span></div><div class=\"line\">BaseH5Activity.startWebViewActivity(<span class=\"keyword\">this</span>, <span class=\"string\">\"file:///android_asset/hybird/cp/index.html?params=\"</span> + paramsResult, <span class=\"string\">\"\"</span>,<span class=\"string\">\"\"</span>,<span class=\"string\">\"\"</span>,<span class=\"string\">\"\"</span>);</div></pre></td></tr></table></figure>\n<h5 id=\"前端js\"><a href=\"#前端js\" class=\"headerlink\" title=\"前端js\"></a>前端js</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> me = <span class=\"keyword\">this</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> href = <span class=\"built_in\">window</span>.location.url || <span class=\"built_in\">window</span>.location.href;</div><div class=\"line\"><span class=\"keyword\">var</span> params = me.getParams(href, <span class=\"string\">'params'</span>);</div><div class=\"line\">params = Base64.decode(<span class=\"built_in\">decodeURIComponent</span>(params));</div><div class=\"line\">info = <span class=\"built_in\">JSON</span>.parse(params);</div><div class=\"line\"><span class=\"keyword\">var</span> uid = info.uid;</div><div class=\"line\"><span class=\"keyword\">var</span> photo = info.photo;</div><div class=\"line\"><span class=\"keyword\">var</span> gender = info.gender;</div></pre></td></tr></table></figure>\n<h5 id=\"踩坑\"><a href=\"#踩坑\" class=\"headerlink\" title=\"踩坑\"></a>踩坑</h5><ul>\n<li>第一次使用UrlEncoder编码，k可能会造成浏览器与js解析数据会存在不一致的问题<br>解决：先使用base64进行编码，解决数据不一致的问题，再进行UrlEncoder编码（为了防止base64编码后的数据解析时：”+” 会当做空格的问题 ） </li>\n<li><p>加载本地 html 时：直接设置 cookie 在 本地url 上是无效的，也是没有必要的。自己遇到的问题是：加载本地 html，此html中使用的 jsonp 请求网络，此时需要的cookie，需要设置 WebView 的cookie，使之持久化，下次会自动带 cookie 访问网络的。</p>\n<h3 id=\"Android-5-0-WebView-设置cookie问题\"><a href=\"#Android-5-0-WebView-设置cookie问题\" class=\"headerlink\" title=\"Android 5.0 WebView 设置cookie问题\"></a>Android 5.0 WebView 设置cookie问题</h3></li>\n<li><p>对于 Android 5.0 以上的WebView，默认关闭了接收三方cookie，但是提供了设置 cookie的接口，需要开发者去手动设置三方信任cookie。否则，加载本地 html 时，cookie 同步不过去。<br>代码如下：</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">CookieManager cookieManager = CookieManager.getInstance();</div><div class=\"line\">cookieManager.setAcceptCookie(<span class=\"keyword\">true</span>);</div><div class=\"line\">cookieManager.setAcceptFileSchemeCookies(<span class=\"keyword\">true</span>);</div><div class=\"line\"><span class=\"keyword\">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.LOLLIPOP) &#123;</div><div class=\"line\">    cookieManager.setAcceptThirdPartyCookies(webView, <span class=\"keyword\">true</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"Android-WebView-加载本地-html\"><a href=\"#Android-WebView-加载本地-html\" class=\"headerlink\" title=\"Android WebView 加载本地 html\"></a>Android WebView 加载本地 html</h3><ul>\n<li>webview 加载 sd 卡下的 html 是不能访问的，权限问题。</li>\n<li>如果访问 /data/data/包名/files/index.html，需要开启文件访问权限（默认是开启的，不要动态设置关闭）<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">webSettings.setAllowFileAccess(<span class=\"keyword\">false</span>);<span class=\"comment\">// 关闭</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"补充\"><a href=\"#补充\" class=\"headerlink\" title=\"补充\"></a>补充</h3><p>在线加解密、编码解析工具：<br><a href=\"http://tool.oschina.net/encrypt?type=3\" target=\"_blank\" rel=\"external\">http://tool.oschina.net/encrypt?type=3</a><br><a href=\"http://www.cnblogs.com/wangsu/articles/2917181.html\" target=\"_blank\" rel=\"external\">http://www.cnblogs.com/wangsu/articles/2917181.html</a></p>\n","excerpt":"","more":"<h3 id=\"url-传参-url-嵌套的问题\"><a href=\"#url-传参-url-嵌套的问题\" class=\"headerlink\" title=\"url 传参 url 嵌套的问题\"></a>url 传参 url 嵌套的问题</h3><h4 id=\"问题场景\"><a href=\"#问题场景\" class=\"headerlink\" title=\"问题场景\"></a>问题场景</h4><p>get请求链接中： 传参中含有url</p>\n<p>“chinahr://customer/h5page?” + LEOGAO_PAGE+”=”+finishpage+”&amp;”+LEOGAO_ACTION+”=”+finishaction + “&amp;”+INTENT_URL+”=” + <b><font color=\"red\">url</font></b></p>\n<p>其中：<br><b><font color=\"red\">url：</font></b>  file:///android_asset/hybird/cp/index.html?uid=” + cuid +”&amp;gender=”+gender +”&amp;photo=”+photoPath;</p>\n<p>合并之后：<br>“chinahr://customer/h5page?” + LEOGAO_PAGE+”=”+finishpage+”&amp;”+LEOGAO_ACTION+”=”+finishaction + “&amp;”+INTENT_URL+”=”+“file:///android_asset/hybird/cp/index.html?uid=” + cuid +”&amp;gender=”+gender +”&amp;photo=”+photoPath；</p>\n<p>所以这个 url 中的 第二个及以后的参数第一次就会被router解析，并不会将 url 整体作为一个参数传到下一个页面中去再次解析识别。</p>\n<h4 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h4><h5 id=\"Android端\"><a href=\"#Android端\" class=\"headerlink\" title=\"Android端\"></a>Android端</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">JSONObject jsonObject = <span class=\"keyword\">new</span> JSONObject();</div><div class=\"line\"><span class=\"keyword\">try</span> &#123;</div><div class=\"line\">    jsonObject.put(<span class=\"string\">\"uid\"</span>, cUid);</div><div class=\"line\">    jsonObject.put(<span class=\"string\">\"gender\"</span>, gender);</div><div class=\"line\">    jsonObject.put(<span class=\"string\">\"photo\"</span>, potoPath);</div><div class=\"line\">    paramsResult =  URLEncoder.encode(Base64.encodeToString(jsonObject.toString().getBytes(), Base64.DEFAULT));</div><div class=\"line\">&#125; <span class=\"keyword\">catch</span> (JSONException e) &#123;</div><div class=\"line\">    e.printStackTrace();</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 此处为加载本地，也可以为网络url</span></div><div class=\"line\">BaseH5Activity.startWebViewActivity(<span class=\"keyword\">this</span>, <span class=\"string\">\"file:///android_asset/hybird/cp/index.html?params=\"</span> + paramsResult, <span class=\"string\">\"\"</span>,<span class=\"string\">\"\"</span>,<span class=\"string\">\"\"</span>,<span class=\"string\">\"\"</span>);</div></pre></td></tr></table></figure>\n<h5 id=\"前端js\"><a href=\"#前端js\" class=\"headerlink\" title=\"前端js\"></a>前端js</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> me = <span class=\"keyword\">this</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> href = <span class=\"built_in\">window</span>.location.url || <span class=\"built_in\">window</span>.location.href;</div><div class=\"line\"><span class=\"keyword\">var</span> params = me.getParams(href, <span class=\"string\">'params'</span>);</div><div class=\"line\">params = Base64.decode(<span class=\"built_in\">decodeURIComponent</span>(params));</div><div class=\"line\">info = <span class=\"built_in\">JSON</span>.parse(params);</div><div class=\"line\"><span class=\"keyword\">var</span> uid = info.uid;</div><div class=\"line\"><span class=\"keyword\">var</span> photo = info.photo;</div><div class=\"line\"><span class=\"keyword\">var</span> gender = info.gender;</div></pre></td></tr></table></figure>\n<h5 id=\"踩坑\"><a href=\"#踩坑\" class=\"headerlink\" title=\"踩坑\"></a>踩坑</h5><ul>\n<li>第一次使用UrlEncoder编码，k可能会造成浏览器与js解析数据会存在不一致的问题<br>解决：先使用base64进行编码，解决数据不一致的问题，再进行UrlEncoder编码（为了防止base64编码后的数据解析时：”+” 会当做空格的问题 ） </li>\n<li><p>加载本地 html 时：直接设置 cookie 在 本地url 上是无效的，也是没有必要的。自己遇到的问题是：加载本地 html，此html中使用的 jsonp 请求网络，此时需要的cookie，需要设置 WebView 的cookie，使之持久化，下次会自动带 cookie 访问网络的。</p>\n<h3 id=\"Android-5-0-WebView-设置cookie问题\"><a href=\"#Android-5-0-WebView-设置cookie问题\" class=\"headerlink\" title=\"Android 5.0 WebView 设置cookie问题\"></a>Android 5.0 WebView 设置cookie问题</h3></li>\n<li><p>对于 Android 5.0 以上的WebView，默认关闭了接收三方cookie，但是提供了设置 cookie的接口，需要开发者去手动设置三方信任cookie。否则，加载本地 html 时，cookie 同步不过去。<br>代码如下：</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">CookieManager cookieManager = CookieManager.getInstance();</div><div class=\"line\">cookieManager.setAcceptCookie(<span class=\"keyword\">true</span>);</div><div class=\"line\">cookieManager.setAcceptFileSchemeCookies(<span class=\"keyword\">true</span>);</div><div class=\"line\"><span class=\"keyword\">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.LOLLIPOP) &#123;</div><div class=\"line\">    cookieManager.setAcceptThirdPartyCookies(webView, <span class=\"keyword\">true</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"Android-WebView-加载本地-html\"><a href=\"#Android-WebView-加载本地-html\" class=\"headerlink\" title=\"Android WebView 加载本地 html\"></a>Android WebView 加载本地 html</h3><ul>\n<li>webview 加载 sd 卡下的 html 是不能访问的，权限问题。</li>\n<li>如果访问 /data/data/包名/files/index.html，需要开启文件访问权限（默认是开启的，不要动态设置关闭）<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">webSettings.setAllowFileAccess(<span class=\"keyword\">false</span>);<span class=\"comment\">// 关闭</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"补充\"><a href=\"#补充\" class=\"headerlink\" title=\"补充\"></a>补充</h3><p>在线加解密、编码解析工具：<br><a href=\"http://tool.oschina.net/encrypt?type=3\">http://tool.oschina.net/encrypt?type=3</a><br><a href=\"http://www.cnblogs.com/wangsu/articles/2917181.html\">http://www.cnblogs.com/wangsu/articles/2917181.html</a></p>\n"},{"title":"Android apk安装过程实例分析","date":"2016-11-17T13:08:00.000Z","_content":"> 注：本文不对apk安装之前，系统所做的复杂工作做分析，只针对普通的apk安装过程进行简单的过程理解\n\n一般情况下，在apk安装时，系统一般会显示一个安装界面，获取用户同意之后进行安装，并且有一些apk预处理相关的操作，紧接着，会启动app界面，进入app。\n在这一过程中，不同版本的Android系统在安装时，对包的处理是不太一样的，以下分Dalivk、ART两种虚拟机进行分析。这里主要采用原生模拟器，进行分析。\n\n### 一、 Dalvik（JIT：just in time  即时编译）\n\n- 过程分析：\n - 点击apk包后或apk下载后，安装之前，系统会启动安装界面PackageInstallerActivity，让用户进行授权选择，用户同意后，会调用ApplicationPackageManager 进行相关操作。\n - 调用ApplicationPackageManager，通过IPC来调用 PackageManagerService 中的 installPackage 方法，在这个方法中，又去调用 installPackageAsUser 方法，此时，要进行权限相关校验，完毕之后，会通过 handler 发送消息（类型：INIT_COPY，MCS_BOUND）\n - 然后 startCopy —> handleStartCopy 依次调用，这里，对安装位置、存储空间进行处理，之后会 拷贝apk 相关文件放在相应的目录下。这些文件主要包括：\n\t   - apk文件\n\t   - jar、so文件\n\t   - db文件（若有的话）\n - 拷贝完成之后，进行预处理，对于Dalvik来说，dexopt要进行dex文件的优化，生成odex文件，在app运行时，能加快其启动速度。\n - 另外，对于资源处理，是 AssetMananger 来进行资源的解析、加载。\n\n\n- 实例考察：\n\t- 安装时logcat日志：拷贝工作，然后进行dex优化，dexopt执行操作\n\n![](http://7xr1vo.com1.z0.glb.clouddn.com/apk%E5%AE%89%E8%A3%85%E8%BF%87%E7%A8%8B.png)\n\n   \n   拷贝后，目录如下：\n\t\n![](http://7xr1vo.com1.z0.glb.clouddn.com/copy%20lib%E7%BB%93%E6%9E%9C.png)\n\n dex位置：\n\t\n![](http://7xr1vo.com1.z0.glb.clouddn.com/dex%E4%BD%8D%E7%BD%AE.png)\n\n如果把此位置的 dex 删除后，且杀掉已经运行的进程后，再次点击app启动后奔溃，如图：\n\n![](http://7xr1vo.com1.z0.glb.clouddn.com/%E5%88%A0%E6%8E%89dalvik-cache%E7%9B%AE%E5%BD%95%E4%B8%8B%E7%9A%84dex%E5%90%8E%EF%BC%8C%E4%B8%94%E6%9D%80%E6%8E%89%E5%B7%B2%E7%BB%8F%E8%BF%90%E8%A1%8C%E7%9A%84%E5%BA%94%E7%94%A8%E8%BF%9B%E7%A8%8B%EF%BC%8C%E5%86%8D%E6%AC%A1%E5%90%AF%E5%8A%A8.png)\n\n由此可知，要启动app时，需要加载 /data/dalik-cache 目录下的dex文件\n\n相关参考文献：\nhttp://www.woaitqs.cc/android/2016/07/28/android-plugin-get-apk-info\nhttp://blog.csdn.net/luoshengyang/article/details/8852432\n\n### 二、ART（AOT：Ahead of time  预编译）\n\nAndroid 4.4之后，对于Android虚拟机又继续做了优化，art 代替了 Dalvik，对于dex文件，优化工作做了改变。\n- 大致的处理过程：\n\t\t\n- 编译时，通过调用 dex2oat 对dex 进行预编译，这个编译器参考了LLVM框架，默认情况下，是采用了quick模式，但在6.0之后，LLVM被彻底去除了。关于LLVM细节，自行Google。\n- 编译后生成的文件 .oat 文件，实际上是Android 私有的ELF文件。在Linux系统中，ELF文件主要分为3类：目标文件（ .o）、共享文件（ .so）、可执行文件。此处Android的 .oat文件属于可执行文件。\n\toat 文件含有ELF文件正常的结构形态，里面既包含有dex 文件，也包含编译好的本地指令代码。被包含的dex文件也可以是多个。\n\t\n\t\n- 实例考察\n - ART 安装apk时，日志记录：\n\n![](http://7xr1vo.com1.z0.glb.clouddn.com/art%E5%AE%89%E8%A3%85apk%E7%9A%84log.png)\n\t 可以看到，有apk的拷贝，有dex2oat的dex优化过程。再追一下相关的目录：\n\t \n\n ![](http://7xr1vo.com1.z0.glb.clouddn.com/local%E7%9B%AE%E5%BD%95%E4%B8%8B.png)\n \n  ![](http://7xr1vo.com1.z0.glb.clouddn.com/dalvik-cache%E7%9B%AE%E5%BD%95%E4%B8%8B.png)\n  \n里面有一部分是系统框架层的相关文件。\n\t\n安装后的目录结构也有变化：\n\n![](http://7xr1vo.com1.z0.glb.clouddn.com/data_app%E7%9B%AE%E5%BD%95%E4%B8%8B.png)\n\n生成相应的平台下的文件，此处我使用的是x86的模拟器\n\nAndroid 在编译时用到的 dexopt、dex2oat、aapt 都在 /system/bin目录下：\n\n![](http://7xr1vo.com1.z0.glb.clouddn.com/4.4%E4%B8%8Bsystem_bin%E4%B8%8B%E7%9A%84aapt.png.png)\n\n当时对于 multidex 的包也进行了目录查找，如下，留下后续研究做参考。\n\n![](http://7xr1vo.com1.z0.glb.clouddn.com/multidex.png)\n\n相关参考文献：\nhttps://mssun.me/blog/android-art-runtime-2-dex2oat.html\nhttp://blog.csdn.net/luoshengyang/article/details/39307813","source":"_posts/Android apk安装过程实例分析.md","raw":"---\ntitle: Android apk安装过程实例分析\ndate: 2016-11-17 21:08\ncategories: Android\ntags: [Dalvik, ART]\n---\n> 注：本文不对apk安装之前，系统所做的复杂工作做分析，只针对普通的apk安装过程进行简单的过程理解\n\n一般情况下，在apk安装时，系统一般会显示一个安装界面，获取用户同意之后进行安装，并且有一些apk预处理相关的操作，紧接着，会启动app界面，进入app。\n在这一过程中，不同版本的Android系统在安装时，对包的处理是不太一样的，以下分Dalivk、ART两种虚拟机进行分析。这里主要采用原生模拟器，进行分析。\n\n### 一、 Dalvik（JIT：just in time  即时编译）\n\n- 过程分析：\n - 点击apk包后或apk下载后，安装之前，系统会启动安装界面PackageInstallerActivity，让用户进行授权选择，用户同意后，会调用ApplicationPackageManager 进行相关操作。\n - 调用ApplicationPackageManager，通过IPC来调用 PackageManagerService 中的 installPackage 方法，在这个方法中，又去调用 installPackageAsUser 方法，此时，要进行权限相关校验，完毕之后，会通过 handler 发送消息（类型：INIT_COPY，MCS_BOUND）\n - 然后 startCopy —> handleStartCopy 依次调用，这里，对安装位置、存储空间进行处理，之后会 拷贝apk 相关文件放在相应的目录下。这些文件主要包括：\n\t   - apk文件\n\t   - jar、so文件\n\t   - db文件（若有的话）\n - 拷贝完成之后，进行预处理，对于Dalvik来说，dexopt要进行dex文件的优化，生成odex文件，在app运行时，能加快其启动速度。\n - 另外，对于资源处理，是 AssetMananger 来进行资源的解析、加载。\n\n\n- 实例考察：\n\t- 安装时logcat日志：拷贝工作，然后进行dex优化，dexopt执行操作\n\n![](http://7xr1vo.com1.z0.glb.clouddn.com/apk%E5%AE%89%E8%A3%85%E8%BF%87%E7%A8%8B.png)\n\n   \n   拷贝后，目录如下：\n\t\n![](http://7xr1vo.com1.z0.glb.clouddn.com/copy%20lib%E7%BB%93%E6%9E%9C.png)\n\n dex位置：\n\t\n![](http://7xr1vo.com1.z0.glb.clouddn.com/dex%E4%BD%8D%E7%BD%AE.png)\n\n如果把此位置的 dex 删除后，且杀掉已经运行的进程后，再次点击app启动后奔溃，如图：\n\n![](http://7xr1vo.com1.z0.glb.clouddn.com/%E5%88%A0%E6%8E%89dalvik-cache%E7%9B%AE%E5%BD%95%E4%B8%8B%E7%9A%84dex%E5%90%8E%EF%BC%8C%E4%B8%94%E6%9D%80%E6%8E%89%E5%B7%B2%E7%BB%8F%E8%BF%90%E8%A1%8C%E7%9A%84%E5%BA%94%E7%94%A8%E8%BF%9B%E7%A8%8B%EF%BC%8C%E5%86%8D%E6%AC%A1%E5%90%AF%E5%8A%A8.png)\n\n由此可知，要启动app时，需要加载 /data/dalik-cache 目录下的dex文件\n\n相关参考文献：\nhttp://www.woaitqs.cc/android/2016/07/28/android-plugin-get-apk-info\nhttp://blog.csdn.net/luoshengyang/article/details/8852432\n\n### 二、ART（AOT：Ahead of time  预编译）\n\nAndroid 4.4之后，对于Android虚拟机又继续做了优化，art 代替了 Dalvik，对于dex文件，优化工作做了改变。\n- 大致的处理过程：\n\t\t\n- 编译时，通过调用 dex2oat 对dex 进行预编译，这个编译器参考了LLVM框架，默认情况下，是采用了quick模式，但在6.0之后，LLVM被彻底去除了。关于LLVM细节，自行Google。\n- 编译后生成的文件 .oat 文件，实际上是Android 私有的ELF文件。在Linux系统中，ELF文件主要分为3类：目标文件（ .o）、共享文件（ .so）、可执行文件。此处Android的 .oat文件属于可执行文件。\n\toat 文件含有ELF文件正常的结构形态，里面既包含有dex 文件，也包含编译好的本地指令代码。被包含的dex文件也可以是多个。\n\t\n\t\n- 实例考察\n - ART 安装apk时，日志记录：\n\n![](http://7xr1vo.com1.z0.glb.clouddn.com/art%E5%AE%89%E8%A3%85apk%E7%9A%84log.png)\n\t 可以看到，有apk的拷贝，有dex2oat的dex优化过程。再追一下相关的目录：\n\t \n\n ![](http://7xr1vo.com1.z0.glb.clouddn.com/local%E7%9B%AE%E5%BD%95%E4%B8%8B.png)\n \n  ![](http://7xr1vo.com1.z0.glb.clouddn.com/dalvik-cache%E7%9B%AE%E5%BD%95%E4%B8%8B.png)\n  \n里面有一部分是系统框架层的相关文件。\n\t\n安装后的目录结构也有变化：\n\n![](http://7xr1vo.com1.z0.glb.clouddn.com/data_app%E7%9B%AE%E5%BD%95%E4%B8%8B.png)\n\n生成相应的平台下的文件，此处我使用的是x86的模拟器\n\nAndroid 在编译时用到的 dexopt、dex2oat、aapt 都在 /system/bin目录下：\n\n![](http://7xr1vo.com1.z0.glb.clouddn.com/4.4%E4%B8%8Bsystem_bin%E4%B8%8B%E7%9A%84aapt.png.png)\n\n当时对于 multidex 的包也进行了目录查找，如下，留下后续研究做参考。\n\n![](http://7xr1vo.com1.z0.glb.clouddn.com/multidex.png)\n\n相关参考文献：\nhttps://mssun.me/blog/android-art-runtime-2-dex2oat.html\nhttp://blog.csdn.net/luoshengyang/article/details/39307813","slug":"Android apk安装过程实例分析","published":1,"updated":"2017-01-19T08:20:55.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cizpjnf210006baqw7jyj4sr6","content":"<blockquote>\n<p>注：本文不对apk安装之前，系统所做的复杂工作做分析，只针对普通的apk安装过程进行简单的过程理解</p>\n</blockquote>\n<p>一般情况下，在apk安装时，系统一般会显示一个安装界面，获取用户同意之后进行安装，并且有一些apk预处理相关的操作，紧接着，会启动app界面，进入app。<br>在这一过程中，不同版本的Android系统在安装时，对包的处理是不太一样的，以下分Dalivk、ART两种虚拟机进行分析。这里主要采用原生模拟器，进行分析。</p>\n<h3 id=\"一、-Dalvik（JIT：just-in-time-即时编译）\"><a href=\"#一、-Dalvik（JIT：just-in-time-即时编译）\" class=\"headerlink\" title=\"一、 Dalvik（JIT：just in time  即时编译）\"></a>一、 Dalvik（JIT：just in time  即时编译）</h3><ul>\n<li>过程分析：<ul>\n<li>点击apk包后或apk下载后，安装之前，系统会启动安装界面PackageInstallerActivity，让用户进行授权选择，用户同意后，会调用ApplicationPackageManager 进行相关操作。</li>\n<li>调用ApplicationPackageManager，通过IPC来调用 PackageManagerService 中的 installPackage 方法，在这个方法中，又去调用 installPackageAsUser 方法，此时，要进行权限相关校验，完毕之后，会通过 handler 发送消息（类型：INIT_COPY，MCS_BOUND）</li>\n<li>然后 startCopy —&gt; handleStartCopy 依次调用，这里，对安装位置、存储空间进行处理，之后会 拷贝apk 相关文件放在相应的目录下。这些文件主要包括：<ul>\n<li>apk文件</li>\n<li>jar、so文件</li>\n<li>db文件（若有的话）</li>\n</ul>\n</li>\n<li>拷贝完成之后，进行预处理，对于Dalvik来说，dexopt要进行dex文件的优化，生成odex文件，在app运行时，能加快其启动速度。</li>\n<li>另外，对于资源处理，是 AssetMananger 来进行资源的解析、加载。</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li>实例考察：<ul>\n<li>安装时logcat日志：拷贝工作，然后进行dex优化，dexopt执行操作</li>\n</ul>\n</li>\n</ul>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/apk%E5%AE%89%E8%A3%85%E8%BF%87%E7%A8%8B.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>   拷贝后，目录如下：</p>\n<p><img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/copy%20lib%E7%BB%93%E6%9E%9C.png\" alt=\"\"></p>\n<p> dex位置：</p>\n<p><img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/dex%E4%BD%8D%E7%BD%AE.png\" alt=\"\"></p>\n<p>如果把此位置的 dex 删除后，且杀掉已经运行的进程后，再次点击app启动后奔溃，如图：</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/%E5%88%A0%E6%8E%89dalvik-cache%E7%9B%AE%E5%BD%95%E4%B8%8B%E7%9A%84dex%E5%90%8E%EF%BC%8C%E4%B8%94%E6%9D%80%E6%8E%89%E5%B7%B2%E7%BB%8F%E8%BF%90%E8%A1%8C%E7%9A%84%E5%BA%94%E7%94%A8%E8%BF%9B%E7%A8%8B%EF%BC%8C%E5%86%8D%E6%AC%A1%E5%90%AF%E5%8A%A8.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>由此可知，要启动app时，需要加载 /data/dalik-cache 目录下的dex文件</p>\n<p>相关参考文献：<br><a href=\"http://www.woaitqs.cc/android/2016/07/28/android-plugin-get-apk-info\" target=\"_blank\" rel=\"external\">http://www.woaitqs.cc/android/2016/07/28/android-plugin-get-apk-info</a><br><a href=\"http://blog.csdn.net/luoshengyang/article/details/8852432\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/luoshengyang/article/details/8852432</a></p>\n<h3 id=\"二、ART（AOT：Ahead-of-time-预编译）\"><a href=\"#二、ART（AOT：Ahead-of-time-预编译）\" class=\"headerlink\" title=\"二、ART（AOT：Ahead of time  预编译）\"></a>二、ART（AOT：Ahead of time  预编译）</h3><p>Android 4.4之后，对于Android虚拟机又继续做了优化，art 代替了 Dalvik，对于dex文件，优化工作做了改变。</p>\n<ul>\n<li><p>大致的处理过程：</p>\n</li>\n<li><p>编译时，通过调用 dex2oat 对dex 进行预编译，这个编译器参考了LLVM框架，默认情况下，是采用了quick模式，但在6.0之后，LLVM被彻底去除了。关于LLVM细节，自行Google。</p>\n</li>\n<li>编译后生成的文件 .oat 文件，实际上是Android 私有的ELF文件。在Linux系统中，ELF文件主要分为3类：目标文件（ .o）、共享文件（ .so）、可执行文件。此处Android的 .oat文件属于可执行文件。<br>  oat 文件含有ELF文件正常的结构形态，里面既包含有dex 文件，也包含编译好的本地指令代码。被包含的dex文件也可以是多个。</li>\n</ul>\n<ul>\n<li>实例考察<ul>\n<li>ART 安装apk时，日志记录：</li>\n</ul>\n</li>\n</ul>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/art%E5%AE%89%E8%A3%85apk%E7%9A%84log.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<pre><code>可以看到，有apk的拷贝，有dex2oat的dex优化过程。再追一下相关的目录：\n</code></pre><p> <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/local%E7%9B%AE%E5%BD%95%E4%B8%8B.png\" alt=\"\"></p>\n<p>  <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/dalvik-cache%E7%9B%AE%E5%BD%95%E4%B8%8B.png\" alt=\"\"></p>\n<p>里面有一部分是系统框架层的相关文件。</p>\n<p>安装后的目录结构也有变化：</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/data_app%E7%9B%AE%E5%BD%95%E4%B8%8B.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>生成相应的平台下的文件，此处我使用的是x86的模拟器</p>\n<p>Android 在编译时用到的 dexopt、dex2oat、aapt 都在 /system/bin目录下：</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/4.4%E4%B8%8Bsystem_bin%E4%B8%8B%E7%9A%84aapt.png.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>当时对于 multidex 的包也进行了目录查找，如下，留下后续研究做参考。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/multidex.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>相关参考文献：<br><a href=\"https://mssun.me/blog/android-art-runtime-2-dex2oat.html\" target=\"_blank\" rel=\"external\">https://mssun.me/blog/android-art-runtime-2-dex2oat.html</a><br><a href=\"http://blog.csdn.net/luoshengyang/article/details/39307813\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/luoshengyang/article/details/39307813</a></p>\n","excerpt":"","more":"<blockquote>\n<p>注：本文不对apk安装之前，系统所做的复杂工作做分析，只针对普通的apk安装过程进行简单的过程理解</p>\n</blockquote>\n<p>一般情况下，在apk安装时，系统一般会显示一个安装界面，获取用户同意之后进行安装，并且有一些apk预处理相关的操作，紧接着，会启动app界面，进入app。<br>在这一过程中，不同版本的Android系统在安装时，对包的处理是不太一样的，以下分Dalivk、ART两种虚拟机进行分析。这里主要采用原生模拟器，进行分析。</p>\n<h3 id=\"一、-Dalvik（JIT：just-in-time-即时编译）\"><a href=\"#一、-Dalvik（JIT：just-in-time-即时编译）\" class=\"headerlink\" title=\"一、 Dalvik（JIT：just in time  即时编译）\"></a>一、 Dalvik（JIT：just in time  即时编译）</h3><ul>\n<li>过程分析：<ul>\n<li>点击apk包后或apk下载后，安装之前，系统会启动安装界面PackageInstallerActivity，让用户进行授权选择，用户同意后，会调用ApplicationPackageManager 进行相关操作。</li>\n<li>调用ApplicationPackageManager，通过IPC来调用 PackageManagerService 中的 installPackage 方法，在这个方法中，又去调用 installPackageAsUser 方法，此时，要进行权限相关校验，完毕之后，会通过 handler 发送消息（类型：INIT_COPY，MCS_BOUND）</li>\n<li>然后 startCopy —&gt; handleStartCopy 依次调用，这里，对安装位置、存储空间进行处理，之后会 拷贝apk 相关文件放在相应的目录下。这些文件主要包括：<ul>\n<li>apk文件</li>\n<li>jar、so文件</li>\n<li>db文件（若有的话）</li>\n</ul>\n</li>\n<li>拷贝完成之后，进行预处理，对于Dalvik来说，dexopt要进行dex文件的优化，生成odex文件，在app运行时，能加快其启动速度。</li>\n<li>另外，对于资源处理，是 AssetMananger 来进行资源的解析、加载。</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li>实例考察：<ul>\n<li>安装时logcat日志：拷贝工作，然后进行dex优化，dexopt执行操作</li>\n</ul>\n</li>\n</ul>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/apk%E5%AE%89%E8%A3%85%E8%BF%87%E7%A8%8B.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>   拷贝后，目录如下：</p>\n<p><img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/copy%20lib%E7%BB%93%E6%9E%9C.png\" alt=\"\"></p>\n<p> dex位置：</p>\n<p><img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/dex%E4%BD%8D%E7%BD%AE.png\" alt=\"\"></p>\n<p>如果把此位置的 dex 删除后，且杀掉已经运行的进程后，再次点击app启动后奔溃，如图：</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/%E5%88%A0%E6%8E%89dalvik-cache%E7%9B%AE%E5%BD%95%E4%B8%8B%E7%9A%84dex%E5%90%8E%EF%BC%8C%E4%B8%94%E6%9D%80%E6%8E%89%E5%B7%B2%E7%BB%8F%E8%BF%90%E8%A1%8C%E7%9A%84%E5%BA%94%E7%94%A8%E8%BF%9B%E7%A8%8B%EF%BC%8C%E5%86%8D%E6%AC%A1%E5%90%AF%E5%8A%A8.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>由此可知，要启动app时，需要加载 /data/dalik-cache 目录下的dex文件</p>\n<p>相关参考文献：<br><a href=\"http://www.woaitqs.cc/android/2016/07/28/android-plugin-get-apk-info\">http://www.woaitqs.cc/android/2016/07/28/android-plugin-get-apk-info</a><br><a href=\"http://blog.csdn.net/luoshengyang/article/details/8852432\">http://blog.csdn.net/luoshengyang/article/details/8852432</a></p>\n<h3 id=\"二、ART（AOT：Ahead-of-time-预编译）\"><a href=\"#二、ART（AOT：Ahead-of-time-预编译）\" class=\"headerlink\" title=\"二、ART（AOT：Ahead of time  预编译）\"></a>二、ART（AOT：Ahead of time  预编译）</h3><p>Android 4.4之后，对于Android虚拟机又继续做了优化，art 代替了 Dalvik，对于dex文件，优化工作做了改变。</p>\n<ul>\n<li><p>大致的处理过程：</p>\n</li>\n<li><p>编译时，通过调用 dex2oat 对dex 进行预编译，这个编译器参考了LLVM框架，默认情况下，是采用了quick模式，但在6.0之后，LLVM被彻底去除了。关于LLVM细节，自行Google。</p>\n</li>\n<li>编译后生成的文件 .oat 文件，实际上是Android 私有的ELF文件。在Linux系统中，ELF文件主要分为3类：目标文件（ .o）、共享文件（ .so）、可执行文件。此处Android的 .oat文件属于可执行文件。<br>  oat 文件含有ELF文件正常的结构形态，里面既包含有dex 文件，也包含编译好的本地指令代码。被包含的dex文件也可以是多个。</li>\n</ul>\n<ul>\n<li>实例考察<ul>\n<li>ART 安装apk时，日志记录：</li>\n</ul>\n</li>\n</ul>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/art%E5%AE%89%E8%A3%85apk%E7%9A%84log.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<pre><code>可以看到，有apk的拷贝，有dex2oat的dex优化过程。再追一下相关的目录：\n</code></pre><p> <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/local%E7%9B%AE%E5%BD%95%E4%B8%8B.png\" alt=\"\"></p>\n<p>  <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/dalvik-cache%E7%9B%AE%E5%BD%95%E4%B8%8B.png\" alt=\"\"></p>\n<p>里面有一部分是系统框架层的相关文件。</p>\n<p>安装后的目录结构也有变化：</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/data_app%E7%9B%AE%E5%BD%95%E4%B8%8B.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>生成相应的平台下的文件，此处我使用的是x86的模拟器</p>\n<p>Android 在编译时用到的 dexopt、dex2oat、aapt 都在 /system/bin目录下：</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/4.4%E4%B8%8Bsystem_bin%E4%B8%8B%E7%9A%84aapt.png.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>当时对于 multidex 的包也进行了目录查找，如下，留下后续研究做参考。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/multidex.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>相关参考文献：<br><a href=\"https://mssun.me/blog/android-art-runtime-2-dex2oat.html\">https://mssun.me/blog/android-art-runtime-2-dex2oat.html</a><br><a href=\"http://blog.csdn.net/luoshengyang/article/details/39307813\">http://blog.csdn.net/luoshengyang/article/details/39307813</a></p>\n"},{"title":"Android 类加载初探","date":"2016-11-17T13:08:00.000Z","_content":"> 源码路径(此版本：Android 5.0)：\nandroid-5.0.0_r7\\libcore\\dalvik\\src\\main\\java\\dalvik\\system\n\n需要关注的类有：\n![](http://7xr1vo.com1.z0.glb.clouddn.com/AndroidClassloader1.png)\n### 一、查找类的过程\n对于一个Class，在Android中，是如何被ClassLoader查找的呢？我们先查看一下，在Android中最原始的ClassLoader: BaseDexClassLoader 中有直接的方法。直接看源码：\n![](http://7xr1vo.com1.z0.glb.clouddn.com/AndroidClassLoader2.png)\n\n再继续追， pathList 的 findClass() 方法：\n![](http://7xr1vo.com1.z0.glb.clouddn.com/AndroidClassLoader3.png)\n\n此时遍历每个dex，通过二进制名来查找类Class；若类未定义或类未找到，则将异常add至suppressed异常集合中，随后抛出。\n![](http://7xr1vo.com1.z0.glb.clouddn.com/AndroidClassLoader4.png)\n\n### 二、3个类加载器的关系\n\n我们先来看看这3个ClassLoader的定义\n\n* BaseDexClassLoader\n\n![](http://7xr1vo.com1.z0.glb.clouddn.com/AndroidClassloader5.png)\n\n* DexClassLoader\n\n![](http://7xr1vo.com1.z0.glb.clouddn.com/AndroidClassloader6.png)\n\n* PathClassLoader\n\n![](http://7xr1vo.com1.z0.glb.clouddn.com/AndroidClassloader7.png)\n\n由上面可看出：BaseDexClassLoader 继承自最原始的 ClassLoader，DexClassLoader 和 PathClassLoader都继承自BaseClassLoader。依据传入的参数不同，来实现各自不同的 dex 加载功能\n\n**ClassLoader 相关说明：**\n\n从存储中加载类和资源。 在运行时安装一个或多个类加载器。 每当运行时系统需要在内存中尚不可用的特定类时，都会查询这些类。 通常，类加载器是一个树型结构，其中子类加载器将所有请求委托给父类加载器。 只有父类加载器无法满足请求，子类加载器才会尝试处理它（委托机制）\n\n下面我们再继续分析，传入不同的 optimizedDirectory 参数，两者会有什么样的区别？\n\nDexPathList 构造函数：\n![](http://7xr1vo.com1.z0.glb.clouddn.com/AndroidClassloader8.png)\n\nmakeDexElements过程：\n![](http://7xr1vo.com1.z0.glb.clouddn.com/AndroidClassloader9.png)\n\n加载DexFile，若optimizedDirectory 目录为空，则初始化一个DexFile，否则，直接加载dex文件：\n\n![](http://7xr1vo.com1.z0.glb.clouddn.com/AndroidClassloader10.png)\n\n初始化DexFile文件，通常是从一个文件对象中打开一个Dex file ，通常是一个 内容是 classes.dex 的 zip/jar文件，\n虚拟机将在 /data/dalvik-cache 目录下生成相应名称的文件，且打开它，在系统权限允许的情况下尽可能的先创建或更新该文件 \n不能传递 优化后的 文件名（/data/dalvik-cache），而是在 dexopt 之前的原始状态的文件名。\n\n![](http://7xr1vo.com1.z0.glb.clouddn.com/AndroidClassloader11.png)\n\n由上可知，PathClassLoader 的构造函数，与DexClassLoader相比较，optimizedDirectory 优化目录为null。\n由于optimizedDirectory是用来缓存我们需要加载的dex文件的，并创建一个DexFile对象，如果它为null，那么会直接使用dex文件原有的路径来创建DexFile对象。\noptimizedDirectory必须是一个内部存储路径，无论哪种动态加载，加载的可执行文件一定要存放在内部存储。DexClassLoader可以指定自己的optimizedDirectory，所以它可以加载外部的dex，因为这个dex会被复制到内部路径的optimizedDirectory\n所以DexClassLoader可以通过其他路径（内部存储路径）加载dex，而PathClassLoader没有optimizedDirectory，所以它只能加载内部的dex，这些大都是存在系统中已经安装过的apk里面的。\n\n若想查看相关目录下的dex文件，可参考上一篇文章。\n\n\n\n","source":"_posts/Android 类加载初探.md","raw":"---\ntitle: Android 类加载初探\ndate: 2016-11-17 21:08\ncategories: Android\ntags: ClassLoader\n---\n> 源码路径(此版本：Android 5.0)：\nandroid-5.0.0_r7\\libcore\\dalvik\\src\\main\\java\\dalvik\\system\n\n需要关注的类有：\n![](http://7xr1vo.com1.z0.glb.clouddn.com/AndroidClassloader1.png)\n### 一、查找类的过程\n对于一个Class，在Android中，是如何被ClassLoader查找的呢？我们先查看一下，在Android中最原始的ClassLoader: BaseDexClassLoader 中有直接的方法。直接看源码：\n![](http://7xr1vo.com1.z0.glb.clouddn.com/AndroidClassLoader2.png)\n\n再继续追， pathList 的 findClass() 方法：\n![](http://7xr1vo.com1.z0.glb.clouddn.com/AndroidClassLoader3.png)\n\n此时遍历每个dex，通过二进制名来查找类Class；若类未定义或类未找到，则将异常add至suppressed异常集合中，随后抛出。\n![](http://7xr1vo.com1.z0.glb.clouddn.com/AndroidClassLoader4.png)\n\n### 二、3个类加载器的关系\n\n我们先来看看这3个ClassLoader的定义\n\n* BaseDexClassLoader\n\n![](http://7xr1vo.com1.z0.glb.clouddn.com/AndroidClassloader5.png)\n\n* DexClassLoader\n\n![](http://7xr1vo.com1.z0.glb.clouddn.com/AndroidClassloader6.png)\n\n* PathClassLoader\n\n![](http://7xr1vo.com1.z0.glb.clouddn.com/AndroidClassloader7.png)\n\n由上面可看出：BaseDexClassLoader 继承自最原始的 ClassLoader，DexClassLoader 和 PathClassLoader都继承自BaseClassLoader。依据传入的参数不同，来实现各自不同的 dex 加载功能\n\n**ClassLoader 相关说明：**\n\n从存储中加载类和资源。 在运行时安装一个或多个类加载器。 每当运行时系统需要在内存中尚不可用的特定类时，都会查询这些类。 通常，类加载器是一个树型结构，其中子类加载器将所有请求委托给父类加载器。 只有父类加载器无法满足请求，子类加载器才会尝试处理它（委托机制）\n\n下面我们再继续分析，传入不同的 optimizedDirectory 参数，两者会有什么样的区别？\n\nDexPathList 构造函数：\n![](http://7xr1vo.com1.z0.glb.clouddn.com/AndroidClassloader8.png)\n\nmakeDexElements过程：\n![](http://7xr1vo.com1.z0.glb.clouddn.com/AndroidClassloader9.png)\n\n加载DexFile，若optimizedDirectory 目录为空，则初始化一个DexFile，否则，直接加载dex文件：\n\n![](http://7xr1vo.com1.z0.glb.clouddn.com/AndroidClassloader10.png)\n\n初始化DexFile文件，通常是从一个文件对象中打开一个Dex file ，通常是一个 内容是 classes.dex 的 zip/jar文件，\n虚拟机将在 /data/dalvik-cache 目录下生成相应名称的文件，且打开它，在系统权限允许的情况下尽可能的先创建或更新该文件 \n不能传递 优化后的 文件名（/data/dalvik-cache），而是在 dexopt 之前的原始状态的文件名。\n\n![](http://7xr1vo.com1.z0.glb.clouddn.com/AndroidClassloader11.png)\n\n由上可知，PathClassLoader 的构造函数，与DexClassLoader相比较，optimizedDirectory 优化目录为null。\n由于optimizedDirectory是用来缓存我们需要加载的dex文件的，并创建一个DexFile对象，如果它为null，那么会直接使用dex文件原有的路径来创建DexFile对象。\noptimizedDirectory必须是一个内部存储路径，无论哪种动态加载，加载的可执行文件一定要存放在内部存储。DexClassLoader可以指定自己的optimizedDirectory，所以它可以加载外部的dex，因为这个dex会被复制到内部路径的optimizedDirectory\n所以DexClassLoader可以通过其他路径（内部存储路径）加载dex，而PathClassLoader没有optimizedDirectory，所以它只能加载内部的dex，这些大都是存在系统中已经安装过的apk里面的。\n\n若想查看相关目录下的dex文件，可参考上一篇文章。\n\n\n\n","slug":"Android 类加载初探","published":1,"updated":"2017-01-19T08:20:55.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cizpjnf220007baqwudes5scm","content":"<blockquote>\n<p>源码路径(此版本：Android 5.0)：<br>android-5.0.0_r7\\libcore\\dalvik\\src\\main\\java\\dalvik\\system</p>\n</blockquote>\n<p>需要关注的类有：<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/AndroidClassloader1.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure></p>\n<h3 id=\"一、查找类的过程\"><a href=\"#一、查找类的过程\" class=\"headerlink\" title=\"一、查找类的过程\"></a>一、查找类的过程</h3><p>对于一个Class，在Android中，是如何被ClassLoader查找的呢？我们先查看一下，在Android中最原始的ClassLoader: BaseDexClassLoader 中有直接的方法。直接看源码：<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/AndroidClassLoader2.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure></p>\n<p>再继续追， pathList 的 findClass() 方法：<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/AndroidClassLoader3.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure></p>\n<p>此时遍历每个dex，通过二进制名来查找类Class；若类未定义或类未找到，则将异常add至suppressed异常集合中，随后抛出。<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/AndroidClassLoader4.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure></p>\n<h3 id=\"二、3个类加载器的关系\"><a href=\"#二、3个类加载器的关系\" class=\"headerlink\" title=\"二、3个类加载器的关系\"></a>二、3个类加载器的关系</h3><p>我们先来看看这3个ClassLoader的定义</p>\n<ul>\n<li>BaseDexClassLoader</li>\n</ul>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/AndroidClassloader5.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<ul>\n<li>DexClassLoader</li>\n</ul>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/AndroidClassloader6.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<ul>\n<li>PathClassLoader</li>\n</ul>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/AndroidClassloader7.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>由上面可看出：BaseDexClassLoader 继承自最原始的 ClassLoader，DexClassLoader 和 PathClassLoader都继承自BaseClassLoader。依据传入的参数不同，来实现各自不同的 dex 加载功能</p>\n<p><strong>ClassLoader 相关说明：</strong></p>\n<p>从存储中加载类和资源。 在运行时安装一个或多个类加载器。 每当运行时系统需要在内存中尚不可用的特定类时，都会查询这些类。 通常，类加载器是一个树型结构，其中子类加载器将所有请求委托给父类加载器。 只有父类加载器无法满足请求，子类加载器才会尝试处理它（委托机制）</p>\n<p>下面我们再继续分析，传入不同的 optimizedDirectory 参数，两者会有什么样的区别？</p>\n<p>DexPathList 构造函数：<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/AndroidClassloader8.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure></p>\n<p>makeDexElements过程：<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/AndroidClassloader9.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure></p>\n<p>加载DexFile，若optimizedDirectory 目录为空，则初始化一个DexFile，否则，直接加载dex文件：</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/AndroidClassloader10.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>初始化DexFile文件，通常是从一个文件对象中打开一个Dex file ，通常是一个 内容是 classes.dex 的 zip/jar文件，<br>虚拟机将在 /data/dalvik-cache 目录下生成相应名称的文件，且打开它，在系统权限允许的情况下尽可能的先创建或更新该文件<br>不能传递 优化后的 文件名（/data/dalvik-cache），而是在 dexopt 之前的原始状态的文件名。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/AndroidClassloader11.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>由上可知，PathClassLoader 的构造函数，与DexClassLoader相比较，optimizedDirectory 优化目录为null。<br>由于optimizedDirectory是用来缓存我们需要加载的dex文件的，并创建一个DexFile对象，如果它为null，那么会直接使用dex文件原有的路径来创建DexFile对象。<br>optimizedDirectory必须是一个内部存储路径，无论哪种动态加载，加载的可执行文件一定要存放在内部存储。DexClassLoader可以指定自己的optimizedDirectory，所以它可以加载外部的dex，因为这个dex会被复制到内部路径的optimizedDirectory<br>所以DexClassLoader可以通过其他路径（内部存储路径）加载dex，而PathClassLoader没有optimizedDirectory，所以它只能加载内部的dex，这些大都是存在系统中已经安装过的apk里面的。</p>\n<p>若想查看相关目录下的dex文件，可参考上一篇文章。</p>\n","excerpt":"","more":"<blockquote>\n<p>源码路径(此版本：Android 5.0)：<br>android-5.0.0_r7\\libcore\\dalvik\\src\\main\\java\\dalvik\\system</p>\n</blockquote>\n<p>需要关注的类有：<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/AndroidClassloader1.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure></p>\n<h3 id=\"一、查找类的过程\"><a href=\"#一、查找类的过程\" class=\"headerlink\" title=\"一、查找类的过程\"></a>一、查找类的过程</h3><p>对于一个Class，在Android中，是如何被ClassLoader查找的呢？我们先查看一下，在Android中最原始的ClassLoader: BaseDexClassLoader 中有直接的方法。直接看源码：<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/AndroidClassLoader2.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure></p>\n<p>再继续追， pathList 的 findClass() 方法：<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/AndroidClassLoader3.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure></p>\n<p>此时遍历每个dex，通过二进制名来查找类Class；若类未定义或类未找到，则将异常add至suppressed异常集合中，随后抛出。<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/AndroidClassLoader4.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure></p>\n<h3 id=\"二、3个类加载器的关系\"><a href=\"#二、3个类加载器的关系\" class=\"headerlink\" title=\"二、3个类加载器的关系\"></a>二、3个类加载器的关系</h3><p>我们先来看看这3个ClassLoader的定义</p>\n<ul>\n<li>BaseDexClassLoader</li>\n</ul>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/AndroidClassloader5.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<ul>\n<li>DexClassLoader</li>\n</ul>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/AndroidClassloader6.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<ul>\n<li>PathClassLoader</li>\n</ul>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/AndroidClassloader7.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>由上面可看出：BaseDexClassLoader 继承自最原始的 ClassLoader，DexClassLoader 和 PathClassLoader都继承自BaseClassLoader。依据传入的参数不同，来实现各自不同的 dex 加载功能</p>\n<p><strong>ClassLoader 相关说明：</strong></p>\n<p>从存储中加载类和资源。 在运行时安装一个或多个类加载器。 每当运行时系统需要在内存中尚不可用的特定类时，都会查询这些类。 通常，类加载器是一个树型结构，其中子类加载器将所有请求委托给父类加载器。 只有父类加载器无法满足请求，子类加载器才会尝试处理它（委托机制）</p>\n<p>下面我们再继续分析，传入不同的 optimizedDirectory 参数，两者会有什么样的区别？</p>\n<p>DexPathList 构造函数：<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/AndroidClassloader8.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure></p>\n<p>makeDexElements过程：<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/AndroidClassloader9.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure></p>\n<p>加载DexFile，若optimizedDirectory 目录为空，则初始化一个DexFile，否则，直接加载dex文件：</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/AndroidClassloader10.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>初始化DexFile文件，通常是从一个文件对象中打开一个Dex file ，通常是一个 内容是 classes.dex 的 zip/jar文件，<br>虚拟机将在 /data/dalvik-cache 目录下生成相应名称的文件，且打开它，在系统权限允许的情况下尽可能的先创建或更新该文件<br>不能传递 优化后的 文件名（/data/dalvik-cache），而是在 dexopt 之前的原始状态的文件名。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/AndroidClassloader11.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>由上可知，PathClassLoader 的构造函数，与DexClassLoader相比较，optimizedDirectory 优化目录为null。<br>由于optimizedDirectory是用来缓存我们需要加载的dex文件的，并创建一个DexFile对象，如果它为null，那么会直接使用dex文件原有的路径来创建DexFile对象。<br>optimizedDirectory必须是一个内部存储路径，无论哪种动态加载，加载的可执行文件一定要存放在内部存储。DexClassLoader可以指定自己的optimizedDirectory，所以它可以加载外部的dex，因为这个dex会被复制到内部路径的optimizedDirectory<br>所以DexClassLoader可以通过其他路径（内部存储路径）加载dex，而PathClassLoader没有optimizedDirectory，所以它只能加载内部的dex，这些大都是存在系统中已经安装过的apk里面的。</p>\n<p>若想查看相关目录下的dex文件，可参考上一篇文章。</p>\n"},{"title":"Dalvik中PreVerify问题","date":"2016-11-24T05:01:00.000Z","_content":"## PreVerify（预校验）的由来\nDalvik 虚拟机在启动的时候，会有许多的启动参数，其中有一项就是verify，当verify被打开的时候，doVerify变量为true，则进行类的校验（dvmVerifyClass方法调用）。若校验成功，则这个类会被打上标记：CLASS_ISPREVERIFIED。\n上面描述的过程是dex -> odex (dexopt 过程)时，做的一个优化。当从classes.dex 变为 odex 后，才会被拿去执行。\n\n## Class 被 Preverify 的过程\n在dex 被 dexopt 的过程中，源码中有校验和优化 Class 相关的操作：\n\n``` cpp\n/*\n * Verify and/or optimize a specific class.\n */\nstatic void verifyAndOptimizeClass(DexFile* pDexFile, ClassObject* clazz,\n    const DexClassDef* pClassDef, bool doVerify, bool doOpt)\n{\n    const char* classDescriptor;\n    bool verified = false;\n\n    if (clazz->pDvmDex->pDexFile != pDexFile) {\n        /*\n         * The current DEX file defined a class that is also present in the\n         * bootstrap class path.  The class loader favored the bootstrap\n         * version, which means that we have a pointer to a class that is\n         * (a) not the one we want to examine, and (b) mapped read-only,\n         * so we will seg fault if we try to rewrite instructions inside it.\n         */\n        ALOGD(\"DexOpt: not verifying/optimizing '%s': multiple definitions\",\n            clazz->descriptor);\n        return;\n    }\n\n    classDescriptor = dexStringByTypeIdx(pDexFile, pClassDef->classIdx);\n\n    /*\n     * First, try to verify it.\n     */\n    if (doVerify) {\n        if (dvmVerifyClass(clazz)) {\n            /*\n             * Set the \"is preverified\" flag in the DexClassDef.  We\n             * do it here, rather than in the ClassObject structure,\n             * because the DexClassDef is part of the odex file.\n             */\n            assert((clazz->accessFlags & JAVA_FLAGS_MASK) ==\n                pClassDef->accessFlags);\n            ((DexClassDef*)pClassDef)->accessFlags |= CLASS_ISPREVERIFIED;\n            verified = true;\n        } else {\n            // TODO: log when in verbose mode\n            ALOGV(\"DexOpt: '%s' failed verification\", classDescriptor);\n        }\n    }\n\n    if (doOpt) {\n        bool needVerify = (gDvm.dexOptMode == OPTIMIZE_MODE_VERIFIED ||\n                           gDvm.dexOptMode == OPTIMIZE_MODE_FULL);\n        if (!verified && needVerify) {\n            ALOGV(\"DexOpt: not optimizing '%s': not verified\",\n                classDescriptor);\n        } else {\n            dvmOptimizeClass(clazz, false);// 优化 Class 操作\n\n            /* set the flag whether or not we actually changed anything */\n            ((DexClassDef*)pClassDef)->accessFlags |= CLASS_ISOPTIMIZED;// Class被优化过后，也会打上被优化过的标记 CLASS_ISOPTIMIZED\n        }\n    }\n}\n```\n\ndvmVerifyClass 的具体过程，源码中是这样描述的：\n\n``` cpp\n/*\n * Verify a class.\n *\n * By the time we get here, the value of gDvm.classVerifyMode should already\n * have been factored in.  If you want to call into the verifier even\n * though verification is disabled, that's your business.\n *\n * Returns \"true\" on success.\n */\nbool dvmVerifyClass(ClassObject*clazz) {\n    int i;\n    if (dvmIsClassVerified(clazz)) {\n        ALOGD(\"Ignoring duplicate verify attempt on %s\", clazz -> descriptor);\n        return true;\n    }\n    for (i = 0; i < clazz -> directMethodCount; i++) {\n        if (!verifyMethod( & clazz -> directMethods[i])){\n            LOG_VFY(\"Verifier rejected class %s\", clazz -> descriptor);\n            return false;\n        }\n    }\n    for (i = 0; i < clazz -> virtualMethodCount; i++) {\n        if (!verifyMethod( & clazz -> virtualMethods[i])){\n            LOG_VFY(\"Verifier rejected class %s\", clazz -> descriptor);\n            return false;\n        }\n    }\n    return true;\n}\n```\n\n其中，dvmVerifyClass中又去调用了 方法的校验 verifyMethod, 再去追源码：\n\n``` cpp\n/*\n * Perform verification on a single method.\n */\nstatic bool verifyMethod(Method* meth)\n{\n    bool result = false;\n\n    /*\n     * Verifier state blob.  Various values will be cached here so we\n     * can avoid expensive lookups and pass fewer arguments around.\n     */\n    VerifierData vdata;\n#if 1   // ndef NDEBUG\n    memset(&vdata, 0x99, sizeof(vdata));\n#endif\n\n    vdata.method = meth;\n    vdata.insnsSize = dvmGetMethodInsnsSize(meth);\n    vdata.insnRegCount = meth->registersSize;\n    vdata.insnFlags = NULL;\n    vdata.uninitMap = NULL;\n    vdata.basicBlocks = NULL;\n\n    /*\n     * If there aren't any instructions, make sure that's expected, then\n     * exit successfully.  Note: for native methods, meth->insns gets set\n     * to a native function pointer on first call, so don't use that as\n     * an indicator.\n     */\n    if (vdata.insnsSize == 0) {\n        if (!dvmIsNativeMethod(meth) && !dvmIsAbstractMethod(meth)) {\n            LOG_VFY_METH(meth,\n                \"VFY: zero-length code in concrete non-native method\");\n            goto bail;\n        }\n\n        goto success;\n    }\n\n    /*\n     * Sanity-check the register counts.  ins + locals = registers, so make\n     * sure that ins <= registers.\n     */\n    if (meth->insSize > meth->registersSize) {\n        LOG_VFY_METH(meth, \"VFY: bad register counts (ins=%d regs=%d)\",\n            meth->insSize, meth->registersSize);\n        goto bail;\n    }\n\n    /*\n     * Allocate and populate an array to hold instruction data.\n     *\n     * TODO: Consider keeping a reusable pre-allocated array sitting\n     * around for smaller methods.\n     */\n    vdata.insnFlags = (InsnFlags*) calloc(vdata.insnsSize, sizeof(InsnFlags));\n    if (vdata.insnFlags == NULL)\n        goto bail;\n\n    /*\n     * Compute the width of each instruction and store the result in insnFlags.\n     * Count up the #of occurrences of certain opcodes while we're at it.\n     */\n    if (!computeWidthsAndCountOps(&vdata))\n        goto bail;\n\n    /*\n     * Allocate a map to hold the classes of uninitialized instances.\n     */\n    vdata.uninitMap = dvmCreateUninitInstanceMap(meth, vdata.insnFlags,\n        vdata.newInstanceCount);\n    if (vdata.uninitMap == NULL)\n        goto bail;\n\n    /*\n     * Set the \"in try\" flags for all instructions guarded by a \"try\" block.\n     * Also sets the \"branch target\" flag on exception handlers.\n     */\n    if (!scanTryCatchBlocks(meth, vdata.insnFlags))\n        goto bail;\n\n    /*\n     * Perform static instruction verification.  Also sets the \"branch\n     * target\" flags.\n     */\n    if (!verifyInstructions(&vdata))\n        goto bail;\n\n    /*\n     * Do code-flow analysis.\n     *\n     * We could probably skip this for a method with no registers, but\n     * that's so rare that there's little point in checking.\n     */\n    if (!dvmVerifyCodeFlow(&vdata)) {\n        //ALOGD(\"+++ %s failed code flow\", meth->name);\n        goto bail;\n    }\n\nsuccess:\n    result = true;\n\nbail:\n    dvmFreeVfyBasicBlocks(&vdata);\n    dvmFreeUninitInstanceMap(vdata.uninitMap);\n    free(vdata.insnFlags);\n    return result;\n}\n```\n\ndvmVerifyClass 具体过程中，会去校验 这个 Class中的所有的 directMethod 方法，和 virtualMethod 方法。具体这些方法包含哪些呢？ 其中时包含了：\n* static 方法\n* private 方法\n* 构造方法\n* ... ...\n\n由此可知：  如果这些方法中直接引用到的类（第一层级关系，不会进行递归搜索） 和 class (源码中的clazz) 在同一个 dex 中的话，这个类就会被打上  CLASS_ISPREVERIFY 标记\n\n## PreVerify 缘由\n\n* 一方面，Dalvik 虚拟机在安装期间，为Class 打上 CLASS_ISPREVERIFIED 是为了提高性能，下次使用时，则会省去校验操作，提高访问效率。\n* 另一方面，被标上“CLASS_ISPREVERIFIED”的类，dvm在运行期载入Class时候，会对其内存中对应的直接引用类进行校验，如果该类存在与直接引用类所在的dex不是同一个，则直接报“pre-verification” 错误，该类无法加载。\n\n``` cpp\nClassObject* dvmResolveClass(const ClassObject* referrer, u4 classIdx,\n    bool fromUnverifiedConstant)\n{\n    DvmDex* pDvmDex = referrer->pDvmDex;\n    ClassObject* resClass;\n    const char* className;\n    /*\n     * Check the table first -- this gets called from the other \"resolve\"\n     * methods.\n     */\n    resClass = dvmDexGetResolvedClass(pDvmDex, classIdx); // 预先在dex的缓存表里查\n    if (resClass != NULL)\n        return resClass;\n    LOGVV(\"--- resolving class %u (referrer=%s cl=%p)\",\n        classIdx, referrer->descriptor, referrer->classLoader);\n    /*\n     * Class hasn't been loaded yet, or is in the process of being loaded\n     * and initialized now.  Try to get a copy.  If we find one, put the\n     * pointer in the DexTypeId.  There isn't a race condition here --\n     * 32-bit writes are guaranteed atomic on all target platforms.  Worst\n     * case we have two threads storing the same value.\n     *\n     * If this is an array class, we'll generate it here.\n     */\n    className = dexStringByTypeIdx(pDvmDex->pDexFile, classIdx);\n    if (className[0] != '\\0' && className[1] == '\\0') {\n        /* primitive type */\n        resClass = dvmFindPrimitiveClass(className[0]);\n    } else {\n        resClass = dvmFindClassNoInit(className, referrer->classLoader);\n    }\n    if (resClass != NULL) {\n        /*\n         * If the referrer was pre-verified, the resolved class must come\n         * from the same DEX or from a bootstrap class.  The pre-verifier\n         * makes assumptions that could be invalidated by a wacky class\n         * loader.  (See the notes at the top of oo/Class.c.)\n         *\n         * The verifier does *not* fail a class for using a const-class\n         * or instance-of instruction referring to an unresolveable class,\n         * because the result of the instruction is simply a Class object\n         * or boolean -- there's no need to resolve the class object during\n         * verification.  Instance field and virtual method accesses can\n         * break dangerously if we get the wrong class, but const-class and\n         * instance-of are only interesting at execution time.  So, if we\n         * we got here as part of executing one of the \"unverified class\"\n         * instructions, we skip the additional check.\n         *\n         * Ditto for class references from annotations and exception\n         * handler lists.\n         */\n        if (!fromUnverifiedConstant &&\n            IS_CLASS_FLAG_SET(referrer, CLASS_ISPREVERIFIED))\n        {\n            ClassObject* resClassCheck = resClass;\n            if (dvmIsArrayClass(resClassCheck))\n                resClassCheck = resClassCheck->elementClass;\n            if (referrer->pDvmDex != resClassCheck->pDvmDex &&\n                resClassCheck->classLoader != NULL)  // 校验dex是否是安装时的同一个dex\n            {\n                ALOGW(\"Class resolved by unexpected DEX:\"\n                     \" %s(%p):%p ref [%s] %s(%p):%p\",\n                    referrer->descriptor, referrer->classLoader,\n                    referrer->pDvmDex,\n                    resClass->descriptor, resClassCheck->descriptor,\n                    resClassCheck->classLoader, resClassCheck->pDvmDex);\n                ALOGW(\"(%s had used a different %s during pre-verification)\",\n                    referrer->descriptor, resClass->descriptor);\n                dvmThrowIllegalAccessError(\n                    \"Class ref in pre-verified class resolved to unexpected \"\n                    \"implementation\");\n                return NULL;\n            }\n        }\n        LOGVV(\"##### +ResolveClass(%s): referrer=%s dex=%p ldr=%p ref=%d\",\n            resClass->descriptor, referrer->descriptor, referrer->pDvmDex,\n            referrer->classLoader, classIdx);\n        /*\n         * Add what we found to the list so we can skip the class search\n         * next time through.\n         *\n         * TODO: should we be doing this when fromUnverifiedConstant==true?\n         * (see comments at top of oo/Class.c)\n         */\n        dvmDexSetResolvedClass(pDvmDex, classIdx, resClass);\n    } else {\n        /* not found, exception should be raised */\n        LOGVV(\"Class not found: %s\",\n            dexStringByTypeIdx(pDvmDex->pDexFile, classIdx));\n        assert(dvmCheckException(dvmThreadSelf()));\n    }\n    return resClass;\n}\n```\n\n实际上，这一步dex的一致性判断，也是google为了防止外部DEX注入的一个安全方案，即保证运行期的Class与其直接引用类之间所在的DEX关系要与安装时候一致\n\n\n<br>\n源码链接:\nhttp://osxr.org:8080/android/source/dalvik/vm/analysis/DexPrepare.cpp\nhttp://osxr.org:8080/android/source/dalvik/vm/analysis/DexVerify.cpp\nhttp://osxr.org:8080/android/source/dalvik/vm/oo/Resolve.cpp\n\n","source":"_posts/Dalvik中PreVerify问题.md","raw":"---\ntitle: Dalvik中PreVerify问题\ndate: 2016-11-24 13:01\ncategories: Android\ntags: Dalvik\n---\n## PreVerify（预校验）的由来\nDalvik 虚拟机在启动的时候，会有许多的启动参数，其中有一项就是verify，当verify被打开的时候，doVerify变量为true，则进行类的校验（dvmVerifyClass方法调用）。若校验成功，则这个类会被打上标记：CLASS_ISPREVERIFIED。\n上面描述的过程是dex -> odex (dexopt 过程)时，做的一个优化。当从classes.dex 变为 odex 后，才会被拿去执行。\n\n## Class 被 Preverify 的过程\n在dex 被 dexopt 的过程中，源码中有校验和优化 Class 相关的操作：\n\n``` cpp\n/*\n * Verify and/or optimize a specific class.\n */\nstatic void verifyAndOptimizeClass(DexFile* pDexFile, ClassObject* clazz,\n    const DexClassDef* pClassDef, bool doVerify, bool doOpt)\n{\n    const char* classDescriptor;\n    bool verified = false;\n\n    if (clazz->pDvmDex->pDexFile != pDexFile) {\n        /*\n         * The current DEX file defined a class that is also present in the\n         * bootstrap class path.  The class loader favored the bootstrap\n         * version, which means that we have a pointer to a class that is\n         * (a) not the one we want to examine, and (b) mapped read-only,\n         * so we will seg fault if we try to rewrite instructions inside it.\n         */\n        ALOGD(\"DexOpt: not verifying/optimizing '%s': multiple definitions\",\n            clazz->descriptor);\n        return;\n    }\n\n    classDescriptor = dexStringByTypeIdx(pDexFile, pClassDef->classIdx);\n\n    /*\n     * First, try to verify it.\n     */\n    if (doVerify) {\n        if (dvmVerifyClass(clazz)) {\n            /*\n             * Set the \"is preverified\" flag in the DexClassDef.  We\n             * do it here, rather than in the ClassObject structure,\n             * because the DexClassDef is part of the odex file.\n             */\n            assert((clazz->accessFlags & JAVA_FLAGS_MASK) ==\n                pClassDef->accessFlags);\n            ((DexClassDef*)pClassDef)->accessFlags |= CLASS_ISPREVERIFIED;\n            verified = true;\n        } else {\n            // TODO: log when in verbose mode\n            ALOGV(\"DexOpt: '%s' failed verification\", classDescriptor);\n        }\n    }\n\n    if (doOpt) {\n        bool needVerify = (gDvm.dexOptMode == OPTIMIZE_MODE_VERIFIED ||\n                           gDvm.dexOptMode == OPTIMIZE_MODE_FULL);\n        if (!verified && needVerify) {\n            ALOGV(\"DexOpt: not optimizing '%s': not verified\",\n                classDescriptor);\n        } else {\n            dvmOptimizeClass(clazz, false);// 优化 Class 操作\n\n            /* set the flag whether or not we actually changed anything */\n            ((DexClassDef*)pClassDef)->accessFlags |= CLASS_ISOPTIMIZED;// Class被优化过后，也会打上被优化过的标记 CLASS_ISOPTIMIZED\n        }\n    }\n}\n```\n\ndvmVerifyClass 的具体过程，源码中是这样描述的：\n\n``` cpp\n/*\n * Verify a class.\n *\n * By the time we get here, the value of gDvm.classVerifyMode should already\n * have been factored in.  If you want to call into the verifier even\n * though verification is disabled, that's your business.\n *\n * Returns \"true\" on success.\n */\nbool dvmVerifyClass(ClassObject*clazz) {\n    int i;\n    if (dvmIsClassVerified(clazz)) {\n        ALOGD(\"Ignoring duplicate verify attempt on %s\", clazz -> descriptor);\n        return true;\n    }\n    for (i = 0; i < clazz -> directMethodCount; i++) {\n        if (!verifyMethod( & clazz -> directMethods[i])){\n            LOG_VFY(\"Verifier rejected class %s\", clazz -> descriptor);\n            return false;\n        }\n    }\n    for (i = 0; i < clazz -> virtualMethodCount; i++) {\n        if (!verifyMethod( & clazz -> virtualMethods[i])){\n            LOG_VFY(\"Verifier rejected class %s\", clazz -> descriptor);\n            return false;\n        }\n    }\n    return true;\n}\n```\n\n其中，dvmVerifyClass中又去调用了 方法的校验 verifyMethod, 再去追源码：\n\n``` cpp\n/*\n * Perform verification on a single method.\n */\nstatic bool verifyMethod(Method* meth)\n{\n    bool result = false;\n\n    /*\n     * Verifier state blob.  Various values will be cached here so we\n     * can avoid expensive lookups and pass fewer arguments around.\n     */\n    VerifierData vdata;\n#if 1   // ndef NDEBUG\n    memset(&vdata, 0x99, sizeof(vdata));\n#endif\n\n    vdata.method = meth;\n    vdata.insnsSize = dvmGetMethodInsnsSize(meth);\n    vdata.insnRegCount = meth->registersSize;\n    vdata.insnFlags = NULL;\n    vdata.uninitMap = NULL;\n    vdata.basicBlocks = NULL;\n\n    /*\n     * If there aren't any instructions, make sure that's expected, then\n     * exit successfully.  Note: for native methods, meth->insns gets set\n     * to a native function pointer on first call, so don't use that as\n     * an indicator.\n     */\n    if (vdata.insnsSize == 0) {\n        if (!dvmIsNativeMethod(meth) && !dvmIsAbstractMethod(meth)) {\n            LOG_VFY_METH(meth,\n                \"VFY: zero-length code in concrete non-native method\");\n            goto bail;\n        }\n\n        goto success;\n    }\n\n    /*\n     * Sanity-check the register counts.  ins + locals = registers, so make\n     * sure that ins <= registers.\n     */\n    if (meth->insSize > meth->registersSize) {\n        LOG_VFY_METH(meth, \"VFY: bad register counts (ins=%d regs=%d)\",\n            meth->insSize, meth->registersSize);\n        goto bail;\n    }\n\n    /*\n     * Allocate and populate an array to hold instruction data.\n     *\n     * TODO: Consider keeping a reusable pre-allocated array sitting\n     * around for smaller methods.\n     */\n    vdata.insnFlags = (InsnFlags*) calloc(vdata.insnsSize, sizeof(InsnFlags));\n    if (vdata.insnFlags == NULL)\n        goto bail;\n\n    /*\n     * Compute the width of each instruction and store the result in insnFlags.\n     * Count up the #of occurrences of certain opcodes while we're at it.\n     */\n    if (!computeWidthsAndCountOps(&vdata))\n        goto bail;\n\n    /*\n     * Allocate a map to hold the classes of uninitialized instances.\n     */\n    vdata.uninitMap = dvmCreateUninitInstanceMap(meth, vdata.insnFlags,\n        vdata.newInstanceCount);\n    if (vdata.uninitMap == NULL)\n        goto bail;\n\n    /*\n     * Set the \"in try\" flags for all instructions guarded by a \"try\" block.\n     * Also sets the \"branch target\" flag on exception handlers.\n     */\n    if (!scanTryCatchBlocks(meth, vdata.insnFlags))\n        goto bail;\n\n    /*\n     * Perform static instruction verification.  Also sets the \"branch\n     * target\" flags.\n     */\n    if (!verifyInstructions(&vdata))\n        goto bail;\n\n    /*\n     * Do code-flow analysis.\n     *\n     * We could probably skip this for a method with no registers, but\n     * that's so rare that there's little point in checking.\n     */\n    if (!dvmVerifyCodeFlow(&vdata)) {\n        //ALOGD(\"+++ %s failed code flow\", meth->name);\n        goto bail;\n    }\n\nsuccess:\n    result = true;\n\nbail:\n    dvmFreeVfyBasicBlocks(&vdata);\n    dvmFreeUninitInstanceMap(vdata.uninitMap);\n    free(vdata.insnFlags);\n    return result;\n}\n```\n\ndvmVerifyClass 具体过程中，会去校验 这个 Class中的所有的 directMethod 方法，和 virtualMethod 方法。具体这些方法包含哪些呢？ 其中时包含了：\n* static 方法\n* private 方法\n* 构造方法\n* ... ...\n\n由此可知：  如果这些方法中直接引用到的类（第一层级关系，不会进行递归搜索） 和 class (源码中的clazz) 在同一个 dex 中的话，这个类就会被打上  CLASS_ISPREVERIFY 标记\n\n## PreVerify 缘由\n\n* 一方面，Dalvik 虚拟机在安装期间，为Class 打上 CLASS_ISPREVERIFIED 是为了提高性能，下次使用时，则会省去校验操作，提高访问效率。\n* 另一方面，被标上“CLASS_ISPREVERIFIED”的类，dvm在运行期载入Class时候，会对其内存中对应的直接引用类进行校验，如果该类存在与直接引用类所在的dex不是同一个，则直接报“pre-verification” 错误，该类无法加载。\n\n``` cpp\nClassObject* dvmResolveClass(const ClassObject* referrer, u4 classIdx,\n    bool fromUnverifiedConstant)\n{\n    DvmDex* pDvmDex = referrer->pDvmDex;\n    ClassObject* resClass;\n    const char* className;\n    /*\n     * Check the table first -- this gets called from the other \"resolve\"\n     * methods.\n     */\n    resClass = dvmDexGetResolvedClass(pDvmDex, classIdx); // 预先在dex的缓存表里查\n    if (resClass != NULL)\n        return resClass;\n    LOGVV(\"--- resolving class %u (referrer=%s cl=%p)\",\n        classIdx, referrer->descriptor, referrer->classLoader);\n    /*\n     * Class hasn't been loaded yet, or is in the process of being loaded\n     * and initialized now.  Try to get a copy.  If we find one, put the\n     * pointer in the DexTypeId.  There isn't a race condition here --\n     * 32-bit writes are guaranteed atomic on all target platforms.  Worst\n     * case we have two threads storing the same value.\n     *\n     * If this is an array class, we'll generate it here.\n     */\n    className = dexStringByTypeIdx(pDvmDex->pDexFile, classIdx);\n    if (className[0] != '\\0' && className[1] == '\\0') {\n        /* primitive type */\n        resClass = dvmFindPrimitiveClass(className[0]);\n    } else {\n        resClass = dvmFindClassNoInit(className, referrer->classLoader);\n    }\n    if (resClass != NULL) {\n        /*\n         * If the referrer was pre-verified, the resolved class must come\n         * from the same DEX or from a bootstrap class.  The pre-verifier\n         * makes assumptions that could be invalidated by a wacky class\n         * loader.  (See the notes at the top of oo/Class.c.)\n         *\n         * The verifier does *not* fail a class for using a const-class\n         * or instance-of instruction referring to an unresolveable class,\n         * because the result of the instruction is simply a Class object\n         * or boolean -- there's no need to resolve the class object during\n         * verification.  Instance field and virtual method accesses can\n         * break dangerously if we get the wrong class, but const-class and\n         * instance-of are only interesting at execution time.  So, if we\n         * we got here as part of executing one of the \"unverified class\"\n         * instructions, we skip the additional check.\n         *\n         * Ditto for class references from annotations and exception\n         * handler lists.\n         */\n        if (!fromUnverifiedConstant &&\n            IS_CLASS_FLAG_SET(referrer, CLASS_ISPREVERIFIED))\n        {\n            ClassObject* resClassCheck = resClass;\n            if (dvmIsArrayClass(resClassCheck))\n                resClassCheck = resClassCheck->elementClass;\n            if (referrer->pDvmDex != resClassCheck->pDvmDex &&\n                resClassCheck->classLoader != NULL)  // 校验dex是否是安装时的同一个dex\n            {\n                ALOGW(\"Class resolved by unexpected DEX:\"\n                     \" %s(%p):%p ref [%s] %s(%p):%p\",\n                    referrer->descriptor, referrer->classLoader,\n                    referrer->pDvmDex,\n                    resClass->descriptor, resClassCheck->descriptor,\n                    resClassCheck->classLoader, resClassCheck->pDvmDex);\n                ALOGW(\"(%s had used a different %s during pre-verification)\",\n                    referrer->descriptor, resClass->descriptor);\n                dvmThrowIllegalAccessError(\n                    \"Class ref in pre-verified class resolved to unexpected \"\n                    \"implementation\");\n                return NULL;\n            }\n        }\n        LOGVV(\"##### +ResolveClass(%s): referrer=%s dex=%p ldr=%p ref=%d\",\n            resClass->descriptor, referrer->descriptor, referrer->pDvmDex,\n            referrer->classLoader, classIdx);\n        /*\n         * Add what we found to the list so we can skip the class search\n         * next time through.\n         *\n         * TODO: should we be doing this when fromUnverifiedConstant==true?\n         * (see comments at top of oo/Class.c)\n         */\n        dvmDexSetResolvedClass(pDvmDex, classIdx, resClass);\n    } else {\n        /* not found, exception should be raised */\n        LOGVV(\"Class not found: %s\",\n            dexStringByTypeIdx(pDvmDex->pDexFile, classIdx));\n        assert(dvmCheckException(dvmThreadSelf()));\n    }\n    return resClass;\n}\n```\n\n实际上，这一步dex的一致性判断，也是google为了防止外部DEX注入的一个安全方案，即保证运行期的Class与其直接引用类之间所在的DEX关系要与安装时候一致\n\n\n<br>\n源码链接:\nhttp://osxr.org:8080/android/source/dalvik/vm/analysis/DexPrepare.cpp\nhttp://osxr.org:8080/android/source/dalvik/vm/analysis/DexVerify.cpp\nhttp://osxr.org:8080/android/source/dalvik/vm/oo/Resolve.cpp\n\n","slug":"Dalvik中PreVerify问题","published":1,"updated":"2017-02-08T11:27:41.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cizpjnf25000bbaqw8xs0sjjx","content":"<h2 id=\"PreVerify（预校验）的由来\"><a href=\"#PreVerify（预校验）的由来\" class=\"headerlink\" title=\"PreVerify（预校验）的由来\"></a>PreVerify（预校验）的由来</h2><p>Dalvik 虚拟机在启动的时候，会有许多的启动参数，其中有一项就是verify，当verify被打开的时候，doVerify变量为true，则进行类的校验（dvmVerifyClass方法调用）。若校验成功，则这个类会被打上标记：CLASS_ISPREVERIFIED。<br>上面描述的过程是dex -&gt; odex (dexopt 过程)时，做的一个优化。当从classes.dex 变为 odex 后，才会被拿去执行。</p>\n<h2 id=\"Class-被-Preverify-的过程\"><a href=\"#Class-被-Preverify-的过程\" class=\"headerlink\" title=\"Class 被 Preverify 的过程\"></a>Class 被 Preverify 的过程</h2><p>在dex 被 dexopt 的过程中，源码中有校验和优化 Class 相关的操作：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/*</span></div><div class=\"line\"> * Verify and/or optimize a specific class.</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">verifyAndOptimizeClass</span><span class=\"params\">(DexFile* pDexFile, ClassObject* clazz,</span></span></div><div class=\"line\">    <span class=\"keyword\">const</span> DexClassDef* pClassDef, <span class=\"keyword\">bool</span> doVerify, <span class=\"keyword\">bool</span> doOpt)</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* classDescriptor;</div><div class=\"line\">    <span class=\"keyword\">bool</span> verified = <span class=\"literal\">false</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (clazz-&gt;pDvmDex-&gt;pDexFile != pDexFile) &#123;</div><div class=\"line\">        <span class=\"comment\">/*</span></div><div class=\"line\">         * The current DEX file defined a class that is also present in the</div><div class=\"line\">         * bootstrap class path.  The class loader favored the bootstrap</div><div class=\"line\">         * version, which means that we have a pointer to a class that is</div><div class=\"line\">         * (a) not the one we want to examine, and (b) mapped read-only,</div><div class=\"line\">         * so we will seg fault if we try to rewrite instructions inside it.</div><div class=\"line\">         */</div><div class=\"line\">        ALOGD(<span class=\"string\">\"DexOpt: not verifying/optimizing '%s': multiple definitions\"</span>,</div><div class=\"line\">            clazz-&gt;descriptor);</div><div class=\"line\">        <span class=\"keyword\">return</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    classDescriptor = dexStringByTypeIdx(pDexFile, pClassDef-&gt;classIdx);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/*</span></div><div class=\"line\">     * First, try to verify it.</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"keyword\">if</span> (doVerify) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (dvmVerifyClass(clazz)) &#123;</div><div class=\"line\">            <span class=\"comment\">/*</span></div><div class=\"line\">             * Set the \"is preverified\" flag in the DexClassDef.  We</div><div class=\"line\">             * do it here, rather than in the ClassObject structure,</div><div class=\"line\">             * because the DexClassDef is part of the odex file.</div><div class=\"line\">             */</div><div class=\"line\">            assert((clazz-&gt;accessFlags &amp; JAVA_FLAGS_MASK) ==</div><div class=\"line\">                pClassDef-&gt;accessFlags);</div><div class=\"line\">            ((DexClassDef*)pClassDef)-&gt;accessFlags |= CLASS_ISPREVERIFIED;</div><div class=\"line\">            verified = <span class=\"literal\">true</span>;</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"comment\">// <span class=\"doctag\">TODO:</span> log when in verbose mode</span></div><div class=\"line\">            ALOGV(<span class=\"string\">\"DexOpt: '%s' failed verification\"</span>, classDescriptor);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (doOpt) &#123;</div><div class=\"line\">        <span class=\"keyword\">bool</span> needVerify = (gDvm.dexOptMode == OPTIMIZE_MODE_VERIFIED ||</div><div class=\"line\">                           gDvm.dexOptMode == OPTIMIZE_MODE_FULL);</div><div class=\"line\">        <span class=\"keyword\">if</span> (!verified &amp;&amp; needVerify) &#123;</div><div class=\"line\">            ALOGV(<span class=\"string\">\"DexOpt: not optimizing '%s': not verified\"</span>,</div><div class=\"line\">                classDescriptor);</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            dvmOptimizeClass(clazz, <span class=\"literal\">false</span>);<span class=\"comment\">// 优化 Class 操作</span></div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">/* set the flag whether or not we actually changed anything */</span></div><div class=\"line\">            ((DexClassDef*)pClassDef)-&gt;accessFlags |= CLASS_ISOPTIMIZED;<span class=\"comment\">// Class被优化过后，也会打上被优化过的标记 CLASS_ISOPTIMIZED</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>dvmVerifyClass 的具体过程，源码中是这样描述的：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/*</span></div><div class=\"line\"> * Verify a class.</div><div class=\"line\"> *</div><div class=\"line\"> * By the time we get here, the value of gDvm.classVerifyMode should already</div><div class=\"line\"> * have been factored in.  If you want to call into the verifier even</div><div class=\"line\"> * though verification is disabled, that's your business.</div><div class=\"line\"> *</div><div class=\"line\"> * Returns \"true\" on success.</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">dvmVerifyClass</span><span class=\"params\">(ClassObject*clazz)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> i;</div><div class=\"line\">    <span class=\"keyword\">if</span> (dvmIsClassVerified(clazz)) &#123;</div><div class=\"line\">        ALOGD(<span class=\"string\">\"Ignoring duplicate verify attempt on %s\"</span>, clazz -&gt; descriptor);</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; clazz -&gt; directMethodCount; i++) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (!verifyMethod( &amp; clazz -&gt; directMethods[i]))&#123;</div><div class=\"line\">            LOG_VFY(<span class=\"string\">\"Verifier rejected class %s\"</span>, clazz -&gt; descriptor);</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; clazz -&gt; virtualMethodCount; i++) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (!verifyMethod( &amp; clazz -&gt; virtualMethods[i]))&#123;</div><div class=\"line\">            LOG_VFY(<span class=\"string\">\"Verifier rejected class %s\"</span>, clazz -&gt; descriptor);</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>其中，dvmVerifyClass中又去调用了 方法的校验 verifyMethod, 再去追源码：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/*</span></div><div class=\"line\"> * Perform verification on a single method.</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">bool</span> <span class=\"title\">verifyMethod</span><span class=\"params\">(Method* meth)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">bool</span> result = <span class=\"literal\">false</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/*</span></div><div class=\"line\">     * Verifier state blob.  Various values will be cached here so we</div><div class=\"line\">     * can avoid expensive lookups and pass fewer arguments around.</div><div class=\"line\">     */</div><div class=\"line\">    VerifierData vdata;</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">if</span> 1   <span class=\"comment\">// ndef NDEBUG</span></span></div><div class=\"line\">    <span class=\"built_in\">memset</span>(&amp;vdata, <span class=\"number\">0x99</span>, <span class=\"keyword\">sizeof</span>(vdata));</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></div><div class=\"line\"></div><div class=\"line\">    vdata.method = meth;</div><div class=\"line\">    vdata.insnsSize = dvmGetMethodInsnsSize(meth);</div><div class=\"line\">    vdata.insnRegCount = meth-&gt;registersSize;</div><div class=\"line\">    vdata.insnFlags = <span class=\"literal\">NULL</span>;</div><div class=\"line\">    vdata.uninitMap = <span class=\"literal\">NULL</span>;</div><div class=\"line\">    vdata.basicBlocks = <span class=\"literal\">NULL</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/*</span></div><div class=\"line\">     * If there aren't any instructions, make sure that's expected, then</div><div class=\"line\">     * exit successfully.  <span class=\"doctag\">Note:</span> for native methods, meth-&gt;insns gets set</div><div class=\"line\">     * to a native function pointer on first call, so don't use that as</div><div class=\"line\">     * an indicator.</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"keyword\">if</span> (vdata.insnsSize == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (!dvmIsNativeMethod(meth) &amp;&amp; !dvmIsAbstractMethod(meth)) &#123;</div><div class=\"line\">            LOG_VFY_METH(meth,</div><div class=\"line\">                <span class=\"string\">\"VFY: zero-length code in concrete non-native method\"</span>);</div><div class=\"line\">            <span class=\"keyword\">goto</span> bail;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">goto</span> success;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/*</span></div><div class=\"line\">     * Sanity-check the register counts.  ins + locals = registers, so make</div><div class=\"line\">     * sure that ins &lt;= registers.</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"keyword\">if</span> (meth-&gt;insSize &gt; meth-&gt;registersSize) &#123;</div><div class=\"line\">        LOG_VFY_METH(meth, <span class=\"string\">\"VFY: bad register counts (ins=%d regs=%d)\"</span>,</div><div class=\"line\">            meth-&gt;insSize, meth-&gt;registersSize);</div><div class=\"line\">        <span class=\"keyword\">goto</span> bail;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/*</span></div><div class=\"line\">     * Allocate and populate an array to hold instruction data.</div><div class=\"line\">     *</div><div class=\"line\">     * <span class=\"doctag\">TODO:</span> Consider keeping a reusable pre-allocated array sitting</div><div class=\"line\">     * around for smaller methods.</div><div class=\"line\">     */</div><div class=\"line\">    vdata.insnFlags = (InsnFlags*) <span class=\"built_in\">calloc</span>(vdata.insnsSize, <span class=\"keyword\">sizeof</span>(InsnFlags));</div><div class=\"line\">    <span class=\"keyword\">if</span> (vdata.insnFlags == <span class=\"literal\">NULL</span>)</div><div class=\"line\">        <span class=\"keyword\">goto</span> bail;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/*</span></div><div class=\"line\">     * Compute the width of each instruction and store the result in insnFlags.</div><div class=\"line\">     * Count up the #of occurrences of certain opcodes while we're at it.</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"keyword\">if</span> (!computeWidthsAndCountOps(&amp;vdata))</div><div class=\"line\">        <span class=\"keyword\">goto</span> bail;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/*</span></div><div class=\"line\">     * Allocate a map to hold the classes of uninitialized instances.</div><div class=\"line\">     */</div><div class=\"line\">    vdata.uninitMap = dvmCreateUninitInstanceMap(meth, vdata.insnFlags,</div><div class=\"line\">        vdata.newInstanceCount);</div><div class=\"line\">    <span class=\"keyword\">if</span> (vdata.uninitMap == <span class=\"literal\">NULL</span>)</div><div class=\"line\">        <span class=\"keyword\">goto</span> bail;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/*</span></div><div class=\"line\">     * Set the \"in try\" flags for all instructions guarded by a \"try\" block.</div><div class=\"line\">     * Also sets the \"branch target\" flag on exception handlers.</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"keyword\">if</span> (!scanTryCatchBlocks(meth, vdata.insnFlags))</div><div class=\"line\">        <span class=\"keyword\">goto</span> bail;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/*</span></div><div class=\"line\">     * Perform static instruction verification.  Also sets the \"branch</div><div class=\"line\">     * target\" flags.</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"keyword\">if</span> (!verifyInstructions(&amp;vdata))</div><div class=\"line\">        <span class=\"keyword\">goto</span> bail;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/*</span></div><div class=\"line\">     * Do code-flow analysis.</div><div class=\"line\">     *</div><div class=\"line\">     * We could probably skip this for a method with no registers, but</div><div class=\"line\">     * that's so rare that there's little point in checking.</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"keyword\">if</span> (!dvmVerifyCodeFlow(&amp;vdata)) &#123;</div><div class=\"line\">        <span class=\"comment\">//ALOGD(\"+++ %s failed code flow\", meth-&gt;name);</span></div><div class=\"line\">        <span class=\"keyword\">goto</span> bail;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">success:</div><div class=\"line\">    result = <span class=\"literal\">true</span>;</div><div class=\"line\"></div><div class=\"line\">bail:</div><div class=\"line\">    dvmFreeVfyBasicBlocks(&amp;vdata);</div><div class=\"line\">    dvmFreeUninitInstanceMap(vdata.uninitMap);</div><div class=\"line\">    <span class=\"built_in\">free</span>(vdata.insnFlags);</div><div class=\"line\">    <span class=\"keyword\">return</span> result;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>dvmVerifyClass 具体过程中，会去校验 这个 Class中的所有的 directMethod 方法，和 virtualMethod 方法。具体这些方法包含哪些呢？ 其中时包含了：</p>\n<ul>\n<li>static 方法</li>\n<li>private 方法</li>\n<li>构造方法</li>\n<li>… …</li>\n</ul>\n<p>由此可知：  如果这些方法中直接引用到的类（第一层级关系，不会进行递归搜索） 和 class (源码中的clazz) 在同一个 dex 中的话，这个类就会被打上  CLASS_ISPREVERIFY 标记</p>\n<h2 id=\"PreVerify-缘由\"><a href=\"#PreVerify-缘由\" class=\"headerlink\" title=\"PreVerify 缘由\"></a>PreVerify 缘由</h2><ul>\n<li>一方面，Dalvik 虚拟机在安装期间，为Class 打上 CLASS_ISPREVERIFIED 是为了提高性能，下次使用时，则会省去校验操作，提高访问效率。</li>\n<li>另一方面，被标上“CLASS_ISPREVERIFIED”的类，dvm在运行期载入Class时候，会对其内存中对应的直接引用类进行校验，如果该类存在与直接引用类所在的dex不是同一个，则直接报“pre-verification” 错误，该类无法加载。</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\">ClassObject* <span class=\"title\">dvmResolveClass</span><span class=\"params\">(<span class=\"keyword\">const</span> ClassObject* referrer, u4 classIdx,</span></span></div><div class=\"line\">    <span class=\"keyword\">bool</span> fromUnverifiedConstant)</div><div class=\"line\">&#123;</div><div class=\"line\">    DvmDex* pDvmDex = referrer-&gt;pDvmDex;</div><div class=\"line\">    ClassObject* resClass;</div><div class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* className;</div><div class=\"line\">    <span class=\"comment\">/*</span></div><div class=\"line\">     * Check the table first -- this gets called from the other \"resolve\"</div><div class=\"line\">     * methods.</div><div class=\"line\">     */</div><div class=\"line\">    resClass = dvmDexGetResolvedClass(pDvmDex, classIdx); <span class=\"comment\">// 预先在dex的缓存表里查</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (resClass != <span class=\"literal\">NULL</span>)</div><div class=\"line\">        <span class=\"keyword\">return</span> resClass;</div><div class=\"line\">    LOGVV(<span class=\"string\">\"--- resolving class %u (referrer=%s cl=%p)\"</span>,</div><div class=\"line\">        classIdx, referrer-&gt;descriptor, referrer-&gt;classLoader);</div><div class=\"line\">    <span class=\"comment\">/*</span></div><div class=\"line\">     * Class hasn't been loaded yet, or is in the process of being loaded</div><div class=\"line\">     * and initialized now.  Try to get a copy.  If we find one, put the</div><div class=\"line\">     * pointer in the DexTypeId.  There isn't a race condition here --</div><div class=\"line\">     * 32-bit writes are guaranteed atomic on all target platforms.  Worst</div><div class=\"line\">     * case we have two threads storing the same value.</div><div class=\"line\">     *</div><div class=\"line\">     * If this is an array class, we'll generate it here.</div><div class=\"line\">     */</div><div class=\"line\">    className = dexStringByTypeIdx(pDvmDex-&gt;pDexFile, classIdx);</div><div class=\"line\">    <span class=\"keyword\">if</span> (className[<span class=\"number\">0</span>] != <span class=\"string\">'\\0'</span> &amp;&amp; className[<span class=\"number\">1</span>] == <span class=\"string\">'\\0'</span>) &#123;</div><div class=\"line\">        <span class=\"comment\">/* primitive type */</span></div><div class=\"line\">        resClass = dvmFindPrimitiveClass(className[<span class=\"number\">0</span>]);</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        resClass = dvmFindClassNoInit(className, referrer-&gt;classLoader);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> (resClass != <span class=\"literal\">NULL</span>) &#123;</div><div class=\"line\">        <span class=\"comment\">/*</span></div><div class=\"line\">         * If the referrer was pre-verified, the resolved class must come</div><div class=\"line\">         * from the same DEX or from a bootstrap class.  The pre-verifier</div><div class=\"line\">         * makes assumptions that could be invalidated by a wacky class</div><div class=\"line\">         * loader.  (See the notes at the top of oo/Class.c.)</div><div class=\"line\">         *</div><div class=\"line\">         * The verifier does *not* fail a class for using a const-class</div><div class=\"line\">         * or instance-of instruction referring to an unresolveable class,</div><div class=\"line\">         * because the result of the instruction is simply a Class object</div><div class=\"line\">         * or boolean -- there's no need to resolve the class object during</div><div class=\"line\">         * verification.  Instance field and virtual method accesses can</div><div class=\"line\">         * break dangerously if we get the wrong class, but const-class and</div><div class=\"line\">         * instance-of are only interesting at execution time.  So, if we</div><div class=\"line\">         * we got here as part of executing one of the \"unverified class\"</div><div class=\"line\">         * instructions, we skip the additional check.</div><div class=\"line\">         *</div><div class=\"line\">         * Ditto for class references from annotations and exception</div><div class=\"line\">         * handler lists.</div><div class=\"line\">         */</div><div class=\"line\">        <span class=\"keyword\">if</span> (!fromUnverifiedConstant &amp;&amp;</div><div class=\"line\">            IS_CLASS_FLAG_SET(referrer, CLASS_ISPREVERIFIED))</div><div class=\"line\">        &#123;</div><div class=\"line\">            ClassObject* resClassCheck = resClass;</div><div class=\"line\">            <span class=\"keyword\">if</span> (dvmIsArrayClass(resClassCheck))</div><div class=\"line\">                resClassCheck = resClassCheck-&gt;elementClass;</div><div class=\"line\">            <span class=\"keyword\">if</span> (referrer-&gt;pDvmDex != resClassCheck-&gt;pDvmDex &amp;&amp;</div><div class=\"line\">                resClassCheck-&gt;classLoader != <span class=\"literal\">NULL</span>)  <span class=\"comment\">// 校验dex是否是安装时的同一个dex</span></div><div class=\"line\">            &#123;</div><div class=\"line\">                ALOGW(<span class=\"string\">\"Class resolved by unexpected DEX:\"</span></div><div class=\"line\">                     <span class=\"string\">\" %s(%p):%p ref [%s] %s(%p):%p\"</span>,</div><div class=\"line\">                    referrer-&gt;descriptor, referrer-&gt;classLoader,</div><div class=\"line\">                    referrer-&gt;pDvmDex,</div><div class=\"line\">                    resClass-&gt;descriptor, resClassCheck-&gt;descriptor,</div><div class=\"line\">                    resClassCheck-&gt;classLoader, resClassCheck-&gt;pDvmDex);</div><div class=\"line\">                ALOGW(<span class=\"string\">\"(%s had used a different %s during pre-verification)\"</span>,</div><div class=\"line\">                    referrer-&gt;descriptor, resClass-&gt;descriptor);</div><div class=\"line\">                dvmThrowIllegalAccessError(</div><div class=\"line\">                    <span class=\"string\">\"Class ref in pre-verified class resolved to unexpected \"</span></div><div class=\"line\">                    <span class=\"string\">\"implementation\"</span>);</div><div class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        LOGVV(<span class=\"string\">\"##### +ResolveClass(%s): referrer=%s dex=%p ldr=%p ref=%d\"</span>,</div><div class=\"line\">            resClass-&gt;descriptor, referrer-&gt;descriptor, referrer-&gt;pDvmDex,</div><div class=\"line\">            referrer-&gt;classLoader, classIdx);</div><div class=\"line\">        <span class=\"comment\">/*</span></div><div class=\"line\">         * Add what we found to the list so we can skip the class search</div><div class=\"line\">         * next time through.</div><div class=\"line\">         *</div><div class=\"line\">         * <span class=\"doctag\">TODO:</span> should we be doing this when fromUnverifiedConstant==true?</div><div class=\"line\">         * (see comments at top of oo/Class.c)</div><div class=\"line\">         */</div><div class=\"line\">        dvmDexSetResolvedClass(pDvmDex, classIdx, resClass);</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"comment\">/* not found, exception should be raised */</span></div><div class=\"line\">        LOGVV(<span class=\"string\">\"Class not found: %s\"</span>,</div><div class=\"line\">            dexStringByTypeIdx(pDvmDex-&gt;pDexFile, classIdx));</div><div class=\"line\">        assert(dvmCheckException(dvmThreadSelf()));</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> resClass;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>实际上，这一步dex的一致性判断，也是google为了防止外部DEX注入的一个安全方案，即保证运行期的Class与其直接引用类之间所在的DEX关系要与安装时候一致</p>\n<p><br><br>源码链接:<br><a href=\"http://osxr.org:8080/android/source/dalvik/vm/analysis/DexPrepare.cpp\" target=\"_blank\" rel=\"external\">http://osxr.org:8080/android/source/dalvik/vm/analysis/DexPrepare.cpp</a><br><a href=\"http://osxr.org:8080/android/source/dalvik/vm/analysis/DexVerify.cpp\" target=\"_blank\" rel=\"external\">http://osxr.org:8080/android/source/dalvik/vm/analysis/DexVerify.cpp</a><br><a href=\"http://osxr.org:8080/android/source/dalvik/vm/oo/Resolve.cpp\" target=\"_blank\" rel=\"external\">http://osxr.org:8080/android/source/dalvik/vm/oo/Resolve.cpp</a></p>\n","excerpt":"","more":"<h2 id=\"PreVerify（预校验）的由来\"><a href=\"#PreVerify（预校验）的由来\" class=\"headerlink\" title=\"PreVerify（预校验）的由来\"></a>PreVerify（预校验）的由来</h2><p>Dalvik 虚拟机在启动的时候，会有许多的启动参数，其中有一项就是verify，当verify被打开的时候，doVerify变量为true，则进行类的校验（dvmVerifyClass方法调用）。若校验成功，则这个类会被打上标记：CLASS_ISPREVERIFIED。<br>上面描述的过程是dex -&gt; odex (dexopt 过程)时，做的一个优化。当从classes.dex 变为 odex 后，才会被拿去执行。</p>\n<h2 id=\"Class-被-Preverify-的过程\"><a href=\"#Class-被-Preverify-的过程\" class=\"headerlink\" title=\"Class 被 Preverify 的过程\"></a>Class 被 Preverify 的过程</h2><p>在dex 被 dexopt 的过程中，源码中有校验和优化 Class 相关的操作：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/*</div><div class=\"line\"> * Verify and/or optimize a specific class.</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">verifyAndOptimizeClass</span><span class=\"params\">(DexFile* pDexFile, ClassObject* clazz,</div><div class=\"line\">    <span class=\"keyword\">const</span> DexClassDef* pClassDef, <span class=\"keyword\">bool</span> doVerify, <span class=\"keyword\">bool</span> doOpt)</span></div><div class=\"line\"></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* classDescriptor;</div><div class=\"line\">    <span class=\"keyword\">bool</span> verified = <span class=\"literal\">false</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (clazz-&gt;pDvmDex-&gt;pDexFile != pDexFile) &#123;</div><div class=\"line\">        <span class=\"comment\">/*</div><div class=\"line\">         * The current DEX file defined a class that is also present in the</div><div class=\"line\">         * bootstrap class path.  The class loader favored the bootstrap</div><div class=\"line\">         * version, which means that we have a pointer to a class that is</div><div class=\"line\">         * (a) not the one we want to examine, and (b) mapped read-only,</div><div class=\"line\">         * so we will seg fault if we try to rewrite instructions inside it.</div><div class=\"line\">         */</span></div><div class=\"line\">        ALOGD(<span class=\"string\">\"DexOpt: not verifying/optimizing '%s': multiple definitions\"</span>,</div><div class=\"line\">            clazz-&gt;descriptor);</div><div class=\"line\">        <span class=\"keyword\">return</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    classDescriptor = dexStringByTypeIdx(pDexFile, pClassDef-&gt;classIdx);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/*</div><div class=\"line\">     * First, try to verify it.</div><div class=\"line\">     */</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (doVerify) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (dvmVerifyClass(clazz)) &#123;</div><div class=\"line\">            <span class=\"comment\">/*</div><div class=\"line\">             * Set the \"is preverified\" flag in the DexClassDef.  We</div><div class=\"line\">             * do it here, rather than in the ClassObject structure,</div><div class=\"line\">             * because the DexClassDef is part of the odex file.</div><div class=\"line\">             */</span></div><div class=\"line\">            assert((clazz-&gt;accessFlags &amp; JAVA_FLAGS_MASK) ==</div><div class=\"line\">                pClassDef-&gt;accessFlags);</div><div class=\"line\">            ((DexClassDef*)pClassDef)-&gt;accessFlags |= CLASS_ISPREVERIFIED;</div><div class=\"line\">            verified = <span class=\"literal\">true</span>;</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"comment\">// <span class=\"doctag\">TODO:</span> log when in verbose mode</span></div><div class=\"line\">            ALOGV(<span class=\"string\">\"DexOpt: '%s' failed verification\"</span>, classDescriptor);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (doOpt) &#123;</div><div class=\"line\">        <span class=\"keyword\">bool</span> needVerify = (gDvm.dexOptMode == OPTIMIZE_MODE_VERIFIED ||</div><div class=\"line\">                           gDvm.dexOptMode == OPTIMIZE_MODE_FULL);</div><div class=\"line\">        <span class=\"keyword\">if</span> (!verified &amp;&amp; needVerify) &#123;</div><div class=\"line\">            ALOGV(<span class=\"string\">\"DexOpt: not optimizing '%s': not verified\"</span>,</div><div class=\"line\">                classDescriptor);</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            dvmOptimizeClass(clazz, <span class=\"literal\">false</span>);<span class=\"comment\">// 优化 Class 操作</span></div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">/* set the flag whether or not we actually changed anything */</span></div><div class=\"line\">            ((DexClassDef*)pClassDef)-&gt;accessFlags |= CLASS_ISOPTIMIZED;<span class=\"comment\">// Class被优化过后，也会打上被优化过的标记 CLASS_ISOPTIMIZED</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>dvmVerifyClass 的具体过程，源码中是这样描述的：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/*</div><div class=\"line\"> * Verify a class.</div><div class=\"line\"> *</div><div class=\"line\"> * By the time we get here, the value of gDvm.classVerifyMode should already</div><div class=\"line\"> * have been factored in.  If you want to call into the verifier even</div><div class=\"line\"> * though verification is disabled, that's your business.</div><div class=\"line\"> *</div><div class=\"line\"> * Returns \"true\" on success.</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">dvmVerifyClass</span><span class=\"params\">(ClassObject*clazz)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> i;</div><div class=\"line\">    <span class=\"keyword\">if</span> (dvmIsClassVerified(clazz)) &#123;</div><div class=\"line\">        ALOGD(<span class=\"string\">\"Ignoring duplicate verify attempt on %s\"</span>, clazz -&gt; descriptor);</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; clazz -&gt; directMethodCount; i++) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (!verifyMethod( &amp; clazz -&gt; directMethods[i]))&#123;</div><div class=\"line\">            LOG_VFY(<span class=\"string\">\"Verifier rejected class %s\"</span>, clazz -&gt; descriptor);</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; clazz -&gt; virtualMethodCount; i++) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (!verifyMethod( &amp; clazz -&gt; virtualMethods[i]))&#123;</div><div class=\"line\">            LOG_VFY(<span class=\"string\">\"Verifier rejected class %s\"</span>, clazz -&gt; descriptor);</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>其中，dvmVerifyClass中又去调用了 方法的校验 verifyMethod, 再去追源码：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/*</div><div class=\"line\"> * Perform verification on a single method.</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">bool</span> <span class=\"title\">verifyMethod</span><span class=\"params\">(Method* meth)</span></div><div class=\"line\"></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">bool</span> result = <span class=\"literal\">false</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/*</div><div class=\"line\">     * Verifier state blob.  Various values will be cached here so we</div><div class=\"line\">     * can avoid expensive lookups and pass fewer arguments around.</div><div class=\"line\">     */</span></div><div class=\"line\">    VerifierData vdata;</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">if</span> 1   <span class=\"comment\">// ndef NDEBUG</span></span></div><div class=\"line\">    <span class=\"built_in\">memset</span>(&amp;vdata, <span class=\"number\">0x99</span>, <span class=\"keyword\">sizeof</span>(vdata));</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></div><div class=\"line\"></div><div class=\"line\">    vdata.method = meth;</div><div class=\"line\">    vdata.insnsSize = dvmGetMethodInsnsSize(meth);</div><div class=\"line\">    vdata.insnRegCount = meth-&gt;registersSize;</div><div class=\"line\">    vdata.insnFlags = <span class=\"literal\">NULL</span>;</div><div class=\"line\">    vdata.uninitMap = <span class=\"literal\">NULL</span>;</div><div class=\"line\">    vdata.basicBlocks = <span class=\"literal\">NULL</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/*</div><div class=\"line\">     * If there aren't any instructions, make sure that's expected, then</div><div class=\"line\">     * exit successfully.  <span class=\"doctag\">Note:</span> for native methods, meth-&gt;insns gets set</div><div class=\"line\">     * to a native function pointer on first call, so don't use that as</div><div class=\"line\">     * an indicator.</div><div class=\"line\">     */</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (vdata.insnsSize == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (!dvmIsNativeMethod(meth) &amp;&amp; !dvmIsAbstractMethod(meth)) &#123;</div><div class=\"line\">            LOG_VFY_METH(meth,</div><div class=\"line\">                <span class=\"string\">\"VFY: zero-length code in concrete non-native method\"</span>);</div><div class=\"line\">            <span class=\"keyword\">goto</span> bail;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">goto</span> success;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/*</div><div class=\"line\">     * Sanity-check the register counts.  ins + locals = registers, so make</div><div class=\"line\">     * sure that ins &lt;= registers.</div><div class=\"line\">     */</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (meth-&gt;insSize &gt; meth-&gt;registersSize) &#123;</div><div class=\"line\">        LOG_VFY_METH(meth, <span class=\"string\">\"VFY: bad register counts (ins=%d regs=%d)\"</span>,</div><div class=\"line\">            meth-&gt;insSize, meth-&gt;registersSize);</div><div class=\"line\">        <span class=\"keyword\">goto</span> bail;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/*</div><div class=\"line\">     * Allocate and populate an array to hold instruction data.</div><div class=\"line\">     *</div><div class=\"line\">     * <span class=\"doctag\">TODO:</span> Consider keeping a reusable pre-allocated array sitting</div><div class=\"line\">     * around for smaller methods.</div><div class=\"line\">     */</span></div><div class=\"line\">    vdata.insnFlags = (InsnFlags*) <span class=\"built_in\">calloc</span>(vdata.insnsSize, <span class=\"keyword\">sizeof</span>(InsnFlags));</div><div class=\"line\">    <span class=\"keyword\">if</span> (vdata.insnFlags == <span class=\"literal\">NULL</span>)</div><div class=\"line\">        <span class=\"keyword\">goto</span> bail;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/*</div><div class=\"line\">     * Compute the width of each instruction and store the result in insnFlags.</div><div class=\"line\">     * Count up the #of occurrences of certain opcodes while we're at it.</div><div class=\"line\">     */</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (!computeWidthsAndCountOps(&amp;vdata))</div><div class=\"line\">        <span class=\"keyword\">goto</span> bail;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/*</div><div class=\"line\">     * Allocate a map to hold the classes of uninitialized instances.</div><div class=\"line\">     */</span></div><div class=\"line\">    vdata.uninitMap = dvmCreateUninitInstanceMap(meth, vdata.insnFlags,</div><div class=\"line\">        vdata.newInstanceCount);</div><div class=\"line\">    <span class=\"keyword\">if</span> (vdata.uninitMap == <span class=\"literal\">NULL</span>)</div><div class=\"line\">        <span class=\"keyword\">goto</span> bail;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/*</div><div class=\"line\">     * Set the \"in try\" flags for all instructions guarded by a \"try\" block.</div><div class=\"line\">     * Also sets the \"branch target\" flag on exception handlers.</div><div class=\"line\">     */</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (!scanTryCatchBlocks(meth, vdata.insnFlags))</div><div class=\"line\">        <span class=\"keyword\">goto</span> bail;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/*</div><div class=\"line\">     * Perform static instruction verification.  Also sets the \"branch</div><div class=\"line\">     * target\" flags.</div><div class=\"line\">     */</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (!verifyInstructions(&amp;vdata))</div><div class=\"line\">        <span class=\"keyword\">goto</span> bail;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/*</div><div class=\"line\">     * Do code-flow analysis.</div><div class=\"line\">     *</div><div class=\"line\">     * We could probably skip this for a method with no registers, but</div><div class=\"line\">     * that's so rare that there's little point in checking.</div><div class=\"line\">     */</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (!dvmVerifyCodeFlow(&amp;vdata)) &#123;</div><div class=\"line\">        <span class=\"comment\">//ALOGD(\"+++ %s failed code flow\", meth-&gt;name);</span></div><div class=\"line\">        <span class=\"keyword\">goto</span> bail;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">success:</div><div class=\"line\">    result = <span class=\"literal\">true</span>;</div><div class=\"line\"></div><div class=\"line\">bail:</div><div class=\"line\">    dvmFreeVfyBasicBlocks(&amp;vdata);</div><div class=\"line\">    dvmFreeUninitInstanceMap(vdata.uninitMap);</div><div class=\"line\">    <span class=\"built_in\">free</span>(vdata.insnFlags);</div><div class=\"line\">    <span class=\"keyword\">return</span> result;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>dvmVerifyClass 具体过程中，会去校验 这个 Class中的所有的 directMethod 方法，和 virtualMethod 方法。具体这些方法包含哪些呢？ 其中时包含了：</p>\n<ul>\n<li>static 方法</li>\n<li>private 方法</li>\n<li>构造方法</li>\n<li>… …</li>\n</ul>\n<p>由此可知：  如果这些方法中直接引用到的类（第一层级关系，不会进行递归搜索） 和 class (源码中的clazz) 在同一个 dex 中的话，这个类就会被打上  CLASS_ISPREVERIFY 标记</p>\n<h2 id=\"PreVerify-缘由\"><a href=\"#PreVerify-缘由\" class=\"headerlink\" title=\"PreVerify 缘由\"></a>PreVerify 缘由</h2><ul>\n<li>一方面，Dalvik 虚拟机在安装期间，为Class 打上 CLASS_ISPREVERIFIED 是为了提高性能，下次使用时，则会省去校验操作，提高访问效率。</li>\n<li>另一方面，被标上“CLASS_ISPREVERIFIED”的类，dvm在运行期载入Class时候，会对其内存中对应的直接引用类进行校验，如果该类存在与直接引用类所在的dex不是同一个，则直接报“pre-verification” 错误，该类无法加载。</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\">ClassObject* <span class=\"title\">dvmResolveClass</span><span class=\"params\">(<span class=\"keyword\">const</span> ClassObject* referrer, u4 classIdx,</div><div class=\"line\">    <span class=\"keyword\">bool</span> fromUnverifiedConstant)</span></div><div class=\"line\"></span>&#123;</div><div class=\"line\">    DvmDex* pDvmDex = referrer-&gt;pDvmDex;</div><div class=\"line\">    ClassObject* resClass;</div><div class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* className;</div><div class=\"line\">    <span class=\"comment\">/*</div><div class=\"line\">     * Check the table first -- this gets called from the other \"resolve\"</div><div class=\"line\">     * methods.</div><div class=\"line\">     */</span></div><div class=\"line\">    resClass = dvmDexGetResolvedClass(pDvmDex, classIdx); <span class=\"comment\">// 预先在dex的缓存表里查</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (resClass != <span class=\"literal\">NULL</span>)</div><div class=\"line\">        <span class=\"keyword\">return</span> resClass;</div><div class=\"line\">    LOGVV(<span class=\"string\">\"--- resolving class %u (referrer=%s cl=%p)\"</span>,</div><div class=\"line\">        classIdx, referrer-&gt;descriptor, referrer-&gt;classLoader);</div><div class=\"line\">    <span class=\"comment\">/*</div><div class=\"line\">     * Class hasn't been loaded yet, or is in the process of being loaded</div><div class=\"line\">     * and initialized now.  Try to get a copy.  If we find one, put the</div><div class=\"line\">     * pointer in the DexTypeId.  There isn't a race condition here --</div><div class=\"line\">     * 32-bit writes are guaranteed atomic on all target platforms.  Worst</div><div class=\"line\">     * case we have two threads storing the same value.</div><div class=\"line\">     *</div><div class=\"line\">     * If this is an array class, we'll generate it here.</div><div class=\"line\">     */</span></div><div class=\"line\">    className = dexStringByTypeIdx(pDvmDex-&gt;pDexFile, classIdx);</div><div class=\"line\">    <span class=\"keyword\">if</span> (className[<span class=\"number\">0</span>] != <span class=\"string\">'\\0'</span> &amp;&amp; className[<span class=\"number\">1</span>] == <span class=\"string\">'\\0'</span>) &#123;</div><div class=\"line\">        <span class=\"comment\">/* primitive type */</span></div><div class=\"line\">        resClass = dvmFindPrimitiveClass(className[<span class=\"number\">0</span>]);</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        resClass = dvmFindClassNoInit(className, referrer-&gt;classLoader);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> (resClass != <span class=\"literal\">NULL</span>) &#123;</div><div class=\"line\">        <span class=\"comment\">/*</div><div class=\"line\">         * If the referrer was pre-verified, the resolved class must come</div><div class=\"line\">         * from the same DEX or from a bootstrap class.  The pre-verifier</div><div class=\"line\">         * makes assumptions that could be invalidated by a wacky class</div><div class=\"line\">         * loader.  (See the notes at the top of oo/Class.c.)</div><div class=\"line\">         *</div><div class=\"line\">         * The verifier does *not* fail a class for using a const-class</div><div class=\"line\">         * or instance-of instruction referring to an unresolveable class,</div><div class=\"line\">         * because the result of the instruction is simply a Class object</div><div class=\"line\">         * or boolean -- there's no need to resolve the class object during</div><div class=\"line\">         * verification.  Instance field and virtual method accesses can</div><div class=\"line\">         * break dangerously if we get the wrong class, but const-class and</div><div class=\"line\">         * instance-of are only interesting at execution time.  So, if we</div><div class=\"line\">         * we got here as part of executing one of the \"unverified class\"</div><div class=\"line\">         * instructions, we skip the additional check.</div><div class=\"line\">         *</div><div class=\"line\">         * Ditto for class references from annotations and exception</div><div class=\"line\">         * handler lists.</div><div class=\"line\">         */</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (!fromUnverifiedConstant &amp;&amp;</div><div class=\"line\">            IS_CLASS_FLAG_SET(referrer, CLASS_ISPREVERIFIED))</div><div class=\"line\">        &#123;</div><div class=\"line\">            ClassObject* resClassCheck = resClass;</div><div class=\"line\">            <span class=\"keyword\">if</span> (dvmIsArrayClass(resClassCheck))</div><div class=\"line\">                resClassCheck = resClassCheck-&gt;elementClass;</div><div class=\"line\">            <span class=\"keyword\">if</span> (referrer-&gt;pDvmDex != resClassCheck-&gt;pDvmDex &amp;&amp;</div><div class=\"line\">                resClassCheck-&gt;classLoader != <span class=\"literal\">NULL</span>)  <span class=\"comment\">// 校验dex是否是安装时的同一个dex</span></div><div class=\"line\">            &#123;</div><div class=\"line\">                ALOGW(<span class=\"string\">\"Class resolved by unexpected DEX:\"</span></div><div class=\"line\">                     <span class=\"string\">\" %s(%p):%p ref [%s] %s(%p):%p\"</span>,</div><div class=\"line\">                    referrer-&gt;descriptor, referrer-&gt;classLoader,</div><div class=\"line\">                    referrer-&gt;pDvmDex,</div><div class=\"line\">                    resClass-&gt;descriptor, resClassCheck-&gt;descriptor,</div><div class=\"line\">                    resClassCheck-&gt;classLoader, resClassCheck-&gt;pDvmDex);</div><div class=\"line\">                ALOGW(<span class=\"string\">\"(%s had used a different %s during pre-verification)\"</span>,</div><div class=\"line\">                    referrer-&gt;descriptor, resClass-&gt;descriptor);</div><div class=\"line\">                dvmThrowIllegalAccessError(</div><div class=\"line\">                    <span class=\"string\">\"Class ref in pre-verified class resolved to unexpected \"</span></div><div class=\"line\">                    <span class=\"string\">\"implementation\"</span>);</div><div class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        LOGVV(<span class=\"string\">\"##### +ResolveClass(%s): referrer=%s dex=%p ldr=%p ref=%d\"</span>,</div><div class=\"line\">            resClass-&gt;descriptor, referrer-&gt;descriptor, referrer-&gt;pDvmDex,</div><div class=\"line\">            referrer-&gt;classLoader, classIdx);</div><div class=\"line\">        <span class=\"comment\">/*</div><div class=\"line\">         * Add what we found to the list so we can skip the class search</div><div class=\"line\">         * next time through.</div><div class=\"line\">         *</div><div class=\"line\">         * <span class=\"doctag\">TODO:</span> should we be doing this when fromUnverifiedConstant==true?</div><div class=\"line\">         * (see comments at top of oo/Class.c)</div><div class=\"line\">         */</span></div><div class=\"line\">        dvmDexSetResolvedClass(pDvmDex, classIdx, resClass);</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"comment\">/* not found, exception should be raised */</span></div><div class=\"line\">        LOGVV(<span class=\"string\">\"Class not found: %s\"</span>,</div><div class=\"line\">            dexStringByTypeIdx(pDvmDex-&gt;pDexFile, classIdx));</div><div class=\"line\">        assert(dvmCheckException(dvmThreadSelf()));</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> resClass;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>实际上，这一步dex的一致性判断，也是google为了防止外部DEX注入的一个安全方案，即保证运行期的Class与其直接引用类之间所在的DEX关系要与安装时候一致</p>\n<p><br><br>源码链接:<br><a href=\"http://osxr.org:8080/android/source/dalvik/vm/analysis/DexPrepare.cpp\">http://osxr.org:8080/android/source/dalvik/vm/analysis/DexPrepare.cpp</a><br><a href=\"http://osxr.org:8080/android/source/dalvik/vm/analysis/DexVerify.cpp\">http://osxr.org:8080/android/source/dalvik/vm/analysis/DexVerify.cpp</a><br><a href=\"http://osxr.org:8080/android/source/dalvik/vm/oo/Resolve.cpp\">http://osxr.org:8080/android/source/dalvik/vm/oo/Resolve.cpp</a></p>\n"},{"title":"Git学习笔记（一）","date":"2016-02-19T07:28:00.000Z","_content":"### 一、Git特点\n#### 1. 直接记录快照，而非差异比较\n* 在 Git 中保存项目状态时，它主要对当时的全部文件制作一个快照并保存这个快照的索引。\n* 为了高效，如果文件没有修改，Git 不再重新存储该文件，而是只保留一个链接指向之前存储的文件。\n* Git 对待数据更像是一个 快照流。\n#### 2. 近乎所有操作都是本地执行\n* 在 Git 中的绝大多数操作都只需要访问本地文件和资源，一般不需要来自网络上其它计算机的信息。\n#### 3. Git 保证完整性\n* Git 中所有数据在存储前都计算校验和，然后以校验和来引用。Git 用以计算校验和的机制叫做 SHA-1 散列（hash，哈希）。 \n这是一个由 40 个十六进制字符（0-9 和 a-f）组成字符串，基于 Git 中文件的内容或目录结构计算出来。 \nSHA-1 哈希看起来是这样：  \n\n       >24b9da6552252987aa493b52f8696cd6d3b00373\n\n* 实际上，Git 数据库中保存的信息都是以文件内容的哈希值来索引，而不是文件名\n#### 4. Git 一般只添加数据\n* 你执行的 Git 操作，几乎只往 Git 数据库中增加数据\n\n### 二、Git 中的文件有3种状态：\n#### 1. 已提交：数据已经安全的保存在本地数据库中\n#### 2. 已修改：修改了文件，但未保存到数据库中\n#### 3. 已暂存：对一个已修改文件的当前版本做了标记，使之包含在下次提交的快照中\n![](http://7xr1vo.com1.z0.glb.clouddn.com/%E6%96%87%E4%BB%B6%E7%9A%84%E7%8A%B6%E6%80%81%E5%8F%98%E5%8C%96%E5%91%A8%E6%9C%9F.png) \n\n### 三、Git 中的3个工作区域\n#### 1. Git仓库：保存项目的元数据和对象数据库，Git中最重要的部分，供其他人clone 仓库\n#### 2. 工作目录：对项目的某个版本独立提取出来的，供工作中使用、修改\n* 工作目录下的文件状态：\n\n    已跟踪：纳入了版本控制的文件，后期可能处于 未修改，已修改或放入暂存区了\n\n    未跟踪：工作目录下除已跟踪文件外的其他所有文件\n#### 3. 暂存区：是一个文件，保存下次将提交的文件列表信息，一般在Git仓库目录中，有时也被叫做索引\n![](http://7xr1vo.com1.z0.glb.clouddn.com/git3%E7%A7%8D%E5%B7%A5%E4%BD%9C%E5%8C%BA%E5%9F%9F.png) \n\n\n### 四、Git 的基本工作流程\n#### 1. 在工作目录中修改文件\n#### 2. 暂存文件，将文件的快照放入暂存区\n#### 3. 提交更新，找到暂存区的文件，将快照永久性存储到Git仓库中\n\n### 五、Git 个人信息初始配置\n* 全局信息配置：(个人默认信息)\n    >git config --global user.name \"xxx\"\n\t\n\t>git config --global user.email   xxx@qq.coom\n\n    此配置会写入 user目录下的 .gitconfig文件，实际上为个人信息默认值\n* 临时配置：\n\n    去掉 --global 即可\n    实际是在其配置列表中追加其信息，重复变量名，不同的value值\n    (Git每次会读取不同文件，其中就可能含有同一个配置)\n    Git 会使用每个变量的最后一次的配置的值","source":"_posts/Git学习笔记（一）.md","raw":"---\ntitle: Git学习笔记（一）\ndate: 2016-02-19 15:28\ncategories: 工具\ntags: Git\n---\n### 一、Git特点\n#### 1. 直接记录快照，而非差异比较\n* 在 Git 中保存项目状态时，它主要对当时的全部文件制作一个快照并保存这个快照的索引。\n* 为了高效，如果文件没有修改，Git 不再重新存储该文件，而是只保留一个链接指向之前存储的文件。\n* Git 对待数据更像是一个 快照流。\n#### 2. 近乎所有操作都是本地执行\n* 在 Git 中的绝大多数操作都只需要访问本地文件和资源，一般不需要来自网络上其它计算机的信息。\n#### 3. Git 保证完整性\n* Git 中所有数据在存储前都计算校验和，然后以校验和来引用。Git 用以计算校验和的机制叫做 SHA-1 散列（hash，哈希）。 \n这是一个由 40 个十六进制字符（0-9 和 a-f）组成字符串，基于 Git 中文件的内容或目录结构计算出来。 \nSHA-1 哈希看起来是这样：  \n\n       >24b9da6552252987aa493b52f8696cd6d3b00373\n\n* 实际上，Git 数据库中保存的信息都是以文件内容的哈希值来索引，而不是文件名\n#### 4. Git 一般只添加数据\n* 你执行的 Git 操作，几乎只往 Git 数据库中增加数据\n\n### 二、Git 中的文件有3种状态：\n#### 1. 已提交：数据已经安全的保存在本地数据库中\n#### 2. 已修改：修改了文件，但未保存到数据库中\n#### 3. 已暂存：对一个已修改文件的当前版本做了标记，使之包含在下次提交的快照中\n![](http://7xr1vo.com1.z0.glb.clouddn.com/%E6%96%87%E4%BB%B6%E7%9A%84%E7%8A%B6%E6%80%81%E5%8F%98%E5%8C%96%E5%91%A8%E6%9C%9F.png) \n\n### 三、Git 中的3个工作区域\n#### 1. Git仓库：保存项目的元数据和对象数据库，Git中最重要的部分，供其他人clone 仓库\n#### 2. 工作目录：对项目的某个版本独立提取出来的，供工作中使用、修改\n* 工作目录下的文件状态：\n\n    已跟踪：纳入了版本控制的文件，后期可能处于 未修改，已修改或放入暂存区了\n\n    未跟踪：工作目录下除已跟踪文件外的其他所有文件\n#### 3. 暂存区：是一个文件，保存下次将提交的文件列表信息，一般在Git仓库目录中，有时也被叫做索引\n![](http://7xr1vo.com1.z0.glb.clouddn.com/git3%E7%A7%8D%E5%B7%A5%E4%BD%9C%E5%8C%BA%E5%9F%9F.png) \n\n\n### 四、Git 的基本工作流程\n#### 1. 在工作目录中修改文件\n#### 2. 暂存文件，将文件的快照放入暂存区\n#### 3. 提交更新，找到暂存区的文件，将快照永久性存储到Git仓库中\n\n### 五、Git 个人信息初始配置\n* 全局信息配置：(个人默认信息)\n    >git config --global user.name \"xxx\"\n\t\n\t>git config --global user.email   xxx@qq.coom\n\n    此配置会写入 user目录下的 .gitconfig文件，实际上为个人信息默认值\n* 临时配置：\n\n    去掉 --global 即可\n    实际是在其配置列表中追加其信息，重复变量名，不同的value值\n    (Git每次会读取不同文件，其中就可能含有同一个配置)\n    Git 会使用每个变量的最后一次的配置的值","slug":"Git学习笔记（一）","published":1,"updated":"2017-01-19T08:20:55.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cizpjnf29000dbaqwmqknyclb","content":"<h3 id=\"一、Git特点\"><a href=\"#一、Git特点\" class=\"headerlink\" title=\"一、Git特点\"></a>一、Git特点</h3><h4 id=\"1-直接记录快照，而非差异比较\"><a href=\"#1-直接记录快照，而非差异比较\" class=\"headerlink\" title=\"1. 直接记录快照，而非差异比较\"></a>1. 直接记录快照，而非差异比较</h4><ul>\n<li>在 Git 中保存项目状态时，它主要对当时的全部文件制作一个快照并保存这个快照的索引。</li>\n<li>为了高效，如果文件没有修改，Git 不再重新存储该文件，而是只保留一个链接指向之前存储的文件。</li>\n<li>Git 对待数据更像是一个 快照流。<h4 id=\"2-近乎所有操作都是本地执行\"><a href=\"#2-近乎所有操作都是本地执行\" class=\"headerlink\" title=\"2. 近乎所有操作都是本地执行\"></a>2. 近乎所有操作都是本地执行</h4></li>\n<li>在 Git 中的绝大多数操作都只需要访问本地文件和资源，一般不需要来自网络上其它计算机的信息。<h4 id=\"3-Git-保证完整性\"><a href=\"#3-Git-保证完整性\" class=\"headerlink\" title=\"3. Git 保证完整性\"></a>3. Git 保证完整性</h4></li>\n<li><p>Git 中所有数据在存储前都计算校验和，然后以校验和来引用。Git 用以计算校验和的机制叫做 SHA-1 散列（hash，哈希）。<br>这是一个由 40 个十六进制字符（0-9 和 a-f）组成字符串，基于 Git 中文件的内容或目录结构计算出来。<br>SHA-1 哈希看起来是这样：  </p>\n<pre><code>&gt;24b9da6552252987aa493b52f8696cd6d3b00373\n</code></pre></li>\n<li><p>实际上，Git 数据库中保存的信息都是以文件内容的哈希值来索引，而不是文件名</p>\n<h4 id=\"4-Git-一般只添加数据\"><a href=\"#4-Git-一般只添加数据\" class=\"headerlink\" title=\"4. Git 一般只添加数据\"></a>4. Git 一般只添加数据</h4></li>\n<li>你执行的 Git 操作，几乎只往 Git 数据库中增加数据</li>\n</ul>\n<h3 id=\"二、Git-中的文件有3种状态：\"><a href=\"#二、Git-中的文件有3种状态：\" class=\"headerlink\" title=\"二、Git 中的文件有3种状态：\"></a>二、Git 中的文件有3种状态：</h3><h4 id=\"1-已提交：数据已经安全的保存在本地数据库中\"><a href=\"#1-已提交：数据已经安全的保存在本地数据库中\" class=\"headerlink\" title=\"1. 已提交：数据已经安全的保存在本地数据库中\"></a>1. 已提交：数据已经安全的保存在本地数据库中</h4><h4 id=\"2-已修改：修改了文件，但未保存到数据库中\"><a href=\"#2-已修改：修改了文件，但未保存到数据库中\" class=\"headerlink\" title=\"2. 已修改：修改了文件，但未保存到数据库中\"></a>2. 已修改：修改了文件，但未保存到数据库中</h4><h4 id=\"3-已暂存：对一个已修改文件的当前版本做了标记，使之包含在下次提交的快照中\"><a href=\"#3-已暂存：对一个已修改文件的当前版本做了标记，使之包含在下次提交的快照中\" class=\"headerlink\" title=\"3. 已暂存：对一个已修改文件的当前版本做了标记，使之包含在下次提交的快照中\"></a>3. 已暂存：对一个已修改文件的当前版本做了标记，使之包含在下次提交的快照中</h4><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/%E6%96%87%E4%BB%B6%E7%9A%84%E7%8A%B6%E6%80%81%E5%8F%98%E5%8C%96%E5%91%A8%E6%9C%9F.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure> \n<h3 id=\"三、Git-中的3个工作区域\"><a href=\"#三、Git-中的3个工作区域\" class=\"headerlink\" title=\"三、Git 中的3个工作区域\"></a>三、Git 中的3个工作区域</h3><h4 id=\"1-Git仓库：保存项目的元数据和对象数据库，Git中最重要的部分，供其他人clone-仓库\"><a href=\"#1-Git仓库：保存项目的元数据和对象数据库，Git中最重要的部分，供其他人clone-仓库\" class=\"headerlink\" title=\"1. Git仓库：保存项目的元数据和对象数据库，Git中最重要的部分，供其他人clone 仓库\"></a>1. Git仓库：保存项目的元数据和对象数据库，Git中最重要的部分，供其他人clone 仓库</h4><h4 id=\"2-工作目录：对项目的某个版本独立提取出来的，供工作中使用、修改\"><a href=\"#2-工作目录：对项目的某个版本独立提取出来的，供工作中使用、修改\" class=\"headerlink\" title=\"2. 工作目录：对项目的某个版本独立提取出来的，供工作中使用、修改\"></a>2. 工作目录：对项目的某个版本独立提取出来的，供工作中使用、修改</h4><ul>\n<li><p>工作目录下的文件状态：</p>\n<p>  已跟踪：纳入了版本控制的文件，后期可能处于 未修改，已修改或放入暂存区了</p>\n<p>  未跟踪：工作目录下除已跟踪文件外的其他所有文件</p>\n<h4 id=\"3-暂存区：是一个文件，保存下次将提交的文件列表信息，一般在Git仓库目录中，有时也被叫做索引\"><a href=\"#3-暂存区：是一个文件，保存下次将提交的文件列表信息，一般在Git仓库目录中，有时也被叫做索引\" class=\"headerlink\" title=\"3. 暂存区：是一个文件，保存下次将提交的文件列表信息，一般在Git仓库目录中，有时也被叫做索引\"></a>3. 暂存区：是一个文件，保存下次将提交的文件列表信息，一般在Git仓库目录中，有时也被叫做索引</h4><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/git3%E7%A7%8D%E5%B7%A5%E4%BD%9C%E5%8C%BA%E5%9F%9F.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure> \n</li>\n</ul>\n<h3 id=\"四、Git-的基本工作流程\"><a href=\"#四、Git-的基本工作流程\" class=\"headerlink\" title=\"四、Git 的基本工作流程\"></a>四、Git 的基本工作流程</h3><h4 id=\"1-在工作目录中修改文件\"><a href=\"#1-在工作目录中修改文件\" class=\"headerlink\" title=\"1. 在工作目录中修改文件\"></a>1. 在工作目录中修改文件</h4><h4 id=\"2-暂存文件，将文件的快照放入暂存区\"><a href=\"#2-暂存文件，将文件的快照放入暂存区\" class=\"headerlink\" title=\"2. 暂存文件，将文件的快照放入暂存区\"></a>2. 暂存文件，将文件的快照放入暂存区</h4><h4 id=\"3-提交更新，找到暂存区的文件，将快照永久性存储到Git仓库中\"><a href=\"#3-提交更新，找到暂存区的文件，将快照永久性存储到Git仓库中\" class=\"headerlink\" title=\"3. 提交更新，找到暂存区的文件，将快照永久性存储到Git仓库中\"></a>3. 提交更新，找到暂存区的文件，将快照永久性存储到Git仓库中</h4><h3 id=\"五、Git-个人信息初始配置\"><a href=\"#五、Git-个人信息初始配置\" class=\"headerlink\" title=\"五、Git 个人信息初始配置\"></a>五、Git 个人信息初始配置</h3><ul>\n<li><p>全局信息配置：(个人默认信息)</p>\n<blockquote>\n<p>git config –global user.name “xxx”</p>\n<p>git config –global user.email   xxx@qq.coom</p>\n</blockquote>\n<p>  此配置会写入 user目录下的 .gitconfig文件，实际上为个人信息默认值</p>\n</li>\n<li><p>临时配置：</p>\n<p>  去掉 –global 即可<br>  实际是在其配置列表中追加其信息，重复变量名，不同的value值<br>  (Git每次会读取不同文件，其中就可能含有同一个配置)<br>  Git 会使用每个变量的最后一次的配置的值</p>\n</li>\n</ul>\n","excerpt":"","more":"<h3 id=\"一、Git特点\"><a href=\"#一、Git特点\" class=\"headerlink\" title=\"一、Git特点\"></a>一、Git特点</h3><h4 id=\"1-直接记录快照，而非差异比较\"><a href=\"#1-直接记录快照，而非差异比较\" class=\"headerlink\" title=\"1. 直接记录快照，而非差异比较\"></a>1. 直接记录快照，而非差异比较</h4><ul>\n<li>在 Git 中保存项目状态时，它主要对当时的全部文件制作一个快照并保存这个快照的索引。</li>\n<li>为了高效，如果文件没有修改，Git 不再重新存储该文件，而是只保留一个链接指向之前存储的文件。</li>\n<li>Git 对待数据更像是一个 快照流。<h4 id=\"2-近乎所有操作都是本地执行\"><a href=\"#2-近乎所有操作都是本地执行\" class=\"headerlink\" title=\"2. 近乎所有操作都是本地执行\"></a>2. 近乎所有操作都是本地执行</h4></li>\n<li>在 Git 中的绝大多数操作都只需要访问本地文件和资源，一般不需要来自网络上其它计算机的信息。<h4 id=\"3-Git-保证完整性\"><a href=\"#3-Git-保证完整性\" class=\"headerlink\" title=\"3. Git 保证完整性\"></a>3. Git 保证完整性</h4></li>\n<li><p>Git 中所有数据在存储前都计算校验和，然后以校验和来引用。Git 用以计算校验和的机制叫做 SHA-1 散列（hash，哈希）。<br>这是一个由 40 个十六进制字符（0-9 和 a-f）组成字符串，基于 Git 中文件的内容或目录结构计算出来。<br>SHA-1 哈希看起来是这样：  </p>\n<pre><code>&gt;24b9da6552252987aa493b52f8696cd6d3b00373\n</code></pre></li>\n<li><p>实际上，Git 数据库中保存的信息都是以文件内容的哈希值来索引，而不是文件名</p>\n<h4 id=\"4-Git-一般只添加数据\"><a href=\"#4-Git-一般只添加数据\" class=\"headerlink\" title=\"4. Git 一般只添加数据\"></a>4. Git 一般只添加数据</h4></li>\n<li>你执行的 Git 操作，几乎只往 Git 数据库中增加数据</li>\n</ul>\n<h3 id=\"二、Git-中的文件有3种状态：\"><a href=\"#二、Git-中的文件有3种状态：\" class=\"headerlink\" title=\"二、Git 中的文件有3种状态：\"></a>二、Git 中的文件有3种状态：</h3><h4 id=\"1-已提交：数据已经安全的保存在本地数据库中\"><a href=\"#1-已提交：数据已经安全的保存在本地数据库中\" class=\"headerlink\" title=\"1. 已提交：数据已经安全的保存在本地数据库中\"></a>1. 已提交：数据已经安全的保存在本地数据库中</h4><h4 id=\"2-已修改：修改了文件，但未保存到数据库中\"><a href=\"#2-已修改：修改了文件，但未保存到数据库中\" class=\"headerlink\" title=\"2. 已修改：修改了文件，但未保存到数据库中\"></a>2. 已修改：修改了文件，但未保存到数据库中</h4><h4 id=\"3-已暂存：对一个已修改文件的当前版本做了标记，使之包含在下次提交的快照中\"><a href=\"#3-已暂存：对一个已修改文件的当前版本做了标记，使之包含在下次提交的快照中\" class=\"headerlink\" title=\"3. 已暂存：对一个已修改文件的当前版本做了标记，使之包含在下次提交的快照中\"></a>3. 已暂存：对一个已修改文件的当前版本做了标记，使之包含在下次提交的快照中</h4><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/%E6%96%87%E4%BB%B6%E7%9A%84%E7%8A%B6%E6%80%81%E5%8F%98%E5%8C%96%E5%91%A8%E6%9C%9F.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure> \n<h3 id=\"三、Git-中的3个工作区域\"><a href=\"#三、Git-中的3个工作区域\" class=\"headerlink\" title=\"三、Git 中的3个工作区域\"></a>三、Git 中的3个工作区域</h3><h4 id=\"1-Git仓库：保存项目的元数据和对象数据库，Git中最重要的部分，供其他人clone-仓库\"><a href=\"#1-Git仓库：保存项目的元数据和对象数据库，Git中最重要的部分，供其他人clone-仓库\" class=\"headerlink\" title=\"1. Git仓库：保存项目的元数据和对象数据库，Git中最重要的部分，供其他人clone 仓库\"></a>1. Git仓库：保存项目的元数据和对象数据库，Git中最重要的部分，供其他人clone 仓库</h4><h4 id=\"2-工作目录：对项目的某个版本独立提取出来的，供工作中使用、修改\"><a href=\"#2-工作目录：对项目的某个版本独立提取出来的，供工作中使用、修改\" class=\"headerlink\" title=\"2. 工作目录：对项目的某个版本独立提取出来的，供工作中使用、修改\"></a>2. 工作目录：对项目的某个版本独立提取出来的，供工作中使用、修改</h4><ul>\n<li><p>工作目录下的文件状态：</p>\n<p>  已跟踪：纳入了版本控制的文件，后期可能处于 未修改，已修改或放入暂存区了</p>\n<p>  未跟踪：工作目录下除已跟踪文件外的其他所有文件</p>\n<h4 id=\"3-暂存区：是一个文件，保存下次将提交的文件列表信息，一般在Git仓库目录中，有时也被叫做索引\"><a href=\"#3-暂存区：是一个文件，保存下次将提交的文件列表信息，一般在Git仓库目录中，有时也被叫做索引\" class=\"headerlink\" title=\"3. 暂存区：是一个文件，保存下次将提交的文件列表信息，一般在Git仓库目录中，有时也被叫做索引\"></a>3. 暂存区：是一个文件，保存下次将提交的文件列表信息，一般在Git仓库目录中，有时也被叫做索引</h4><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/git3%E7%A7%8D%E5%B7%A5%E4%BD%9C%E5%8C%BA%E5%9F%9F.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure> \n</li>\n</ul>\n<h3 id=\"四、Git-的基本工作流程\"><a href=\"#四、Git-的基本工作流程\" class=\"headerlink\" title=\"四、Git 的基本工作流程\"></a>四、Git 的基本工作流程</h3><h4 id=\"1-在工作目录中修改文件\"><a href=\"#1-在工作目录中修改文件\" class=\"headerlink\" title=\"1. 在工作目录中修改文件\"></a>1. 在工作目录中修改文件</h4><h4 id=\"2-暂存文件，将文件的快照放入暂存区\"><a href=\"#2-暂存文件，将文件的快照放入暂存区\" class=\"headerlink\" title=\"2. 暂存文件，将文件的快照放入暂存区\"></a>2. 暂存文件，将文件的快照放入暂存区</h4><h4 id=\"3-提交更新，找到暂存区的文件，将快照永久性存储到Git仓库中\"><a href=\"#3-提交更新，找到暂存区的文件，将快照永久性存储到Git仓库中\" class=\"headerlink\" title=\"3. 提交更新，找到暂存区的文件，将快照永久性存储到Git仓库中\"></a>3. 提交更新，找到暂存区的文件，将快照永久性存储到Git仓库中</h4><h3 id=\"五、Git-个人信息初始配置\"><a href=\"#五、Git-个人信息初始配置\" class=\"headerlink\" title=\"五、Git 个人信息初始配置\"></a>五、Git 个人信息初始配置</h3><ul>\n<li><p>全局信息配置：(个人默认信息)</p>\n<blockquote>\n<p>git config –global user.name “xxx”</p>\n<p>git config –global user.email   xxx@qq.coom</p>\n</blockquote>\n<p>  此配置会写入 user目录下的 .gitconfig文件，实际上为个人信息默认值</p>\n</li>\n<li><p>临时配置：</p>\n<p>  去掉 –global 即可<br>  实际是在其配置列表中追加其信息，重复变量名，不同的value值<br>  (Git每次会读取不同文件，其中就可能含有同一个配置)<br>  Git 会使用每个变量的最后一次的配置的值</p>\n</li>\n</ul>\n"},{"title":"Git学习笔记（二）","date":"2016-02-19T08:06:00.000Z","_content":"### 常用命令：\n> 1、初始\n\n\tgit <verb> --help\t\t\t查看命令用法(方法之一)\n\tgit init\t\t\t\t\t初始化git仓库(在当前目录下会创建.git目录)\n\n> 2、 远程操作\n\n\tgit clone URL\t\t\t\t从远程clone git仓库\n\tgit remote -v\t\t\t\t查看远程仓库使用的 Git 保存的简写与其对应的 URL\t\n\tgit pull URL\t\t\t\t将数据拉取到你的本地仓库,并合并远程分支到当前分支\n\tgit fetch URL\t\t\t\t将数据拉取到你的本地仓库,并不会自动合并或修改你当前的工作\n\tgit push URL\t\t\t\t将本地git仓库推送到远程仓库(一次就记住URL了,之后不需要写URL)\n\n> 3、添加文件\n\t\n\tgit add filename\t\t\t添加某个文件(该文件处于已跟踪(A)：tracked)\n\tgit add --all , -A\t\t\t添加所有文件\n\t\n> 4、提交文件\n\n\tgit commit -m \"提交信息\"\t \t提交当下工作区的文件\n\tgit commit -a -m \"提交信息\"\t \t前两个命令的合并，直接跳过暂存区提交\n\tgit commit\t\t\t\t\t\t启动文本编辑器写提交信息\n\t\n> 5、查看文件状态\n\n\tgit status\t\t\t\t\t查看当前文件状态\n\tgit status -s\t\t\t\t查看当前文件详细状态列表\t\n\t\n> 6、查看日志\n\n\tgit log\t\t\t\t\t\t查看提交的日志\n\tgit log\t--oneline\t\t\t查看提交的日志简略信息\n\tgit log\t-p -2\t\t\t\t查看最近两次提交的日志\n\n> 7、查看修改\n\n\tgit diff\t\t\t\t\t查看未暂存文件(未add)的修改内容\n\tgit diff --staged, --cached\t查看已暂存文件(已add)的修改内容\n\t\n> 8、删除文件\n\n\tgit rm filename\t\t\t\t移除文件\n\tgit rm --cached filename\t移除文件,但该文件还留在工作区，但之后不会被跟踪(untracked)\n\tgit rm \\*.txt\t\t\t\t移除以 .txt 结尾的文件\n\t\n> 9、更改文件名\n\n\tgit mv oldName newName\t\t更改文件名\n\n> 10、标签操作\n\t\n\tgit tag -a v1.0 -m \"info\"\t打标签 v1.0:版本号，info:版本信息\n\tgit tag\t\t\t\t\t\t查看已有标签\n\t\n> 11、分支操作\n\n\tgit branch branchName\t\t创建分支\n\tgit branch -d branchName\t删除分支\n\tgit checkout branchName\t\t切换分支\n\tgit merge branchName\t\t合并分支到当前分支\n\tgit mergetool\t\t\t\t启动图形化工具解决冲突\n\tgit branch\t\t\t\t\t查看所有分支\n\tgit branch -v, -vv\t\t\t查看所有分支的最后一次提交\n\n\t\n### 补充：\n* **rebase**: **变基**，另一种不同于merge的\"整合\"方式 (命令示例：git rebase master)\n* 变基是将一系列提交按照原有次序依次应用到另一分支上，而合并是把最终结果合在一起。\n* 请注意：\n\t\t\t\n\t> 无论是通过变基，还是通过三方合并，整合的最终结果所指向的快照始终是一样的，只不过提交历史不同罢了。\n* 准则：\n\n * 不要对在你的仓库外有副本的分支执行变基\n * 只对尚未推送或分享给别人的本地修改执行变基操作清理历史，从不对已推送至别处的提交执行变基操作","source":"_posts/Git学习笔记（二）.md","raw":"---\ntitle: Git学习笔记（二）\ndate: 2016-02-19 16:06\ncategories: 工具\ntags: Git\n---\n### 常用命令：\n> 1、初始\n\n\tgit <verb> --help\t\t\t查看命令用法(方法之一)\n\tgit init\t\t\t\t\t初始化git仓库(在当前目录下会创建.git目录)\n\n> 2、 远程操作\n\n\tgit clone URL\t\t\t\t从远程clone git仓库\n\tgit remote -v\t\t\t\t查看远程仓库使用的 Git 保存的简写与其对应的 URL\t\n\tgit pull URL\t\t\t\t将数据拉取到你的本地仓库,并合并远程分支到当前分支\n\tgit fetch URL\t\t\t\t将数据拉取到你的本地仓库,并不会自动合并或修改你当前的工作\n\tgit push URL\t\t\t\t将本地git仓库推送到远程仓库(一次就记住URL了,之后不需要写URL)\n\n> 3、添加文件\n\t\n\tgit add filename\t\t\t添加某个文件(该文件处于已跟踪(A)：tracked)\n\tgit add --all , -A\t\t\t添加所有文件\n\t\n> 4、提交文件\n\n\tgit commit -m \"提交信息\"\t \t提交当下工作区的文件\n\tgit commit -a -m \"提交信息\"\t \t前两个命令的合并，直接跳过暂存区提交\n\tgit commit\t\t\t\t\t\t启动文本编辑器写提交信息\n\t\n> 5、查看文件状态\n\n\tgit status\t\t\t\t\t查看当前文件状态\n\tgit status -s\t\t\t\t查看当前文件详细状态列表\t\n\t\n> 6、查看日志\n\n\tgit log\t\t\t\t\t\t查看提交的日志\n\tgit log\t--oneline\t\t\t查看提交的日志简略信息\n\tgit log\t-p -2\t\t\t\t查看最近两次提交的日志\n\n> 7、查看修改\n\n\tgit diff\t\t\t\t\t查看未暂存文件(未add)的修改内容\n\tgit diff --staged, --cached\t查看已暂存文件(已add)的修改内容\n\t\n> 8、删除文件\n\n\tgit rm filename\t\t\t\t移除文件\n\tgit rm --cached filename\t移除文件,但该文件还留在工作区，但之后不会被跟踪(untracked)\n\tgit rm \\*.txt\t\t\t\t移除以 .txt 结尾的文件\n\t\n> 9、更改文件名\n\n\tgit mv oldName newName\t\t更改文件名\n\n> 10、标签操作\n\t\n\tgit tag -a v1.0 -m \"info\"\t打标签 v1.0:版本号，info:版本信息\n\tgit tag\t\t\t\t\t\t查看已有标签\n\t\n> 11、分支操作\n\n\tgit branch branchName\t\t创建分支\n\tgit branch -d branchName\t删除分支\n\tgit checkout branchName\t\t切换分支\n\tgit merge branchName\t\t合并分支到当前分支\n\tgit mergetool\t\t\t\t启动图形化工具解决冲突\n\tgit branch\t\t\t\t\t查看所有分支\n\tgit branch -v, -vv\t\t\t查看所有分支的最后一次提交\n\n\t\n### 补充：\n* **rebase**: **变基**，另一种不同于merge的\"整合\"方式 (命令示例：git rebase master)\n* 变基是将一系列提交按照原有次序依次应用到另一分支上，而合并是把最终结果合在一起。\n* 请注意：\n\t\t\t\n\t> 无论是通过变基，还是通过三方合并，整合的最终结果所指向的快照始终是一样的，只不过提交历史不同罢了。\n* 准则：\n\n * 不要对在你的仓库外有副本的分支执行变基\n * 只对尚未推送或分享给别人的本地修改执行变基操作清理历史，从不对已推送至别处的提交执行变基操作","slug":"Git学习笔记（二）","published":1,"updated":"2017-01-19T08:20:55.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cizpjnf2b000hbaqwt9z0dxad","content":"<h3 id=\"常用命令：\"><a href=\"#常用命令：\" class=\"headerlink\" title=\"常用命令：\"></a>常用命令：</h3><blockquote>\n<p>1、初始</p>\n</blockquote>\n<pre><code>git &lt;verb&gt; --help            查看命令用法(方法之一)\ngit init                    初始化git仓库(在当前目录下会创建.git目录)\n</code></pre><blockquote>\n<p>2、 远程操作</p>\n</blockquote>\n<pre><code>git clone URL                从远程clone git仓库\ngit remote -v                查看远程仓库使用的 Git 保存的简写与其对应的 URL    \ngit pull URL                将数据拉取到你的本地仓库,并合并远程分支到当前分支\ngit fetch URL                将数据拉取到你的本地仓库,并不会自动合并或修改你当前的工作\ngit push URL                将本地git仓库推送到远程仓库(一次就记住URL了,之后不需要写URL)\n</code></pre><blockquote>\n<p>3、添加文件</p>\n</blockquote>\n<pre><code>git add filename            添加某个文件(该文件处于已跟踪(A)：tracked)\ngit add --all , -A            添加所有文件\n</code></pre><blockquote>\n<p>4、提交文件</p>\n</blockquote>\n<pre><code>git commit -m &quot;提交信息&quot;         提交当下工作区的文件\ngit commit -a -m &quot;提交信息&quot;         前两个命令的合并，直接跳过暂存区提交\ngit commit                        启动文本编辑器写提交信息\n</code></pre><blockquote>\n<p>5、查看文件状态</p>\n</blockquote>\n<pre><code>git status                    查看当前文件状态\ngit status -s                查看当前文件详细状态列表    \n</code></pre><blockquote>\n<p>6、查看日志</p>\n</blockquote>\n<pre><code>git log                        查看提交的日志\ngit log    --oneline            查看提交的日志简略信息\ngit log    -p -2                查看最近两次提交的日志\n</code></pre><blockquote>\n<p>7、查看修改</p>\n</blockquote>\n<pre><code>git diff                    查看未暂存文件(未add)的修改内容\ngit diff --staged, --cached    查看已暂存文件(已add)的修改内容\n</code></pre><blockquote>\n<p>8、删除文件</p>\n</blockquote>\n<pre><code>git rm filename                移除文件\ngit rm --cached filename    移除文件,但该文件还留在工作区，但之后不会被跟踪(untracked)\ngit rm \\*.txt                移除以 .txt 结尾的文件\n</code></pre><blockquote>\n<p>9、更改文件名</p>\n</blockquote>\n<pre><code>git mv oldName newName        更改文件名\n</code></pre><blockquote>\n<p>10、标签操作</p>\n</blockquote>\n<pre><code>git tag -a v1.0 -m &quot;info&quot;    打标签 v1.0:版本号，info:版本信息\ngit tag                        查看已有标签\n</code></pre><blockquote>\n<p>11、分支操作</p>\n</blockquote>\n<pre><code>git branch branchName        创建分支\ngit branch -d branchName    删除分支\ngit checkout branchName        切换分支\ngit merge branchName        合并分支到当前分支\ngit mergetool                启动图形化工具解决冲突\ngit branch                    查看所有分支\ngit branch -v, -vv            查看所有分支的最后一次提交\n</code></pre><h3 id=\"补充：\"><a href=\"#补充：\" class=\"headerlink\" title=\"补充：\"></a>补充：</h3><ul>\n<li><strong>rebase</strong>: <strong>变基</strong>，另一种不同于merge的”整合”方式 (命令示例：git rebase master)</li>\n<li>变基是将一系列提交按照原有次序依次应用到另一分支上，而合并是把最终结果合在一起。</li>\n<li><p>请注意：</p>\n<blockquote>\n<p>无论是通过变基，还是通过三方合并，整合的最终结果所指向的快照始终是一样的，只不过提交历史不同罢了。</p>\n</blockquote>\n</li>\n<li><p>准则：</p>\n<ul>\n<li>不要对在你的仓库外有副本的分支执行变基</li>\n<li>只对尚未推送或分享给别人的本地修改执行变基操作清理历史，从不对已推送至别处的提交执行变基操作</li>\n</ul>\n</li>\n</ul>\n","excerpt":"","more":"<h3 id=\"常用命令：\"><a href=\"#常用命令：\" class=\"headerlink\" title=\"常用命令：\"></a>常用命令：</h3><blockquote>\n<p>1、初始</p>\n</blockquote>\n<pre><code>git &lt;verb&gt; --help            查看命令用法(方法之一)\ngit init                    初始化git仓库(在当前目录下会创建.git目录)\n</code></pre><blockquote>\n<p>2、 远程操作</p>\n</blockquote>\n<pre><code>git clone URL                从远程clone git仓库\ngit remote -v                查看远程仓库使用的 Git 保存的简写与其对应的 URL    \ngit pull URL                将数据拉取到你的本地仓库,并合并远程分支到当前分支\ngit fetch URL                将数据拉取到你的本地仓库,并不会自动合并或修改你当前的工作\ngit push URL                将本地git仓库推送到远程仓库(一次就记住URL了,之后不需要写URL)\n</code></pre><blockquote>\n<p>3、添加文件</p>\n</blockquote>\n<pre><code>git add filename            添加某个文件(该文件处于已跟踪(A)：tracked)\ngit add --all , -A            添加所有文件\n</code></pre><blockquote>\n<p>4、提交文件</p>\n</blockquote>\n<pre><code>git commit -m &quot;提交信息&quot;         提交当下工作区的文件\ngit commit -a -m &quot;提交信息&quot;         前两个命令的合并，直接跳过暂存区提交\ngit commit                        启动文本编辑器写提交信息\n</code></pre><blockquote>\n<p>5、查看文件状态</p>\n</blockquote>\n<pre><code>git status                    查看当前文件状态\ngit status -s                查看当前文件详细状态列表    \n</code></pre><blockquote>\n<p>6、查看日志</p>\n</blockquote>\n<pre><code>git log                        查看提交的日志\ngit log    --oneline            查看提交的日志简略信息\ngit log    -p -2                查看最近两次提交的日志\n</code></pre><blockquote>\n<p>7、查看修改</p>\n</blockquote>\n<pre><code>git diff                    查看未暂存文件(未add)的修改内容\ngit diff --staged, --cached    查看已暂存文件(已add)的修改内容\n</code></pre><blockquote>\n<p>8、删除文件</p>\n</blockquote>\n<pre><code>git rm filename                移除文件\ngit rm --cached filename    移除文件,但该文件还留在工作区，但之后不会被跟踪(untracked)\ngit rm \\*.txt                移除以 .txt 结尾的文件\n</code></pre><blockquote>\n<p>9、更改文件名</p>\n</blockquote>\n<pre><code>git mv oldName newName        更改文件名\n</code></pre><blockquote>\n<p>10、标签操作</p>\n</blockquote>\n<pre><code>git tag -a v1.0 -m &quot;info&quot;    打标签 v1.0:版本号，info:版本信息\ngit tag                        查看已有标签\n</code></pre><blockquote>\n<p>11、分支操作</p>\n</blockquote>\n<pre><code>git branch branchName        创建分支\ngit branch -d branchName    删除分支\ngit checkout branchName        切换分支\ngit merge branchName        合并分支到当前分支\ngit mergetool                启动图形化工具解决冲突\ngit branch                    查看所有分支\ngit branch -v, -vv            查看所有分支的最后一次提交\n</code></pre><h3 id=\"补充：\"><a href=\"#补充：\" class=\"headerlink\" title=\"补充：\"></a>补充：</h3><ul>\n<li><strong>rebase</strong>: <strong>变基</strong>，另一种不同于merge的”整合”方式 (命令示例：git rebase master)</li>\n<li>变基是将一系列提交按照原有次序依次应用到另一分支上，而合并是把最终结果合在一起。</li>\n<li><p>请注意：</p>\n<blockquote>\n<p>无论是通过变基，还是通过三方合并，整合的最终结果所指向的快照始终是一样的，只不过提交历史不同罢了。</p>\n</blockquote>\n</li>\n<li><p>准则：</p>\n<ul>\n<li>不要对在你的仓库外有副本的分支执行变基</li>\n<li>只对尚未推送或分享给别人的本地修改执行变基操作清理历史，从不对已推送至别处的提交执行变基操作</li>\n</ul>\n</li>\n</ul>\n"},{"title":"Gradle实现自动拉取git及压缩文件","date":"2017-02-01T07:00:00.000Z","_content":"### 问题\n在实现 hybird 相关开发时，h5文件需要不断重新拉取，并解压文件，拷贝至项目的相关目录下。手工完成比较繁琐且耗时。自己查阅 gradle 相关文档，将其过程实现脚本自动化。\n可实现：自动拉取相关 git 服务器上最新文件，并压缩至 src/main/assets/hybird目录下，打包时就会自动带上最新的h5文件了。\n\n### 解决\n上代码：\n\n``` gradle\nafterEvaluate {\n    tasks.matching {\n        it.name.startsWith('process') && (it.name.endsWith('ReleaseJavaRes') || it.name.endsWith\n                ('DebugJavaRes'))\n    }.each { tk ->\n        tk.dependsOn(deletehybird)\n    }\n}\n\n// clone hybird 文件\ntask cloneHybird(type: Exec){\n    delete file(\"src/main/assets/hybird\")\n\n    def osName = System.getProperty(\"os.name\")\n    if (osName.contains(\"Windows\")) {\n        commandLine 'cmd', '/c', 'git clone  https://github.com/fenglincanyi/…… .git src/main/assets/hybird'\n    } else if (osName.contains(\"Mac OS\")) {\n        commandLine 'git', 'clone', ' https://github.com/fenglincanyi/…… .git', 'src/main/assets/hybird'\n    } else if (osName.contains(\"LINUX\")){\n        commandLine 'git', 'clone', ' https://github.com/fenglincanyi/…… .git', 'src/main/assets/hybird'\n    }\n    println(\"============== task cloneHybird ==============\")\n}\n\n// 压缩 hybird文件\ntask zipHybird(type: Zip) {\n    dependsOn cloneHybird\n\n    if (file('src/main/assets/hybird.zip').lastModified() >= file('src/main/assets/hybird').lastModified()) {// 保证zip包最新\n        delete file(\"src/main/assets/hybird.zip\")\n    }\n\n    archiveName = 'hybird.zip'\n    destinationDir = file('src/main/assets')\n    from 'src/main/assets/hybird/0.1'\n    println(\"============== task hybirdZip ==============\")\n}\n\n// 删除 hybird 目录及文件，只留 hybird.zip\ntask deletehybird(type: Delete) {\n    dependsOn zipHybird\n\n    delete \"src/main/assets/hybird\"\n    println(\"============== deletehybird ==============\")\n}\n```\n\n<br>\n此处，单独运行 task，演示效果：\n![](http://7xr1vo.com1.z0.glb.clouddn.com/5FAACC49-BCE0-44ED-A60C-30378795BF74.png)\n\nbuild 结果：\n![](http://7xr1vo.com1.z0.glb.clouddn.com/22.png)\n\n在 assets 目录下生成：\n![](http://7xr1vo.com1.z0.glb.clouddn.com/33.png)\n\n### 遇到的问题\nMac系统执行 commandLine 去 clone 时，每次都报错：\n\n``` java\nCaused by: org.gradle.process.internal.ExecException: A problem occurred starting process 'command 'git clone https://github.com/fenglincanyi/…… .git''\n11:38:32.043 [ERROR] [org.gradle.BuildExceptionReporter]      at org.gradle.process.internal.DefaultExecHandle.setEndStateInfo(DefaultExecHandle.java:197)\n11:38:32.043 [ERROR] [org.gradle.BuildExceptionReporter]      at org.gradle.process.internal.DefaultExecHandle.failed(DefaultExecHandle.java:327)\n11:38:32.043 [ERROR] [org.gradle.BuildExceptionReporter]      at org.gradle.process.internal.ExecHandleRunner.run(ExecHandleRunner.java:86)\n11:38:32.043 [ERROR] [org.gradle.BuildExceptionReporter]      ... 2 more\n11:38:32.043 [ERROR] [org.gradle.BuildExceptionReporter] Caused by: net.rubygrapefruit.platform.NativeException: Could not start 'git clone https://github.com/fenglincanyi/…… .git'\n11:38:32.043 [ERROR] [org.gradle.BuildExceptionReporter]      at net.rubygrapefruit.platform.internal.DefaultProcessLauncher.start(DefaultProcessLauncher.java:27)\n11:38:32.043 [ERROR] [org.gradle.BuildExceptionReporter]      at net.rubygrapefruit.platform.internal.WrapperProcessLauncher.start(WrapperProcessLauncher.java:36)\n11:38:32.043 [ERROR] [org.gradle.BuildExceptionReporter]      at org.gradle.process.internal.ExecHandleRunner.run(ExecHandleRunner.java:68)\n11:38:32.043 [ERROR] [org.gradle.BuildExceptionReporter]      ... 2 more\n11:38:32.043 [ERROR] [org.gradle.BuildExceptionReporter] Caused by: java.io.IOException: Cannot run program \"git clone https://github.com/fenglincanyi/…… .git\" (in directory \"/Users/geng/AndroidStudioProjects/GradleTest/app\"): error=2, No such file or directory\n11:38:32.043 [ERROR] [org.gradle.BuildExceptionReporter]      at net.rubygrapefruit.platform.internal.DefaultProcessLauncher.start(DefaultProcessLauncher.java:25)\n11:38:32.044 [ERROR] [org.gradle.BuildExceptionReporter]      ... 4 more\n11:38:32.044 [ERROR] [org.gradle.BuildExceptionReporter] Caused by: java.io.IOException: error=2, No such file or directory\n11:38:32.044 [ERROR] [org.gradle.BuildExceptionReporter]      ... 5 more\n11:38:32.044 [ERROR] [org.gradle.BuildExceptionReporter]\n```\n最后Google半天，在 Mac 或 Linux 系统下，需要将命令中的字符串 逐个分割：\n\n``` gradle\ncommandLine 'git', 'clone', ' https://github.com/fenglincanyi/…… .git', 'src/main/assets/hybird'\n```\nGradle 官网的文档，说明的并不是很详细，这里要吐槽下。。。\n\n### 总结\n* Gradle 基于Groovy实现，内置了许多好用的API，如：copy，zip等等，这些都可以将传统开发中的手动执行实现自动化\n* Gradle 的确方便了开发者，使用脚本来实现繁琐和重复的工作，也将开发过程中配置工作变得更加灵活\n\n<br>\n参考：\nhttps://www.jeeboot.com/archives/1563.html\nhttp://stackoverflow.com/questions/15776431/in-gradle-tasks-of-type-exec-why-do-commandline-and-executable-behave-different\nhttps://docs.gradle.org/current/dsl/org.gradle.api.tasks.Exec.html#org.gradle.api.tasks.Exec:commandLine(java.lang.Object%5B%5D\nhttps://segmentfault.com/q/1010000004503896","source":"_posts/Gradle实现自动拉取git及压缩文件.md","raw":"---\ntitle: Gradle实现自动拉取git及压缩文件\ndate: 2017-2-1 15:00\ncategories: Gradle\ntags: Gradle\n---\n### 问题\n在实现 hybird 相关开发时，h5文件需要不断重新拉取，并解压文件，拷贝至项目的相关目录下。手工完成比较繁琐且耗时。自己查阅 gradle 相关文档，将其过程实现脚本自动化。\n可实现：自动拉取相关 git 服务器上最新文件，并压缩至 src/main/assets/hybird目录下，打包时就会自动带上最新的h5文件了。\n\n### 解决\n上代码：\n\n``` gradle\nafterEvaluate {\n    tasks.matching {\n        it.name.startsWith('process') && (it.name.endsWith('ReleaseJavaRes') || it.name.endsWith\n                ('DebugJavaRes'))\n    }.each { tk ->\n        tk.dependsOn(deletehybird)\n    }\n}\n\n// clone hybird 文件\ntask cloneHybird(type: Exec){\n    delete file(\"src/main/assets/hybird\")\n\n    def osName = System.getProperty(\"os.name\")\n    if (osName.contains(\"Windows\")) {\n        commandLine 'cmd', '/c', 'git clone  https://github.com/fenglincanyi/…… .git src/main/assets/hybird'\n    } else if (osName.contains(\"Mac OS\")) {\n        commandLine 'git', 'clone', ' https://github.com/fenglincanyi/…… .git', 'src/main/assets/hybird'\n    } else if (osName.contains(\"LINUX\")){\n        commandLine 'git', 'clone', ' https://github.com/fenglincanyi/…… .git', 'src/main/assets/hybird'\n    }\n    println(\"============== task cloneHybird ==============\")\n}\n\n// 压缩 hybird文件\ntask zipHybird(type: Zip) {\n    dependsOn cloneHybird\n\n    if (file('src/main/assets/hybird.zip').lastModified() >= file('src/main/assets/hybird').lastModified()) {// 保证zip包最新\n        delete file(\"src/main/assets/hybird.zip\")\n    }\n\n    archiveName = 'hybird.zip'\n    destinationDir = file('src/main/assets')\n    from 'src/main/assets/hybird/0.1'\n    println(\"============== task hybirdZip ==============\")\n}\n\n// 删除 hybird 目录及文件，只留 hybird.zip\ntask deletehybird(type: Delete) {\n    dependsOn zipHybird\n\n    delete \"src/main/assets/hybird\"\n    println(\"============== deletehybird ==============\")\n}\n```\n\n<br>\n此处，单独运行 task，演示效果：\n![](http://7xr1vo.com1.z0.glb.clouddn.com/5FAACC49-BCE0-44ED-A60C-30378795BF74.png)\n\nbuild 结果：\n![](http://7xr1vo.com1.z0.glb.clouddn.com/22.png)\n\n在 assets 目录下生成：\n![](http://7xr1vo.com1.z0.glb.clouddn.com/33.png)\n\n### 遇到的问题\nMac系统执行 commandLine 去 clone 时，每次都报错：\n\n``` java\nCaused by: org.gradle.process.internal.ExecException: A problem occurred starting process 'command 'git clone https://github.com/fenglincanyi/…… .git''\n11:38:32.043 [ERROR] [org.gradle.BuildExceptionReporter]      at org.gradle.process.internal.DefaultExecHandle.setEndStateInfo(DefaultExecHandle.java:197)\n11:38:32.043 [ERROR] [org.gradle.BuildExceptionReporter]      at org.gradle.process.internal.DefaultExecHandle.failed(DefaultExecHandle.java:327)\n11:38:32.043 [ERROR] [org.gradle.BuildExceptionReporter]      at org.gradle.process.internal.ExecHandleRunner.run(ExecHandleRunner.java:86)\n11:38:32.043 [ERROR] [org.gradle.BuildExceptionReporter]      ... 2 more\n11:38:32.043 [ERROR] [org.gradle.BuildExceptionReporter] Caused by: net.rubygrapefruit.platform.NativeException: Could not start 'git clone https://github.com/fenglincanyi/…… .git'\n11:38:32.043 [ERROR] [org.gradle.BuildExceptionReporter]      at net.rubygrapefruit.platform.internal.DefaultProcessLauncher.start(DefaultProcessLauncher.java:27)\n11:38:32.043 [ERROR] [org.gradle.BuildExceptionReporter]      at net.rubygrapefruit.platform.internal.WrapperProcessLauncher.start(WrapperProcessLauncher.java:36)\n11:38:32.043 [ERROR] [org.gradle.BuildExceptionReporter]      at org.gradle.process.internal.ExecHandleRunner.run(ExecHandleRunner.java:68)\n11:38:32.043 [ERROR] [org.gradle.BuildExceptionReporter]      ... 2 more\n11:38:32.043 [ERROR] [org.gradle.BuildExceptionReporter] Caused by: java.io.IOException: Cannot run program \"git clone https://github.com/fenglincanyi/…… .git\" (in directory \"/Users/geng/AndroidStudioProjects/GradleTest/app\"): error=2, No such file or directory\n11:38:32.043 [ERROR] [org.gradle.BuildExceptionReporter]      at net.rubygrapefruit.platform.internal.DefaultProcessLauncher.start(DefaultProcessLauncher.java:25)\n11:38:32.044 [ERROR] [org.gradle.BuildExceptionReporter]      ... 4 more\n11:38:32.044 [ERROR] [org.gradle.BuildExceptionReporter] Caused by: java.io.IOException: error=2, No such file or directory\n11:38:32.044 [ERROR] [org.gradle.BuildExceptionReporter]      ... 5 more\n11:38:32.044 [ERROR] [org.gradle.BuildExceptionReporter]\n```\n最后Google半天，在 Mac 或 Linux 系统下，需要将命令中的字符串 逐个分割：\n\n``` gradle\ncommandLine 'git', 'clone', ' https://github.com/fenglincanyi/…… .git', 'src/main/assets/hybird'\n```\nGradle 官网的文档，说明的并不是很详细，这里要吐槽下。。。\n\n### 总结\n* Gradle 基于Groovy实现，内置了许多好用的API，如：copy，zip等等，这些都可以将传统开发中的手动执行实现自动化\n* Gradle 的确方便了开发者，使用脚本来实现繁琐和重复的工作，也将开发过程中配置工作变得更加灵活\n\n<br>\n参考：\nhttps://www.jeeboot.com/archives/1563.html\nhttp://stackoverflow.com/questions/15776431/in-gradle-tasks-of-type-exec-why-do-commandline-and-executable-behave-different\nhttps://docs.gradle.org/current/dsl/org.gradle.api.tasks.Exec.html#org.gradle.api.tasks.Exec:commandLine(java.lang.Object%5B%5D\nhttps://segmentfault.com/q/1010000004503896","slug":"Gradle实现自动拉取git及压缩文件","published":1,"updated":"2017-02-08T11:55:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cizpjnf2d000jbaqwcd3qfdoo","content":"<h3 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h3><p>在实现 hybird 相关开发时，h5文件需要不断重新拉取，并解压文件，拷贝至项目的相关目录下。手工完成比较繁琐且耗时。自己查阅 gradle 相关文档，将其过程实现脚本自动化。<br>可实现：自动拉取相关 git 服务器上最新文件，并压缩至 src/main/assets/hybird目录下，打包时就会自动带上最新的h5文件了。</p>\n<h3 id=\"解决\"><a href=\"#解决\" class=\"headerlink\" title=\"解决\"></a>解决</h3><p>上代码：</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div></pre></td><td class=\"code\"><pre><div class=\"line\">afterEvaluate &#123;</div><div class=\"line\">    tasks.matching &#123;</div><div class=\"line\">        it.name.startsWith(<span class=\"string\">'process'</span>) &amp;&amp; (it.name.endsWith(<span class=\"string\">'ReleaseJavaRes'</span>) || it.name.endsWith</div><div class=\"line\">                (<span class=\"string\">'DebugJavaRes'</span>))</div><div class=\"line\">    &#125;.<span class=\"keyword\">each</span> &#123; tk -&gt;</div><div class=\"line\">        tk.dependsOn(deletehybird)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// clone hybird 文件</span></div><div class=\"line\"><span class=\"keyword\">task</span> cloneHybird(type: Exec)&#123;</div><div class=\"line\">    <span class=\"keyword\">delete</span> <span class=\"keyword\">file</span>(<span class=\"string\">\"src/main/assets/hybird\"</span>)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">def</span> osName = System.getProperty(<span class=\"string\">\"os.name\"</span>)</div><div class=\"line\">    <span class=\"keyword\">if</span> (osName.contains(<span class=\"string\">\"Windows\"</span>)) &#123;</div><div class=\"line\">        commandLine <span class=\"string\">'cmd'</span>, <span class=\"string\">'/c'</span>, <span class=\"string\">'git clone  https://github.com/fenglincanyi/…… .git src/main/assets/hybird'</span></div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (osName.contains(<span class=\"string\">\"Mac OS\"</span>)) &#123;</div><div class=\"line\">        commandLine <span class=\"string\">'git'</span>, <span class=\"string\">'clone'</span>, <span class=\"string\">' https://github.com/fenglincanyi/…… .git'</span>, <span class=\"string\">'src/main/assets/hybird'</span></div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (osName.contains(<span class=\"string\">\"LINUX\"</span>))&#123;</div><div class=\"line\">        commandLine <span class=\"string\">'git'</span>, <span class=\"string\">'clone'</span>, <span class=\"string\">' https://github.com/fenglincanyi/…… .git'</span>, <span class=\"string\">'src/main/assets/hybird'</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">println</span>(<span class=\"string\">\"============== task cloneHybird ==============\"</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 压缩 hybird文件</span></div><div class=\"line\"><span class=\"keyword\">task</span> zipHybird(type: Zip) &#123;</div><div class=\"line\">    dependsOn cloneHybird</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">file</span>(<span class=\"string\">'src/main/assets/hybird.zip'</span>).lastModified() &gt;= <span class=\"keyword\">file</span>(<span class=\"string\">'src/main/assets/hybird'</span>).lastModified()) &#123;<span class=\"comment\">// 保证zip包最新</span></div><div class=\"line\">        <span class=\"keyword\">delete</span> <span class=\"keyword\">file</span>(<span class=\"string\">\"src/main/assets/hybird.zip\"</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    archiveName = <span class=\"string\">'hybird.zip'</span></div><div class=\"line\">    <span class=\"keyword\">destinationDir</span> = <span class=\"keyword\">file</span>(<span class=\"string\">'src/main/assets'</span>)</div><div class=\"line\">    <span class=\"keyword\">from</span> <span class=\"string\">'src/main/assets/hybird/0.1'</span></div><div class=\"line\">    <span class=\"keyword\">println</span>(<span class=\"string\">\"============== task hybirdZip ==============\"</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 删除 hybird 目录及文件，只留 hybird.zip</span></div><div class=\"line\"><span class=\"keyword\">task</span> deletehybird(type: <span class=\"keyword\">Delete</span>) &#123;</div><div class=\"line\">    dependsOn zipHybird</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">delete</span> <span class=\"string\">\"src/main/assets/hybird\"</span></div><div class=\"line\">    <span class=\"keyword\">println</span>(<span class=\"string\">\"============== deletehybird ==============\"</span>)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><br><br>此处，单独运行 task，演示效果：<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/5FAACC49-BCE0-44ED-A60C-30378795BF74.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure></p>\n<p>build 结果：<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/22.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure></p>\n<p>在 assets 目录下生成：<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/33.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure></p>\n<h3 id=\"遇到的问题\"><a href=\"#遇到的问题\" class=\"headerlink\" title=\"遇到的问题\"></a>遇到的问题</h3><p>Mac系统执行 commandLine 去 clone 时，每次都报错：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">Caused by: org.gradle.process.internal.ExecException: A problem occurred starting process <span class=\"string\">'command '</span>git clone https:<span class=\"comment\">//github.com/fenglincanyi/…… .git''</span></div><div class=\"line\"><span class=\"number\">11</span>:<span class=\"number\">38</span>:<span class=\"number\">32.043</span> [ERROR] [org.gradle.BuildExceptionReporter]      at org.gradle.process.internal.DefaultExecHandle.setEndStateInfo(DefaultExecHandle.java:<span class=\"number\">197</span>)</div><div class=\"line\"><span class=\"number\">11</span>:<span class=\"number\">38</span>:<span class=\"number\">32.043</span> [ERROR] [org.gradle.BuildExceptionReporter]      at org.gradle.process.internal.DefaultExecHandle.failed(DefaultExecHandle.java:<span class=\"number\">327</span>)</div><div class=\"line\"><span class=\"number\">11</span>:<span class=\"number\">38</span>:<span class=\"number\">32.043</span> [ERROR] [org.gradle.BuildExceptionReporter]      at org.gradle.process.internal.ExecHandleRunner.run(ExecHandleRunner.java:<span class=\"number\">86</span>)</div><div class=\"line\"><span class=\"number\">11</span>:<span class=\"number\">38</span>:<span class=\"number\">32.043</span> [ERROR] [org.gradle.BuildExceptionReporter]      ... <span class=\"number\">2</span> more</div><div class=\"line\"><span class=\"number\">11</span>:<span class=\"number\">38</span>:<span class=\"number\">32.043</span> [ERROR] [org.gradle.BuildExceptionReporter] Caused by: net.rubygrapefruit.platform.NativeException: Could not start <span class=\"string\">'git clone https://github.com/fenglincanyi/…… .git'</span></div><div class=\"line\"><span class=\"number\">11</span>:<span class=\"number\">38</span>:<span class=\"number\">32.043</span> [ERROR] [org.gradle.BuildExceptionReporter]      at net.rubygrapefruit.platform.internal.DefaultProcessLauncher.start(DefaultProcessLauncher.java:<span class=\"number\">27</span>)</div><div class=\"line\"><span class=\"number\">11</span>:<span class=\"number\">38</span>:<span class=\"number\">32.043</span> [ERROR] [org.gradle.BuildExceptionReporter]      at net.rubygrapefruit.platform.internal.WrapperProcessLauncher.start(WrapperProcessLauncher.java:<span class=\"number\">36</span>)</div><div class=\"line\"><span class=\"number\">11</span>:<span class=\"number\">38</span>:<span class=\"number\">32.043</span> [ERROR] [org.gradle.BuildExceptionReporter]      at org.gradle.process.internal.ExecHandleRunner.run(ExecHandleRunner.java:<span class=\"number\">68</span>)</div><div class=\"line\"><span class=\"number\">11</span>:<span class=\"number\">38</span>:<span class=\"number\">32.043</span> [ERROR] [org.gradle.BuildExceptionReporter]      ... <span class=\"number\">2</span> more</div><div class=\"line\"><span class=\"number\">11</span>:<span class=\"number\">38</span>:<span class=\"number\">32.043</span> [ERROR] [org.gradle.BuildExceptionReporter] Caused by: java.io.IOException: Cannot run program <span class=\"string\">\"git clone https://github.com/fenglincanyi/…… .git\"</span> (in directory <span class=\"string\">\"/Users/geng/AndroidStudioProjects/GradleTest/app\"</span>): error=<span class=\"number\">2</span>, No such file or directory</div><div class=\"line\"><span class=\"number\">11</span>:<span class=\"number\">38</span>:<span class=\"number\">32.043</span> [ERROR] [org.gradle.BuildExceptionReporter]      at net.rubygrapefruit.platform.internal.DefaultProcessLauncher.start(DefaultProcessLauncher.java:<span class=\"number\">25</span>)</div><div class=\"line\"><span class=\"number\">11</span>:<span class=\"number\">38</span>:<span class=\"number\">32.044</span> [ERROR] [org.gradle.BuildExceptionReporter]      ... <span class=\"number\">4</span> more</div><div class=\"line\"><span class=\"number\">11</span>:<span class=\"number\">38</span>:<span class=\"number\">32.044</span> [ERROR] [org.gradle.BuildExceptionReporter] Caused by: java.io.IOException: error=<span class=\"number\">2</span>, No such file or directory</div><div class=\"line\"><span class=\"number\">11</span>:<span class=\"number\">38</span>:<span class=\"number\">32.044</span> [ERROR] [org.gradle.BuildExceptionReporter]      ... <span class=\"number\">5</span> more</div><div class=\"line\"><span class=\"number\">11</span>:<span class=\"number\">38</span>:<span class=\"number\">32.044</span> [ERROR] [org.gradle.BuildExceptionReporter]</div></pre></td></tr></table></figure>\n<p>最后Google半天，在 Mac 或 Linux 系统下，需要将命令中的字符串 逐个分割：</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">commandLine <span class=\"string\">'git'</span>, <span class=\"string\">'clone'</span>, <span class=\"string\">' https://github.com/fenglincanyi/…… .git'</span>, <span class=\"string\">'src/main/assets/hybird'</span></div></pre></td></tr></table></figure>\n<p>Gradle 官网的文档，说明的并不是很详细，这里要吐槽下。。。</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><ul>\n<li>Gradle 基于Groovy实现，内置了许多好用的API，如：copy，zip等等，这些都可以将传统开发中的手动执行实现自动化</li>\n<li>Gradle 的确方便了开发者，使用脚本来实现繁琐和重复的工作，也将开发过程中配置工作变得更加灵活</li>\n</ul>\n<p><br><br>参考：<br><a href=\"https://www.jeeboot.com/archives/1563.html\" target=\"_blank\" rel=\"external\">https://www.jeeboot.com/archives/1563.html</a><br><a href=\"http://stackoverflow.com/questions/15776431/in-gradle-tasks-of-type-exec-why-do-commandline-and-executable-behave-different\" target=\"_blank\" rel=\"external\">http://stackoverflow.com/questions/15776431/in-gradle-tasks-of-type-exec-why-do-commandline-and-executable-behave-different</a><br><a href=\"https://docs.gradle.org/current/dsl/org.gradle.api.tasks.Exec.html#org.gradle.api.tasks.Exec:commandLine(java.lang.Object%5B%5D\" target=\"_blank\" rel=\"external\">https://docs.gradle.org/current/dsl/org.gradle.api.tasks.Exec.html#org.gradle.api.tasks.Exec:commandLine(java.lang.Object%5B%5D</a><br><a href=\"https://segmentfault.com/q/1010000004503896\" target=\"_blank\" rel=\"external\">https://segmentfault.com/q/1010000004503896</a></p>\n","excerpt":"","more":"<h3 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h3><p>在实现 hybird 相关开发时，h5文件需要不断重新拉取，并解压文件，拷贝至项目的相关目录下。手工完成比较繁琐且耗时。自己查阅 gradle 相关文档，将其过程实现脚本自动化。<br>可实现：自动拉取相关 git 服务器上最新文件，并压缩至 src/main/assets/hybird目录下，打包时就会自动带上最新的h5文件了。</p>\n<h3 id=\"解决\"><a href=\"#解决\" class=\"headerlink\" title=\"解决\"></a>解决</h3><p>上代码：</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div></pre></td><td class=\"code\"><pre><div class=\"line\">afterEvaluate &#123;</div><div class=\"line\">    tasks.matching &#123;</div><div class=\"line\">        it.name.startsWith(<span class=\"string\">'process'</span>) &amp;&amp; (it.name.endsWith(<span class=\"string\">'ReleaseJavaRes'</span>) || it.name.endsWith</div><div class=\"line\">                (<span class=\"string\">'DebugJavaRes'</span>))</div><div class=\"line\">    &#125;.<span class=\"keyword\">each</span> &#123; tk -&gt;</div><div class=\"line\">        tk.dependsOn(deletehybird)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// clone hybird 文件</span></div><div class=\"line\"><span class=\"keyword\">task</span> cloneHybird(type: Exec)&#123;</div><div class=\"line\">    <span class=\"keyword\">delete</span> <span class=\"keyword\">file</span>(<span class=\"string\">\"src/main/assets/hybird\"</span>)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">def</span> osName = System.getProperty(<span class=\"string\">\"os.name\"</span>)</div><div class=\"line\">    <span class=\"keyword\">if</span> (osName.contains(<span class=\"string\">\"Windows\"</span>)) &#123;</div><div class=\"line\">        commandLine <span class=\"string\">'cmd'</span>, <span class=\"string\">'/c'</span>, <span class=\"string\">'git clone  https://github.com/fenglincanyi/…… .git src/main/assets/hybird'</span></div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (osName.contains(<span class=\"string\">\"Mac OS\"</span>)) &#123;</div><div class=\"line\">        commandLine <span class=\"string\">'git'</span>, <span class=\"string\">'clone'</span>, <span class=\"string\">' https://github.com/fenglincanyi/…… .git'</span>, <span class=\"string\">'src/main/assets/hybird'</span></div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (osName.contains(<span class=\"string\">\"LINUX\"</span>))&#123;</div><div class=\"line\">        commandLine <span class=\"string\">'git'</span>, <span class=\"string\">'clone'</span>, <span class=\"string\">' https://github.com/fenglincanyi/…… .git'</span>, <span class=\"string\">'src/main/assets/hybird'</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">println</span>(<span class=\"string\">\"============== task cloneHybird ==============\"</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 压缩 hybird文件</span></div><div class=\"line\"><span class=\"keyword\">task</span> zipHybird(type: Zip) &#123;</div><div class=\"line\">    dependsOn cloneHybird</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">file</span>(<span class=\"string\">'src/main/assets/hybird.zip'</span>).lastModified() &gt;= <span class=\"keyword\">file</span>(<span class=\"string\">'src/main/assets/hybird'</span>).lastModified()) &#123;<span class=\"comment\">// 保证zip包最新</span></div><div class=\"line\">        <span class=\"keyword\">delete</span> <span class=\"keyword\">file</span>(<span class=\"string\">\"src/main/assets/hybird.zip\"</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    archiveName = <span class=\"string\">'hybird.zip'</span></div><div class=\"line\">    <span class=\"keyword\">destinationDir</span> = <span class=\"keyword\">file</span>(<span class=\"string\">'src/main/assets'</span>)</div><div class=\"line\">    <span class=\"keyword\">from</span> <span class=\"string\">'src/main/assets/hybird/0.1'</span></div><div class=\"line\">    <span class=\"keyword\">println</span>(<span class=\"string\">\"============== task hybirdZip ==============\"</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 删除 hybird 目录及文件，只留 hybird.zip</span></div><div class=\"line\"><span class=\"keyword\">task</span> deletehybird(type: <span class=\"keyword\">Delete</span>) &#123;</div><div class=\"line\">    dependsOn zipHybird</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">delete</span> <span class=\"string\">\"src/main/assets/hybird\"</span></div><div class=\"line\">    <span class=\"keyword\">println</span>(<span class=\"string\">\"============== deletehybird ==============\"</span>)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><br><br>此处，单独运行 task，演示效果：<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/5FAACC49-BCE0-44ED-A60C-30378795BF74.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure></p>\n<p>build 结果：<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/22.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure></p>\n<p>在 assets 目录下生成：<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/33.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure></p>\n<h3 id=\"遇到的问题\"><a href=\"#遇到的问题\" class=\"headerlink\" title=\"遇到的问题\"></a>遇到的问题</h3><p>Mac系统执行 commandLine 去 clone 时，每次都报错：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">Caused by: org.gradle.process.internal.ExecException: A problem occurred starting process <span class=\"string\">'command '</span>git clone https:<span class=\"comment\">//github.com/fenglincanyi/…… .git''</span></div><div class=\"line\"><span class=\"number\">11</span>:<span class=\"number\">38</span>:<span class=\"number\">32.043</span> [ERROR] [org.gradle.BuildExceptionReporter]      at org.gradle.process.internal.DefaultExecHandle.setEndStateInfo(DefaultExecHandle.java:<span class=\"number\">197</span>)</div><div class=\"line\"><span class=\"number\">11</span>:<span class=\"number\">38</span>:<span class=\"number\">32.043</span> [ERROR] [org.gradle.BuildExceptionReporter]      at org.gradle.process.internal.DefaultExecHandle.failed(DefaultExecHandle.java:<span class=\"number\">327</span>)</div><div class=\"line\"><span class=\"number\">11</span>:<span class=\"number\">38</span>:<span class=\"number\">32.043</span> [ERROR] [org.gradle.BuildExceptionReporter]      at org.gradle.process.internal.ExecHandleRunner.run(ExecHandleRunner.java:<span class=\"number\">86</span>)</div><div class=\"line\"><span class=\"number\">11</span>:<span class=\"number\">38</span>:<span class=\"number\">32.043</span> [ERROR] [org.gradle.BuildExceptionReporter]      ... <span class=\"number\">2</span> more</div><div class=\"line\"><span class=\"number\">11</span>:<span class=\"number\">38</span>:<span class=\"number\">32.043</span> [ERROR] [org.gradle.BuildExceptionReporter] Caused by: net.rubygrapefruit.platform.NativeException: Could not start <span class=\"string\">'git clone https://github.com/fenglincanyi/…… .git'</span></div><div class=\"line\"><span class=\"number\">11</span>:<span class=\"number\">38</span>:<span class=\"number\">32.043</span> [ERROR] [org.gradle.BuildExceptionReporter]      at net.rubygrapefruit.platform.internal.DefaultProcessLauncher.start(DefaultProcessLauncher.java:<span class=\"number\">27</span>)</div><div class=\"line\"><span class=\"number\">11</span>:<span class=\"number\">38</span>:<span class=\"number\">32.043</span> [ERROR] [org.gradle.BuildExceptionReporter]      at net.rubygrapefruit.platform.internal.WrapperProcessLauncher.start(WrapperProcessLauncher.java:<span class=\"number\">36</span>)</div><div class=\"line\"><span class=\"number\">11</span>:<span class=\"number\">38</span>:<span class=\"number\">32.043</span> [ERROR] [org.gradle.BuildExceptionReporter]      at org.gradle.process.internal.ExecHandleRunner.run(ExecHandleRunner.java:<span class=\"number\">68</span>)</div><div class=\"line\"><span class=\"number\">11</span>:<span class=\"number\">38</span>:<span class=\"number\">32.043</span> [ERROR] [org.gradle.BuildExceptionReporter]      ... <span class=\"number\">2</span> more</div><div class=\"line\"><span class=\"number\">11</span>:<span class=\"number\">38</span>:<span class=\"number\">32.043</span> [ERROR] [org.gradle.BuildExceptionReporter] Caused by: java.io.IOException: Cannot run program <span class=\"string\">\"git clone https://github.com/fenglincanyi/…… .git\"</span> (in directory <span class=\"string\">\"/Users/geng/AndroidStudioProjects/GradleTest/app\"</span>): error=<span class=\"number\">2</span>, No such file or directory</div><div class=\"line\"><span class=\"number\">11</span>:<span class=\"number\">38</span>:<span class=\"number\">32.043</span> [ERROR] [org.gradle.BuildExceptionReporter]      at net.rubygrapefruit.platform.internal.DefaultProcessLauncher.start(DefaultProcessLauncher.java:<span class=\"number\">25</span>)</div><div class=\"line\"><span class=\"number\">11</span>:<span class=\"number\">38</span>:<span class=\"number\">32.044</span> [ERROR] [org.gradle.BuildExceptionReporter]      ... <span class=\"number\">4</span> more</div><div class=\"line\"><span class=\"number\">11</span>:<span class=\"number\">38</span>:<span class=\"number\">32.044</span> [ERROR] [org.gradle.BuildExceptionReporter] Caused by: java.io.IOException: error=<span class=\"number\">2</span>, No such file or directory</div><div class=\"line\"><span class=\"number\">11</span>:<span class=\"number\">38</span>:<span class=\"number\">32.044</span> [ERROR] [org.gradle.BuildExceptionReporter]      ... <span class=\"number\">5</span> more</div><div class=\"line\"><span class=\"number\">11</span>:<span class=\"number\">38</span>:<span class=\"number\">32.044</span> [ERROR] [org.gradle.BuildExceptionReporter]</div></pre></td></tr></table></figure>\n<p>最后Google半天，在 Mac 或 Linux 系统下，需要将命令中的字符串 逐个分割：</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">commandLine <span class=\"string\">'git'</span>, <span class=\"string\">'clone'</span>, <span class=\"string\">' https://github.com/fenglincanyi/…… .git'</span>, <span class=\"string\">'src/main/assets/hybird'</span></div></pre></td></tr></table></figure>\n<p>Gradle 官网的文档，说明的并不是很详细，这里要吐槽下。。。</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><ul>\n<li>Gradle 基于Groovy实现，内置了许多好用的API，如：copy，zip等等，这些都可以将传统开发中的手动执行实现自动化</li>\n<li>Gradle 的确方便了开发者，使用脚本来实现繁琐和重复的工作，也将开发过程中配置工作变得更加灵活</li>\n</ul>\n<p><br><br>参考：<br><a href=\"https://www.jeeboot.com/archives/1563.html\">https://www.jeeboot.com/archives/1563.html</a><br><a href=\"http://stackoverflow.com/questions/15776431/in-gradle-tasks-of-type-exec-why-do-commandline-and-executable-behave-different\">http://stackoverflow.com/questions/15776431/in-gradle-tasks-of-type-exec-why-do-commandline-and-executable-behave-different</a><br><a href=\"https://docs.gradle.org/current/dsl/org.gradle.api.tasks.Exec.html#org.gradle.api.tasks.Exec:commandLine(java.lang.Object%5B%5D\">https://docs.gradle.org/current/dsl/org.gradle.api.tasks.Exec.html#org.gradle.api.tasks.Exec:commandLine(java.lang.Object%5B%5D</a><br><a href=\"https://segmentfault.com/q/1010000004503896\">https://segmentfault.com/q/1010000004503896</a></p>\n"},{"title":"RadioGroup、RadioButton动态创建并定制icon显示","date":"2016-10-25T02:24:00.000Z","_content":"由于原生的Radiobutton不能满足业务需求，所以需要自己定制icon图片，和默认选中某一项。需要自己代码动态实现。废话不多说，上代码：\n``` java\nprivate void setViewData() {\n        radioGroup.removeAllViews();\n\n        int margin = ScreenUtil.dip2px(this, 14.0f);\n        int marginLeft = ScreenUtil.dip2px(this, 20.0f);\n        int paddingLeft = ScreenUtil.dip2px(this, 3.0f);\n\n        RadioGroup.LayoutParams layoutParams = \n            new RadioGroup.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT);\n        RadioGroup.LayoutParams layoutParams1 = \n            new RadioGroup.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, 1);\n        layoutParams.setMargins(marginLeft, margin, margin, margin);\n        layoutParams1.setMargins(margin, 0, margin, 0);\n\n        int defaultId = -1;\n        for (int i = 0; i < messageList.size(); i++) {\n            RadioButton rb = new RadioButton(this);\n            rb.setMaxLines(2);\n            rb.setPadding(paddingLeft, 0, 0, 0);\n            rb.setText(messageList.get(i).relayMessage);\n            rb.setButtonDrawable(android.R.color.transparent);\n            rb.setTextColor(Color.parseColor(\"#555555\"));\n            rb.setButtonDrawable(null);// 去掉左边默认图标\n            rb.setCompoundDrawablePadding(margin);\n            rb.setEllipsize(TextUtils.TruncateAt.END);// 结尾处打点显示\n            Drawable drawable = getResources().getDrawable(R.drawable.relay_message_radio_selector);\n            drawable.setBounds(0, 0, drawable.getMinimumWidth(), drawable.getMinimumHeight());\n            rb.setCompoundDrawables(drawable, null, null, null);\n            // 手动生成id\n            int generateId = generateViewId();\n            messages.put(generateId, messageList.get(i).relayMessage);\n            rb.setId(generateId);\n            if (i == 0) {\n                defaultId = generateId;\n            }\n\n            TextView view = new TextView(this);\n            view.setBackgroundColor(Color.parseColor(\"#dddddd\"));\n\n            radioGroup.addView(rb, layoutParams);\n            radioGroup.addView(view, layoutParams1);\n        }\n        // 此处：默认选中第一个\n        radioGroup.check(defaultId);\n    }\n```\nR.drawable.relay_message_radio_selector 代码如下：\n\n``` xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<selector xmlns:android=\"http://schemas.android.com/apk/res/android\">\n    <!--设置自己的图片icon-->\n    <item android:drawable=\"@drawable/relay_radio_unchecked\" \n        android:state_checked=\"false\" />\n    <item android:drawable=\"@drawable/relay_radio_checked\" \n        android:state_checked=\"true\" />\n</selector>\n```\n\n效果如下图：\n\n![](http://7xr1vo.com1.z0.glb.clouddn.com/%E9%80%89%E6%8B%A9.png)","source":"_posts/RadioGroup、RadioButton动态创建并定制icon显示.md","raw":"---\ntitle: RadioGroup、RadioButton动态创建并定制icon显示\ndate: 2016-10-25 10:24\ncategories: Android\ntags: Radiobutton\n---\n由于原生的Radiobutton不能满足业务需求，所以需要自己定制icon图片，和默认选中某一项。需要自己代码动态实现。废话不多说，上代码：\n``` java\nprivate void setViewData() {\n        radioGroup.removeAllViews();\n\n        int margin = ScreenUtil.dip2px(this, 14.0f);\n        int marginLeft = ScreenUtil.dip2px(this, 20.0f);\n        int paddingLeft = ScreenUtil.dip2px(this, 3.0f);\n\n        RadioGroup.LayoutParams layoutParams = \n            new RadioGroup.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT);\n        RadioGroup.LayoutParams layoutParams1 = \n            new RadioGroup.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, 1);\n        layoutParams.setMargins(marginLeft, margin, margin, margin);\n        layoutParams1.setMargins(margin, 0, margin, 0);\n\n        int defaultId = -1;\n        for (int i = 0; i < messageList.size(); i++) {\n            RadioButton rb = new RadioButton(this);\n            rb.setMaxLines(2);\n            rb.setPadding(paddingLeft, 0, 0, 0);\n            rb.setText(messageList.get(i).relayMessage);\n            rb.setButtonDrawable(android.R.color.transparent);\n            rb.setTextColor(Color.parseColor(\"#555555\"));\n            rb.setButtonDrawable(null);// 去掉左边默认图标\n            rb.setCompoundDrawablePadding(margin);\n            rb.setEllipsize(TextUtils.TruncateAt.END);// 结尾处打点显示\n            Drawable drawable = getResources().getDrawable(R.drawable.relay_message_radio_selector);\n            drawable.setBounds(0, 0, drawable.getMinimumWidth(), drawable.getMinimumHeight());\n            rb.setCompoundDrawables(drawable, null, null, null);\n            // 手动生成id\n            int generateId = generateViewId();\n            messages.put(generateId, messageList.get(i).relayMessage);\n            rb.setId(generateId);\n            if (i == 0) {\n                defaultId = generateId;\n            }\n\n            TextView view = new TextView(this);\n            view.setBackgroundColor(Color.parseColor(\"#dddddd\"));\n\n            radioGroup.addView(rb, layoutParams);\n            radioGroup.addView(view, layoutParams1);\n        }\n        // 此处：默认选中第一个\n        radioGroup.check(defaultId);\n    }\n```\nR.drawable.relay_message_radio_selector 代码如下：\n\n``` xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<selector xmlns:android=\"http://schemas.android.com/apk/res/android\">\n    <!--设置自己的图片icon-->\n    <item android:drawable=\"@drawable/relay_radio_unchecked\" \n        android:state_checked=\"false\" />\n    <item android:drawable=\"@drawable/relay_radio_checked\" \n        android:state_checked=\"true\" />\n</selector>\n```\n\n效果如下图：\n\n![](http://7xr1vo.com1.z0.glb.clouddn.com/%E9%80%89%E6%8B%A9.png)","slug":"RadioGroup、RadioButton动态创建并定制icon显示","published":1,"updated":"2017-02-08T11:57:56.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cizpjnf2j000qbaqw3e2k1jnp","content":"<p>由于原生的Radiobutton不能满足业务需求，所以需要自己定制icon图片，和默认选中某一项。需要自己代码动态实现。废话不多说，上代码：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">setViewData</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        radioGroup.removeAllViews();</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">int</span> margin = ScreenUtil.dip2px(<span class=\"keyword\">this</span>, <span class=\"number\">14.0f</span>);</div><div class=\"line\">        <span class=\"keyword\">int</span> marginLeft = ScreenUtil.dip2px(<span class=\"keyword\">this</span>, <span class=\"number\">20.0f</span>);</div><div class=\"line\">        <span class=\"keyword\">int</span> paddingLeft = ScreenUtil.dip2px(<span class=\"keyword\">this</span>, <span class=\"number\">3.0f</span>);</div><div class=\"line\"></div><div class=\"line\">        RadioGroup.LayoutParams layoutParams = </div><div class=\"line\">            <span class=\"keyword\">new</span> RadioGroup.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT);</div><div class=\"line\">        RadioGroup.LayoutParams layoutParams1 = </div><div class=\"line\">            <span class=\"keyword\">new</span> RadioGroup.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, <span class=\"number\">1</span>);</div><div class=\"line\">        layoutParams.setMargins(marginLeft, margin, margin, margin);</div><div class=\"line\">        layoutParams1.setMargins(margin, <span class=\"number\">0</span>, margin, <span class=\"number\">0</span>);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">int</span> defaultId = -<span class=\"number\">1</span>;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; messageList.size(); i++) &#123;</div><div class=\"line\">            RadioButton rb = <span class=\"keyword\">new</span> RadioButton(<span class=\"keyword\">this</span>);</div><div class=\"line\">            rb.setMaxLines(<span class=\"number\">2</span>);</div><div class=\"line\">            rb.setPadding(paddingLeft, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</div><div class=\"line\">            rb.setText(messageList.get(i).relayMessage);</div><div class=\"line\">            rb.setButtonDrawable(android.R.color.transparent);</div><div class=\"line\">            rb.setTextColor(Color.parseColor(<span class=\"string\">\"#555555\"</span>));</div><div class=\"line\">            rb.setButtonDrawable(<span class=\"keyword\">null</span>);<span class=\"comment\">// 去掉左边默认图标</span></div><div class=\"line\">            rb.setCompoundDrawablePadding(margin);</div><div class=\"line\">            rb.setEllipsize(TextUtils.TruncateAt.END);<span class=\"comment\">// 结尾处打点显示</span></div><div class=\"line\">            Drawable drawable = getResources().getDrawable(R.drawable.relay_message_radio_selector);</div><div class=\"line\">            drawable.setBounds(<span class=\"number\">0</span>, <span class=\"number\">0</span>, drawable.getMinimumWidth(), drawable.getMinimumHeight());</div><div class=\"line\">            rb.setCompoundDrawables(drawable, <span class=\"keyword\">null</span>, <span class=\"keyword\">null</span>, <span class=\"keyword\">null</span>);</div><div class=\"line\">            <span class=\"comment\">// 手动生成id</span></div><div class=\"line\">            <span class=\"keyword\">int</span> generateId = generateViewId();</div><div class=\"line\">            messages.put(generateId, messageList.get(i).relayMessage);</div><div class=\"line\">            rb.setId(generateId);</div><div class=\"line\">            <span class=\"keyword\">if</span> (i == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                defaultId = generateId;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            TextView view = <span class=\"keyword\">new</span> TextView(<span class=\"keyword\">this</span>);</div><div class=\"line\">            view.setBackgroundColor(Color.parseColor(<span class=\"string\">\"#dddddd\"</span>));</div><div class=\"line\"></div><div class=\"line\">            radioGroup.addView(rb, layoutParams);</div><div class=\"line\">            radioGroup.addView(view, layoutParams1);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"comment\">// 此处：默认选中第一个</span></div><div class=\"line\">        radioGroup.check(defaultId);</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure></p>\n<p>R.drawable.relay_message_radio_selector 代码如下：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">selector</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!--设置自己的图片icon--&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">android:drawable</span>=<span class=\"string\">\"@drawable/relay_radio_unchecked\"</span> </span></div><div class=\"line\">        <span class=\"attr\">android:state_checked</span>=<span class=\"string\">\"false\"</span> /&gt;</div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">android:drawable</span>=<span class=\"string\">\"@drawable/relay_radio_checked\"</span> </span></div><div class=\"line\">        <span class=\"attr\">android:state_checked</span>=<span class=\"string\">\"true\"</span> /&gt;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">selector</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>效果如下图：</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/%E9%80%89%E6%8B%A9.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>","excerpt":"","more":"<p>由于原生的Radiobutton不能满足业务需求，所以需要自己定制icon图片，和默认选中某一项。需要自己代码动态实现。废话不多说，上代码：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">setViewData</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        radioGroup.removeAllViews();</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">int</span> margin = ScreenUtil.dip2px(<span class=\"keyword\">this</span>, <span class=\"number\">14.0f</span>);</div><div class=\"line\">        <span class=\"keyword\">int</span> marginLeft = ScreenUtil.dip2px(<span class=\"keyword\">this</span>, <span class=\"number\">20.0f</span>);</div><div class=\"line\">        <span class=\"keyword\">int</span> paddingLeft = ScreenUtil.dip2px(<span class=\"keyword\">this</span>, <span class=\"number\">3.0f</span>);</div><div class=\"line\"></div><div class=\"line\">        RadioGroup.LayoutParams layoutParams = </div><div class=\"line\">            <span class=\"keyword\">new</span> RadioGroup.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT);</div><div class=\"line\">        RadioGroup.LayoutParams layoutParams1 = </div><div class=\"line\">            <span class=\"keyword\">new</span> RadioGroup.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, <span class=\"number\">1</span>);</div><div class=\"line\">        layoutParams.setMargins(marginLeft, margin, margin, margin);</div><div class=\"line\">        layoutParams1.setMargins(margin, <span class=\"number\">0</span>, margin, <span class=\"number\">0</span>);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">int</span> defaultId = -<span class=\"number\">1</span>;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; messageList.size(); i++) &#123;</div><div class=\"line\">            RadioButton rb = <span class=\"keyword\">new</span> RadioButton(<span class=\"keyword\">this</span>);</div><div class=\"line\">            rb.setMaxLines(<span class=\"number\">2</span>);</div><div class=\"line\">            rb.setPadding(paddingLeft, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</div><div class=\"line\">            rb.setText(messageList.get(i).relayMessage);</div><div class=\"line\">            rb.setButtonDrawable(android.R.color.transparent);</div><div class=\"line\">            rb.setTextColor(Color.parseColor(<span class=\"string\">\"#555555\"</span>));</div><div class=\"line\">            rb.setButtonDrawable(<span class=\"keyword\">null</span>);<span class=\"comment\">// 去掉左边默认图标</span></div><div class=\"line\">            rb.setCompoundDrawablePadding(margin);</div><div class=\"line\">            rb.setEllipsize(TextUtils.TruncateAt.END);<span class=\"comment\">// 结尾处打点显示</span></div><div class=\"line\">            Drawable drawable = getResources().getDrawable(R.drawable.relay_message_radio_selector);</div><div class=\"line\">            drawable.setBounds(<span class=\"number\">0</span>, <span class=\"number\">0</span>, drawable.getMinimumWidth(), drawable.getMinimumHeight());</div><div class=\"line\">            rb.setCompoundDrawables(drawable, <span class=\"keyword\">null</span>, <span class=\"keyword\">null</span>, <span class=\"keyword\">null</span>);</div><div class=\"line\">            <span class=\"comment\">// 手动生成id</span></div><div class=\"line\">            <span class=\"keyword\">int</span> generateId = generateViewId();</div><div class=\"line\">            messages.put(generateId, messageList.get(i).relayMessage);</div><div class=\"line\">            rb.setId(generateId);</div><div class=\"line\">            <span class=\"keyword\">if</span> (i == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                defaultId = generateId;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            TextView view = <span class=\"keyword\">new</span> TextView(<span class=\"keyword\">this</span>);</div><div class=\"line\">            view.setBackgroundColor(Color.parseColor(<span class=\"string\">\"#dddddd\"</span>));</div><div class=\"line\"></div><div class=\"line\">            radioGroup.addView(rb, layoutParams);</div><div class=\"line\">            radioGroup.addView(view, layoutParams1);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"comment\">// 此处：默认选中第一个</span></div><div class=\"line\">        radioGroup.check(defaultId);</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure></p>\n<p>R.drawable.relay_message_radio_selector 代码如下：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">selector</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!--设置自己的图片icon--&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">android:drawable</span>=<span class=\"string\">\"@drawable/relay_radio_unchecked\"</span> </div><div class=\"line\">        <span class=\"attr\">android:state_checked</span>=<span class=\"string\">\"false\"</span> /&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">android:drawable</span>=<span class=\"string\">\"@drawable/relay_radio_checked\"</span> </div><div class=\"line\">        <span class=\"attr\">android:state_checked</span>=<span class=\"string\">\"true\"</span> /&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">selector</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>效果如下图：</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/%E9%80%89%E6%8B%A9.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>"},{"title":"RxJava 初探（一）","date":"2016-10-05T16:45:00.000Z","_content":"### 一、几个基本概念\n* 由来\n\tRx(Reactive Extensions)，最初是LINQ的一个扩展，后由微软团队开发，在2012年11月开源。ReactiveX.io给的定义是，Rx是一个使用可观察数据流进行异步编程的编程接口，ReactiveX结合了观察者模式、迭代器模式和函数式编程的精华。\n* Rx 模式\n * 创建：Rx可以方便的创建事件流和数据流\n * 组合：Rx使用查询式的操作符组合和变换数据流\n * 监听：Rx可以订阅任何可观察的数据流并执行操作\n* 名词定义\n\t* Iterable： 可迭代对象，支持以迭代器的形式遍历\n\t* Observable：可观察对象，在Rx中定义为更强大的Iterable，在观察者模式中是被观察的对象，一旦数据产生或发生变化，会通过某种方式通知观察者或订阅者\n\t* Observer： 观察者对象，监听Observable发射的数据并做出响应，Subscriber是它的一个特殊实现\n\t* emit：直译为发射，发布，发出，含义是Observable在数据产生或变化时发送通知给Observer，调用Observer对应的方法。文章统一翻译为发射\n\t* items：直译为项目，条目，在Rx里是指Observable发射的数据项，文章统一译为数据，数据项\n\n### 二、响应式编程模式\n* 下图采自官方文档，基本阐述了数据流和数据变换的过程：\n\t\n\t![这里写图片描述](http://7xr1vo.com1.z0.glb.clouddn.com/rxjava%E7%AE%80%E5%8D%95%E5%9B%BE%E8%A7%A3.png)\n* 冷热观察者\n\t* 热 观察者：可能一创建完就开始发射数据，因此所有后续订阅它的观察者可能从序列中间的某个位置开始接受数据（有一些数据错过了）\n\t* 冷 观察者：一个\"冷\"的Observable会一直等待，直到有观察者订阅它才开始发射数据，因此这个观察者可以确保会收到整个数据序列\n\n### 三、操作分类\n* 创建操作： Create, Defer, Empty/Never/Throw, From, Interval, Just, Range, Repeat, Start, Timer\n* 变换操作：Buffer, FlatMap, GroupBy, Map, Scan和Window\n* 过滤操作：Debounce, Distinct, ElementAt, Filter, First, IgnoreElements, Last, Sample, Skip, SkipLast, Take, TakeLast\n* 组合操作：And/Then/When, CombineLatest, Join, Merge, StartWith, Switch, Zip\n* 错误处理：Catch和Retry\n* 辅助操作：Delay, Do, Materialize/Dematerialize, ObserveOn, Serialize, Subscribe, SubscribeOn, TimeInterval, Timeout, Timestamp, Using\n* 条件和布尔操作：All, Amb, Contains, DefaultIfEmpty, SequenceEqual, SkipUntil, SkipWhile, TakeUntil, TakeWhile\n* 算术和集合操作：Average, Concat, Count, Max, Min, Reduce, Sum\n* 转换操作：To\n* 连接操作：Connect, Publish, RefCount, Replay\n* 反压操作：用于增加特殊的流程控制策略的操作符\n\n> 官方文档翻译版：https://mcxiaoke.gitbooks.io/rxdocs/content/Intro.html","source":"_posts/RxJava 初探（一）.md","raw":"---\ntitle: RxJava 初探（一）\ndate: 2016-10-06 00:45\ncategories: RxJava\ntags: RxJava\n---\n### 一、几个基本概念\n* 由来\n\tRx(Reactive Extensions)，最初是LINQ的一个扩展，后由微软团队开发，在2012年11月开源。ReactiveX.io给的定义是，Rx是一个使用可观察数据流进行异步编程的编程接口，ReactiveX结合了观察者模式、迭代器模式和函数式编程的精华。\n* Rx 模式\n * 创建：Rx可以方便的创建事件流和数据流\n * 组合：Rx使用查询式的操作符组合和变换数据流\n * 监听：Rx可以订阅任何可观察的数据流并执行操作\n* 名词定义\n\t* Iterable： 可迭代对象，支持以迭代器的形式遍历\n\t* Observable：可观察对象，在Rx中定义为更强大的Iterable，在观察者模式中是被观察的对象，一旦数据产生或发生变化，会通过某种方式通知观察者或订阅者\n\t* Observer： 观察者对象，监听Observable发射的数据并做出响应，Subscriber是它的一个特殊实现\n\t* emit：直译为发射，发布，发出，含义是Observable在数据产生或变化时发送通知给Observer，调用Observer对应的方法。文章统一翻译为发射\n\t* items：直译为项目，条目，在Rx里是指Observable发射的数据项，文章统一译为数据，数据项\n\n### 二、响应式编程模式\n* 下图采自官方文档，基本阐述了数据流和数据变换的过程：\n\t\n\t![这里写图片描述](http://7xr1vo.com1.z0.glb.clouddn.com/rxjava%E7%AE%80%E5%8D%95%E5%9B%BE%E8%A7%A3.png)\n* 冷热观察者\n\t* 热 观察者：可能一创建完就开始发射数据，因此所有后续订阅它的观察者可能从序列中间的某个位置开始接受数据（有一些数据错过了）\n\t* 冷 观察者：一个\"冷\"的Observable会一直等待，直到有观察者订阅它才开始发射数据，因此这个观察者可以确保会收到整个数据序列\n\n### 三、操作分类\n* 创建操作： Create, Defer, Empty/Never/Throw, From, Interval, Just, Range, Repeat, Start, Timer\n* 变换操作：Buffer, FlatMap, GroupBy, Map, Scan和Window\n* 过滤操作：Debounce, Distinct, ElementAt, Filter, First, IgnoreElements, Last, Sample, Skip, SkipLast, Take, TakeLast\n* 组合操作：And/Then/When, CombineLatest, Join, Merge, StartWith, Switch, Zip\n* 错误处理：Catch和Retry\n* 辅助操作：Delay, Do, Materialize/Dematerialize, ObserveOn, Serialize, Subscribe, SubscribeOn, TimeInterval, Timeout, Timestamp, Using\n* 条件和布尔操作：All, Amb, Contains, DefaultIfEmpty, SequenceEqual, SkipUntil, SkipWhile, TakeUntil, TakeWhile\n* 算术和集合操作：Average, Concat, Count, Max, Min, Reduce, Sum\n* 转换操作：To\n* 连接操作：Connect, Publish, RefCount, Replay\n* 反压操作：用于增加特殊的流程控制策略的操作符\n\n> 官方文档翻译版：https://mcxiaoke.gitbooks.io/rxdocs/content/Intro.html","slug":"RxJava 初探（一）","published":1,"updated":"2017-01-19T08:20:55.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cizpjnf2k000vbaqwgjr35o93","content":"<h3 id=\"一、几个基本概念\"><a href=\"#一、几个基本概念\" class=\"headerlink\" title=\"一、几个基本概念\"></a>一、几个基本概念</h3><ul>\n<li>由来<br>  Rx(Reactive Extensions)，最初是LINQ的一个扩展，后由微软团队开发，在2012年11月开源。ReactiveX.io给的定义是，Rx是一个使用可观察数据流进行异步编程的编程接口，ReactiveX结合了观察者模式、迭代器模式和函数式编程的精华。</li>\n<li>Rx 模式<ul>\n<li>创建：Rx可以方便的创建事件流和数据流</li>\n<li>组合：Rx使用查询式的操作符组合和变换数据流</li>\n<li>监听：Rx可以订阅任何可观察的数据流并执行操作</li>\n</ul>\n</li>\n<li>名词定义<ul>\n<li>Iterable： 可迭代对象，支持以迭代器的形式遍历</li>\n<li>Observable：可观察对象，在Rx中定义为更强大的Iterable，在观察者模式中是被观察的对象，一旦数据产生或发生变化，会通过某种方式通知观察者或订阅者</li>\n<li>Observer： 观察者对象，监听Observable发射的数据并做出响应，Subscriber是它的一个特殊实现</li>\n<li>emit：直译为发射，发布，发出，含义是Observable在数据产生或变化时发送通知给Observer，调用Observer对应的方法。文章统一翻译为发射</li>\n<li>items：直译为项目，条目，在Rx里是指Observable发射的数据项，文章统一译为数据，数据项</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"二、响应式编程模式\"><a href=\"#二、响应式编程模式\" class=\"headerlink\" title=\"二、响应式编程模式\"></a>二、响应式编程模式</h3><ul>\n<li><p>下图采自官方文档，基本阐述了数据流和数据变换的过程：</p>\n<p>  <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/rxjava%E7%AE%80%E5%8D%95%E5%9B%BE%E8%A7%A3.png\" alt=\"这里写图片描述\"></p>\n</li>\n<li>冷热观察者<ul>\n<li>热 观察者：可能一创建完就开始发射数据，因此所有后续订阅它的观察者可能从序列中间的某个位置开始接受数据（有一些数据错过了）</li>\n<li>冷 观察者：一个”冷”的Observable会一直等待，直到有观察者订阅它才开始发射数据，因此这个观察者可以确保会收到整个数据序列</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"三、操作分类\"><a href=\"#三、操作分类\" class=\"headerlink\" title=\"三、操作分类\"></a>三、操作分类</h3><ul>\n<li>创建操作： Create, Defer, Empty/Never/Throw, From, Interval, Just, Range, Repeat, Start, Timer</li>\n<li>变换操作：Buffer, FlatMap, GroupBy, Map, Scan和Window</li>\n<li>过滤操作：Debounce, Distinct, ElementAt, Filter, First, IgnoreElements, Last, Sample, Skip, SkipLast, Take, TakeLast</li>\n<li>组合操作：And/Then/When, CombineLatest, Join, Merge, StartWith, Switch, Zip</li>\n<li>错误处理：Catch和Retry</li>\n<li>辅助操作：Delay, Do, Materialize/Dematerialize, ObserveOn, Serialize, Subscribe, SubscribeOn, TimeInterval, Timeout, Timestamp, Using</li>\n<li>条件和布尔操作：All, Amb, Contains, DefaultIfEmpty, SequenceEqual, SkipUntil, SkipWhile, TakeUntil, TakeWhile</li>\n<li>算术和集合操作：Average, Concat, Count, Max, Min, Reduce, Sum</li>\n<li>转换操作：To</li>\n<li>连接操作：Connect, Publish, RefCount, Replay</li>\n<li>反压操作：用于增加特殊的流程控制策略的操作符</li>\n</ul>\n<blockquote>\n<p>官方文档翻译版：<a href=\"https://mcxiaoke.gitbooks.io/rxdocs/content/Intro.html\" target=\"_blank\" rel=\"external\">https://mcxiaoke.gitbooks.io/rxdocs/content/Intro.html</a></p>\n</blockquote>\n","excerpt":"","more":"<h3 id=\"一、几个基本概念\"><a href=\"#一、几个基本概念\" class=\"headerlink\" title=\"一、几个基本概念\"></a>一、几个基本概念</h3><ul>\n<li>由来<br>  Rx(Reactive Extensions)，最初是LINQ的一个扩展，后由微软团队开发，在2012年11月开源。ReactiveX.io给的定义是，Rx是一个使用可观察数据流进行异步编程的编程接口，ReactiveX结合了观察者模式、迭代器模式和函数式编程的精华。</li>\n<li>Rx 模式<ul>\n<li>创建：Rx可以方便的创建事件流和数据流</li>\n<li>组合：Rx使用查询式的操作符组合和变换数据流</li>\n<li>监听：Rx可以订阅任何可观察的数据流并执行操作</li>\n</ul>\n</li>\n<li>名词定义<ul>\n<li>Iterable： 可迭代对象，支持以迭代器的形式遍历</li>\n<li>Observable：可观察对象，在Rx中定义为更强大的Iterable，在观察者模式中是被观察的对象，一旦数据产生或发生变化，会通过某种方式通知观察者或订阅者</li>\n<li>Observer： 观察者对象，监听Observable发射的数据并做出响应，Subscriber是它的一个特殊实现</li>\n<li>emit：直译为发射，发布，发出，含义是Observable在数据产生或变化时发送通知给Observer，调用Observer对应的方法。文章统一翻译为发射</li>\n<li>items：直译为项目，条目，在Rx里是指Observable发射的数据项，文章统一译为数据，数据项</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"二、响应式编程模式\"><a href=\"#二、响应式编程模式\" class=\"headerlink\" title=\"二、响应式编程模式\"></a>二、响应式编程模式</h3><ul>\n<li><p>下图采自官方文档，基本阐述了数据流和数据变换的过程：</p>\n<p>  <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/rxjava%E7%AE%80%E5%8D%95%E5%9B%BE%E8%A7%A3.png\" alt=\"这里写图片描述\"></p>\n</li>\n<li>冷热观察者<ul>\n<li>热 观察者：可能一创建完就开始发射数据，因此所有后续订阅它的观察者可能从序列中间的某个位置开始接受数据（有一些数据错过了）</li>\n<li>冷 观察者：一个”冷”的Observable会一直等待，直到有观察者订阅它才开始发射数据，因此这个观察者可以确保会收到整个数据序列</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"三、操作分类\"><a href=\"#三、操作分类\" class=\"headerlink\" title=\"三、操作分类\"></a>三、操作分类</h3><ul>\n<li>创建操作： Create, Defer, Empty/Never/Throw, From, Interval, Just, Range, Repeat, Start, Timer</li>\n<li>变换操作：Buffer, FlatMap, GroupBy, Map, Scan和Window</li>\n<li>过滤操作：Debounce, Distinct, ElementAt, Filter, First, IgnoreElements, Last, Sample, Skip, SkipLast, Take, TakeLast</li>\n<li>组合操作：And/Then/When, CombineLatest, Join, Merge, StartWith, Switch, Zip</li>\n<li>错误处理：Catch和Retry</li>\n<li>辅助操作：Delay, Do, Materialize/Dematerialize, ObserveOn, Serialize, Subscribe, SubscribeOn, TimeInterval, Timeout, Timestamp, Using</li>\n<li>条件和布尔操作：All, Amb, Contains, DefaultIfEmpty, SequenceEqual, SkipUntil, SkipWhile, TakeUntil, TakeWhile</li>\n<li>算术和集合操作：Average, Concat, Count, Max, Min, Reduce, Sum</li>\n<li>转换操作：To</li>\n<li>连接操作：Connect, Publish, RefCount, Replay</li>\n<li>反压操作：用于增加特殊的流程控制策略的操作符</li>\n</ul>\n<blockquote>\n<p>官方文档翻译版：<a href=\"https://mcxiaoke.gitbooks.io/rxdocs/content/Intro.html\">https://mcxiaoke.gitbooks.io/rxdocs/content/Intro.html</a></p>\n</blockquote>\n"},{"title":"Spring 学习（一）","date":"2016-12-26T06:06:00.000Z","_content":"## Spring的2个基本概念\n* aop\n面向切面编程\n在原有的基础上进行扩展，而不是进行修改。符合 开闭原则\n* ioc\n控制反转\n不通过手动 new 方式，来创建对象，而是交给Spring 容器根据配置，进行创建。从而将类的对象交给Spring 进行控制管理\n\n    * ioc 的2种方式来创建对象：\n    （1）通过配置文件\n    （2）通过注解\n<br>\n    * ioc 实现原理\n    \n    通过dom4j 解析 xml 文件，拿到类的全路径，然后通过反射的技术创建该类的对象，结合工厂模式返给调用方\n伪代码实现说明：\n\n``` xml\n<bean id=“userService” class=“com.geng.UserService” />\n```\n``` java\npublic class Factory {\n    public static UserService getUserService() {\n        String classValue = dom4j.getValue(“userService”);\n        Class clazz = Class.forName(“classValue”);\n        return clazz.newInstance();\n    }\n}\n```\n## Spring 运行时\n![](http://7xr1vo.com1.z0.glb.clouddn.com/spring-overview.png)\nSpring 提供了全面的Java web 服务框架，从web层到业务层，再到持久层，都有着相关模块的实现。\n对于Spring 最基本使用，必须尹若 Core Container中的4个重要的部分，方可使用。\n若只引用某部分的库，maven也会自动引用最核心的jar包到你的应用中。\n\n## Spring 第一个Demo 开发\n在 idea 中，创建 maven 项目，然后，编辑 pom.xml 文件。\n引入：Spring 主要的几个库，log4j，junit\n\n``` xml\n<dependencies>\n    <dependency>\n        <groupId>org.springframework</groupId>\n        <artifactId>spring-context</artifactId>\n        <version>4.3.5.RELEASE</version>\n    </dependency>\n    <dependency>\n        <groupId>log4j</groupId>\n        <artifactId>log4j</artifactId>\n        <version>1.2.17</version>\n    </dependency>\n    <dependency>\n        <groupId>junit</groupId>\n        <artifactId>junit</artifactId>\n        <version>4.12</version>\n    </dependency>\n</dependencies>\n```\n\n在resource 目录下，创建 xml 配置文件，如图：\n![](http://7xr1vo.com1.z0.glb.clouddn.com/A5CEBFD6-CFE5-404A-A42F-CF521BAB4B47.png)\n\nIdea 在你编辑时候，会提示相关的属性，方便书写配置\n\n``` xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd”>\n\n    <bean id=\"user\" class=\"com.geng.ioc.User\"/>\n\n</beans>\n```\n![](http://7xr1vo.com1.z0.glb.clouddn.com/9FEC554D-7DDC-48C7-BA89-3FAAAC181312.png)\n\n创建测试用例：\n\n``` java\npublic class UserTest {\n\n    private ApplicationContext context;\n\n    @Before\n    public void setUp() throws Exception {\n        context = new ClassPathXmlApplicationContext(\"beans1.xml\");\n    }\n\n    @Test\n    public void add() throws Exception {\n        User user = (User) context.getBean(\"user\");\n        user.add();\n    }\n\n}\n```\n![](http://7xr1vo.com1.z0.glb.clouddn.com/979F1DF8-ADF4-499F-8119-62CDDE033AD4.png)\n\n至此，我们完成了第一个 Spring demo\n## bean 的管理\n* 通过无参构造创建（前面第一个demo）\n* 通过静态工厂实现对象创建\n代码示例：\n\n\n``` java\npublic class BeanFactory {\n\n    public static User2 createUser2() {\n        return new User2();\n    }\n}\n\npublic class User2 {\n\n    public void add() {\n        System.out.println(\"user2.....”);\n    }\n}\n```\n\nxml中配置：\n\n``` xml\n<!--用静态工厂创建-->\n<bean id=\"user2\" class=\"com.geng.ioc.BeanFactory\" factory-method=\"createUser2”/>\n```\n测试：\n\n``` java\npublic class User2Test {\n\n    private ApplicationContext context;\n\n    @Before\n    public void setUp() throws Exception {\n        context = new ClassPathXmlApplicationContext(\"beans1.xml\");\n    }\n\n    @Test\n    public void add() throws Exception {\n        User2 user2 = (User2) context.getBean(\"user2\");\n        System.out.println(user2);\n        user2.add();\n    }\n\n}\n```\n![](http://7xr1vo.com1.z0.glb.clouddn.com/0815D096-5833-4AA4-9BD8-EE493BE15F32.png)\n* 通过实例工厂创建对象\n\n``` xml\n<!--用实例工厂创建—>\n<bean id=\"bean2Factory\" class=\"com.geng.ioc.Bean2Factory\" />\n<bean id=\"user2\" factory-bean=\"bean2Factory\" factory-method=\"getBean\"/>\n```\n这里不再验证。。。\n\n## Spring配置文件中的几个重要属性\n\nid：不能还有特殊符号，“_”是可以的\nname：可以含有特殊符号，如：#，历史版本中使用的，后期不推荐使用。context.getBean() 方法可以获取这两种属性的值\nclass：类的全路径\nscope：作用域  \n\n    singleton(默认)  \n    prototype(多例)\n    request 创建对象放在request域\n    session 创建对象放在session域\n    globalSession 一次登陆，任何地方都保存有登录状态\n\n## 附录：IDEA Resource 目录下，存放的文件类型\n![](http://7xr1vo.com1.z0.glb.clouddn.com/23395798-F73A-4EBB-95E2-1641C5EF8A24.png)\n\n（IDEA 官网：https://www.jetbrains.com/help/idea/2016.3/resource-files.html ）\n\n所以，在此目录下，我们一般存放配置文件，或一些必要的资源文件。\n\nDemo 地址：\nhttps://github.com/fenglincanyi/springdemo1","source":"_posts/Spring 学习（一）.md","raw":"---\ntitle: Spring 学习（一）\ndate: 2016-12-26 14:06\ncategories: Java后台\ntags: Spring\n---\n## Spring的2个基本概念\n* aop\n面向切面编程\n在原有的基础上进行扩展，而不是进行修改。符合 开闭原则\n* ioc\n控制反转\n不通过手动 new 方式，来创建对象，而是交给Spring 容器根据配置，进行创建。从而将类的对象交给Spring 进行控制管理\n\n    * ioc 的2种方式来创建对象：\n    （1）通过配置文件\n    （2）通过注解\n<br>\n    * ioc 实现原理\n    \n    通过dom4j 解析 xml 文件，拿到类的全路径，然后通过反射的技术创建该类的对象，结合工厂模式返给调用方\n伪代码实现说明：\n\n``` xml\n<bean id=“userService” class=“com.geng.UserService” />\n```\n``` java\npublic class Factory {\n    public static UserService getUserService() {\n        String classValue = dom4j.getValue(“userService”);\n        Class clazz = Class.forName(“classValue”);\n        return clazz.newInstance();\n    }\n}\n```\n## Spring 运行时\n![](http://7xr1vo.com1.z0.glb.clouddn.com/spring-overview.png)\nSpring 提供了全面的Java web 服务框架，从web层到业务层，再到持久层，都有着相关模块的实现。\n对于Spring 最基本使用，必须尹若 Core Container中的4个重要的部分，方可使用。\n若只引用某部分的库，maven也会自动引用最核心的jar包到你的应用中。\n\n## Spring 第一个Demo 开发\n在 idea 中，创建 maven 项目，然后，编辑 pom.xml 文件。\n引入：Spring 主要的几个库，log4j，junit\n\n``` xml\n<dependencies>\n    <dependency>\n        <groupId>org.springframework</groupId>\n        <artifactId>spring-context</artifactId>\n        <version>4.3.5.RELEASE</version>\n    </dependency>\n    <dependency>\n        <groupId>log4j</groupId>\n        <artifactId>log4j</artifactId>\n        <version>1.2.17</version>\n    </dependency>\n    <dependency>\n        <groupId>junit</groupId>\n        <artifactId>junit</artifactId>\n        <version>4.12</version>\n    </dependency>\n</dependencies>\n```\n\n在resource 目录下，创建 xml 配置文件，如图：\n![](http://7xr1vo.com1.z0.glb.clouddn.com/A5CEBFD6-CFE5-404A-A42F-CF521BAB4B47.png)\n\nIdea 在你编辑时候，会提示相关的属性，方便书写配置\n\n``` xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd”>\n\n    <bean id=\"user\" class=\"com.geng.ioc.User\"/>\n\n</beans>\n```\n![](http://7xr1vo.com1.z0.glb.clouddn.com/9FEC554D-7DDC-48C7-BA89-3FAAAC181312.png)\n\n创建测试用例：\n\n``` java\npublic class UserTest {\n\n    private ApplicationContext context;\n\n    @Before\n    public void setUp() throws Exception {\n        context = new ClassPathXmlApplicationContext(\"beans1.xml\");\n    }\n\n    @Test\n    public void add() throws Exception {\n        User user = (User) context.getBean(\"user\");\n        user.add();\n    }\n\n}\n```\n![](http://7xr1vo.com1.z0.glb.clouddn.com/979F1DF8-ADF4-499F-8119-62CDDE033AD4.png)\n\n至此，我们完成了第一个 Spring demo\n## bean 的管理\n* 通过无参构造创建（前面第一个demo）\n* 通过静态工厂实现对象创建\n代码示例：\n\n\n``` java\npublic class BeanFactory {\n\n    public static User2 createUser2() {\n        return new User2();\n    }\n}\n\npublic class User2 {\n\n    public void add() {\n        System.out.println(\"user2.....”);\n    }\n}\n```\n\nxml中配置：\n\n``` xml\n<!--用静态工厂创建-->\n<bean id=\"user2\" class=\"com.geng.ioc.BeanFactory\" factory-method=\"createUser2”/>\n```\n测试：\n\n``` java\npublic class User2Test {\n\n    private ApplicationContext context;\n\n    @Before\n    public void setUp() throws Exception {\n        context = new ClassPathXmlApplicationContext(\"beans1.xml\");\n    }\n\n    @Test\n    public void add() throws Exception {\n        User2 user2 = (User2) context.getBean(\"user2\");\n        System.out.println(user2);\n        user2.add();\n    }\n\n}\n```\n![](http://7xr1vo.com1.z0.glb.clouddn.com/0815D096-5833-4AA4-9BD8-EE493BE15F32.png)\n* 通过实例工厂创建对象\n\n``` xml\n<!--用实例工厂创建—>\n<bean id=\"bean2Factory\" class=\"com.geng.ioc.Bean2Factory\" />\n<bean id=\"user2\" factory-bean=\"bean2Factory\" factory-method=\"getBean\"/>\n```\n这里不再验证。。。\n\n## Spring配置文件中的几个重要属性\n\nid：不能还有特殊符号，“_”是可以的\nname：可以含有特殊符号，如：#，历史版本中使用的，后期不推荐使用。context.getBean() 方法可以获取这两种属性的值\nclass：类的全路径\nscope：作用域  \n\n    singleton(默认)  \n    prototype(多例)\n    request 创建对象放在request域\n    session 创建对象放在session域\n    globalSession 一次登陆，任何地方都保存有登录状态\n\n## 附录：IDEA Resource 目录下，存放的文件类型\n![](http://7xr1vo.com1.z0.glb.clouddn.com/23395798-F73A-4EBB-95E2-1641C5EF8A24.png)\n\n（IDEA 官网：https://www.jetbrains.com/help/idea/2016.3/resource-files.html ）\n\n所以，在此目录下，我们一般存放配置文件，或一些必要的资源文件。\n\nDemo 地址：\nhttps://github.com/fenglincanyi/springdemo1","slug":"Spring 学习（一）","published":1,"updated":"2017-02-08T12:03:31.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cizpjnf2p000ybaqwfy339spg","content":"<h2 id=\"Spring的2个基本概念\"><a href=\"#Spring的2个基本概念\" class=\"headerlink\" title=\"Spring的2个基本概念\"></a>Spring的2个基本概念</h2><ul>\n<li>aop<br>面向切面编程<br>在原有的基础上进行扩展，而不是进行修改。符合 开闭原则</li>\n<li><p>ioc<br>控制反转<br>不通过手动 new 方式，来创建对象，而是交给Spring 容器根据配置，进行创建。从而将类的对象交给Spring 进行控制管理</p>\n<ul>\n<li>ioc 的2种方式来创建对象：<br>（1）通过配置文件<br>（2）通过注解<br><br></li>\n<li><p>ioc 实现原理</p>\n<p>通过dom4j 解析 xml 文件，拿到类的全路径，然后通过反射的技术创建该类的对象，结合工厂模式返给调用方<br>伪代码实现说明：</p>\n</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">“userService”</span> <span class=\"attr\">class</span>=<span class=\"string\">“com.geng.UserService”</span> /&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Factory</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> UserService <span class=\"title\">getUserService</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        String classValue = dom4j.getValue(“userService”);</div><div class=\"line\">        Class clazz = Class.forName(“classValue”);</div><div class=\"line\">        <span class=\"keyword\">return</span> clazz.newInstance();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"Spring-运行时\"><a href=\"#Spring-运行时\" class=\"headerlink\" title=\"Spring 运行时\"></a>Spring 运行时</h2><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/spring-overview.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>Spring 提供了全面的Java web 服务框架，从web层到业务层，再到持久层，都有着相关模块的实现。<br>对于Spring 最基本使用，必须尹若 Core Container中的4个重要的部分，方可使用。<br>若只引用某部分的库，maven也会自动引用最核心的jar包到你的应用中。</p>\n<h2 id=\"Spring-第一个Demo-开发\"><a href=\"#Spring-第一个Demo-开发\" class=\"headerlink\" title=\"Spring 第一个Demo 开发\"></a>Spring 第一个Demo 开发</h2><p>在 idea 中，创建 maven 项目，然后，编辑 pom.xml 文件。<br>引入：Spring 主要的几个库，log4j，junit</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-context<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>4.3.5.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>log4j<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>log4j<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.2.17<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>junit<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>junit<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>4.12<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>在resource 目录下，创建 xml 配置文件，如图：<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/A5CEBFD6-CFE5-404A-A42F-CF521BAB4B47.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure></p>\n<p>Idea 在你编辑时候，会提示相关的属性，方便书写配置</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans\"</span></span></div><div class=\"line\">       <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></div><div class=\"line\">       <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd”&gt;</span></div><div class=\"line\"></div><div class=\"line\">    &lt;bean id=\"<span class=\"attr\">user</span>\" <span class=\"attr\">class</span>=<span class=\"string\">\"com.geng.ioc.User\"</span>/&gt;</div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/9FEC554D-7DDC-48C7-BA89-3FAAAC181312.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>创建测试用例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserTest</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> ApplicationContext context;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Before</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setUp</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">        context = <span class=\"keyword\">new</span> ClassPathXmlApplicationContext(<span class=\"string\">\"beans1.xml\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Test</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">        User user = (User) context.getBean(<span class=\"string\">\"user\"</span>);</div><div class=\"line\">        user.add();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/979F1DF8-ADF4-499F-8119-62CDDE033AD4.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>至此，我们完成了第一个 Spring demo</p>\n<h2 id=\"bean-的管理\"><a href=\"#bean-的管理\" class=\"headerlink\" title=\"bean 的管理\"></a>bean 的管理</h2><ul>\n<li>通过无参构造创建（前面第一个demo）</li>\n<li>通过静态工厂实现对象创建<br>代码示例：</li>\n</ul>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class BeanFactory &#123;</div><div class=\"line\"></div><div class=\"line\">    public static User2 createUser2() &#123;</div><div class=\"line\">        return new User2();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">public class User2 &#123;</div><div class=\"line\"></div><div class=\"line\">    public void add() &#123;</div><div class=\"line\">        System.out.println(\"user2.....”);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>xml中配置：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!--用静态工厂创建--&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"user2\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.geng.ioc.BeanFactory\"</span> <span class=\"attr\">factory-method</span>=<span class=\"string\">\"createUser2”/&gt;</span></span></div></pre></td></tr></table></figure>\n<p>测试：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User2Test</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> ApplicationContext context;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Before</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setUp</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">        context = <span class=\"keyword\">new</span> ClassPathXmlApplicationContext(<span class=\"string\">\"beans1.xml\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Test</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">        User2 user2 = (User2) context.getBean(<span class=\"string\">\"user2\"</span>);</div><div class=\"line\">        System.out.println(user2);</div><div class=\"line\">        user2.add();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/0815D096-5833-4AA4-9BD8-EE493BE15F32.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<ul>\n<li>通过实例工厂创建对象</li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!--用实例工厂创建—&gt;</span></div><div class=\"line\">&lt;bean id=\"bean2Factory\" class=\"com.geng.ioc.Bean2Factory\" /&gt;</div><div class=\"line\">&lt;bean id=\"user2\" factory-bean=\"bean2Factory\" factory-method=\"getBean\"/&gt;</div></pre></td></tr></table></figure>\n<p>这里不再验证。。。</p>\n<h2 id=\"Spring配置文件中的几个重要属性\"><a href=\"#Spring配置文件中的几个重要属性\" class=\"headerlink\" title=\"Spring配置文件中的几个重要属性\"></a>Spring配置文件中的几个重要属性</h2><p>id：不能还有特殊符号，“_”是可以的<br>name：可以含有特殊符号，如：#，历史版本中使用的，后期不推荐使用。context.getBean() 方法可以获取这两种属性的值<br>class：类的全路径<br>scope：作用域  </p>\n<pre><code>singleton(默认)  \nprototype(多例)\nrequest 创建对象放在request域\nsession 创建对象放在session域\nglobalSession 一次登陆，任何地方都保存有登录状态\n</code></pre><h2 id=\"附录：IDEA-Resource-目录下，存放的文件类型\"><a href=\"#附录：IDEA-Resource-目录下，存放的文件类型\" class=\"headerlink\" title=\"附录：IDEA Resource 目录下，存放的文件类型\"></a>附录：IDEA Resource 目录下，存放的文件类型</h2><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/23395798-F73A-4EBB-95E2-1641C5EF8A24.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>（IDEA 官网：<a href=\"https://www.jetbrains.com/help/idea/2016.3/resource-files.html\" target=\"_blank\" rel=\"external\">https://www.jetbrains.com/help/idea/2016.3/resource-files.html</a> ）</p>\n<p>所以，在此目录下，我们一般存放配置文件，或一些必要的资源文件。</p>\n<p>Demo 地址：<br><a href=\"https://github.com/fenglincanyi/springdemo1\" target=\"_blank\" rel=\"external\">https://github.com/fenglincanyi/springdemo1</a></p>\n","excerpt":"","more":"<h2 id=\"Spring的2个基本概念\"><a href=\"#Spring的2个基本概念\" class=\"headerlink\" title=\"Spring的2个基本概念\"></a>Spring的2个基本概念</h2><ul>\n<li>aop<br>面向切面编程<br>在原有的基础上进行扩展，而不是进行修改。符合 开闭原则</li>\n<li><p>ioc<br>控制反转<br>不通过手动 new 方式，来创建对象，而是交给Spring 容器根据配置，进行创建。从而将类的对象交给Spring 进行控制管理</p>\n<ul>\n<li>ioc 的2种方式来创建对象：<br>（1）通过配置文件<br>（2）通过注解<br><br></li>\n<li><p>ioc 实现原理</p>\n<p>通过dom4j 解析 xml 文件，拿到类的全路径，然后通过反射的技术创建该类的对象，结合工厂模式返给调用方<br>伪代码实现说明：</p>\n</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">“userService”</span> <span class=\"attr\">class</span>=<span class=\"string\">“com.geng.UserService”</span> /&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Factory</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> UserService <span class=\"title\">getUserService</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        String classValue = dom4j.getValue(“userService”);</div><div class=\"line\">        Class clazz = Class.forName(“classValue”);</div><div class=\"line\">        <span class=\"keyword\">return</span> clazz.newInstance();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"Spring-运行时\"><a href=\"#Spring-运行时\" class=\"headerlink\" title=\"Spring 运行时\"></a>Spring 运行时</h2><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/spring-overview.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>Spring 提供了全面的Java web 服务框架，从web层到业务层，再到持久层，都有着相关模块的实现。<br>对于Spring 最基本使用，必须尹若 Core Container中的4个重要的部分，方可使用。<br>若只引用某部分的库，maven也会自动引用最核心的jar包到你的应用中。</p>\n<h2 id=\"Spring-第一个Demo-开发\"><a href=\"#Spring-第一个Demo-开发\" class=\"headerlink\" title=\"Spring 第一个Demo 开发\"></a>Spring 第一个Demo 开发</h2><p>在 idea 中，创建 maven 项目，然后，编辑 pom.xml 文件。<br>引入：Spring 主要的几个库，log4j，junit</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-context<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>4.3.5.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>log4j<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>log4j<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.2.17<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>junit<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>junit<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>4.12<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>在resource 目录下，创建 xml 配置文件，如图：<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/A5CEBFD6-CFE5-404A-A42F-CF521BAB4B47.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure></p>\n<p>Idea 在你编辑时候，会提示相关的属性，方便书写配置</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans\"</span></div><div class=\"line\">       <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></div><div class=\"line\">       <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd”&gt;</div><div class=\"line\"></div><div class=\"line\">    &lt;bean id=\"</span><span class=\"attr\">user</span>\" <span class=\"attr\">class</span>=<span class=\"string\">\"com.geng.ioc.User\"</span>/&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/9FEC554D-7DDC-48C7-BA89-3FAAAC181312.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>创建测试用例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserTest</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> ApplicationContext context;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Before</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setUp</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">        context = <span class=\"keyword\">new</span> ClassPathXmlApplicationContext(<span class=\"string\">\"beans1.xml\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Test</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">        User user = (User) context.getBean(<span class=\"string\">\"user\"</span>);</div><div class=\"line\">        user.add();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/979F1DF8-ADF4-499F-8119-62CDDE033AD4.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>至此，我们完成了第一个 Spring demo</p>\n<h2 id=\"bean-的管理\"><a href=\"#bean-的管理\" class=\"headerlink\" title=\"bean 的管理\"></a>bean 的管理</h2><ul>\n<li>通过无参构造创建（前面第一个demo）</li>\n<li>通过静态工厂实现对象创建<br>代码示例：</li>\n</ul>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class BeanFactory &#123;</div><div class=\"line\"></div><div class=\"line\">    public static User2 createUser2() &#123;</div><div class=\"line\">        return new User2();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">public class User2 &#123;</div><div class=\"line\"></div><div class=\"line\">    public void add() &#123;</div><div class=\"line\">        System.out.println(\"user2.....”);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>xml中配置：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!--用静态工厂创建--&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"user2\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.geng.ioc.BeanFactory\"</span> <span class=\"attr\">factory-method</span>=<span class=\"string\">\"createUser2”/&gt;</span></span></div></pre></td></tr></table></figure>\n<p>测试：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User2Test</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> ApplicationContext context;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Before</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setUp</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">        context = <span class=\"keyword\">new</span> ClassPathXmlApplicationContext(<span class=\"string\">\"beans1.xml\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Test</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">        User2 user2 = (User2) context.getBean(<span class=\"string\">\"user2\"</span>);</div><div class=\"line\">        System.out.println(user2);</div><div class=\"line\">        user2.add();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/0815D096-5833-4AA4-9BD8-EE493BE15F32.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<ul>\n<li>通过实例工厂创建对象</li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!--用实例工厂创建—&gt;</div><div class=\"line\">&lt;bean id=\"bean2Factory\" class=\"com.geng.ioc.Bean2Factory\" /&gt;</div><div class=\"line\">&lt;bean id=\"user2\" factory-bean=\"bean2Factory\" factory-method=\"getBean\"/&gt;</span></div></pre></td></tr></table></figure>\n<p>这里不再验证。。。</p>\n<h2 id=\"Spring配置文件中的几个重要属性\"><a href=\"#Spring配置文件中的几个重要属性\" class=\"headerlink\" title=\"Spring配置文件中的几个重要属性\"></a>Spring配置文件中的几个重要属性</h2><p>id：不能还有特殊符号，“_”是可以的<br>name：可以含有特殊符号，如：#，历史版本中使用的，后期不推荐使用。context.getBean() 方法可以获取这两种属性的值<br>class：类的全路径<br>scope：作用域  </p>\n<pre><code>singleton(默认)  \nprototype(多例)\nrequest 创建对象放在request域\nsession 创建对象放在session域\nglobalSession 一次登陆，任何地方都保存有登录状态\n</code></pre><h2 id=\"附录：IDEA-Resource-目录下，存放的文件类型\"><a href=\"#附录：IDEA-Resource-目录下，存放的文件类型\" class=\"headerlink\" title=\"附录：IDEA Resource 目录下，存放的文件类型\"></a>附录：IDEA Resource 目录下，存放的文件类型</h2><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/23395798-F73A-4EBB-95E2-1641C5EF8A24.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>（IDEA 官网：<a href=\"https://www.jetbrains.com/help/idea/2016.3/resource-files.html\">https://www.jetbrains.com/help/idea/2016.3/resource-files.html</a> ）</p>\n<p>所以，在此目录下，我们一般存放配置文件，或一些必要的资源文件。</p>\n<p>Demo 地址：<br><a href=\"https://github.com/fenglincanyi/springdemo1\">https://github.com/fenglincanyi/springdemo1</a></p>\n"},{"title":"Spring 学习（二）","date":"2016-12-27T09:01:00.000Z","_content":"> 本次学习内容：Spring 依赖注入相关\n\n\n# xml 配置实现\n## setXXX() 方法注入\n\n``` xml\n<bean id=\"book\" class=\"com.geng.attr.Book\">\n    <property name=\"bookName\" value=\"西游记\"/>\n</bean>\n```\n## 构造方法注入\n\n``` xml\n// 这里通过有参构造注入\n<bean id=\"people\" class=\"com.geng.attr.People\">\n    <constructor-arg name=\"name\" value=\"小明\"/>\n</bean>\n```\n## 对象注入\n\n``` xml\n<bean id=\"userDao\" class=\"com.geng.obj.UserDao\"/>\n<bean id=\"userService\" class=\"com.geng.obj.UserService\">\n    <property name=\"userDao\" ref=\"userDao\"/>\n</bean>\n```\n\n``` java\npublic class UserDao {\n\n    public void showUserDao() {\n        System.out.println(\"show user dao...\");\n    }\n}\n```\n\n``` java\npublic class UserService {\n\n    private UserDao userDao;\n\n    public void setUserDao(UserDao userDao) {\n        this.userDao = userDao;\n    }\n\n    public void showService() {\n        System.out.println(\"show Service....\");\n\n        userDao.showUserDao();\n    }\n}\n```\n测试：\n\n``` java\npublic class UserServiceTest {\n\n    private ApplicationContext context;\n\n    @Before\n    public void setUp() throws Exception {\n        context = new ClassPathXmlApplicationContext(\"beans1.xml\");\n    }\n\n    @Test\n    public void showService() throws Exception {\n        UserService userService = (UserService) context.getBean(\"userService\");\n        userService.showService();\n    }\n\n}\n```\n![](http://7xr1vo.com1.z0.glb.clouddn.com/40B10214-301C-4735-8CE0-8DB0F4CCCC8B.png)\n\n## p命名空间注入\nxml 头部加入：\n\n``` xml\nxmlns:p=\"http://www.springframework.org/schema/p\"\n```\n配置：\n\n``` xml\n<bean id=\"person\" class=\"com.geng.attr.Person\" p:pName=\"呵呵哒”/>\n```\n\n``` java\npublic class Person {\n\n    private String pName;\n\n    public void setpName(String pName) {\n        this.pName = pName;\n    }\n\n    public void test() {\n        System.out.println(\"result: \" + pName);\n    }\n}\n```\n![](http://7xr1vo.com1.z0.glb.clouddn.com/EA20EBAD-5360-4197-BA0C-4059ABF7636F.png)\n\n## 复杂类型注入\n\n``` java\npublic class MulitDemo {\n\n    private String[] arrs;\n    private List<String> list;\n    private Map<String, String> map;\n    private Properties properties;\n\n    public void setArrs(String[] arrs) {\n        this.arrs = arrs;\n    }\n\n    public void setList(List<String> list) {\n        this.list = list;\n    }\n\n    public void setMap(Map<String, String> map) {\n        this.map = map;\n    }\n\n    public void setProperties(Properties properties) {\n        this.properties = properties;\n    }\n\n    public void showAll() {\n        System.out.println(arrs);\n        System.out.println(list);\n        System.out.println(map);\n        System.out.println(properties);\n    }\n}\n```\nxml 分别配置：\n``` xml\n<bean id=\"mulitDemo\" class=\"com.geng.collection.MulitDemo\">\n    <property name=\"arrs\">\n        <array>\n            <value>小红</value>\n            <value>小白</value>\n            <value>小绿</value>\n        </array>\n    </property>\n\n    <property name=\"list\">\n        <list>\n            <value>大白</value>\n            <value>大春</value>\n            <value>大花</value>\n        </list>\n    </property>\n\n    <property name=\"map\">\n        <map>\n            <entry key=\"001\" value=\"小白\" />\n            <entry key=\"002\" value=\"小刘\" />\n            <entry key=\"003\" value=\"小东\" />\n        </map>\n    </property>\n\n    <property name=\"properties\">\n        <props>\n            <prop key=\"driveClass\">com.mysql.jdbc.Driver</prop>\n            <prop key=\"userName\">root</prop>\n            <prop key=\"userPwd\">root</prop>\n        </props>\n    </property>\n</bean>\n```\n测试：\n![](http://7xr1vo.com1.z0.glb.clouddn.com/76FF4DDF-95DD-4F5A-B43F-30946D328A30.png)\n\n\n# 注解实现\n\n``` xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xmlns:context=\"http://www.springframework.org/schema/context\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n            http://www.springframework.org/schema/beans/spring-beans.xsd\n            http://www.springframework.org/schema/context\n            http://www.springframework.org/schema/context/spring-context.xsd\">\n    <!-- 上面 加入 spring-context 约束，参照spring文档： 41.2.8 the context schema；否则，无法使用 context标 签 -->\n</beans>\n```\n\n## 创建对象注解\n* @Component\n* @Controller ------ web 层\n* @Service  ------ 业务层\n* @Repository ------ 持久层\n\n以上4个注解 功能是一致的，都是用于创建对象，作用在 **类** 上，只是为了后期方便扩展\n\n## 对象的 scope\n\n``` java\n@Scope(scopeName = ConfigurableBeanFactory.SCOPE_PROTOTYPE) // 默认是 singleton\n```\n可查看源码进行设置\n\n## 对象属性注入\n* @Autowired：自动装配\n* @Resource(name=“userDao”) 指定创建哪种类型的对象\n\n``` java\n@Component(value = \"userDao\")\npublic class UserDao {\n\n    public void showUserDao() {\n        System.out.println(\"show user dao ...\");\n    }\n}\n```\n\n``` java\n@Service(value = \"userService\")\npublic class UserService {\n\n    // 1. 第一种\n//    @Autowired\n//    private UserDao userDao;// 要使用UserDao的对象，使用自动装配\n\n    // 2. 第二种\n    @Resource(name = \"userDao\") // name 值必须和 UserDao 内的value值必须一样，否则报错：no such bean is defined\n    private UserDao userDao;// 这种是明确指定创建哪种类型的对象，比较常用\n\n    public void showUserService() {\n        System.out.println(\"show user service ...\");\n        userDao.showUserDao();\n    }\n}\n```\n测试：\n![](http://7xr1vo.com1.z0.glb.clouddn.com/A49E426F-CDC3-4A7E-8AD2-D428586B749D.png)\n\n\n<br>\n> xml 配置注入 和 注解注入 两种可以联合使用，用法和前面一样，不再举例。\n\n# IOC 与 DI 区别\n\nIOC ：控制反转，将创建对象交给 Spring 的配置来完成\nDI ：将对象的属性赋值\n\nDI 是依赖于 ioc 才能完成操作，不能单独存在\n\n\n<br>\n\n附录：\ndemo地址：\nhttps://github.com/fenglincanyi/springdemo1\nhttps://github.com/fenglincanyi/springdemo2","source":"_posts/Spring 学习（二）.md","raw":"---\ntitle: Spring 学习（二）\ndate: 2016-12-27 17:01\ncategories: Java后台\ntags: Spring\n---\n> 本次学习内容：Spring 依赖注入相关\n\n\n# xml 配置实现\n## setXXX() 方法注入\n\n``` xml\n<bean id=\"book\" class=\"com.geng.attr.Book\">\n    <property name=\"bookName\" value=\"西游记\"/>\n</bean>\n```\n## 构造方法注入\n\n``` xml\n// 这里通过有参构造注入\n<bean id=\"people\" class=\"com.geng.attr.People\">\n    <constructor-arg name=\"name\" value=\"小明\"/>\n</bean>\n```\n## 对象注入\n\n``` xml\n<bean id=\"userDao\" class=\"com.geng.obj.UserDao\"/>\n<bean id=\"userService\" class=\"com.geng.obj.UserService\">\n    <property name=\"userDao\" ref=\"userDao\"/>\n</bean>\n```\n\n``` java\npublic class UserDao {\n\n    public void showUserDao() {\n        System.out.println(\"show user dao...\");\n    }\n}\n```\n\n``` java\npublic class UserService {\n\n    private UserDao userDao;\n\n    public void setUserDao(UserDao userDao) {\n        this.userDao = userDao;\n    }\n\n    public void showService() {\n        System.out.println(\"show Service....\");\n\n        userDao.showUserDao();\n    }\n}\n```\n测试：\n\n``` java\npublic class UserServiceTest {\n\n    private ApplicationContext context;\n\n    @Before\n    public void setUp() throws Exception {\n        context = new ClassPathXmlApplicationContext(\"beans1.xml\");\n    }\n\n    @Test\n    public void showService() throws Exception {\n        UserService userService = (UserService) context.getBean(\"userService\");\n        userService.showService();\n    }\n\n}\n```\n![](http://7xr1vo.com1.z0.glb.clouddn.com/40B10214-301C-4735-8CE0-8DB0F4CCCC8B.png)\n\n## p命名空间注入\nxml 头部加入：\n\n``` xml\nxmlns:p=\"http://www.springframework.org/schema/p\"\n```\n配置：\n\n``` xml\n<bean id=\"person\" class=\"com.geng.attr.Person\" p:pName=\"呵呵哒”/>\n```\n\n``` java\npublic class Person {\n\n    private String pName;\n\n    public void setpName(String pName) {\n        this.pName = pName;\n    }\n\n    public void test() {\n        System.out.println(\"result: \" + pName);\n    }\n}\n```\n![](http://7xr1vo.com1.z0.glb.clouddn.com/EA20EBAD-5360-4197-BA0C-4059ABF7636F.png)\n\n## 复杂类型注入\n\n``` java\npublic class MulitDemo {\n\n    private String[] arrs;\n    private List<String> list;\n    private Map<String, String> map;\n    private Properties properties;\n\n    public void setArrs(String[] arrs) {\n        this.arrs = arrs;\n    }\n\n    public void setList(List<String> list) {\n        this.list = list;\n    }\n\n    public void setMap(Map<String, String> map) {\n        this.map = map;\n    }\n\n    public void setProperties(Properties properties) {\n        this.properties = properties;\n    }\n\n    public void showAll() {\n        System.out.println(arrs);\n        System.out.println(list);\n        System.out.println(map);\n        System.out.println(properties);\n    }\n}\n```\nxml 分别配置：\n``` xml\n<bean id=\"mulitDemo\" class=\"com.geng.collection.MulitDemo\">\n    <property name=\"arrs\">\n        <array>\n            <value>小红</value>\n            <value>小白</value>\n            <value>小绿</value>\n        </array>\n    </property>\n\n    <property name=\"list\">\n        <list>\n            <value>大白</value>\n            <value>大春</value>\n            <value>大花</value>\n        </list>\n    </property>\n\n    <property name=\"map\">\n        <map>\n            <entry key=\"001\" value=\"小白\" />\n            <entry key=\"002\" value=\"小刘\" />\n            <entry key=\"003\" value=\"小东\" />\n        </map>\n    </property>\n\n    <property name=\"properties\">\n        <props>\n            <prop key=\"driveClass\">com.mysql.jdbc.Driver</prop>\n            <prop key=\"userName\">root</prop>\n            <prop key=\"userPwd\">root</prop>\n        </props>\n    </property>\n</bean>\n```\n测试：\n![](http://7xr1vo.com1.z0.glb.clouddn.com/76FF4DDF-95DD-4F5A-B43F-30946D328A30.png)\n\n\n# 注解实现\n\n``` xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xmlns:context=\"http://www.springframework.org/schema/context\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n            http://www.springframework.org/schema/beans/spring-beans.xsd\n            http://www.springframework.org/schema/context\n            http://www.springframework.org/schema/context/spring-context.xsd\">\n    <!-- 上面 加入 spring-context 约束，参照spring文档： 41.2.8 the context schema；否则，无法使用 context标 签 -->\n</beans>\n```\n\n## 创建对象注解\n* @Component\n* @Controller ------ web 层\n* @Service  ------ 业务层\n* @Repository ------ 持久层\n\n以上4个注解 功能是一致的，都是用于创建对象，作用在 **类** 上，只是为了后期方便扩展\n\n## 对象的 scope\n\n``` java\n@Scope(scopeName = ConfigurableBeanFactory.SCOPE_PROTOTYPE) // 默认是 singleton\n```\n可查看源码进行设置\n\n## 对象属性注入\n* @Autowired：自动装配\n* @Resource(name=“userDao”) 指定创建哪种类型的对象\n\n``` java\n@Component(value = \"userDao\")\npublic class UserDao {\n\n    public void showUserDao() {\n        System.out.println(\"show user dao ...\");\n    }\n}\n```\n\n``` java\n@Service(value = \"userService\")\npublic class UserService {\n\n    // 1. 第一种\n//    @Autowired\n//    private UserDao userDao;// 要使用UserDao的对象，使用自动装配\n\n    // 2. 第二种\n    @Resource(name = \"userDao\") // name 值必须和 UserDao 内的value值必须一样，否则报错：no such bean is defined\n    private UserDao userDao;// 这种是明确指定创建哪种类型的对象，比较常用\n\n    public void showUserService() {\n        System.out.println(\"show user service ...\");\n        userDao.showUserDao();\n    }\n}\n```\n测试：\n![](http://7xr1vo.com1.z0.glb.clouddn.com/A49E426F-CDC3-4A7E-8AD2-D428586B749D.png)\n\n\n<br>\n> xml 配置注入 和 注解注入 两种可以联合使用，用法和前面一样，不再举例。\n\n# IOC 与 DI 区别\n\nIOC ：控制反转，将创建对象交给 Spring 的配置来完成\nDI ：将对象的属性赋值\n\nDI 是依赖于 ioc 才能完成操作，不能单独存在\n\n\n<br>\n\n附录：\ndemo地址：\nhttps://github.com/fenglincanyi/springdemo1\nhttps://github.com/fenglincanyi/springdemo2","slug":"Spring 学习（二）","published":1,"updated":"2017-03-05T08:41:50.000Z","_id":"cizpjnf2s0011baqw1g6sc6ln","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>本次学习内容：Spring 依赖注入相关</p>\n</blockquote>\n<h1 id=\"xml-配置实现\"><a href=\"#xml-配置实现\" class=\"headerlink\" title=\"xml 配置实现\"></a>xml 配置实现</h1><h2 id=\"setXXX-方法注入\"><a href=\"#setXXX-方法注入\" class=\"headerlink\" title=\"setXXX() 方法注入\"></a>setXXX() 方法注入</h2><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"book\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.geng.attr.Book\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"bookName\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"西游记\"</span>/&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></div></pre></td></tr></table></figure>\n<h2 id=\"构造方法注入\"><a href=\"#构造方法注入\" class=\"headerlink\" title=\"构造方法注入\"></a>构造方法注入</h2><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 这里通过有参构造注入</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"people\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.geng.attr.People\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">constructor-arg</span> <span class=\"attr\">name</span>=<span class=\"string\">\"name\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"小明\"</span>/&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></div></pre></td></tr></table></figure>\n<h2 id=\"对象注入\"><a href=\"#对象注入\" class=\"headerlink\" title=\"对象注入\"></a>对象注入</h2><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"userDao\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.geng.obj.UserDao\"</span>/&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"userService\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.geng.obj.UserService\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"userDao\"</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"userDao\"</span>/&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserDao</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">showUserDao</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        System.out.println(<span class=\"string\">\"show user dao...\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserService</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> UserDao userDao;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setUserDao</span><span class=\"params\">(UserDao userDao)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.userDao = userDao;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">showService</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        System.out.println(<span class=\"string\">\"show Service....\"</span>);</div><div class=\"line\"></div><div class=\"line\">        userDao.showUserDao();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>测试：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserServiceTest</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> ApplicationContext context;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Before</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setUp</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">        context = <span class=\"keyword\">new</span> ClassPathXmlApplicationContext(<span class=\"string\">\"beans1.xml\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Test</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">showService</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">        UserService userService = (UserService) context.getBean(<span class=\"string\">\"userService\"</span>);</div><div class=\"line\">        userService.showService();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/40B10214-301C-4735-8CE0-8DB0F4CCCC8B.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<h2 id=\"p命名空间注入\"><a href=\"#p命名空间注入\" class=\"headerlink\" title=\"p命名空间注入\"></a>p命名空间注入</h2><p>xml 头部加入：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">xmlns:p=\"http://www.springframework.org/schema/p\"</div></pre></td></tr></table></figure>\n<p>配置：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"person\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.geng.attr.Person\"</span> <span class=\"attr\">p:pName</span>=<span class=\"string\">\"呵呵哒”/&gt;</span></span></div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> String pName;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setpName</span><span class=\"params\">(String pName)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.pName = pName;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        System.out.println(<span class=\"string\">\"result: \"</span> + pName);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/EA20EBAD-5360-4197-BA0C-4059ABF7636F.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<h2 id=\"复杂类型注入\"><a href=\"#复杂类型注入\" class=\"headerlink\" title=\"复杂类型注入\"></a>复杂类型注入</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MulitDemo</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> String[] arrs;</div><div class=\"line\">    <span class=\"keyword\">private</span> List&lt;String&gt; list;</div><div class=\"line\">    <span class=\"keyword\">private</span> Map&lt;String, String&gt; map;</div><div class=\"line\">    <span class=\"keyword\">private</span> Properties properties;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setArrs</span><span class=\"params\">(String[] arrs)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.arrs = arrs;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setList</span><span class=\"params\">(List&lt;String&gt; list)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.list = list;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setMap</span><span class=\"params\">(Map&lt;String, String&gt; map)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.map = map;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setProperties</span><span class=\"params\">(Properties properties)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.properties = properties;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">showAll</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        System.out.println(arrs);</div><div class=\"line\">        System.out.println(list);</div><div class=\"line\">        System.out.println(map);</div><div class=\"line\">        System.out.println(properties);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>xml 分别配置：<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"mulitDemo\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.geng.collection.MulitDemo\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"arrs\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">array</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>小红<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>小白<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>小绿<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">array</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"list\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">list</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>大白<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>大春<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>大花<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">list</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"map\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">map</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">entry</span> <span class=\"attr\">key</span>=<span class=\"string\">\"001\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"小白\"</span> /&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">entry</span> <span class=\"attr\">key</span>=<span class=\"string\">\"002\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"小刘\"</span> /&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">entry</span> <span class=\"attr\">key</span>=<span class=\"string\">\"003\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"小东\"</span> /&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">map</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"properties\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">props</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">prop</span> <span class=\"attr\">key</span>=<span class=\"string\">\"driveClass\"</span>&gt;</span>com.mysql.jdbc.Driver<span class=\"tag\">&lt;/<span class=\"name\">prop</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">prop</span> <span class=\"attr\">key</span>=<span class=\"string\">\"userName\"</span>&gt;</span>root<span class=\"tag\">&lt;/<span class=\"name\">prop</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">prop</span> <span class=\"attr\">key</span>=<span class=\"string\">\"userPwd\"</span>&gt;</span>root<span class=\"tag\">&lt;/<span class=\"name\">prop</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">props</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>测试：<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/76FF4DDF-95DD-4F5A-B43F-30946D328A30.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure></p>\n<h1 id=\"注解实现\"><a href=\"#注解实现\" class=\"headerlink\" title=\"注解实现\"></a>注解实现</h1><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans\"</span></span></div><div class=\"line\">       <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></div><div class=\"line\">       <span class=\"attr\">xmlns:context</span>=<span class=\"string\">\"http://www.springframework.org/schema/context\"</span></div><div class=\"line\">       <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans</span></div><div class=\"line\">            http://www.springframework.org/schema/beans/spring-beans.xsd</div><div class=\"line\">            http://www.springframework.org/schema/context</div><div class=\"line\">            http://www.springframework.org/schema/context/spring-context.xsd\"&gt;</div><div class=\"line\">    <span class=\"comment\">&lt;!-- 上面 加入 spring-context 约束，参照spring文档： 41.2.8 the context schema；否则，无法使用 context标 签 --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></div></pre></td></tr></table></figure>\n<h2 id=\"创建对象注解\"><a href=\"#创建对象注解\" class=\"headerlink\" title=\"创建对象注解\"></a>创建对象注解</h2><ul>\n<li>@Component</li>\n<li>@Controller —— web 层</li>\n<li>@Service  —— 业务层</li>\n<li>@Repository —— 持久层</li>\n</ul>\n<p>以上4个注解 功能是一致的，都是用于创建对象，作用在 <strong>类</strong> 上，只是为了后期方便扩展</p>\n<h2 id=\"对象的-scope\"><a href=\"#对象的-scope\" class=\"headerlink\" title=\"对象的 scope\"></a>对象的 scope</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Scope</span>(scopeName = ConfigurableBeanFactory.SCOPE_PROTOTYPE) <span class=\"comment\">// 默认是 singleton</span></div></pre></td></tr></table></figure>\n<p>可查看源码进行设置</p>\n<h2 id=\"对象属性注入\"><a href=\"#对象属性注入\" class=\"headerlink\" title=\"对象属性注入\"></a>对象属性注入</h2><ul>\n<li>@Autowired：自动装配</li>\n<li>@Resource(name=“userDao”) 指定创建哪种类型的对象</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Component</span>(value = <span class=\"string\">\"userDao\"</span>)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserDao</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">showUserDao</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        System.out.println(<span class=\"string\">\"show user dao ...\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Service</span>(value = <span class=\"string\">\"userService\"</span>)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserService</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 1. 第一种</span></div><div class=\"line\"><span class=\"comment\">//    @Autowired</span></div><div class=\"line\"><span class=\"comment\">//    private UserDao userDao;// 要使用UserDao的对象，使用自动装配</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 2. 第二种</span></div><div class=\"line\">    <span class=\"meta\">@Resource</span>(name = <span class=\"string\">\"userDao\"</span>) <span class=\"comment\">// name 值必须和 UserDao 内的value值必须一样，否则报错：no such bean is defined</span></div><div class=\"line\">    <span class=\"keyword\">private</span> UserDao userDao;<span class=\"comment\">// 这种是明确指定创建哪种类型的对象，比较常用</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">showUserService</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        System.out.println(<span class=\"string\">\"show user service ...\"</span>);</div><div class=\"line\">        userDao.showUserDao();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>测试：<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/A49E426F-CDC3-4A7E-8AD2-D428586B749D.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure></p>\n<p><br></p>\n<blockquote>\n<p>xml 配置注入 和 注解注入 两种可以联合使用，用法和前面一样，不再举例。</p>\n</blockquote>\n<h1 id=\"IOC-与-DI-区别\"><a href=\"#IOC-与-DI-区别\" class=\"headerlink\" title=\"IOC 与 DI 区别\"></a>IOC 与 DI 区别</h1><p>IOC ：控制反转，将创建对象交给 Spring 的配置来完成<br>DI ：将对象的属性赋值</p>\n<p>DI 是依赖于 ioc 才能完成操作，不能单独存在</p>\n<p><br></p>\n<p>附录：<br>demo地址：<br><a href=\"https://github.com/fenglincanyi/springdemo1\" target=\"_blank\" rel=\"external\">https://github.com/fenglincanyi/springdemo1</a><br><a href=\"https://github.com/fenglincanyi/springdemo2\" target=\"_blank\" rel=\"external\">https://github.com/fenglincanyi/springdemo2</a></p>\n","excerpt":"","more":"<blockquote>\n<p>本次学习内容：Spring 依赖注入相关</p>\n</blockquote>\n<h1 id=\"xml-配置实现\"><a href=\"#xml-配置实现\" class=\"headerlink\" title=\"xml 配置实现\"></a>xml 配置实现</h1><h2 id=\"setXXX-方法注入\"><a href=\"#setXXX-方法注入\" class=\"headerlink\" title=\"setXXX() 方法注入\"></a>setXXX() 方法注入</h2><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"book\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.geng.attr.Book\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"bookName\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"西游记\"</span>/&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></div></pre></td></tr></table></figure>\n<h2 id=\"构造方法注入\"><a href=\"#构造方法注入\" class=\"headerlink\" title=\"构造方法注入\"></a>构造方法注入</h2><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 这里通过有参构造注入</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"people\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.geng.attr.People\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">constructor-arg</span> <span class=\"attr\">name</span>=<span class=\"string\">\"name\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"小明\"</span>/&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></div></pre></td></tr></table></figure>\n<h2 id=\"对象注入\"><a href=\"#对象注入\" class=\"headerlink\" title=\"对象注入\"></a>对象注入</h2><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"userDao\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.geng.obj.UserDao\"</span>/&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"userService\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.geng.obj.UserService\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"userDao\"</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"userDao\"</span>/&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserDao</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">showUserDao</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        System.out.println(<span class=\"string\">\"show user dao...\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserService</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> UserDao userDao;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setUserDao</span><span class=\"params\">(UserDao userDao)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.userDao = userDao;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">showService</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        System.out.println(<span class=\"string\">\"show Service....\"</span>);</div><div class=\"line\"></div><div class=\"line\">        userDao.showUserDao();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>测试：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserServiceTest</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> ApplicationContext context;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Before</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setUp</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">        context = <span class=\"keyword\">new</span> ClassPathXmlApplicationContext(<span class=\"string\">\"beans1.xml\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Test</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">showService</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">        UserService userService = (UserService) context.getBean(<span class=\"string\">\"userService\"</span>);</div><div class=\"line\">        userService.showService();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/40B10214-301C-4735-8CE0-8DB0F4CCCC8B.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<h2 id=\"p命名空间注入\"><a href=\"#p命名空间注入\" class=\"headerlink\" title=\"p命名空间注入\"></a>p命名空间注入</h2><p>xml 头部加入：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">xmlns:p=\"http://www.springframework.org/schema/p\"</div></pre></td></tr></table></figure>\n<p>配置：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"person\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.geng.attr.Person\"</span> <span class=\"attr\">p:pName</span>=<span class=\"string\">\"呵呵哒”/&gt;</span></span></div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> String pName;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setpName</span><span class=\"params\">(String pName)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.pName = pName;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        System.out.println(<span class=\"string\">\"result: \"</span> + pName);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/EA20EBAD-5360-4197-BA0C-4059ABF7636F.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<h2 id=\"复杂类型注入\"><a href=\"#复杂类型注入\" class=\"headerlink\" title=\"复杂类型注入\"></a>复杂类型注入</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MulitDemo</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> String[] arrs;</div><div class=\"line\">    <span class=\"keyword\">private</span> List&lt;String&gt; list;</div><div class=\"line\">    <span class=\"keyword\">private</span> Map&lt;String, String&gt; map;</div><div class=\"line\">    <span class=\"keyword\">private</span> Properties properties;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setArrs</span><span class=\"params\">(String[] arrs)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.arrs = arrs;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setList</span><span class=\"params\">(List&lt;String&gt; list)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.list = list;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setMap</span><span class=\"params\">(Map&lt;String, String&gt; map)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.map = map;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setProperties</span><span class=\"params\">(Properties properties)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.properties = properties;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">showAll</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        System.out.println(arrs);</div><div class=\"line\">        System.out.println(list);</div><div class=\"line\">        System.out.println(map);</div><div class=\"line\">        System.out.println(properties);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>xml 分别配置：<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"mulitDemo\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.geng.collection.MulitDemo\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"arrs\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">array</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>小红<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>小白<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>小绿<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">array</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"list\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">list</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>大白<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>大春<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>大花<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">list</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"map\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">map</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">entry</span> <span class=\"attr\">key</span>=<span class=\"string\">\"001\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"小白\"</span> /&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">entry</span> <span class=\"attr\">key</span>=<span class=\"string\">\"002\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"小刘\"</span> /&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">entry</span> <span class=\"attr\">key</span>=<span class=\"string\">\"003\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"小东\"</span> /&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">map</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"properties\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">props</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">prop</span> <span class=\"attr\">key</span>=<span class=\"string\">\"driveClass\"</span>&gt;</span>com.mysql.jdbc.Driver<span class=\"tag\">&lt;/<span class=\"name\">prop</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">prop</span> <span class=\"attr\">key</span>=<span class=\"string\">\"userName\"</span>&gt;</span>root<span class=\"tag\">&lt;/<span class=\"name\">prop</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">prop</span> <span class=\"attr\">key</span>=<span class=\"string\">\"userPwd\"</span>&gt;</span>root<span class=\"tag\">&lt;/<span class=\"name\">prop</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">props</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>测试：<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/76FF4DDF-95DD-4F5A-B43F-30946D328A30.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure></p>\n<h1 id=\"注解实现\"><a href=\"#注解实现\" class=\"headerlink\" title=\"注解实现\"></a>注解实现</h1><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans\"</span></div><div class=\"line\">       <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></div><div class=\"line\">       <span class=\"attr\">xmlns:context</span>=<span class=\"string\">\"http://www.springframework.org/schema/context\"</span></div><div class=\"line\">       <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans</div><div class=\"line\">            http://www.springframework.org/schema/beans/spring-beans.xsd</div><div class=\"line\">            http://www.springframework.org/schema/context</div><div class=\"line\">            http://www.springframework.org/schema/context/spring-context.xsd\"</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- 上面 加入 spring-context 约束，参照spring文档： 41.2.8 the context schema；否则，无法使用 context标 签 --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></div></pre></td></tr></table></figure>\n<h2 id=\"创建对象注解\"><a href=\"#创建对象注解\" class=\"headerlink\" title=\"创建对象注解\"></a>创建对象注解</h2><ul>\n<li>@Component</li>\n<li>@Controller —— web 层</li>\n<li>@Service  —— 业务层</li>\n<li>@Repository —— 持久层</li>\n</ul>\n<p>以上4个注解 功能是一致的，都是用于创建对象，作用在 <strong>类</strong> 上，只是为了后期方便扩展</p>\n<h2 id=\"对象的-scope\"><a href=\"#对象的-scope\" class=\"headerlink\" title=\"对象的 scope\"></a>对象的 scope</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Scope</span>(scopeName = ConfigurableBeanFactory.SCOPE_PROTOTYPE) <span class=\"comment\">// 默认是 singleton</span></div></pre></td></tr></table></figure>\n<p>可查看源码进行设置</p>\n<h2 id=\"对象属性注入\"><a href=\"#对象属性注入\" class=\"headerlink\" title=\"对象属性注入\"></a>对象属性注入</h2><ul>\n<li>@Autowired：自动装配</li>\n<li>@Resource(name=“userDao”) 指定创建哪种类型的对象</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Component</span>(value = <span class=\"string\">\"userDao\"</span>)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserDao</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">showUserDao</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        System.out.println(<span class=\"string\">\"show user dao ...\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Service</span>(value = <span class=\"string\">\"userService\"</span>)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserService</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 1. 第一种</span></div><div class=\"line\"><span class=\"comment\">//    @Autowired</span></div><div class=\"line\"><span class=\"comment\">//    private UserDao userDao;// 要使用UserDao的对象，使用自动装配</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 2. 第二种</span></div><div class=\"line\">    <span class=\"meta\">@Resource</span>(name = <span class=\"string\">\"userDao\"</span>) <span class=\"comment\">// name 值必须和 UserDao 内的value值必须一样，否则报错：no such bean is defined</span></div><div class=\"line\">    <span class=\"keyword\">private</span> UserDao userDao;<span class=\"comment\">// 这种是明确指定创建哪种类型的对象，比较常用</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">showUserService</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        System.out.println(<span class=\"string\">\"show user service ...\"</span>);</div><div class=\"line\">        userDao.showUserDao();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>测试：<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/A49E426F-CDC3-4A7E-8AD2-D428586B749D.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure></p>\n<p><br></p>\n<blockquote>\n<p>xml 配置注入 和 注解注入 两种可以联合使用，用法和前面一样，不再举例。</p>\n</blockquote>\n<h1 id=\"IOC-与-DI-区别\"><a href=\"#IOC-与-DI-区别\" class=\"headerlink\" title=\"IOC 与 DI 区别\"></a>IOC 与 DI 区别</h1><p>IOC ：控制反转，将创建对象交给 Spring 的配置来完成<br>DI ：将对象的属性赋值</p>\n<p>DI 是依赖于 ioc 才能完成操作，不能单独存在</p>\n<p><br></p>\n<p>附录：<br>demo地址：<br><a href=\"https://github.com/fenglincanyi/springdemo1\">https://github.com/fenglincanyi/springdemo1</a><br><a href=\"https://github.com/fenglincanyi/springdemo2\">https://github.com/fenglincanyi/springdemo2</a></p>\n"},{"title":"Weex SDK源码分析（一）","date":"2017-02-28T07:06:00.000Z","_content":"> **WeexSDK 初始化源码分析**\n\n整个Weex SDK 初始化过程，入口是WXSDKEngine.initialize()，方法主要是依靠 doInitInternal() 方法执行初始化操作。里面涉及了WXEnvironment 相关环境的设置，几个重要的Manager的初始化操作，包括WXBridgeManager、WXSDKManager、WXRenderManager、WXDomManager，前两个 manager 以单例形式呈现的。\n初始化完相关管理类，后面进行 component、module的注册。\n\n下面对这一过程，进行一一分析：\n\nWXSDKEngine.doInitInternal() 方法：\n``` java\nprivate static void doInitInternal(final Application application, final InitConfig config) {\n        WXEnvironment.sApplication = application;\n        WXEnvironment.JsFrameworkInit = false;\n\n        WXBridgeManager.getInstance().post(new Runnable() {\n            @Override\n            public void run() {\n                long start = System.currentTimeMillis();\n                WXSDKManager sm = WXSDKManager.getInstance();\n                if (config != null) {\n                    sm.setInitConfig(config);\n                    if (config.getDebugAdapter() != null) {\n                        config.getDebugAdapter().initDebug(application);// 关于weex debug操作，不是此篇关注的重点，略过\n                    }\n                }\n                WXSoInstallMgrSdk.init(application);\n                boolean isSoInitSuccess = WXSoInstallMgrSdk.initSo(V8_SO_NAME, 1, config != null ? config.getUtAdapter() : null);\n                if (!isSoInitSuccess) {\n                    return;\n                }\n                sm.initScriptsFramework(config != null ? config.getFramework() : null);\n\n                WXEnvironment.sSDKInitExecuteTime = System.currentTimeMillis() - start;\n                WXLogUtils.renderPerformanceLog(\"SDKInitExecuteTime\", WXEnvironment.sSDKInitExecuteTime);\n            }\n        });\n        register();\n    }\n```\n\n## WXSDKManager的初始化\n首先，是WXSDKManager的初始化，会将WXRenderManager、WXDomManager初始化，并拿到WXBridgeManager实例的引用。\n\n* 关于 WXRenderManager\n管理渲染操作，主要操作管理的是WXRenderStatement对象（WXRenderManager 也并不是一个线程安全的类，涉及到UI的更新操作。后面会对WXRenderStatement 进行分析）\nWXRenderManager 主要的2个成员：mRegistries 和 mWXRenderHandler：\n``` java\nprivate ConcurrentHashMap<String, WXRenderStatement> mRegistries;\nprivate WXRenderHandler mWXRenderHandler;\n```\nmRegistries存储WXRenderStatement，以 WXSDKInstance.id 为key存储WXRenderStatement，所以一个WXSDKInstance对应一个WXRenderStatement。\nWXRenderManager 的 createBody、addComponent等等操作都是针对某个WXSDKInstance的 statement 调用操作的。具体的渲染，WXRenderStatement负责完成。\nmWXRenderHandler 是将外界传给它的 渲染相关的task 发送消息，然后主线程收到messge后，进行相关渲染操作。\n\n* 关于 WXDomManager\n管理dom操作，作为客户端执行dom命令，会调用 WXDomStatement 创建命令执行相对应的操作。里面提供的方法通常是在 dom 线程中调用。\n其中有：\n``` java\n private WXThread mDomThread;\n  /** package **/\n  Handler mDomHandler;\n  private WXRenderManager mWXRenderManager;\n  private ConcurrentHashMap<String, WXDomStatement> mDomRegistries;\n```\nmDomRegistries 和上面类似，大家一看就懂，<WXSDKInstance.id，WXDomStatement>。\nmWXRenderManager 是拿到上一步初始化好的 mWXRenderManager实例。\nmDomThread是WXDomManager创建的一个thread，也是WXThread，其中的handler是WXDomHandler\nmDomHandler 是这个mDomThread的handler引用。\nWXDomHandler 是关于dom操作的一个类，实现了Handler.Callback接口，会将mDomHandler发送的dom消息分类处理，这一任务是交给了 WXDomManager：\n\n``` java\n    @Override\n    public boolean handleMessage(Message msg) {\n        if (msg == null) {\n            return false;\n        }\n        int what = msg.what;\n        Object obj = msg.obj;\n        WXDomTask task = null;\n\n        if (obj instanceof WXDomTask) {\n            task = (WXDomTask) obj;\n        }\n\n        if (!mHasBatch) {\n            mHasBatch = true;\n            mWXDomManager.sendEmptyMessageDelayed(WXDomHandler.MsgType.WX_DOM_BATCH, DELAY_TIME);\n        }\n        switch (what) {\n            case MsgType.WX_DOM_CREATE_BODY:\n                mWXDomManager.createBody(task.instanceId, (JSONObject) task.args.get(0));\n                break;\n            case MsgType.WX_DOM_UPDATE_ATTRS:\n                mWXDomManager.updateAttrs(task.instanceId, (String) task.args.get(0), (JSONObject) task.args.get(1));\n                break;\n            case MsgType.WX_DOM_UPDATE_STYLE:\n                mWXDomManager.updateStyle(\n                        task.instanceId,\n                        (String) task.args.get(0),\n                        (JSONObject) task.args.get(1),\n                        task.args.size() > 2 && (boolean) task.args.get(2)\n                );\n                break;\n            case ...\n            case ...\n```\n具体的manager操作，会交给对应的 domstatement 操作，上面已经说过。\n\n\n\nWXSoInstallMgrSdk 是管理 so 相关操作和cpu平台的支持情况。\nWXSoInstallMgrSdk.initSo() 执行 weexv8.so 包的加载，就和普通加载so包的方式一样（System.loadLibrary(libName) ）。\n> 这里注意：weex 的 so 包不支持 mips平台的\n\n如果so包加载失败，则初始化操作会就此结束，后续工作不再执行。\nso包加载完成之后，WXSDKManager会调用WXBridgeManager执行 js Framework的初始化，并发送消息给\nWXBridgeManager，WXBridgeManager调用自己的 handleMessage() 处理操作，下面会有分析。\n\n## WXBridgeManager 的初始化\n其次，WXBridgeManager 的初始化。会创建名为：WeexJSBridgeThread的 WXThread，WXThread是一个weex封装的HandlerThread。为了方便该线程的消息处理，具体细节可参考源码查看。WXBridgeManager 自己也实现了 Handler.Callback 接口，用于处理消息，接受消息后对 js framework 的初始化操作进行控制。\n\n发送消息：\n\n``` java\n    /**\n     * Initialize JavaScript framework\n     * @param framework String representation of the framework to be init.\n     */\n    public synchronized void initScriptsFramework(String framework) {\n        Message msg = mJSHandler.obtainMessage();\n        msg.obj = framework;\n        msg.what = WXJSBridgeMsgType.INIT_FRAMEWORK;\n        msg.setTarget(mJSHandler);\n        msg.sendToTarget();\n    }\n```\n\n接收消息：\n\n``` java\n    @Override\n    public boolean handleMessage(Message msg) {\n        if (msg == null) {\n            return false;\n        }\n\n        int what = msg.what;\n        switch (what) {\n            case WXJSBridgeMsgType.INIT_FRAMEWORK:\n                invokeInitFramework(msg);// 过程中会加载 main.js，调用c++ 进行Framework的初始化：mWXBridge.initFramework(framework, assembleDefaultOptions())\n                break;\n            case WXJSBridgeMsgType.CALL_JS_BATCH:\n                invokeCallJSBatch(msg);\n                break;\n            case ...\n```\n\n在 WXBridge 中，是调用 底层native的方法：\n\n``` java\n  /**\n   * Init JSFrameWork\n   *\n   * @param framework assets/main.js\n   */\n  public native int initFramework(String framework, WXParams params);\n```\n底层 C++代码中：\n\n``` cpp\njint Java_com_taobao_weex_bridge_WXBridge_initFramework(JNIEnv *env,\n                                                        jobject object, jstring script,\n                                                        jobject params) \n```\njs framework 初始化就交给 C++ 来处理了\n\n在这里再多看一眼：在so包加载后，C++层第一步就会把 WXBridge 加载出来，作为2层之间的桥梁：\n\n``` cpp\n/**\n * This function will be call when the library first be load.\n * You can do some init in the lib. return which version jni it support.\n */\njint JNI_OnLoad(JavaVM *vm, void *reserved) {\n    LOGD(\"begin JNI_OnLoad\");\n    JNIEnv *env;\n    /* Get environment */\n    if ((vm)->GetEnv((void **) &env, JNI_VERSION_1_4) != JNI_OK) {\n        return JNI_FALSE;\n    }\n\n    sVm = vm;\n    jclass tempClass = env->FindClass(\n            \"com/taobao/weex/bridge/WXBridge\");\n    jBridgeClazz = (jclass) env->NewGlobalRef(tempClass);\n    env->DeleteLocalRef(tempClass);\n    LOGD(\"end JNI_OnLoad\");\n    return JNI_VERSION_1_4;\n}\n```\n\n## 注册操作\nweex 内置的 component 和 module 都会在此过程中注册，这一过程还包含了dom的注册操作。\n注册操作，会由registerModules来进行操作：registerModules()，registerComponents()，这两个都是异步执行，最终调用：\n\n``` java\n// modules the format is like {'dom':['updateAttrs','updateStyle'],'event':['openUrl']}\nWXJSObject[] args = {new WXJSObject(WXJSObject.JSON,\n                                        WXJsonUtils.fromObjectToJSONString(modules))};\nmWXBridge.execJS(\"\", null, METHOD_REGISTER_MODULES, args);\n\nWXJSObject[] args = {new WXJSObject(WXJSObject.JSON,\n                                        WXJsonUtils.fromObjectToJSONString(components))};\nmWXBridge.execJS(\"\", null, METHOD_REGISTER_COMPONENTS, args);\n```\nexecJS() 最终是调用WXBridge.execJS() 的native方法，交给底层c++来执行：\n\n``` cpp\njint Java_com_taobao_weex_bridge_WXBridge_execJS(JNIEnv *env, jobject this1, jstring jinstanceid,\n                                                 jstring jnamespace, jstring jfunction,\n                                                 jobjectArray jargs)\n```\nC++ 使用反射的方式，找到WXJSObject类，找到相关的属性和方法，\n\n``` cpp\njclass jsObjectClazz = env->FindClass(\"com/taobao/weex/bridge/WXJSObject\");\n```\n调用 js Framework的相关api 执行。\n\n\n<br/>\n\n\n源码：\nhttps://github.com/apache/incubator-weex/tree/master/android/sdk\nhttps://github.com/alibaba/weex_v8core","source":"_posts/Weex SDK源码分析（一）.md","raw":"---\ntitle: Weex SDK源码分析（一）\ndate: 2017-2-28 15:06\ncategories: Weex\ntags: [Weex, Android]\n---\n> **WeexSDK 初始化源码分析**\n\n整个Weex SDK 初始化过程，入口是WXSDKEngine.initialize()，方法主要是依靠 doInitInternal() 方法执行初始化操作。里面涉及了WXEnvironment 相关环境的设置，几个重要的Manager的初始化操作，包括WXBridgeManager、WXSDKManager、WXRenderManager、WXDomManager，前两个 manager 以单例形式呈现的。\n初始化完相关管理类，后面进行 component、module的注册。\n\n下面对这一过程，进行一一分析：\n\nWXSDKEngine.doInitInternal() 方法：\n``` java\nprivate static void doInitInternal(final Application application, final InitConfig config) {\n        WXEnvironment.sApplication = application;\n        WXEnvironment.JsFrameworkInit = false;\n\n        WXBridgeManager.getInstance().post(new Runnable() {\n            @Override\n            public void run() {\n                long start = System.currentTimeMillis();\n                WXSDKManager sm = WXSDKManager.getInstance();\n                if (config != null) {\n                    sm.setInitConfig(config);\n                    if (config.getDebugAdapter() != null) {\n                        config.getDebugAdapter().initDebug(application);// 关于weex debug操作，不是此篇关注的重点，略过\n                    }\n                }\n                WXSoInstallMgrSdk.init(application);\n                boolean isSoInitSuccess = WXSoInstallMgrSdk.initSo(V8_SO_NAME, 1, config != null ? config.getUtAdapter() : null);\n                if (!isSoInitSuccess) {\n                    return;\n                }\n                sm.initScriptsFramework(config != null ? config.getFramework() : null);\n\n                WXEnvironment.sSDKInitExecuteTime = System.currentTimeMillis() - start;\n                WXLogUtils.renderPerformanceLog(\"SDKInitExecuteTime\", WXEnvironment.sSDKInitExecuteTime);\n            }\n        });\n        register();\n    }\n```\n\n## WXSDKManager的初始化\n首先，是WXSDKManager的初始化，会将WXRenderManager、WXDomManager初始化，并拿到WXBridgeManager实例的引用。\n\n* 关于 WXRenderManager\n管理渲染操作，主要操作管理的是WXRenderStatement对象（WXRenderManager 也并不是一个线程安全的类，涉及到UI的更新操作。后面会对WXRenderStatement 进行分析）\nWXRenderManager 主要的2个成员：mRegistries 和 mWXRenderHandler：\n``` java\nprivate ConcurrentHashMap<String, WXRenderStatement> mRegistries;\nprivate WXRenderHandler mWXRenderHandler;\n```\nmRegistries存储WXRenderStatement，以 WXSDKInstance.id 为key存储WXRenderStatement，所以一个WXSDKInstance对应一个WXRenderStatement。\nWXRenderManager 的 createBody、addComponent等等操作都是针对某个WXSDKInstance的 statement 调用操作的。具体的渲染，WXRenderStatement负责完成。\nmWXRenderHandler 是将外界传给它的 渲染相关的task 发送消息，然后主线程收到messge后，进行相关渲染操作。\n\n* 关于 WXDomManager\n管理dom操作，作为客户端执行dom命令，会调用 WXDomStatement 创建命令执行相对应的操作。里面提供的方法通常是在 dom 线程中调用。\n其中有：\n``` java\n private WXThread mDomThread;\n  /** package **/\n  Handler mDomHandler;\n  private WXRenderManager mWXRenderManager;\n  private ConcurrentHashMap<String, WXDomStatement> mDomRegistries;\n```\nmDomRegistries 和上面类似，大家一看就懂，<WXSDKInstance.id，WXDomStatement>。\nmWXRenderManager 是拿到上一步初始化好的 mWXRenderManager实例。\nmDomThread是WXDomManager创建的一个thread，也是WXThread，其中的handler是WXDomHandler\nmDomHandler 是这个mDomThread的handler引用。\nWXDomHandler 是关于dom操作的一个类，实现了Handler.Callback接口，会将mDomHandler发送的dom消息分类处理，这一任务是交给了 WXDomManager：\n\n``` java\n    @Override\n    public boolean handleMessage(Message msg) {\n        if (msg == null) {\n            return false;\n        }\n        int what = msg.what;\n        Object obj = msg.obj;\n        WXDomTask task = null;\n\n        if (obj instanceof WXDomTask) {\n            task = (WXDomTask) obj;\n        }\n\n        if (!mHasBatch) {\n            mHasBatch = true;\n            mWXDomManager.sendEmptyMessageDelayed(WXDomHandler.MsgType.WX_DOM_BATCH, DELAY_TIME);\n        }\n        switch (what) {\n            case MsgType.WX_DOM_CREATE_BODY:\n                mWXDomManager.createBody(task.instanceId, (JSONObject) task.args.get(0));\n                break;\n            case MsgType.WX_DOM_UPDATE_ATTRS:\n                mWXDomManager.updateAttrs(task.instanceId, (String) task.args.get(0), (JSONObject) task.args.get(1));\n                break;\n            case MsgType.WX_DOM_UPDATE_STYLE:\n                mWXDomManager.updateStyle(\n                        task.instanceId,\n                        (String) task.args.get(0),\n                        (JSONObject) task.args.get(1),\n                        task.args.size() > 2 && (boolean) task.args.get(2)\n                );\n                break;\n            case ...\n            case ...\n```\n具体的manager操作，会交给对应的 domstatement 操作，上面已经说过。\n\n\n\nWXSoInstallMgrSdk 是管理 so 相关操作和cpu平台的支持情况。\nWXSoInstallMgrSdk.initSo() 执行 weexv8.so 包的加载，就和普通加载so包的方式一样（System.loadLibrary(libName) ）。\n> 这里注意：weex 的 so 包不支持 mips平台的\n\n如果so包加载失败，则初始化操作会就此结束，后续工作不再执行。\nso包加载完成之后，WXSDKManager会调用WXBridgeManager执行 js Framework的初始化，并发送消息给\nWXBridgeManager，WXBridgeManager调用自己的 handleMessage() 处理操作，下面会有分析。\n\n## WXBridgeManager 的初始化\n其次，WXBridgeManager 的初始化。会创建名为：WeexJSBridgeThread的 WXThread，WXThread是一个weex封装的HandlerThread。为了方便该线程的消息处理，具体细节可参考源码查看。WXBridgeManager 自己也实现了 Handler.Callback 接口，用于处理消息，接受消息后对 js framework 的初始化操作进行控制。\n\n发送消息：\n\n``` java\n    /**\n     * Initialize JavaScript framework\n     * @param framework String representation of the framework to be init.\n     */\n    public synchronized void initScriptsFramework(String framework) {\n        Message msg = mJSHandler.obtainMessage();\n        msg.obj = framework;\n        msg.what = WXJSBridgeMsgType.INIT_FRAMEWORK;\n        msg.setTarget(mJSHandler);\n        msg.sendToTarget();\n    }\n```\n\n接收消息：\n\n``` java\n    @Override\n    public boolean handleMessage(Message msg) {\n        if (msg == null) {\n            return false;\n        }\n\n        int what = msg.what;\n        switch (what) {\n            case WXJSBridgeMsgType.INIT_FRAMEWORK:\n                invokeInitFramework(msg);// 过程中会加载 main.js，调用c++ 进行Framework的初始化：mWXBridge.initFramework(framework, assembleDefaultOptions())\n                break;\n            case WXJSBridgeMsgType.CALL_JS_BATCH:\n                invokeCallJSBatch(msg);\n                break;\n            case ...\n```\n\n在 WXBridge 中，是调用 底层native的方法：\n\n``` java\n  /**\n   * Init JSFrameWork\n   *\n   * @param framework assets/main.js\n   */\n  public native int initFramework(String framework, WXParams params);\n```\n底层 C++代码中：\n\n``` cpp\njint Java_com_taobao_weex_bridge_WXBridge_initFramework(JNIEnv *env,\n                                                        jobject object, jstring script,\n                                                        jobject params) \n```\njs framework 初始化就交给 C++ 来处理了\n\n在这里再多看一眼：在so包加载后，C++层第一步就会把 WXBridge 加载出来，作为2层之间的桥梁：\n\n``` cpp\n/**\n * This function will be call when the library first be load.\n * You can do some init in the lib. return which version jni it support.\n */\njint JNI_OnLoad(JavaVM *vm, void *reserved) {\n    LOGD(\"begin JNI_OnLoad\");\n    JNIEnv *env;\n    /* Get environment */\n    if ((vm)->GetEnv((void **) &env, JNI_VERSION_1_4) != JNI_OK) {\n        return JNI_FALSE;\n    }\n\n    sVm = vm;\n    jclass tempClass = env->FindClass(\n            \"com/taobao/weex/bridge/WXBridge\");\n    jBridgeClazz = (jclass) env->NewGlobalRef(tempClass);\n    env->DeleteLocalRef(tempClass);\n    LOGD(\"end JNI_OnLoad\");\n    return JNI_VERSION_1_4;\n}\n```\n\n## 注册操作\nweex 内置的 component 和 module 都会在此过程中注册，这一过程还包含了dom的注册操作。\n注册操作，会由registerModules来进行操作：registerModules()，registerComponents()，这两个都是异步执行，最终调用：\n\n``` java\n// modules the format is like {'dom':['updateAttrs','updateStyle'],'event':['openUrl']}\nWXJSObject[] args = {new WXJSObject(WXJSObject.JSON,\n                                        WXJsonUtils.fromObjectToJSONString(modules))};\nmWXBridge.execJS(\"\", null, METHOD_REGISTER_MODULES, args);\n\nWXJSObject[] args = {new WXJSObject(WXJSObject.JSON,\n                                        WXJsonUtils.fromObjectToJSONString(components))};\nmWXBridge.execJS(\"\", null, METHOD_REGISTER_COMPONENTS, args);\n```\nexecJS() 最终是调用WXBridge.execJS() 的native方法，交给底层c++来执行：\n\n``` cpp\njint Java_com_taobao_weex_bridge_WXBridge_execJS(JNIEnv *env, jobject this1, jstring jinstanceid,\n                                                 jstring jnamespace, jstring jfunction,\n                                                 jobjectArray jargs)\n```\nC++ 使用反射的方式，找到WXJSObject类，找到相关的属性和方法，\n\n``` cpp\njclass jsObjectClazz = env->FindClass(\"com/taobao/weex/bridge/WXJSObject\");\n```\n调用 js Framework的相关api 执行。\n\n\n<br/>\n\n\n源码：\nhttps://github.com/apache/incubator-weex/tree/master/android/sdk\nhttps://github.com/alibaba/weex_v8core","slug":"Weex SDK源码分析（一）","published":1,"updated":"2017-02-28T13:02:59.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cizpjnf2u0014baqw2ig4q06b","content":"<blockquote>\n<p><strong>WeexSDK 初始化源码分析</strong></p>\n</blockquote>\n<p>整个Weex SDK 初始化过程，入口是WXSDKEngine.initialize()，方法主要是依靠 doInitInternal() 方法执行初始化操作。里面涉及了WXEnvironment 相关环境的设置，几个重要的Manager的初始化操作，包括WXBridgeManager、WXSDKManager、WXRenderManager、WXDomManager，前两个 manager 以单例形式呈现的。<br>初始化完相关管理类，后面进行 component、module的注册。</p>\n<p>下面对这一过程，进行一一分析：</p>\n<p>WXSDKEngine.doInitInternal() 方法：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">doInitInternal</span><span class=\"params\">(<span class=\"keyword\">final</span> Application application, <span class=\"keyword\">final</span> InitConfig config)</span> </span>&#123;</div><div class=\"line\">        WXEnvironment.sApplication = application;</div><div class=\"line\">        WXEnvironment.JsFrameworkInit = <span class=\"keyword\">false</span>;</div><div class=\"line\"></div><div class=\"line\">        WXBridgeManager.getInstance().post(<span class=\"keyword\">new</span> Runnable() &#123;</div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">                <span class=\"keyword\">long</span> start = System.currentTimeMillis();</div><div class=\"line\">                WXSDKManager sm = WXSDKManager.getInstance();</div><div class=\"line\">                <span class=\"keyword\">if</span> (config != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                    sm.setInitConfig(config);</div><div class=\"line\">                    <span class=\"keyword\">if</span> (config.getDebugAdapter() != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                        config.getDebugAdapter().initDebug(application);<span class=\"comment\">// 关于weex debug操作，不是此篇关注的重点，略过</span></div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">                WXSoInstallMgrSdk.init(application);</div><div class=\"line\">                <span class=\"keyword\">boolean</span> isSoInitSuccess = WXSoInstallMgrSdk.initSo(V8_SO_NAME, <span class=\"number\">1</span>, config != <span class=\"keyword\">null</span> ? config.getUtAdapter() : <span class=\"keyword\">null</span>);</div><div class=\"line\">                <span class=\"keyword\">if</span> (!isSoInitSuccess) &#123;</div><div class=\"line\">                    <span class=\"keyword\">return</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\">                sm.initScriptsFramework(config != <span class=\"keyword\">null</span> ? config.getFramework() : <span class=\"keyword\">null</span>);</div><div class=\"line\"></div><div class=\"line\">                WXEnvironment.sSDKInitExecuteTime = System.currentTimeMillis() - start;</div><div class=\"line\">                WXLogUtils.renderPerformanceLog(<span class=\"string\">\"SDKInitExecuteTime\"</span>, WXEnvironment.sSDKInitExecuteTime);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;);</div><div class=\"line\">        register();</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"WXSDKManager的初始化\"><a href=\"#WXSDKManager的初始化\" class=\"headerlink\" title=\"WXSDKManager的初始化\"></a>WXSDKManager的初始化</h2><p>首先，是WXSDKManager的初始化，会将WXRenderManager、WXDomManager初始化，并拿到WXBridgeManager实例的引用。</p>\n<ul>\n<li>关于 WXRenderManager<br>管理渲染操作，主要操作管理的是WXRenderStatement对象（WXRenderManager 也并不是一个线程安全的类，涉及到UI的更新操作。后面会对WXRenderStatement 进行分析）<br>WXRenderManager 主要的2个成员：mRegistries 和 mWXRenderHandler：<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> ConcurrentHashMap&lt;String, WXRenderStatement&gt; mRegistries;</div><div class=\"line\"><span class=\"keyword\">private</span> WXRenderHandler mWXRenderHandler;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>mRegistries存储WXRenderStatement，以 WXSDKInstance.id 为key存储WXRenderStatement，所以一个WXSDKInstance对应一个WXRenderStatement。<br>WXRenderManager 的 createBody、addComponent等等操作都是针对某个WXSDKInstance的 statement 调用操作的。具体的渲染，WXRenderStatement负责完成。<br>mWXRenderHandler 是将外界传给它的 渲染相关的task 发送消息，然后主线程收到messge后，进行相关渲染操作。</p>\n<ul>\n<li>关于 WXDomManager<br>管理dom操作，作为客户端执行dom命令，会调用 WXDomStatement 创建命令执行相对应的操作。里面提供的方法通常是在 dom 线程中调用。<br>其中有：<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> WXThread mDomThread;</div><div class=\"line\"> <span class=\"comment\">/** package **/</span></div><div class=\"line\"> Handler mDomHandler;</div><div class=\"line\"> <span class=\"keyword\">private</span> WXRenderManager mWXRenderManager;</div><div class=\"line\"> <span class=\"keyword\">private</span> ConcurrentHashMap&lt;String, WXDomStatement&gt; mDomRegistries;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>mDomRegistries 和上面类似，大家一看就懂，<wxsdkinstance.id，wxdomstatement>。<br>mWXRenderManager 是拿到上一步初始化好的 mWXRenderManager实例。<br>mDomThread是WXDomManager创建的一个thread，也是WXThread，其中的handler是WXDomHandler<br>mDomHandler 是这个mDomThread的handler引用。<br>WXDomHandler 是关于dom操作的一个类，实现了Handler.Callback接口，会将mDomHandler发送的dom消息分类处理，这一任务是交给了 WXDomManager：</wxsdkinstance.id，wxdomstatement></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">handleMessage</span><span class=\"params\">(Message msg)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (msg == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">int</span> what = msg.what;</div><div class=\"line\">    Object obj = msg.obj;</div><div class=\"line\">    WXDomTask task = <span class=\"keyword\">null</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (obj <span class=\"keyword\">instanceof</span> WXDomTask) &#123;</div><div class=\"line\">        task = (WXDomTask) obj;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (!mHasBatch) &#123;</div><div class=\"line\">        mHasBatch = <span class=\"keyword\">true</span>;</div><div class=\"line\">        mWXDomManager.sendEmptyMessageDelayed(WXDomHandler.MsgType.WX_DOM_BATCH, DELAY_TIME);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">switch</span> (what) &#123;</div><div class=\"line\">        <span class=\"keyword\">case</span> MsgType.WX_DOM_CREATE_BODY:</div><div class=\"line\">            mWXDomManager.createBody(task.instanceId, (JSONObject) task.args.get(<span class=\"number\">0</span>));</div><div class=\"line\">            <span class=\"keyword\">break</span>;</div><div class=\"line\">        <span class=\"keyword\">case</span> MsgType.WX_DOM_UPDATE_ATTRS:</div><div class=\"line\">            mWXDomManager.updateAttrs(task.instanceId, (String) task.args.get(<span class=\"number\">0</span>), (JSONObject) task.args.get(<span class=\"number\">1</span>));</div><div class=\"line\">            <span class=\"keyword\">break</span>;</div><div class=\"line\">        <span class=\"keyword\">case</span> MsgType.WX_DOM_UPDATE_STYLE:</div><div class=\"line\">            mWXDomManager.updateStyle(</div><div class=\"line\">                    task.instanceId,</div><div class=\"line\">                    (String) task.args.get(<span class=\"number\">0</span>),</div><div class=\"line\">                    (JSONObject) task.args.get(<span class=\"number\">1</span>),</div><div class=\"line\">                    task.args.size() &gt; <span class=\"number\">2</span> &amp;&amp; (<span class=\"keyword\">boolean</span>) task.args.get(<span class=\"number\">2</span>)</div><div class=\"line\">            );</div><div class=\"line\">            <span class=\"keyword\">break</span>;</div><div class=\"line\">        <span class=\"keyword\">case</span> ...</div><div class=\"line\">        <span class=\"keyword\">case</span> ...</div></pre></td></tr></table></figure>\n<p>具体的manager操作，会交给对应的 domstatement 操作，上面已经说过。</p>\n<p>WXSoInstallMgrSdk 是管理 so 相关操作和cpu平台的支持情况。<br>WXSoInstallMgrSdk.initSo() 执行 weexv8.so 包的加载，就和普通加载so包的方式一样（System.loadLibrary(libName) ）。</p>\n<blockquote>\n<p>这里注意：weex 的 so 包不支持 mips平台的</p>\n</blockquote>\n<p>如果so包加载失败，则初始化操作会就此结束，后续工作不再执行。<br>so包加载完成之后，WXSDKManager会调用WXBridgeManager执行 js Framework的初始化，并发送消息给<br>WXBridgeManager，WXBridgeManager调用自己的 handleMessage() 处理操作，下面会有分析。</p>\n<h2 id=\"WXBridgeManager-的初始化\"><a href=\"#WXBridgeManager-的初始化\" class=\"headerlink\" title=\"WXBridgeManager 的初始化\"></a>WXBridgeManager 的初始化</h2><p>其次，WXBridgeManager 的初始化。会创建名为：WeexJSBridgeThread的 WXThread，WXThread是一个weex封装的HandlerThread。为了方便该线程的消息处理，具体细节可参考源码查看。WXBridgeManager 自己也实现了 Handler.Callback 接口，用于处理消息，接受消息后对 js framework 的初始化操作进行控制。</p>\n<p>发送消息：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * Initialize JavaScript framework</div><div class=\"line\"> * <span class=\"doctag\">@param</span> framework String representation of the framework to be init.</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">initScriptsFramework</span><span class=\"params\">(String framework)</span> </span>&#123;</div><div class=\"line\">    Message msg = mJSHandler.obtainMessage();</div><div class=\"line\">    msg.obj = framework;</div><div class=\"line\">    msg.what = WXJSBridgeMsgType.INIT_FRAMEWORK;</div><div class=\"line\">    msg.setTarget(mJSHandler);</div><div class=\"line\">    msg.sendToTarget();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>接收消息：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">handleMessage</span><span class=\"params\">(Message msg)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (msg == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">int</span> what = msg.what;</div><div class=\"line\">    <span class=\"keyword\">switch</span> (what) &#123;</div><div class=\"line\">        <span class=\"keyword\">case</span> WXJSBridgeMsgType.INIT_FRAMEWORK:</div><div class=\"line\">            invokeInitFramework(msg);<span class=\"comment\">// 过程中会加载 main.js，调用c++ 进行Framework的初始化：mWXBridge.initFramework(framework, assembleDefaultOptions())</span></div><div class=\"line\">            <span class=\"keyword\">break</span>;</div><div class=\"line\">        <span class=\"keyword\">case</span> WXJSBridgeMsgType.CALL_JS_BATCH:</div><div class=\"line\">            invokeCallJSBatch(msg);</div><div class=\"line\">            <span class=\"keyword\">break</span>;</div><div class=\"line\">        <span class=\"keyword\">case</span> ...</div></pre></td></tr></table></figure>\n<p>在 WXBridge 中，是调用 底层native的方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * Init JSFrameWork</div><div class=\"line\"> *</div><div class=\"line\"> * <span class=\"doctag\">@param</span> framework assets/main.js</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">native</span> <span class=\"keyword\">int</span> <span class=\"title\">initFramework</span><span class=\"params\">(String framework, WXParams params)</span></span>;</div></pre></td></tr></table></figure>\n<p>底层 C++代码中：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\">jint <span class=\"title\">Java_com_taobao_weex_bridge_WXBridge_initFramework</span><span class=\"params\">(JNIEnv *env,</span></span></div><div class=\"line\">                                                        jobject object, jstring script,</div><div class=\"line\">                                                        jobject params)</div></pre></td></tr></table></figure>\n<p>js framework 初始化就交给 C++ 来处理了</p>\n<p>在这里再多看一眼：在so包加载后，C++层第一步就会把 WXBridge 加载出来，作为2层之间的桥梁：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * This function will be call when the library first be load.</div><div class=\"line\"> * You can do some init in the lib. return which version jni it support.</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"function\">jint <span class=\"title\">JNI_OnLoad</span><span class=\"params\">(JavaVM *vm, <span class=\"keyword\">void</span> *reserved)</span> </span>&#123;</div><div class=\"line\">    LOGD(<span class=\"string\">\"begin JNI_OnLoad\"</span>);</div><div class=\"line\">    JNIEnv *env;</div><div class=\"line\">    <span class=\"comment\">/* Get environment */</span></div><div class=\"line\">    <span class=\"keyword\">if</span> ((vm)-&gt;GetEnv((<span class=\"keyword\">void</span> **) &amp;env, JNI_VERSION_1_4) != JNI_OK) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> JNI_FALSE;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    sVm = vm;</div><div class=\"line\">    jclass tempClass = env-&gt;FindClass(</div><div class=\"line\">            <span class=\"string\">\"com/taobao/weex/bridge/WXBridge\"</span>);</div><div class=\"line\">    jBridgeClazz = (jclass) env-&gt;NewGlobalRef(tempClass);</div><div class=\"line\">    env-&gt;DeleteLocalRef(tempClass);</div><div class=\"line\">    LOGD(<span class=\"string\">\"end JNI_OnLoad\"</span>);</div><div class=\"line\">    <span class=\"keyword\">return</span> JNI_VERSION_1_4;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"注册操作\"><a href=\"#注册操作\" class=\"headerlink\" title=\"注册操作\"></a>注册操作</h2><p>weex 内置的 component 和 module 都会在此过程中注册，这一过程还包含了dom的注册操作。<br>注册操作，会由registerModules来进行操作：registerModules()，registerComponents()，这两个都是异步执行，最终调用：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// modules the format is like &#123;'dom':['updateAttrs','updateStyle'],'event':['openUrl']&#125;</span></div><div class=\"line\">WXJSObject[] args = &#123;<span class=\"keyword\">new</span> WXJSObject(WXJSObject.JSON,</div><div class=\"line\">                                        WXJsonUtils.fromObjectToJSONString(modules))&#125;;</div><div class=\"line\">mWXBridge.execJS(<span class=\"string\">\"\"</span>, <span class=\"keyword\">null</span>, METHOD_REGISTER_MODULES, args);</div><div class=\"line\"></div><div class=\"line\">WXJSObject[] args = &#123;<span class=\"keyword\">new</span> WXJSObject(WXJSObject.JSON,</div><div class=\"line\">                                        WXJsonUtils.fromObjectToJSONString(components))&#125;;</div><div class=\"line\">mWXBridge.execJS(<span class=\"string\">\"\"</span>, <span class=\"keyword\">null</span>, METHOD_REGISTER_COMPONENTS, args);</div></pre></td></tr></table></figure>\n<p>execJS() 最终是调用WXBridge.execJS() 的native方法，交给底层c++来执行：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\">jint <span class=\"title\">Java_com_taobao_weex_bridge_WXBridge_execJS</span><span class=\"params\">(JNIEnv *env, jobject this1, jstring jinstanceid,</span></span></div><div class=\"line\">                                                 jstring jnamespace, jstring jfunction,</div><div class=\"line\">                                                 jobjectArray jargs)</div></pre></td></tr></table></figure>\n<p>C++ 使用反射的方式，找到WXJSObject类，找到相关的属性和方法，</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">jclass jsObjectClazz = env-&gt;FindClass(<span class=\"string\">\"com/taobao/weex/bridge/WXJSObject\"</span>);</div></pre></td></tr></table></figure>\n<p>调用 js Framework的相关api 执行。</p>\n<p><br></p>\n<p>源码：<br><a href=\"https://github.com/apache/incubator-weex/tree/master/android/sdk\" target=\"_blank\" rel=\"external\">https://github.com/apache/incubator-weex/tree/master/android/sdk</a><br><a href=\"https://github.com/alibaba/weex_v8core\" target=\"_blank\" rel=\"external\">https://github.com/alibaba/weex_v8core</a></p>\n","excerpt":"","more":"<blockquote>\n<p><strong>WeexSDK 初始化源码分析</strong></p>\n</blockquote>\n<p>整个Weex SDK 初始化过程，入口是WXSDKEngine.initialize()，方法主要是依靠 doInitInternal() 方法执行初始化操作。里面涉及了WXEnvironment 相关环境的设置，几个重要的Manager的初始化操作，包括WXBridgeManager、WXSDKManager、WXRenderManager、WXDomManager，前两个 manager 以单例形式呈现的。<br>初始化完相关管理类，后面进行 component、module的注册。</p>\n<p>下面对这一过程，进行一一分析：</p>\n<p>WXSDKEngine.doInitInternal() 方法：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">doInitInternal</span><span class=\"params\">(<span class=\"keyword\">final</span> Application application, <span class=\"keyword\">final</span> InitConfig config)</span> </span>&#123;</div><div class=\"line\">        WXEnvironment.sApplication = application;</div><div class=\"line\">        WXEnvironment.JsFrameworkInit = <span class=\"keyword\">false</span>;</div><div class=\"line\"></div><div class=\"line\">        WXBridgeManager.getInstance().post(<span class=\"keyword\">new</span> Runnable() &#123;</div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">                <span class=\"keyword\">long</span> start = System.currentTimeMillis();</div><div class=\"line\">                WXSDKManager sm = WXSDKManager.getInstance();</div><div class=\"line\">                <span class=\"keyword\">if</span> (config != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                    sm.setInitConfig(config);</div><div class=\"line\">                    <span class=\"keyword\">if</span> (config.getDebugAdapter() != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                        config.getDebugAdapter().initDebug(application);<span class=\"comment\">// 关于weex debug操作，不是此篇关注的重点，略过</span></div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">                WXSoInstallMgrSdk.init(application);</div><div class=\"line\">                <span class=\"keyword\">boolean</span> isSoInitSuccess = WXSoInstallMgrSdk.initSo(V8_SO_NAME, <span class=\"number\">1</span>, config != <span class=\"keyword\">null</span> ? config.getUtAdapter() : <span class=\"keyword\">null</span>);</div><div class=\"line\">                <span class=\"keyword\">if</span> (!isSoInitSuccess) &#123;</div><div class=\"line\">                    <span class=\"keyword\">return</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\">                sm.initScriptsFramework(config != <span class=\"keyword\">null</span> ? config.getFramework() : <span class=\"keyword\">null</span>);</div><div class=\"line\"></div><div class=\"line\">                WXEnvironment.sSDKInitExecuteTime = System.currentTimeMillis() - start;</div><div class=\"line\">                WXLogUtils.renderPerformanceLog(<span class=\"string\">\"SDKInitExecuteTime\"</span>, WXEnvironment.sSDKInitExecuteTime);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;);</div><div class=\"line\">        register();</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"WXSDKManager的初始化\"><a href=\"#WXSDKManager的初始化\" class=\"headerlink\" title=\"WXSDKManager的初始化\"></a>WXSDKManager的初始化</h2><p>首先，是WXSDKManager的初始化，会将WXRenderManager、WXDomManager初始化，并拿到WXBridgeManager实例的引用。</p>\n<ul>\n<li>关于 WXRenderManager<br>管理渲染操作，主要操作管理的是WXRenderStatement对象（WXRenderManager 也并不是一个线程安全的类，涉及到UI的更新操作。后面会对WXRenderStatement 进行分析）<br>WXRenderManager 主要的2个成员：mRegistries 和 mWXRenderHandler：<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> ConcurrentHashMap&lt;String, WXRenderStatement&gt; mRegistries;</div><div class=\"line\"><span class=\"keyword\">private</span> WXRenderHandler mWXRenderHandler;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>mRegistries存储WXRenderStatement，以 WXSDKInstance.id 为key存储WXRenderStatement，所以一个WXSDKInstance对应一个WXRenderStatement。<br>WXRenderManager 的 createBody、addComponent等等操作都是针对某个WXSDKInstance的 statement 调用操作的。具体的渲染，WXRenderStatement负责完成。<br>mWXRenderHandler 是将外界传给它的 渲染相关的task 发送消息，然后主线程收到messge后，进行相关渲染操作。</p>\n<ul>\n<li>关于 WXDomManager<br>管理dom操作，作为客户端执行dom命令，会调用 WXDomStatement 创建命令执行相对应的操作。里面提供的方法通常是在 dom 线程中调用。<br>其中有：<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> WXThread mDomThread;</div><div class=\"line\"> <span class=\"comment\">/** package **/</span></div><div class=\"line\"> Handler mDomHandler;</div><div class=\"line\"> <span class=\"keyword\">private</span> WXRenderManager mWXRenderManager;</div><div class=\"line\"> <span class=\"keyword\">private</span> ConcurrentHashMap&lt;String, WXDomStatement&gt; mDomRegistries;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>mDomRegistries 和上面类似，大家一看就懂，<WXSDKInstance.id，WXDomStatement>。<br>mWXRenderManager 是拿到上一步初始化好的 mWXRenderManager实例。<br>mDomThread是WXDomManager创建的一个thread，也是WXThread，其中的handler是WXDomHandler<br>mDomHandler 是这个mDomThread的handler引用。<br>WXDomHandler 是关于dom操作的一个类，实现了Handler.Callback接口，会将mDomHandler发送的dom消息分类处理，这一任务是交给了 WXDomManager：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">handleMessage</span><span class=\"params\">(Message msg)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (msg == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">int</span> what = msg.what;</div><div class=\"line\">    Object obj = msg.obj;</div><div class=\"line\">    WXDomTask task = <span class=\"keyword\">null</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (obj <span class=\"keyword\">instanceof</span> WXDomTask) &#123;</div><div class=\"line\">        task = (WXDomTask) obj;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (!mHasBatch) &#123;</div><div class=\"line\">        mHasBatch = <span class=\"keyword\">true</span>;</div><div class=\"line\">        mWXDomManager.sendEmptyMessageDelayed(WXDomHandler.MsgType.WX_DOM_BATCH, DELAY_TIME);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">switch</span> (what) &#123;</div><div class=\"line\">        <span class=\"keyword\">case</span> MsgType.WX_DOM_CREATE_BODY:</div><div class=\"line\">            mWXDomManager.createBody(task.instanceId, (JSONObject) task.args.get(<span class=\"number\">0</span>));</div><div class=\"line\">            <span class=\"keyword\">break</span>;</div><div class=\"line\">        <span class=\"keyword\">case</span> MsgType.WX_DOM_UPDATE_ATTRS:</div><div class=\"line\">            mWXDomManager.updateAttrs(task.instanceId, (String) task.args.get(<span class=\"number\">0</span>), (JSONObject) task.args.get(<span class=\"number\">1</span>));</div><div class=\"line\">            <span class=\"keyword\">break</span>;</div><div class=\"line\">        <span class=\"keyword\">case</span> MsgType.WX_DOM_UPDATE_STYLE:</div><div class=\"line\">            mWXDomManager.updateStyle(</div><div class=\"line\">                    task.instanceId,</div><div class=\"line\">                    (String) task.args.get(<span class=\"number\">0</span>),</div><div class=\"line\">                    (JSONObject) task.args.get(<span class=\"number\">1</span>),</div><div class=\"line\">                    task.args.size() &gt; <span class=\"number\">2</span> &amp;&amp; (<span class=\"keyword\">boolean</span>) task.args.get(<span class=\"number\">2</span>)</div><div class=\"line\">            );</div><div class=\"line\">            <span class=\"keyword\">break</span>;</div><div class=\"line\">        <span class=\"keyword\">case</span> ...</div><div class=\"line\">        <span class=\"keyword\">case</span> ...</div></pre></td></tr></table></figure>\n<p>具体的manager操作，会交给对应的 domstatement 操作，上面已经说过。</p>\n<p>WXSoInstallMgrSdk 是管理 so 相关操作和cpu平台的支持情况。<br>WXSoInstallMgrSdk.initSo() 执行 weexv8.so 包的加载，就和普通加载so包的方式一样（System.loadLibrary(libName) ）。</p>\n<blockquote>\n<p>这里注意：weex 的 so 包不支持 mips平台的</p>\n</blockquote>\n<p>如果so包加载失败，则初始化操作会就此结束，后续工作不再执行。<br>so包加载完成之后，WXSDKManager会调用WXBridgeManager执行 js Framework的初始化，并发送消息给<br>WXBridgeManager，WXBridgeManager调用自己的 handleMessage() 处理操作，下面会有分析。</p>\n<h2 id=\"WXBridgeManager-的初始化\"><a href=\"#WXBridgeManager-的初始化\" class=\"headerlink\" title=\"WXBridgeManager 的初始化\"></a>WXBridgeManager 的初始化</h2><p>其次，WXBridgeManager 的初始化。会创建名为：WeexJSBridgeThread的 WXThread，WXThread是一个weex封装的HandlerThread。为了方便该线程的消息处理，具体细节可参考源码查看。WXBridgeManager 自己也实现了 Handler.Callback 接口，用于处理消息，接受消息后对 js framework 的初始化操作进行控制。</p>\n<p>发送消息：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * Initialize JavaScript framework</div><div class=\"line\"> * <span class=\"doctag\">@param</span> framework String representation of the framework to be init.</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">initScriptsFramework</span><span class=\"params\">(String framework)</span> </span>&#123;</div><div class=\"line\">    Message msg = mJSHandler.obtainMessage();</div><div class=\"line\">    msg.obj = framework;</div><div class=\"line\">    msg.what = WXJSBridgeMsgType.INIT_FRAMEWORK;</div><div class=\"line\">    msg.setTarget(mJSHandler);</div><div class=\"line\">    msg.sendToTarget();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>接收消息：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">handleMessage</span><span class=\"params\">(Message msg)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (msg == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">int</span> what = msg.what;</div><div class=\"line\">    <span class=\"keyword\">switch</span> (what) &#123;</div><div class=\"line\">        <span class=\"keyword\">case</span> WXJSBridgeMsgType.INIT_FRAMEWORK:</div><div class=\"line\">            invokeInitFramework(msg);<span class=\"comment\">// 过程中会加载 main.js，调用c++ 进行Framework的初始化：mWXBridge.initFramework(framework, assembleDefaultOptions())</span></div><div class=\"line\">            <span class=\"keyword\">break</span>;</div><div class=\"line\">        <span class=\"keyword\">case</span> WXJSBridgeMsgType.CALL_JS_BATCH:</div><div class=\"line\">            invokeCallJSBatch(msg);</div><div class=\"line\">            <span class=\"keyword\">break</span>;</div><div class=\"line\">        <span class=\"keyword\">case</span> ...</div></pre></td></tr></table></figure>\n<p>在 WXBridge 中，是调用 底层native的方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * Init JSFrameWork</div><div class=\"line\"> *</div><div class=\"line\"> * <span class=\"doctag\">@param</span> framework assets/main.js</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">native</span> <span class=\"keyword\">int</span> <span class=\"title\">initFramework</span><span class=\"params\">(String framework, WXParams params)</span></span>;</div></pre></td></tr></table></figure>\n<p>底层 C++代码中：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\">jint <span class=\"title\">Java_com_taobao_weex_bridge_WXBridge_initFramework</span><span class=\"params\">(JNIEnv *env,</div><div class=\"line\">                                                        jobject object, jstring script,</div><div class=\"line\">                                                        jobject params)</span></span></div></pre></td></tr></table></figure>\n<p>js framework 初始化就交给 C++ 来处理了</p>\n<p>在这里再多看一眼：在so包加载后，C++层第一步就会把 WXBridge 加载出来，作为2层之间的桥梁：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * This function will be call when the library first be load.</div><div class=\"line\"> * You can do some init in the lib. return which version jni it support.</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"function\">jint <span class=\"title\">JNI_OnLoad</span><span class=\"params\">(JavaVM *vm, <span class=\"keyword\">void</span> *reserved)</span> </span>&#123;</div><div class=\"line\">    LOGD(<span class=\"string\">\"begin JNI_OnLoad\"</span>);</div><div class=\"line\">    JNIEnv *env;</div><div class=\"line\">    <span class=\"comment\">/* Get environment */</span></div><div class=\"line\">    <span class=\"keyword\">if</span> ((vm)-&gt;GetEnv((<span class=\"keyword\">void</span> **) &amp;env, JNI_VERSION_1_4) != JNI_OK) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> JNI_FALSE;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    sVm = vm;</div><div class=\"line\">    jclass tempClass = env-&gt;FindClass(</div><div class=\"line\">            <span class=\"string\">\"com/taobao/weex/bridge/WXBridge\"</span>);</div><div class=\"line\">    jBridgeClazz = (jclass) env-&gt;NewGlobalRef(tempClass);</div><div class=\"line\">    env-&gt;DeleteLocalRef(tempClass);</div><div class=\"line\">    LOGD(<span class=\"string\">\"end JNI_OnLoad\"</span>);</div><div class=\"line\">    <span class=\"keyword\">return</span> JNI_VERSION_1_4;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"注册操作\"><a href=\"#注册操作\" class=\"headerlink\" title=\"注册操作\"></a>注册操作</h2><p>weex 内置的 component 和 module 都会在此过程中注册，这一过程还包含了dom的注册操作。<br>注册操作，会由registerModules来进行操作：registerModules()，registerComponents()，这两个都是异步执行，最终调用：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// modules the format is like &#123;'dom':['updateAttrs','updateStyle'],'event':['openUrl']&#125;</span></div><div class=\"line\">WXJSObject[] args = &#123;<span class=\"keyword\">new</span> WXJSObject(WXJSObject.JSON,</div><div class=\"line\">                                        WXJsonUtils.fromObjectToJSONString(modules))&#125;;</div><div class=\"line\">mWXBridge.execJS(<span class=\"string\">\"\"</span>, <span class=\"keyword\">null</span>, METHOD_REGISTER_MODULES, args);</div><div class=\"line\"></div><div class=\"line\">WXJSObject[] args = &#123;<span class=\"keyword\">new</span> WXJSObject(WXJSObject.JSON,</div><div class=\"line\">                                        WXJsonUtils.fromObjectToJSONString(components))&#125;;</div><div class=\"line\">mWXBridge.execJS(<span class=\"string\">\"\"</span>, <span class=\"keyword\">null</span>, METHOD_REGISTER_COMPONENTS, args);</div></pre></td></tr></table></figure>\n<p>execJS() 最终是调用WXBridge.execJS() 的native方法，交给底层c++来执行：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\">jint <span class=\"title\">Java_com_taobao_weex_bridge_WXBridge_execJS</span><span class=\"params\">(JNIEnv *env, jobject this1, jstring jinstanceid,</div><div class=\"line\">                                                 jstring jnamespace, jstring jfunction,</div><div class=\"line\">                                                 jobjectArray jargs)</span></span></div></pre></td></tr></table></figure>\n<p>C++ 使用反射的方式，找到WXJSObject类，找到相关的属性和方法，</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">jclass jsObjectClazz = env-&gt;FindClass(<span class=\"string\">\"com/taobao/weex/bridge/WXJSObject\"</span>);</div></pre></td></tr></table></figure>\n<p>调用 js Framework的相关api 执行。</p>\n<p><br/></p>\n<p>源码：<br><a href=\"https://github.com/apache/incubator-weex/tree/master/android/sdk\">https://github.com/apache/incubator-weex/tree/master/android/sdk</a><br><a href=\"https://github.com/alibaba/weex_v8core\">https://github.com/alibaba/weex_v8core</a></p>\n"},{"title":"Weex SDK源码分析（二）","date":"2017-02-28T11:32:00.000Z","_content":">  **Weex 渲染页面过程**\n\n## weex 渲染入口 render()\n渲染过程从 WXSDKInstance.render() 开始追溯，render()方法是异步执行渲染工作的。render()重载的方法比较多，此处介绍最基础的一个。\n参数代表的含义：\n* pageName：用于查看日志，渲染的哪个页面作为标识\n* template：加载的本地的或远程的 js（we文件被weex transform后的 js）\n* options：配置信息，包括系统版本、app版本、设备信息等\n* jsonInitData：用于渲染的初始数据\n* flag：监听渲染的时机：\n    * APPEND_ASYNC：渲染完第一个view后，IWXRenderListener.onViewCreated()调用\n    * APPEND_ONCE：渲染完整个view tree后，onViewCreated()调用\n\n``` java\nwxSDKInstance.render(\n      getPageName(),\n      template,\n      options,\n      jsonInitData,\n      ScreenUtil.getDisplayWidth(this),\n      ScreenUtil.getDisplayHeight(this),\n      WXRenderStrategy.APPEND_ASYNC);\n```\n接着，渲染工作真正开始于 renderInternal()：\n\n``` java\nprivate void ensureRenderArchor(){\n    if(mRenderContainer == null){\n      mRenderContainer = new RenderContainer(getContext());\n      mRenderContainer.setLayoutParams(new ViewGroup.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT));\n      mRenderContainer.setBackgroundColor(Color.TRANSPARENT);\n      mRenderContainer.setSDKInstance(this);\n      mRenderContainer.addOnLayoutChangeListener(this);\n    }\n  }\n```\n会进行 mRenderContainer 的初始化，RenderContainer 是一个 weex 扩展的 FrameLayout，后期操作，会在这个 container 中添加view元素。\n我们接着看 render 过程，WXSDKManager.createInstance() 创建实例：\n\n``` java\nvoid createInstance(WXSDKInstance instance, String code, Map<String, Object> options, String jsonInitData) {\n     mWXRenderManager.registerInstance(instance);\n     mBridgeManager.createInstance(instance.getInstanceId(), code, options, jsonInitData);\n  }\n```\n此过程中，WXRenderManager 注册实例，实际就是在 mRegistries（map<wxSDKInstanceid, wxRenderStatement>）中存储该实例的信息，并且创建 renderStatement。\nmBridgeManager 创建实例时，WXModuleManager 会创建 DomModule，由WXDomManager进行创建，sDomModuleMap 存储该 wxSDKInstance 的WXDomModule。\n然后，异步执行 invokeCreateInstance()，此过程还会执行 initFramework() 操作。initFramework() 后，会创建出一个 WXJSObject 将 wxsdkinstance相关的数据存储，组成一个数组的形式，传给执行 js 的方法：\n\n``` java\nWXJSObject instanceIdObj = new WXJSObject(WXJSObject.String,\n                instance.getInstanceId());\n        WXJSObject instanceObj = new WXJSObject(WXJSObject.String,\n                                                template);\n        WXJSObject optionsObj = new WXJSObject(WXJSObject.JSON,\n                options == null ? \"{}\"\n                        : WXJsonUtils.fromObjectToJSONString(options));\n        WXJSObject dataObj = new WXJSObject(WXJSObject.JSON,\n                data == null ? \"{}\" : data);\n        WXJSObject[] args = {instanceIdObj, instanceObj, optionsObj,\n                dataObj};\n        invokeExecJS(instance.getInstanceId(), null, METHOD_CREATE_INSTANCE, args,false);\n```\n然后，WXBridgeManager 会调用 mWXBridge.execJS() 去调用底层的 C++方法，执行js。\n\n## 底层C++ 调用Weex Android 功能\n我们再来看看 c++ 代码实现的功能，以 callNative() 为例：\n\n``` cpp\n/**\n *  This Function is a built-in function that JS bundle can execute\n *  to call native module.\n */\nv8::Handle<v8::Value> callNative(const v8::Arguments &args) {\n\n    JNIEnv *env = getJNIEnv();\n    //instacneID args[0]\n    jstring jInstanceId = NULL;\n    if (!args[0].IsEmpty()) {\n        v8::String::Utf8Value instanceId(args[0]);\n        jInstanceId = env->NewStringUTF(*instanceId);\n    }\n    //task args[1]\n    jbyteArray jTaskString = NULL;\n    if (!args[1].IsEmpty() && args[1]->IsObject()) {\n        v8::Handle<v8::Value> obj[1];\n        v8::Handle<v8::Object> global = V8context->Global();\n        json = v8::Handle<v8::Object>::Cast(global->Get(v8::String::New(\"JSON\")));\n        json_stringify = v8::Handle<v8::Function>::Cast(json->Get(v8::String::New(\"stringify\")));\n        obj[0] = args[1];\n        v8::Handle<v8::Value> ret = json_stringify->Call(json, 1, obj);\n        v8::String::Utf8Value str(ret);\n\n        int strLen = strlen(ToCString(str));\n        jTaskString = env->NewByteArray(strLen);\n        env->SetByteArrayRegion(jTaskString, 0, strLen,\n                                reinterpret_cast<const jbyte *>(ToCString(str)));\n        // jTaskString = env->NewStringUTF(ToCString(str));\n\n    } else if (!args[1].IsEmpty() && args[1]->IsString()) {\n        v8::String::Utf8Value tasks(args[1]);\n        int strLen = strlen(*tasks);\n        jTaskString = env->NewByteArray(strLen);\n        env->SetByteArrayRegion(jTaskString, 0, strLen, reinterpret_cast<const jbyte *>(*tasks));\n        // jTaskString = env->NewStringUTF(*tasks);\n    }\n    //callback args[2]\n    jstring jCallback = NULL;\n    if (!args[2].IsEmpty()) {\n        v8::String::Utf8Value callback(args[2]);\n        jCallback = env->NewStringUTF(*callback);\n    }\n\n    if (jCallNativeMethodId == NULL) {\n        // 反射方式，拿到 weexsdk 的callNative方法的ID\n        jCallNativeMethodId = env->GetMethodID(jBridgeClazz,\n                                               \"callNative\",\n                                               \"(Ljava/lang/String;[BLjava/lang/String;)I\");\n    }\n\n    // 调用 java 的 callNative 方法\n    int flag = env->CallIntMethod(jThis, jCallNativeMethodId, jInstanceId, jTaskString, jCallback);\n    if (flag == -1) {\n        LOGE(\"instance destroy JFM must stop callNative\");\n    }\n    env->DeleteLocalRef(jTaskString);\n    env->DeleteLocalRef(jInstanceId);\n    env->DeleteLocalRef(jCallback);\n\n    return v8::Integer::New(flag);\n}\n```\nC++ 解析 js 代码后，返回来再调用 weex sdk 的 Android 代码，通过 JNI 提供的反射方式拿到方法的 id，并调用执行。\n相对应的，我们找到 Android callNative() 代码：\n\n``` java\npublic int callNative(String instanceId, String tasks, String callback) {\n    long start = System.currentTimeMillis();\n    WXSDKInstance instance = WXSDKManager.getInstance().getSDKInstance(instanceId);\n    if(instance != null) {\n      instance.firstScreenCreateInstanceTime(start);\n    }\n    int errorCode = IWXBridge.INSTANCE_RENDERING;\n    try {\n      // 通过 WXBridgeManager.callNative 进行 tasks 的分发执行\n      errorCode = WXBridgeManager.getInstance().callNative(instanceId, tasks, callback);\n    }catch (Throwable e){\n      //catch everything during call native.\n      if(WXEnvironment.isApkDebugable()){\n        WXLogUtils.e(TAG,\"callNative throw exception:\"+e.getMessage());\n      }\n    }\n\n    if(instance != null) {\n      instance.callNativeTime(System.currentTimeMillis() - start);\n    }\n    if(WXEnvironment.isApkDebugable()){\n      if(errorCode == IWXBridge.DESTROY_INSTANCE){\n        WXLogUtils.w(\"destroyInstance :\"+instanceId+\" JSF must stop callNative\");\n      }\n    }\n    return errorCode;\n  }\n```\n## Weex native 响应 C++ 的调用\nWXBridgeManager.callNative() 对 tasks 进行分发，我们来看看如何分发的：\n\n``` java\nJSONArray array = JSON.parseArray(tasks);\n... ...\nint size = array.size();\n    if (size > 0) {\n      try {\n        JSONObject task;\n        for (int i = 0; i < size; ++i) {\n          task = (JSONObject) array.get(i);\n          if (task != null && WXSDKManager.getInstance().getSDKInstance(instanceId) != null) {\n            Object target = task.get(MODULE);\n            if(target != null){\n              if(WXDomModule.WXDOM.equals(target)){\n                WXDomModule dom = getDomModule(instanceId);\n                dom.callDomMethod(task);\n              }else {\n                WXModuleManager.callModuleMethod(instanceId, (String) target,\n                    (String) task.get(METHOD), (JSONArray) task.get(ARGS));\n              }\n            }else if(task.get(COMPONENT) != null){\n              //call component\n              WXDomModule dom = getDomModule(instanceId);\n              dom.invokeMethod((String) task.get(REF),(String) task.get(METHOD),(JSONArray) task.get(ARGS));\n            }else{\n              throw new IllegalArgumentException(\"unknown callNative\");\n            }\n          }\n        }\n      } catch (Exception e) {\n        WXLogUtils.e(\"[WXBridgeManager] callNative exception: \", e);\n        commitJSBridgeAlarmMonitor(instanceId, WXErrorCode.WX_ERR_INVOKE_NATIVE,\"[WXBridgeManager] callNative exception \"+e.getCause());\n      }\n    }\n    ... ...\n```\n分发规则，对 tasks 逐个分类处理：\n* 如果是 module:\n    * 如果 是 dom：执行 WXDomModule.callDomMethod()；\n    * 如果 不是 dom (普通的WXModule) : 执行WXModuleManager.callModuleMethod()\n* 如果是 component：\n    * 调用 WXDomModule.invokeMethod()\n\ntask 数据格式（json），如图：\n![](http://7xr1vo.com1.z0.glb.clouddn.com/weex%20debug%E5%9B%BE.png)\n\n这里只分析第一种情况（其他相似）：\nWXDomModule.callDomMethod()：\n会根据 task 的 method 属性分类处理，此处只分析一个：CREATE_BODY：\n会继续调用 createBody() 方法，将 wxSDKInstance.id 和 task的args 信息发送给WXDomHandler。\nWXDomHandler 的 handleMessage() 中也有很多分类处理，对于WX_DOM_CREATE_BODY：会执行：\n```java\nmWXDomManager.createBody(task.instanceId, (JSONObject) task.args.get(0));\n```\n具体可参考 WXDomModule、WXDomHandler 类分析\n这个时候，就回到我们之前说过的 WXDomStatement 的流程了，WXDomStatement会添加dom 节点（addDomInternal() ），在 addDomInternal 过程中，对dom节点又是一通猛烈的操作：根节点（root节点的准备工作），普通节点（add到父节点下）。\n然后，对 dom 对象 进行遍历操作（递归）：domObject.traverseTree()，在dom 线程创建 component，生成 component 树（也是递归操作：通过WXRenderStatement.generateComponentTree() ）。\n对于每个dom节点都会进行 setLayout()、setExtra()、setPadding()，可以去看看compent.setLayout()，就是去使用Android的API 对view进布局和绘制，此处不再贴代码。\n![](http://7xr1vo.com1.z0.glb.clouddn.com/weex%20component%20%E6%96%B9%E6%B3%95.png)\n\n\n\n## 总结\n* WXBridge 是 Android 与 底层 C++ 的衔接处，Android <=> C++ 的交互，及方法接口都在此类中，的确起到了见名知义的效果\n* Weex Android SDK 是使用 Android的API（Java层），实现了view的布局、绘制。并不是依靠 底层so包实现，与IOS的sdk实现方式不同（听同事说......）\n* component 处置 weex 的view绘制、布局过程，和Android native处理view的流程十分相似，具体可以参考后面的链接（阿里大神也分析过）\n\n<br/>\n\n参考：\nhttp://www.jianshu.com/p/3160a0297345\n","source":"_posts/Weex SDK源码分析（二）.md","raw":"---\ntitle: Weex SDK源码分析（二）\ndate: 2017-2-28 19:32\ncategories: Weex\ntags: [Weex, Android]\n---\n>  **Weex 渲染页面过程**\n\n## weex 渲染入口 render()\n渲染过程从 WXSDKInstance.render() 开始追溯，render()方法是异步执行渲染工作的。render()重载的方法比较多，此处介绍最基础的一个。\n参数代表的含义：\n* pageName：用于查看日志，渲染的哪个页面作为标识\n* template：加载的本地的或远程的 js（we文件被weex transform后的 js）\n* options：配置信息，包括系统版本、app版本、设备信息等\n* jsonInitData：用于渲染的初始数据\n* flag：监听渲染的时机：\n    * APPEND_ASYNC：渲染完第一个view后，IWXRenderListener.onViewCreated()调用\n    * APPEND_ONCE：渲染完整个view tree后，onViewCreated()调用\n\n``` java\nwxSDKInstance.render(\n      getPageName(),\n      template,\n      options,\n      jsonInitData,\n      ScreenUtil.getDisplayWidth(this),\n      ScreenUtil.getDisplayHeight(this),\n      WXRenderStrategy.APPEND_ASYNC);\n```\n接着，渲染工作真正开始于 renderInternal()：\n\n``` java\nprivate void ensureRenderArchor(){\n    if(mRenderContainer == null){\n      mRenderContainer = new RenderContainer(getContext());\n      mRenderContainer.setLayoutParams(new ViewGroup.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT));\n      mRenderContainer.setBackgroundColor(Color.TRANSPARENT);\n      mRenderContainer.setSDKInstance(this);\n      mRenderContainer.addOnLayoutChangeListener(this);\n    }\n  }\n```\n会进行 mRenderContainer 的初始化，RenderContainer 是一个 weex 扩展的 FrameLayout，后期操作，会在这个 container 中添加view元素。\n我们接着看 render 过程，WXSDKManager.createInstance() 创建实例：\n\n``` java\nvoid createInstance(WXSDKInstance instance, String code, Map<String, Object> options, String jsonInitData) {\n     mWXRenderManager.registerInstance(instance);\n     mBridgeManager.createInstance(instance.getInstanceId(), code, options, jsonInitData);\n  }\n```\n此过程中，WXRenderManager 注册实例，实际就是在 mRegistries（map<wxSDKInstanceid, wxRenderStatement>）中存储该实例的信息，并且创建 renderStatement。\nmBridgeManager 创建实例时，WXModuleManager 会创建 DomModule，由WXDomManager进行创建，sDomModuleMap 存储该 wxSDKInstance 的WXDomModule。\n然后，异步执行 invokeCreateInstance()，此过程还会执行 initFramework() 操作。initFramework() 后，会创建出一个 WXJSObject 将 wxsdkinstance相关的数据存储，组成一个数组的形式，传给执行 js 的方法：\n\n``` java\nWXJSObject instanceIdObj = new WXJSObject(WXJSObject.String,\n                instance.getInstanceId());\n        WXJSObject instanceObj = new WXJSObject(WXJSObject.String,\n                                                template);\n        WXJSObject optionsObj = new WXJSObject(WXJSObject.JSON,\n                options == null ? \"{}\"\n                        : WXJsonUtils.fromObjectToJSONString(options));\n        WXJSObject dataObj = new WXJSObject(WXJSObject.JSON,\n                data == null ? \"{}\" : data);\n        WXJSObject[] args = {instanceIdObj, instanceObj, optionsObj,\n                dataObj};\n        invokeExecJS(instance.getInstanceId(), null, METHOD_CREATE_INSTANCE, args,false);\n```\n然后，WXBridgeManager 会调用 mWXBridge.execJS() 去调用底层的 C++方法，执行js。\n\n## 底层C++ 调用Weex Android 功能\n我们再来看看 c++ 代码实现的功能，以 callNative() 为例：\n\n``` cpp\n/**\n *  This Function is a built-in function that JS bundle can execute\n *  to call native module.\n */\nv8::Handle<v8::Value> callNative(const v8::Arguments &args) {\n\n    JNIEnv *env = getJNIEnv();\n    //instacneID args[0]\n    jstring jInstanceId = NULL;\n    if (!args[0].IsEmpty()) {\n        v8::String::Utf8Value instanceId(args[0]);\n        jInstanceId = env->NewStringUTF(*instanceId);\n    }\n    //task args[1]\n    jbyteArray jTaskString = NULL;\n    if (!args[1].IsEmpty() && args[1]->IsObject()) {\n        v8::Handle<v8::Value> obj[1];\n        v8::Handle<v8::Object> global = V8context->Global();\n        json = v8::Handle<v8::Object>::Cast(global->Get(v8::String::New(\"JSON\")));\n        json_stringify = v8::Handle<v8::Function>::Cast(json->Get(v8::String::New(\"stringify\")));\n        obj[0] = args[1];\n        v8::Handle<v8::Value> ret = json_stringify->Call(json, 1, obj);\n        v8::String::Utf8Value str(ret);\n\n        int strLen = strlen(ToCString(str));\n        jTaskString = env->NewByteArray(strLen);\n        env->SetByteArrayRegion(jTaskString, 0, strLen,\n                                reinterpret_cast<const jbyte *>(ToCString(str)));\n        // jTaskString = env->NewStringUTF(ToCString(str));\n\n    } else if (!args[1].IsEmpty() && args[1]->IsString()) {\n        v8::String::Utf8Value tasks(args[1]);\n        int strLen = strlen(*tasks);\n        jTaskString = env->NewByteArray(strLen);\n        env->SetByteArrayRegion(jTaskString, 0, strLen, reinterpret_cast<const jbyte *>(*tasks));\n        // jTaskString = env->NewStringUTF(*tasks);\n    }\n    //callback args[2]\n    jstring jCallback = NULL;\n    if (!args[2].IsEmpty()) {\n        v8::String::Utf8Value callback(args[2]);\n        jCallback = env->NewStringUTF(*callback);\n    }\n\n    if (jCallNativeMethodId == NULL) {\n        // 反射方式，拿到 weexsdk 的callNative方法的ID\n        jCallNativeMethodId = env->GetMethodID(jBridgeClazz,\n                                               \"callNative\",\n                                               \"(Ljava/lang/String;[BLjava/lang/String;)I\");\n    }\n\n    // 调用 java 的 callNative 方法\n    int flag = env->CallIntMethod(jThis, jCallNativeMethodId, jInstanceId, jTaskString, jCallback);\n    if (flag == -1) {\n        LOGE(\"instance destroy JFM must stop callNative\");\n    }\n    env->DeleteLocalRef(jTaskString);\n    env->DeleteLocalRef(jInstanceId);\n    env->DeleteLocalRef(jCallback);\n\n    return v8::Integer::New(flag);\n}\n```\nC++ 解析 js 代码后，返回来再调用 weex sdk 的 Android 代码，通过 JNI 提供的反射方式拿到方法的 id，并调用执行。\n相对应的，我们找到 Android callNative() 代码：\n\n``` java\npublic int callNative(String instanceId, String tasks, String callback) {\n    long start = System.currentTimeMillis();\n    WXSDKInstance instance = WXSDKManager.getInstance().getSDKInstance(instanceId);\n    if(instance != null) {\n      instance.firstScreenCreateInstanceTime(start);\n    }\n    int errorCode = IWXBridge.INSTANCE_RENDERING;\n    try {\n      // 通过 WXBridgeManager.callNative 进行 tasks 的分发执行\n      errorCode = WXBridgeManager.getInstance().callNative(instanceId, tasks, callback);\n    }catch (Throwable e){\n      //catch everything during call native.\n      if(WXEnvironment.isApkDebugable()){\n        WXLogUtils.e(TAG,\"callNative throw exception:\"+e.getMessage());\n      }\n    }\n\n    if(instance != null) {\n      instance.callNativeTime(System.currentTimeMillis() - start);\n    }\n    if(WXEnvironment.isApkDebugable()){\n      if(errorCode == IWXBridge.DESTROY_INSTANCE){\n        WXLogUtils.w(\"destroyInstance :\"+instanceId+\" JSF must stop callNative\");\n      }\n    }\n    return errorCode;\n  }\n```\n## Weex native 响应 C++ 的调用\nWXBridgeManager.callNative() 对 tasks 进行分发，我们来看看如何分发的：\n\n``` java\nJSONArray array = JSON.parseArray(tasks);\n... ...\nint size = array.size();\n    if (size > 0) {\n      try {\n        JSONObject task;\n        for (int i = 0; i < size; ++i) {\n          task = (JSONObject) array.get(i);\n          if (task != null && WXSDKManager.getInstance().getSDKInstance(instanceId) != null) {\n            Object target = task.get(MODULE);\n            if(target != null){\n              if(WXDomModule.WXDOM.equals(target)){\n                WXDomModule dom = getDomModule(instanceId);\n                dom.callDomMethod(task);\n              }else {\n                WXModuleManager.callModuleMethod(instanceId, (String) target,\n                    (String) task.get(METHOD), (JSONArray) task.get(ARGS));\n              }\n            }else if(task.get(COMPONENT) != null){\n              //call component\n              WXDomModule dom = getDomModule(instanceId);\n              dom.invokeMethod((String) task.get(REF),(String) task.get(METHOD),(JSONArray) task.get(ARGS));\n            }else{\n              throw new IllegalArgumentException(\"unknown callNative\");\n            }\n          }\n        }\n      } catch (Exception e) {\n        WXLogUtils.e(\"[WXBridgeManager] callNative exception: \", e);\n        commitJSBridgeAlarmMonitor(instanceId, WXErrorCode.WX_ERR_INVOKE_NATIVE,\"[WXBridgeManager] callNative exception \"+e.getCause());\n      }\n    }\n    ... ...\n```\n分发规则，对 tasks 逐个分类处理：\n* 如果是 module:\n    * 如果 是 dom：执行 WXDomModule.callDomMethod()；\n    * 如果 不是 dom (普通的WXModule) : 执行WXModuleManager.callModuleMethod()\n* 如果是 component：\n    * 调用 WXDomModule.invokeMethod()\n\ntask 数据格式（json），如图：\n![](http://7xr1vo.com1.z0.glb.clouddn.com/weex%20debug%E5%9B%BE.png)\n\n这里只分析第一种情况（其他相似）：\nWXDomModule.callDomMethod()：\n会根据 task 的 method 属性分类处理，此处只分析一个：CREATE_BODY：\n会继续调用 createBody() 方法，将 wxSDKInstance.id 和 task的args 信息发送给WXDomHandler。\nWXDomHandler 的 handleMessage() 中也有很多分类处理，对于WX_DOM_CREATE_BODY：会执行：\n```java\nmWXDomManager.createBody(task.instanceId, (JSONObject) task.args.get(0));\n```\n具体可参考 WXDomModule、WXDomHandler 类分析\n这个时候，就回到我们之前说过的 WXDomStatement 的流程了，WXDomStatement会添加dom 节点（addDomInternal() ），在 addDomInternal 过程中，对dom节点又是一通猛烈的操作：根节点（root节点的准备工作），普通节点（add到父节点下）。\n然后，对 dom 对象 进行遍历操作（递归）：domObject.traverseTree()，在dom 线程创建 component，生成 component 树（也是递归操作：通过WXRenderStatement.generateComponentTree() ）。\n对于每个dom节点都会进行 setLayout()、setExtra()、setPadding()，可以去看看compent.setLayout()，就是去使用Android的API 对view进布局和绘制，此处不再贴代码。\n![](http://7xr1vo.com1.z0.glb.clouddn.com/weex%20component%20%E6%96%B9%E6%B3%95.png)\n\n\n\n## 总结\n* WXBridge 是 Android 与 底层 C++ 的衔接处，Android <=> C++ 的交互，及方法接口都在此类中，的确起到了见名知义的效果\n* Weex Android SDK 是使用 Android的API（Java层），实现了view的布局、绘制。并不是依靠 底层so包实现，与IOS的sdk实现方式不同（听同事说......）\n* component 处置 weex 的view绘制、布局过程，和Android native处理view的流程十分相似，具体可以参考后面的链接（阿里大神也分析过）\n\n<br/>\n\n参考：\nhttp://www.jianshu.com/p/3160a0297345\n","slug":"Weex SDK源码分析（二）","published":1,"updated":"2017-02-28T12:58:35.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cizpjnf2v0017baqwg39x865m","content":"<blockquote>\n<p> <strong>Weex 渲染页面过程</strong></p>\n</blockquote>\n<h2 id=\"weex-渲染入口-render\"><a href=\"#weex-渲染入口-render\" class=\"headerlink\" title=\"weex 渲染入口 render()\"></a>weex 渲染入口 render()</h2><p>渲染过程从 WXSDKInstance.render() 开始追溯，render()方法是异步执行渲染工作的。render()重载的方法比较多，此处介绍最基础的一个。<br>参数代表的含义：</p>\n<ul>\n<li>pageName：用于查看日志，渲染的哪个页面作为标识</li>\n<li>template：加载的本地的或远程的 js（we文件被weex transform后的 js）</li>\n<li>options：配置信息，包括系统版本、app版本、设备信息等</li>\n<li>jsonInitData：用于渲染的初始数据</li>\n<li>flag：监听渲染的时机：<ul>\n<li>APPEND_ASYNC：渲染完第一个view后，IWXRenderListener.onViewCreated()调用</li>\n<li>APPEND_ONCE：渲染完整个view tree后，onViewCreated()调用</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">wxSDKInstance.render(</div><div class=\"line\">      getPageName(),</div><div class=\"line\">      template,</div><div class=\"line\">      options,</div><div class=\"line\">      jsonInitData,</div><div class=\"line\">      ScreenUtil.getDisplayWidth(<span class=\"keyword\">this</span>),</div><div class=\"line\">      ScreenUtil.getDisplayHeight(<span class=\"keyword\">this</span>),</div><div class=\"line\">      WXRenderStrategy.APPEND_ASYNC);</div></pre></td></tr></table></figure>\n<p>接着，渲染工作真正开始于 renderInternal()：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">ensureRenderArchor</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(mRenderContainer == <span class=\"keyword\">null</span>)&#123;</div><div class=\"line\">      mRenderContainer = <span class=\"keyword\">new</span> RenderContainer(getContext());</div><div class=\"line\">      mRenderContainer.setLayoutParams(<span class=\"keyword\">new</span> ViewGroup.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT));</div><div class=\"line\">      mRenderContainer.setBackgroundColor(Color.TRANSPARENT);</div><div class=\"line\">      mRenderContainer.setSDKInstance(<span class=\"keyword\">this</span>);</div><div class=\"line\">      mRenderContainer.addOnLayoutChangeListener(<span class=\"keyword\">this</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure>\n<p>会进行 mRenderContainer 的初始化，RenderContainer 是一个 weex 扩展的 FrameLayout，后期操作，会在这个 container 中添加view元素。<br>我们接着看 render 过程，WXSDKManager.createInstance() 创建实例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">createInstance</span><span class=\"params\">(WXSDKInstance instance, String code, Map&lt;String, Object&gt; options, String jsonInitData)</span> </span>&#123;</div><div class=\"line\">     mWXRenderManager.registerInstance(instance);</div><div class=\"line\">     mBridgeManager.createInstance(instance.getInstanceId(), code, options, jsonInitData);</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure>\n<p>此过程中，WXRenderManager 注册实例，实际就是在 mRegistries（map<wxsdkinstanceid, wxrenderstatement=\"\">）中存储该实例的信息，并且创建 renderStatement。<br>mBridgeManager 创建实例时，WXModuleManager 会创建 DomModule，由WXDomManager进行创建，sDomModuleMap 存储该 wxSDKInstance 的WXDomModule。<br>然后，异步执行 invokeCreateInstance()，此过程还会执行 initFramework() 操作。initFramework() 后，会创建出一个 WXJSObject 将 wxsdkinstance相关的数据存储，组成一个数组的形式，传给执行 js 的方法：</wxsdkinstanceid,></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">WXJSObject instanceIdObj = <span class=\"keyword\">new</span> WXJSObject(WXJSObject.String,</div><div class=\"line\">                instance.getInstanceId());</div><div class=\"line\">        WXJSObject instanceObj = <span class=\"keyword\">new</span> WXJSObject(WXJSObject.String,</div><div class=\"line\">                                                template);</div><div class=\"line\">        WXJSObject optionsObj = <span class=\"keyword\">new</span> WXJSObject(WXJSObject.JSON,</div><div class=\"line\">                options == <span class=\"keyword\">null</span> ? <span class=\"string\">\"&#123;&#125;\"</span></div><div class=\"line\">                        : WXJsonUtils.fromObjectToJSONString(options));</div><div class=\"line\">        WXJSObject dataObj = <span class=\"keyword\">new</span> WXJSObject(WXJSObject.JSON,</div><div class=\"line\">                data == <span class=\"keyword\">null</span> ? <span class=\"string\">\"&#123;&#125;\"</span> : data);</div><div class=\"line\">        WXJSObject[] args = &#123;instanceIdObj, instanceObj, optionsObj,</div><div class=\"line\">                dataObj&#125;;</div><div class=\"line\">        invokeExecJS(instance.getInstanceId(), <span class=\"keyword\">null</span>, METHOD_CREATE_INSTANCE, args,<span class=\"keyword\">false</span>);</div></pre></td></tr></table></figure>\n<p>然后，WXBridgeManager 会调用 mWXBridge.execJS() 去调用底层的 C++方法，执行js。</p>\n<h2 id=\"底层C-调用Weex-Android-功能\"><a href=\"#底层C-调用Weex-Android-功能\" class=\"headerlink\" title=\"底层C++ 调用Weex Android 功能\"></a>底层C++ 调用Weex Android 功能</h2><p>我们再来看看 c++ 代码实现的功能，以 callNative() 为例：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> *  This Function is a built-in function that JS bundle can execute</div><div class=\"line\"> *  to call native module.</div><div class=\"line\"> */</div><div class=\"line\">v8::Handle&lt;v8::Value&gt; callNative(<span class=\"keyword\">const</span> v8::Arguments &amp;args) &#123;</div><div class=\"line\"></div><div class=\"line\">    JNIEnv *env = getJNIEnv();</div><div class=\"line\">    <span class=\"comment\">//instacneID args[0]</span></div><div class=\"line\">    jstring jInstanceId = <span class=\"literal\">NULL</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!args[<span class=\"number\">0</span>].IsEmpty()) &#123;</div><div class=\"line\">        v8::String::<span class=\"function\">Utf8Value <span class=\"title\">instanceId</span><span class=\"params\">(args[<span class=\"number\">0</span>])</span></span>;</div><div class=\"line\">        jInstanceId = env-&gt;NewStringUTF(*instanceId);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">//task args[1]</span></div><div class=\"line\">    jbyteArray jTaskString = <span class=\"literal\">NULL</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!args[<span class=\"number\">1</span>].IsEmpty() &amp;&amp; args[<span class=\"number\">1</span>]-&gt;IsObject()) &#123;</div><div class=\"line\">        v8::Handle&lt;v8::Value&gt; obj[<span class=\"number\">1</span>];</div><div class=\"line\">        v8::Handle&lt;v8::Object&gt; global = V8context-&gt;Global();</div><div class=\"line\">        json = v8::Handle&lt;v8::Object&gt;::Cast(global-&gt;Get(v8::String::New(<span class=\"string\">\"JSON\"</span>)));</div><div class=\"line\">        json_stringify = v8::Handle&lt;v8::Function&gt;::Cast(json-&gt;Get(v8::String::New(<span class=\"string\">\"stringify\"</span>)));</div><div class=\"line\">        obj[<span class=\"number\">0</span>] = args[<span class=\"number\">1</span>];</div><div class=\"line\">        v8::Handle&lt;v8::Value&gt; ret = json_stringify-&gt;Call(json, <span class=\"number\">1</span>, obj);</div><div class=\"line\">        v8::String::<span class=\"function\">Utf8Value <span class=\"title\">str</span><span class=\"params\">(ret)</span></span>;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">int</span> strLen = <span class=\"built_in\">strlen</span>(ToCString(str));</div><div class=\"line\">        jTaskString = env-&gt;NewByteArray(strLen);</div><div class=\"line\">        env-&gt;SetByteArrayRegion(jTaskString, <span class=\"number\">0</span>, strLen,</div><div class=\"line\">                                <span class=\"keyword\">reinterpret_cast</span>&lt;<span class=\"keyword\">const</span> jbyte *&gt;(ToCString(str)));</div><div class=\"line\">        <span class=\"comment\">// jTaskString = env-&gt;NewStringUTF(ToCString(str));</span></div><div class=\"line\"></div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!args[<span class=\"number\">1</span>].IsEmpty() &amp;&amp; args[<span class=\"number\">1</span>]-&gt;IsString()) &#123;</div><div class=\"line\">        v8::String::Utf8Value tasks(args[<span class=\"number\">1</span>]);</div><div class=\"line\">        <span class=\"keyword\">int</span> strLen = <span class=\"built_in\">strlen</span>(*tasks);</div><div class=\"line\">        jTaskString = env-&gt;NewByteArray(strLen);</div><div class=\"line\">        env-&gt;SetByteArrayRegion(jTaskString, <span class=\"number\">0</span>, strLen, <span class=\"keyword\">reinterpret_cast</span>&lt;<span class=\"keyword\">const</span> jbyte *&gt;(*tasks));</div><div class=\"line\">        <span class=\"comment\">// jTaskString = env-&gt;NewStringUTF(*tasks);</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">//callback args[2]</span></div><div class=\"line\">    jstring jCallback = <span class=\"literal\">NULL</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!args[<span class=\"number\">2</span>].IsEmpty()) &#123;</div><div class=\"line\">        v8::String::<span class=\"function\">Utf8Value <span class=\"title\">callback</span><span class=\"params\">(args[<span class=\"number\">2</span>])</span></span>;</div><div class=\"line\">        jCallback = env-&gt;NewStringUTF(*callback);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (jCallNativeMethodId == <span class=\"literal\">NULL</span>) &#123;</div><div class=\"line\">        <span class=\"comment\">// 反射方式，拿到 weexsdk 的callNative方法的ID</span></div><div class=\"line\">        jCallNativeMethodId = env-&gt;GetMethodID(jBridgeClazz,</div><div class=\"line\">                                               <span class=\"string\">\"callNative\"</span>,</div><div class=\"line\">                                               <span class=\"string\">\"(Ljava/lang/String;[BLjava/lang/String;)I\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 调用 java 的 callNative 方法</span></div><div class=\"line\">    <span class=\"keyword\">int</span> flag = env-&gt;CallIntMethod(jThis, jCallNativeMethodId, jInstanceId, jTaskString, jCallback);</div><div class=\"line\">    <span class=\"keyword\">if</span> (flag == <span class=\"number\">-1</span>) &#123;</div><div class=\"line\">        LOGE(<span class=\"string\">\"instance destroy JFM must stop callNative\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    env-&gt;DeleteLocalRef(jTaskString);</div><div class=\"line\">    env-&gt;DeleteLocalRef(jInstanceId);</div><div class=\"line\">    env-&gt;DeleteLocalRef(jCallback);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> v8::Integer::New(flag);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>C++ 解析 js 代码后，返回来再调用 weex sdk 的 Android 代码，通过 JNI 提供的反射方式拿到方法的 id，并调用执行。<br>相对应的，我们找到 Android callNative() 代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">callNative</span><span class=\"params\">(String instanceId, String tasks, String callback)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">long</span> start = System.currentTimeMillis();</div><div class=\"line\">    WXSDKInstance instance = WXSDKManager.getInstance().getSDKInstance(instanceId);</div><div class=\"line\">    <span class=\"keyword\">if</span>(instance != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">      instance.firstScreenCreateInstanceTime(start);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">int</span> errorCode = IWXBridge.INSTANCE_RENDERING;</div><div class=\"line\">    <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">      <span class=\"comment\">// 通过 WXBridgeManager.callNative 进行 tasks 的分发执行</span></div><div class=\"line\">      errorCode = WXBridgeManager.getInstance().callNative(instanceId, tasks, callback);</div><div class=\"line\">    &#125;<span class=\"keyword\">catch</span> (Throwable e)&#123;</div><div class=\"line\">      <span class=\"comment\">//catch everything during call native.</span></div><div class=\"line\">      <span class=\"keyword\">if</span>(WXEnvironment.isApkDebugable())&#123;</div><div class=\"line\">        WXLogUtils.e(TAG,<span class=\"string\">\"callNative throw exception:\"</span>+e.getMessage());</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span>(instance != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">      instance.callNativeTime(System.currentTimeMillis() - start);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span>(WXEnvironment.isApkDebugable())&#123;</div><div class=\"line\">      <span class=\"keyword\">if</span>(errorCode == IWXBridge.DESTROY_INSTANCE)&#123;</div><div class=\"line\">        WXLogUtils.w(<span class=\"string\">\"destroyInstance :\"</span>+instanceId+<span class=\"string\">\" JSF must stop callNative\"</span>);</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> errorCode;</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure>\n<h2 id=\"Weex-native-响应-C-的调用\"><a href=\"#Weex-native-响应-C-的调用\" class=\"headerlink\" title=\"Weex native 响应 C++ 的调用\"></a>Weex native 响应 C++ 的调用</h2><p>WXBridgeManager.callNative() 对 tasks 进行分发，我们来看看如何分发的：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\">JSONArray array = JSON.parseArray(tasks);</div><div class=\"line\">... ...</div><div class=\"line\"><span class=\"keyword\">int</span> size = array.size();</div><div class=\"line\">    <span class=\"keyword\">if</span> (size &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">      <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">        JSONObject task;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; size; ++i) &#123;</div><div class=\"line\">          task = (JSONObject) array.get(i);</div><div class=\"line\">          <span class=\"keyword\">if</span> (task != <span class=\"keyword\">null</span> &amp;&amp; WXSDKManager.getInstance().getSDKInstance(instanceId) != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            Object target = task.get(MODULE);</div><div class=\"line\">            <span class=\"keyword\">if</span>(target != <span class=\"keyword\">null</span>)&#123;</div><div class=\"line\">              <span class=\"keyword\">if</span>(WXDomModule.WXDOM.equals(target))&#123;</div><div class=\"line\">                WXDomModule dom = getDomModule(instanceId);</div><div class=\"line\">                dom.callDomMethod(task);</div><div class=\"line\">              &#125;<span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                WXModuleManager.callModuleMethod(instanceId, (String) target,</div><div class=\"line\">                    (String) task.get(METHOD), (JSONArray) task.get(ARGS));</div><div class=\"line\">              &#125;</div><div class=\"line\">            &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(task.get(COMPONENT) != <span class=\"keyword\">null</span>)&#123;</div><div class=\"line\">              <span class=\"comment\">//call component</span></div><div class=\"line\">              WXDomModule dom = getDomModule(instanceId);</div><div class=\"line\">              dom.invokeMethod((String) task.get(REF),(String) task.get(METHOD),(JSONArray) task.get(ARGS));</div><div class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">              <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"unknown callNative\"</span>);</div><div class=\"line\">            &#125;</div><div class=\"line\">          &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">        WXLogUtils.e(<span class=\"string\">\"[WXBridgeManager] callNative exception: \"</span>, e);</div><div class=\"line\">        commitJSBridgeAlarmMonitor(instanceId, WXErrorCode.WX_ERR_INVOKE_NATIVE,<span class=\"string\">\"[WXBridgeManager] callNative exception \"</span>+e.getCause());</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    ... ...</div></pre></td></tr></table></figure>\n<p>分发规则，对 tasks 逐个分类处理：</p>\n<ul>\n<li>如果是 module:<ul>\n<li>如果 是 dom：执行 WXDomModule.callDomMethod()；</li>\n<li>如果 不是 dom (普通的WXModule) : 执行WXModuleManager.callModuleMethod()</li>\n</ul>\n</li>\n<li>如果是 component：<ul>\n<li>调用 WXDomModule.invokeMethod()</li>\n</ul>\n</li>\n</ul>\n<p>task 数据格式（json），如图：<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/weex%20debug%E5%9B%BE.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure></p>\n<p>这里只分析第一种情况（其他相似）：<br>WXDomModule.callDomMethod()：<br>会根据 task 的 method 属性分类处理，此处只分析一个：CREATE_BODY：<br>会继续调用 createBody() 方法，将 wxSDKInstance.id 和 task的args 信息发送给WXDomHandler。<br>WXDomHandler 的 handleMessage() 中也有很多分类处理，对于WX_DOM_CREATE_BODY：会执行：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">mWXDomManager.createBody(task.instanceId, (JSONObject) task.args.get(<span class=\"number\">0</span>));</div></pre></td></tr></table></figure></p>\n<p>具体可参考 WXDomModule、WXDomHandler 类分析<br>这个时候，就回到我们之前说过的 WXDomStatement 的流程了，WXDomStatement会添加dom 节点（addDomInternal() ），在 addDomInternal 过程中，对dom节点又是一通猛烈的操作：根节点（root节点的准备工作），普通节点（add到父节点下）。<br>然后，对 dom 对象 进行遍历操作（递归）：domObject.traverseTree()，在dom 线程创建 component，生成 component 树（也是递归操作：通过WXRenderStatement.generateComponentTree() ）。<br>对于每个dom节点都会进行 setLayout()、setExtra()、setPadding()，可以去看看compent.setLayout()，就是去使用Android的API 对view进布局和绘制，此处不再贴代码。<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/weex%20component%20%E6%96%B9%E6%B3%95.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ul>\n<li>WXBridge 是 Android 与 底层 C++ 的衔接处，Android &lt;=&gt; C++ 的交互，及方法接口都在此类中，的确起到了见名知义的效果</li>\n<li>Weex Android SDK 是使用 Android的API（Java层），实现了view的布局、绘制。并不是依靠 底层so包实现，与IOS的sdk实现方式不同（听同事说……）</li>\n<li>component 处置 weex 的view绘制、布局过程，和Android native处理view的流程十分相似，具体可以参考后面的链接（阿里大神也分析过）</li>\n</ul>\n<p><br></p>\n<p>参考：<br><a href=\"http://www.jianshu.com/p/3160a0297345\" target=\"_blank\" rel=\"external\">http://www.jianshu.com/p/3160a0297345</a></p>\n","excerpt":"","more":"<blockquote>\n<p> <strong>Weex 渲染页面过程</strong></p>\n</blockquote>\n<h2 id=\"weex-渲染入口-render\"><a href=\"#weex-渲染入口-render\" class=\"headerlink\" title=\"weex 渲染入口 render()\"></a>weex 渲染入口 render()</h2><p>渲染过程从 WXSDKInstance.render() 开始追溯，render()方法是异步执行渲染工作的。render()重载的方法比较多，此处介绍最基础的一个。<br>参数代表的含义：</p>\n<ul>\n<li>pageName：用于查看日志，渲染的哪个页面作为标识</li>\n<li>template：加载的本地的或远程的 js（we文件被weex transform后的 js）</li>\n<li>options：配置信息，包括系统版本、app版本、设备信息等</li>\n<li>jsonInitData：用于渲染的初始数据</li>\n<li>flag：监听渲染的时机：<ul>\n<li>APPEND_ASYNC：渲染完第一个view后，IWXRenderListener.onViewCreated()调用</li>\n<li>APPEND_ONCE：渲染完整个view tree后，onViewCreated()调用</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">wxSDKInstance.render(</div><div class=\"line\">      getPageName(),</div><div class=\"line\">      template,</div><div class=\"line\">      options,</div><div class=\"line\">      jsonInitData,</div><div class=\"line\">      ScreenUtil.getDisplayWidth(<span class=\"keyword\">this</span>),</div><div class=\"line\">      ScreenUtil.getDisplayHeight(<span class=\"keyword\">this</span>),</div><div class=\"line\">      WXRenderStrategy.APPEND_ASYNC);</div></pre></td></tr></table></figure>\n<p>接着，渲染工作真正开始于 renderInternal()：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">ensureRenderArchor</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(mRenderContainer == <span class=\"keyword\">null</span>)&#123;</div><div class=\"line\">      mRenderContainer = <span class=\"keyword\">new</span> RenderContainer(getContext());</div><div class=\"line\">      mRenderContainer.setLayoutParams(<span class=\"keyword\">new</span> ViewGroup.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT));</div><div class=\"line\">      mRenderContainer.setBackgroundColor(Color.TRANSPARENT);</div><div class=\"line\">      mRenderContainer.setSDKInstance(<span class=\"keyword\">this</span>);</div><div class=\"line\">      mRenderContainer.addOnLayoutChangeListener(<span class=\"keyword\">this</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure>\n<p>会进行 mRenderContainer 的初始化，RenderContainer 是一个 weex 扩展的 FrameLayout，后期操作，会在这个 container 中添加view元素。<br>我们接着看 render 过程，WXSDKManager.createInstance() 创建实例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">createInstance</span><span class=\"params\">(WXSDKInstance instance, String code, Map&lt;String, Object&gt; options, String jsonInitData)</span> </span>&#123;</div><div class=\"line\">     mWXRenderManager.registerInstance(instance);</div><div class=\"line\">     mBridgeManager.createInstance(instance.getInstanceId(), code, options, jsonInitData);</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure>\n<p>此过程中，WXRenderManager 注册实例，实际就是在 mRegistries（map<wxSDKInstanceid, wxRenderStatement>）中存储该实例的信息，并且创建 renderStatement。<br>mBridgeManager 创建实例时，WXModuleManager 会创建 DomModule，由WXDomManager进行创建，sDomModuleMap 存储该 wxSDKInstance 的WXDomModule。<br>然后，异步执行 invokeCreateInstance()，此过程还会执行 initFramework() 操作。initFramework() 后，会创建出一个 WXJSObject 将 wxsdkinstance相关的数据存储，组成一个数组的形式，传给执行 js 的方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">WXJSObject instanceIdObj = <span class=\"keyword\">new</span> WXJSObject(WXJSObject.String,</div><div class=\"line\">                instance.getInstanceId());</div><div class=\"line\">        WXJSObject instanceObj = <span class=\"keyword\">new</span> WXJSObject(WXJSObject.String,</div><div class=\"line\">                                                template);</div><div class=\"line\">        WXJSObject optionsObj = <span class=\"keyword\">new</span> WXJSObject(WXJSObject.JSON,</div><div class=\"line\">                options == <span class=\"keyword\">null</span> ? <span class=\"string\">\"&#123;&#125;\"</span></div><div class=\"line\">                        : WXJsonUtils.fromObjectToJSONString(options));</div><div class=\"line\">        WXJSObject dataObj = <span class=\"keyword\">new</span> WXJSObject(WXJSObject.JSON,</div><div class=\"line\">                data == <span class=\"keyword\">null</span> ? <span class=\"string\">\"&#123;&#125;\"</span> : data);</div><div class=\"line\">        WXJSObject[] args = &#123;instanceIdObj, instanceObj, optionsObj,</div><div class=\"line\">                dataObj&#125;;</div><div class=\"line\">        invokeExecJS(instance.getInstanceId(), <span class=\"keyword\">null</span>, METHOD_CREATE_INSTANCE, args,<span class=\"keyword\">false</span>);</div></pre></td></tr></table></figure>\n<p>然后，WXBridgeManager 会调用 mWXBridge.execJS() 去调用底层的 C++方法，执行js。</p>\n<h2 id=\"底层C-调用Weex-Android-功能\"><a href=\"#底层C-调用Weex-Android-功能\" class=\"headerlink\" title=\"底层C++ 调用Weex Android 功能\"></a>底层C++ 调用Weex Android 功能</h2><p>我们再来看看 c++ 代码实现的功能，以 callNative() 为例：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> *  This Function is a built-in function that JS bundle can execute</div><div class=\"line\"> *  to call native module.</div><div class=\"line\"> */</span></div><div class=\"line\">v8::Handle&lt;v8::Value&gt; callNative(<span class=\"keyword\">const</span> v8::Arguments &amp;args) &#123;</div><div class=\"line\"></div><div class=\"line\">    JNIEnv *env = getJNIEnv();</div><div class=\"line\">    <span class=\"comment\">//instacneID args[0]</span></div><div class=\"line\">    jstring jInstanceId = <span class=\"literal\">NULL</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!args[<span class=\"number\">0</span>].IsEmpty()) &#123;</div><div class=\"line\">        v8::String::<span class=\"function\">Utf8Value <span class=\"title\">instanceId</span><span class=\"params\">(args[<span class=\"number\">0</span>])</span></span>;</div><div class=\"line\">        jInstanceId = env-&gt;NewStringUTF(*instanceId);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">//task args[1]</span></div><div class=\"line\">    jbyteArray jTaskString = <span class=\"literal\">NULL</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!args[<span class=\"number\">1</span>].IsEmpty() &amp;&amp; args[<span class=\"number\">1</span>]-&gt;IsObject()) &#123;</div><div class=\"line\">        v8::Handle&lt;v8::Value&gt; obj[<span class=\"number\">1</span>];</div><div class=\"line\">        v8::Handle&lt;v8::Object&gt; global = V8context-&gt;Global();</div><div class=\"line\">        json = v8::Handle&lt;v8::Object&gt;::Cast(global-&gt;Get(v8::String::New(<span class=\"string\">\"JSON\"</span>)));</div><div class=\"line\">        json_stringify = v8::Handle&lt;v8::Function&gt;::Cast(json-&gt;Get(v8::String::New(<span class=\"string\">\"stringify\"</span>)));</div><div class=\"line\">        obj[<span class=\"number\">0</span>] = args[<span class=\"number\">1</span>];</div><div class=\"line\">        v8::Handle&lt;v8::Value&gt; ret = json_stringify-&gt;Call(json, <span class=\"number\">1</span>, obj);</div><div class=\"line\">        v8::String::<span class=\"function\">Utf8Value <span class=\"title\">str</span><span class=\"params\">(ret)</span></span>;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">int</span> strLen = <span class=\"built_in\">strlen</span>(ToCString(str));</div><div class=\"line\">        jTaskString = env-&gt;NewByteArray(strLen);</div><div class=\"line\">        env-&gt;SetByteArrayRegion(jTaskString, <span class=\"number\">0</span>, strLen,</div><div class=\"line\">                                <span class=\"keyword\">reinterpret_cast</span>&lt;<span class=\"keyword\">const</span> jbyte *&gt;(ToCString(str)));</div><div class=\"line\">        <span class=\"comment\">// jTaskString = env-&gt;NewStringUTF(ToCString(str));</span></div><div class=\"line\"></div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!args[<span class=\"number\">1</span>].IsEmpty() &amp;&amp; args[<span class=\"number\">1</span>]-&gt;IsString()) &#123;</div><div class=\"line\">        v8::String::Utf8Value tasks(args[<span class=\"number\">1</span>]);</div><div class=\"line\">        <span class=\"keyword\">int</span> strLen = <span class=\"built_in\">strlen</span>(*tasks);</div><div class=\"line\">        jTaskString = env-&gt;NewByteArray(strLen);</div><div class=\"line\">        env-&gt;SetByteArrayRegion(jTaskString, <span class=\"number\">0</span>, strLen, <span class=\"keyword\">reinterpret_cast</span>&lt;<span class=\"keyword\">const</span> jbyte *&gt;(*tasks));</div><div class=\"line\">        <span class=\"comment\">// jTaskString = env-&gt;NewStringUTF(*tasks);</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">//callback args[2]</span></div><div class=\"line\">    jstring jCallback = <span class=\"literal\">NULL</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!args[<span class=\"number\">2</span>].IsEmpty()) &#123;</div><div class=\"line\">        v8::String::<span class=\"function\">Utf8Value <span class=\"title\">callback</span><span class=\"params\">(args[<span class=\"number\">2</span>])</span></span>;</div><div class=\"line\">        jCallback = env-&gt;NewStringUTF(*callback);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (jCallNativeMethodId == <span class=\"literal\">NULL</span>) &#123;</div><div class=\"line\">        <span class=\"comment\">// 反射方式，拿到 weexsdk 的callNative方法的ID</span></div><div class=\"line\">        jCallNativeMethodId = env-&gt;GetMethodID(jBridgeClazz,</div><div class=\"line\">                                               <span class=\"string\">\"callNative\"</span>,</div><div class=\"line\">                                               <span class=\"string\">\"(Ljava/lang/String;[BLjava/lang/String;)I\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 调用 java 的 callNative 方法</span></div><div class=\"line\">    <span class=\"keyword\">int</span> flag = env-&gt;CallIntMethod(jThis, jCallNativeMethodId, jInstanceId, jTaskString, jCallback);</div><div class=\"line\">    <span class=\"keyword\">if</span> (flag == <span class=\"number\">-1</span>) &#123;</div><div class=\"line\">        LOGE(<span class=\"string\">\"instance destroy JFM must stop callNative\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    env-&gt;DeleteLocalRef(jTaskString);</div><div class=\"line\">    env-&gt;DeleteLocalRef(jInstanceId);</div><div class=\"line\">    env-&gt;DeleteLocalRef(jCallback);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> v8::Integer::New(flag);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>C++ 解析 js 代码后，返回来再调用 weex sdk 的 Android 代码，通过 JNI 提供的反射方式拿到方法的 id，并调用执行。<br>相对应的，我们找到 Android callNative() 代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">callNative</span><span class=\"params\">(String instanceId, String tasks, String callback)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">long</span> start = System.currentTimeMillis();</div><div class=\"line\">    WXSDKInstance instance = WXSDKManager.getInstance().getSDKInstance(instanceId);</div><div class=\"line\">    <span class=\"keyword\">if</span>(instance != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">      instance.firstScreenCreateInstanceTime(start);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">int</span> errorCode = IWXBridge.INSTANCE_RENDERING;</div><div class=\"line\">    <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">      <span class=\"comment\">// 通过 WXBridgeManager.callNative 进行 tasks 的分发执行</span></div><div class=\"line\">      errorCode = WXBridgeManager.getInstance().callNative(instanceId, tasks, callback);</div><div class=\"line\">    &#125;<span class=\"keyword\">catch</span> (Throwable e)&#123;</div><div class=\"line\">      <span class=\"comment\">//catch everything during call native.</span></div><div class=\"line\">      <span class=\"keyword\">if</span>(WXEnvironment.isApkDebugable())&#123;</div><div class=\"line\">        WXLogUtils.e(TAG,<span class=\"string\">\"callNative throw exception:\"</span>+e.getMessage());</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span>(instance != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">      instance.callNativeTime(System.currentTimeMillis() - start);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span>(WXEnvironment.isApkDebugable())&#123;</div><div class=\"line\">      <span class=\"keyword\">if</span>(errorCode == IWXBridge.DESTROY_INSTANCE)&#123;</div><div class=\"line\">        WXLogUtils.w(<span class=\"string\">\"destroyInstance :\"</span>+instanceId+<span class=\"string\">\" JSF must stop callNative\"</span>);</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> errorCode;</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure>\n<h2 id=\"Weex-native-响应-C-的调用\"><a href=\"#Weex-native-响应-C-的调用\" class=\"headerlink\" title=\"Weex native 响应 C++ 的调用\"></a>Weex native 响应 C++ 的调用</h2><p>WXBridgeManager.callNative() 对 tasks 进行分发，我们来看看如何分发的：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\">JSONArray array = JSON.parseArray(tasks);</div><div class=\"line\">... ...</div><div class=\"line\"><span class=\"keyword\">int</span> size = array.size();</div><div class=\"line\">    <span class=\"keyword\">if</span> (size &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">      <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">        JSONObject task;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; size; ++i) &#123;</div><div class=\"line\">          task = (JSONObject) array.get(i);</div><div class=\"line\">          <span class=\"keyword\">if</span> (task != <span class=\"keyword\">null</span> &amp;&amp; WXSDKManager.getInstance().getSDKInstance(instanceId) != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            Object target = task.get(MODULE);</div><div class=\"line\">            <span class=\"keyword\">if</span>(target != <span class=\"keyword\">null</span>)&#123;</div><div class=\"line\">              <span class=\"keyword\">if</span>(WXDomModule.WXDOM.equals(target))&#123;</div><div class=\"line\">                WXDomModule dom = getDomModule(instanceId);</div><div class=\"line\">                dom.callDomMethod(task);</div><div class=\"line\">              &#125;<span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                WXModuleManager.callModuleMethod(instanceId, (String) target,</div><div class=\"line\">                    (String) task.get(METHOD), (JSONArray) task.get(ARGS));</div><div class=\"line\">              &#125;</div><div class=\"line\">            &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(task.get(COMPONENT) != <span class=\"keyword\">null</span>)&#123;</div><div class=\"line\">              <span class=\"comment\">//call component</span></div><div class=\"line\">              WXDomModule dom = getDomModule(instanceId);</div><div class=\"line\">              dom.invokeMethod((String) task.get(REF),(String) task.get(METHOD),(JSONArray) task.get(ARGS));</div><div class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">              <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"unknown callNative\"</span>);</div><div class=\"line\">            &#125;</div><div class=\"line\">          &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">        WXLogUtils.e(<span class=\"string\">\"[WXBridgeManager] callNative exception: \"</span>, e);</div><div class=\"line\">        commitJSBridgeAlarmMonitor(instanceId, WXErrorCode.WX_ERR_INVOKE_NATIVE,<span class=\"string\">\"[WXBridgeManager] callNative exception \"</span>+e.getCause());</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    ... ...</div></pre></td></tr></table></figure>\n<p>分发规则，对 tasks 逐个分类处理：</p>\n<ul>\n<li>如果是 module:<ul>\n<li>如果 是 dom：执行 WXDomModule.callDomMethod()；</li>\n<li>如果 不是 dom (普通的WXModule) : 执行WXModuleManager.callModuleMethod()</li>\n</ul>\n</li>\n<li>如果是 component：<ul>\n<li>调用 WXDomModule.invokeMethod()</li>\n</ul>\n</li>\n</ul>\n<p>task 数据格式（json），如图：<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/weex%20debug%E5%9B%BE.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure></p>\n<p>这里只分析第一种情况（其他相似）：<br>WXDomModule.callDomMethod()：<br>会根据 task 的 method 属性分类处理，此处只分析一个：CREATE_BODY：<br>会继续调用 createBody() 方法，将 wxSDKInstance.id 和 task的args 信息发送给WXDomHandler。<br>WXDomHandler 的 handleMessage() 中也有很多分类处理，对于WX_DOM_CREATE_BODY：会执行：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">mWXDomManager.createBody(task.instanceId, (JSONObject) task.args.get(<span class=\"number\">0</span>));</div></pre></td></tr></table></figure></p>\n<p>具体可参考 WXDomModule、WXDomHandler 类分析<br>这个时候，就回到我们之前说过的 WXDomStatement 的流程了，WXDomStatement会添加dom 节点（addDomInternal() ），在 addDomInternal 过程中，对dom节点又是一通猛烈的操作：根节点（root节点的准备工作），普通节点（add到父节点下）。<br>然后，对 dom 对象 进行遍历操作（递归）：domObject.traverseTree()，在dom 线程创建 component，生成 component 树（也是递归操作：通过WXRenderStatement.generateComponentTree() ）。<br>对于每个dom节点都会进行 setLayout()、setExtra()、setPadding()，可以去看看compent.setLayout()，就是去使用Android的API 对view进布局和绘制，此处不再贴代码。<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/weex%20component%20%E6%96%B9%E6%B3%95.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ul>\n<li>WXBridge 是 Android 与 底层 C++ 的衔接处，Android &lt;=&gt; C++ 的交互，及方法接口都在此类中，的确起到了见名知义的效果</li>\n<li>Weex Android SDK 是使用 Android的API（Java层），实现了view的布局、绘制。并不是依靠 底层so包实现，与IOS的sdk实现方式不同（听同事说……）</li>\n<li>component 处置 weex 的view绘制、布局过程，和Android native处理view的流程十分相似，具体可以参考后面的链接（阿里大神也分析过）</li>\n</ul>\n<p><br/></p>\n<p>参考：<br><a href=\"http://www.jianshu.com/p/3160a0297345\">http://www.jianshu.com/p/3160a0297345</a></p>\n"},{"title":"对称、非对称加密技术初探","date":"2016-02-28T09:52:00.000Z","_content":"### 一、对称加密\n1. **对称加密简介**\n\n    对称加密算法所用到的基本的方法是：代换 和 置换。简单来说：（以早期的加密方式举例）\n    * 代换：是将明文字母替换成其他字母、数字或符号的方法\n\n        对于明文中的每一个字母，用字母表中k个字母来代替（允许循环，即a可以在z的后面）\n        > 例如：如果 k = 3，那么明文中的 a 在密文中就变 d ，b 就变成 e。这里 k 值充当密钥\n\n    * 置换：可以说对代换的一种改进，通过并不是通过固定的规则来替换字母，任意字母都可以替换为别的其他字母，但是一一对应的。例如（单表置换加密）：\n        > 明文：a b c d e f g\n        \n        > 密文：d c h n q i a\n    \n    以上是早期加密时用的简单的方法，其思想还是通过 替换 来进行加密的\n\n2. **对称加密过程**\n\n    ![](http://7xr1vo.com1.z0.glb.clouddn.com/%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86%E8%BF%87%E7%A8%8B.PNG)\n\n3. **常见对称加密算法**\n\n    * **DES**   \n    \n        采用64位的分组长度，和56位的密钥长度，将64位的输入经过一系列的变换得到64位的输出。加密解密使用了相同的密钥。\n        \n            * 注： 此算法可以被暴力破解，穷举即可解密，所以不再单纯使用 \n    * **3DES**\n\n        对DES的改进，使用多个密钥对DES进行三次加密，有些基于Internet的应用已经采纳了这种算法，如：PGP，S/MIME\n    * **AES**(高级加密标准)\n        \n        对DES的再次改进，性能不低于3DES， 它的密钥长度为128、192或256位，分组长度为128位\n    * **Blowfish算法**\n\n        一种可变密钥长度的分组加密算法，分组长度64位。迄今为止，该算法的安全性还没有受到挑战\n    * **RC5算法**\n    \n        参数可变的分组加密算法，此算法使用了三种运算：异或、加、循环\n\n### 二、非对称加密\n> 基于数学函数的算法，而不再是基于代换和置换技术，公钥加密算法是 非对称的\n\n> 根据加密算法 和 加密密钥 是推不出 解密密钥的\n\n1. **关于公钥、私钥**\n    \n    正确理解：\n\n        公钥是用于 加密 和 认证 的\n        私钥是用于 解密 和 签名 的\n        \n        * 这两个密钥，任意一个都可以用来加密，另一个用来解密\n        * 公钥是公开的\n    \n2. **非对称加密过程**\n\n    ![](http://7xr1vo.com1.z0.glb.clouddn.com/%E9%9D%9E%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86%E8%BF%87%E7%A8%8B.png)\n    \n3. **RSA简介**\n\n    第一个能用于数据加密也能用于数字签名的算法，RSA是一种分组密码\n    * 易于理解和操作，但安全性一直没有得到理论上的证明\n    * RSA的加密和解密时间是DES的上百倍，效率较低\n    \n    > 选取密钥的过程：\n\n        (1). 选取两个 大质数 p, q. 质数值越大，破解 RSA 就越困难，进行加密和解密的时间就越长\n        (2). 计算 n = p * q,  z = (p-1) * (q-1)\n        (3). 选取 e < n, 且与 z 互质（e 和 z没有公约数）\n        (4). 找到数 d, 满足 ed - 1 被 z 整除（ ((e * d) - 1) % n) == 0 ）\n        (5). 公钥：（n, e）;  私钥：（n, d）\n    > 加密、解密过程：\n    \n        (1). 甲方（发送方）：发送 m (发送数)，m < n,\n        (2). 发送时，用乙方（接收方）的公钥加密：密文 c = m^e % n\n        (3). 乙方：解密用自己的私钥，得到明文 m = c^d % n\n\n4. **其他非对称加密算法**\n\n    * ElGamal算法：基于公钥密码体制和椭圆曲线加密体系，既能用于数据加密，又能用于数字签名\n    * 背包加密算法：基于背包算法，但是大多数一次背包体制均被破译了，因此很少有人使用它\n    \n\n4. **散列(哈希)函数**\n    \n    是公开的函数，可以将任意长的串映射成一个固定长度的串，Hash值 由下面的函数 H 生成：\n        \n        h = H (M)\n\n        M: 变长的消息，H(M)是定长的 Hash值\n    常见的散列函数有： **MD5**，**SHA-1** \n    \n    * MD5：\n        \n        有广泛的应用，如在 Java API 中就有体现，但也不安全，有人专门将大量的明文和密文收集起来存至数据库中，用于暴力破解MD5。所以实际使用时，需 “加盐”\n    * SHA-1:\n\n        在Linux系统、Git中都有广泛的使用，它的原理类似于 MD4(MD5的前身)。\n        >说明： MD5 和 SHA-1被好多人称为 加密算法，其实这两个散列函数，是用于散列获得消息摘要的，严格来说，应该叫做 **消息摘要算法**\n5. **数字签名**\n\n    签名是用来验证 发送方的身份 和 数据的完整性(数据是否被第三方篡改)的\n    \n    签名分为：\n    * 普通数字签名（如：RSA，DES）\n    * 特殊数字签名（如：有盲签名，代理签名）\n    \n    **数字签名过程**：\n        \n        (1). 发送方 生成一对公钥和私钥，将自己的 公钥 发送给 接收方\n        (2). 发送方 将 要发送的消息 msg, 进行散列(MD5或者SHA-1)，得到 消息摘要\n        (3). 发送方 将 消息摘要 用自己的私钥加密，加密后的信息就是 数字签名\n        (4). 发送方 将 数字签名 附在 要发送的消息 msg' (是通过接收方的公钥加密后的) 的后面，再一起发送至 接收方\n    **数字签名的验证过程**：\n        \n        (1). 接收方 收到消息后，对消息 msg' 使用自己的私钥进行解密得到 msg\n        (2). 接收方 对 数字签名 使用 发送方的公钥解密，得到 消息摘要(之前是由消息经过散列得到)\n        (3). 接收方 使用相同的 散列函数(散列函数也是公开的)对 msg 进行散列，再计算得到一个 消息摘要\n        (4). 接收方 对比着两个 消息摘要 即可判断出 消息的完整性\n\n    > 身份的正确性：可通过 使用公钥能否解开数字签名 来判断\n\n    > 数据的完整性：可通过 对比两个消息摘要是否相同 来判断\n\n    ![](http://7xr1vo.com1.z0.glb.clouddn.com/%E6%95%B0%E5%AD%97%E7%AD%BE%E5%90%8D.png)\n    \n    \n------\n    \n    \n附(https,http2相关)：\nhttp://www.cnblogs.com/zhuqil/archive/2012/07/23/2604572.html\nhttps://segmentfault.com/a/1190000007219256","source":"_posts/对称、非对称加密技术初探.md","raw":"---\ntitle: 对称、非对称加密技术初探\ndate: 2016-02-28 17:52\ncategories: 网络\ntags: [加密, 签名]\n---\n### 一、对称加密\n1. **对称加密简介**\n\n    对称加密算法所用到的基本的方法是：代换 和 置换。简单来说：（以早期的加密方式举例）\n    * 代换：是将明文字母替换成其他字母、数字或符号的方法\n\n        对于明文中的每一个字母，用字母表中k个字母来代替（允许循环，即a可以在z的后面）\n        > 例如：如果 k = 3，那么明文中的 a 在密文中就变 d ，b 就变成 e。这里 k 值充当密钥\n\n    * 置换：可以说对代换的一种改进，通过并不是通过固定的规则来替换字母，任意字母都可以替换为别的其他字母，但是一一对应的。例如（单表置换加密）：\n        > 明文：a b c d e f g\n        \n        > 密文：d c h n q i a\n    \n    以上是早期加密时用的简单的方法，其思想还是通过 替换 来进行加密的\n\n2. **对称加密过程**\n\n    ![](http://7xr1vo.com1.z0.glb.clouddn.com/%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86%E8%BF%87%E7%A8%8B.PNG)\n\n3. **常见对称加密算法**\n\n    * **DES**   \n    \n        采用64位的分组长度，和56位的密钥长度，将64位的输入经过一系列的变换得到64位的输出。加密解密使用了相同的密钥。\n        \n            * 注： 此算法可以被暴力破解，穷举即可解密，所以不再单纯使用 \n    * **3DES**\n\n        对DES的改进，使用多个密钥对DES进行三次加密，有些基于Internet的应用已经采纳了这种算法，如：PGP，S/MIME\n    * **AES**(高级加密标准)\n        \n        对DES的再次改进，性能不低于3DES， 它的密钥长度为128、192或256位，分组长度为128位\n    * **Blowfish算法**\n\n        一种可变密钥长度的分组加密算法，分组长度64位。迄今为止，该算法的安全性还没有受到挑战\n    * **RC5算法**\n    \n        参数可变的分组加密算法，此算法使用了三种运算：异或、加、循环\n\n### 二、非对称加密\n> 基于数学函数的算法，而不再是基于代换和置换技术，公钥加密算法是 非对称的\n\n> 根据加密算法 和 加密密钥 是推不出 解密密钥的\n\n1. **关于公钥、私钥**\n    \n    正确理解：\n\n        公钥是用于 加密 和 认证 的\n        私钥是用于 解密 和 签名 的\n        \n        * 这两个密钥，任意一个都可以用来加密，另一个用来解密\n        * 公钥是公开的\n    \n2. **非对称加密过程**\n\n    ![](http://7xr1vo.com1.z0.glb.clouddn.com/%E9%9D%9E%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86%E8%BF%87%E7%A8%8B.png)\n    \n3. **RSA简介**\n\n    第一个能用于数据加密也能用于数字签名的算法，RSA是一种分组密码\n    * 易于理解和操作，但安全性一直没有得到理论上的证明\n    * RSA的加密和解密时间是DES的上百倍，效率较低\n    \n    > 选取密钥的过程：\n\n        (1). 选取两个 大质数 p, q. 质数值越大，破解 RSA 就越困难，进行加密和解密的时间就越长\n        (2). 计算 n = p * q,  z = (p-1) * (q-1)\n        (3). 选取 e < n, 且与 z 互质（e 和 z没有公约数）\n        (4). 找到数 d, 满足 ed - 1 被 z 整除（ ((e * d) - 1) % n) == 0 ）\n        (5). 公钥：（n, e）;  私钥：（n, d）\n    > 加密、解密过程：\n    \n        (1). 甲方（发送方）：发送 m (发送数)，m < n,\n        (2). 发送时，用乙方（接收方）的公钥加密：密文 c = m^e % n\n        (3). 乙方：解密用自己的私钥，得到明文 m = c^d % n\n\n4. **其他非对称加密算法**\n\n    * ElGamal算法：基于公钥密码体制和椭圆曲线加密体系，既能用于数据加密，又能用于数字签名\n    * 背包加密算法：基于背包算法，但是大多数一次背包体制均被破译了，因此很少有人使用它\n    \n\n4. **散列(哈希)函数**\n    \n    是公开的函数，可以将任意长的串映射成一个固定长度的串，Hash值 由下面的函数 H 生成：\n        \n        h = H (M)\n\n        M: 变长的消息，H(M)是定长的 Hash值\n    常见的散列函数有： **MD5**，**SHA-1** \n    \n    * MD5：\n        \n        有广泛的应用，如在 Java API 中就有体现，但也不安全，有人专门将大量的明文和密文收集起来存至数据库中，用于暴力破解MD5。所以实际使用时，需 “加盐”\n    * SHA-1:\n\n        在Linux系统、Git中都有广泛的使用，它的原理类似于 MD4(MD5的前身)。\n        >说明： MD5 和 SHA-1被好多人称为 加密算法，其实这两个散列函数，是用于散列获得消息摘要的，严格来说，应该叫做 **消息摘要算法**\n5. **数字签名**\n\n    签名是用来验证 发送方的身份 和 数据的完整性(数据是否被第三方篡改)的\n    \n    签名分为：\n    * 普通数字签名（如：RSA，DES）\n    * 特殊数字签名（如：有盲签名，代理签名）\n    \n    **数字签名过程**：\n        \n        (1). 发送方 生成一对公钥和私钥，将自己的 公钥 发送给 接收方\n        (2). 发送方 将 要发送的消息 msg, 进行散列(MD5或者SHA-1)，得到 消息摘要\n        (3). 发送方 将 消息摘要 用自己的私钥加密，加密后的信息就是 数字签名\n        (4). 发送方 将 数字签名 附在 要发送的消息 msg' (是通过接收方的公钥加密后的) 的后面，再一起发送至 接收方\n    **数字签名的验证过程**：\n        \n        (1). 接收方 收到消息后，对消息 msg' 使用自己的私钥进行解密得到 msg\n        (2). 接收方 对 数字签名 使用 发送方的公钥解密，得到 消息摘要(之前是由消息经过散列得到)\n        (3). 接收方 使用相同的 散列函数(散列函数也是公开的)对 msg 进行散列，再计算得到一个 消息摘要\n        (4). 接收方 对比着两个 消息摘要 即可判断出 消息的完整性\n\n    > 身份的正确性：可通过 使用公钥能否解开数字签名 来判断\n\n    > 数据的完整性：可通过 对比两个消息摘要是否相同 来判断\n\n    ![](http://7xr1vo.com1.z0.glb.clouddn.com/%E6%95%B0%E5%AD%97%E7%AD%BE%E5%90%8D.png)\n    \n    \n------\n    \n    \n附(https,http2相关)：\nhttp://www.cnblogs.com/zhuqil/archive/2012/07/23/2604572.html\nhttps://segmentfault.com/a/1190000007219256","slug":"对称、非对称加密技术初探","published":1,"updated":"2017-09-10T04:58:43.000Z","_id":"cizpjnf2w0019baqwqzs38hw0","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"一、对称加密\"><a href=\"#一、对称加密\" class=\"headerlink\" title=\"一、对称加密\"></a>一、对称加密</h3><ol>\n<li><p><strong>对称加密简介</strong></p>\n<p> 对称加密算法所用到的基本的方法是：代换 和 置换。简单来说：（以早期的加密方式举例）</p>\n<ul>\n<li><p>代换：是将明文字母替换成其他字母、数字或符号的方法</p>\n<p>  对于明文中的每一个字母，用字母表中k个字母来代替（允许循环，即a可以在z的后面）</p>\n<blockquote>\n<p>例如：如果 k = 3，那么明文中的 a 在密文中就变 d ，b 就变成 e。这里 k 值充当密钥</p>\n</blockquote>\n</li>\n<li><p>置换：可以说对代换的一种改进，通过并不是通过固定的规则来替换字母，任意字母都可以替换为别的其他字母，但是一一对应的。例如（单表置换加密）：</p>\n<blockquote>\n<p>明文：a b c d e f g</p>\n<p>密文：d c h n q i a</p>\n</blockquote>\n<p>以上是早期加密时用的简单的方法，其思想还是通过 替换 来进行加密的</p>\n</li>\n</ul>\n</li>\n<li><p><strong>对称加密过程</strong></p>\n<p> <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86%E8%BF%87%E7%A8%8B.PNG\" alt=\"\"></p>\n</li>\n<li><p><strong>常见对称加密算法</strong></p>\n<ul>\n<li><p><strong>DES</strong>   </p>\n<p>  采用64位的分组长度，和56位的密钥长度，将64位的输入经过一系列的变换得到64位的输出。加密解密使用了相同的密钥。</p>\n<pre><code>* 注： 此算法可以被暴力破解，穷举即可解密，所以不再单纯使用 \n</code></pre></li>\n<li><p><strong>3DES</strong></p>\n<p>  对DES的改进，使用多个密钥对DES进行三次加密，有些基于Internet的应用已经采纳了这种算法，如：PGP，S/MIME</p>\n</li>\n<li><p><strong>AES</strong>(高级加密标准)</p>\n<p>  对DES的再次改进，性能不低于3DES， 它的密钥长度为128、192或256位，分组长度为128位</p>\n</li>\n<li><p><strong>Blowfish算法</strong></p>\n<p>  一种可变密钥长度的分组加密算法，分组长度64位。迄今为止，该算法的安全性还没有受到挑战</p>\n</li>\n<li><p><strong>RC5算法</strong></p>\n<p>  参数可变的分组加密算法，此算法使用了三种运算：异或、加、循环</p>\n</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"二、非对称加密\"><a href=\"#二、非对称加密\" class=\"headerlink\" title=\"二、非对称加密\"></a>二、非对称加密</h3><blockquote>\n<p>基于数学函数的算法，而不再是基于代换和置换技术，公钥加密算法是 非对称的</p>\n<p>根据加密算法 和 加密密钥 是推不出 解密密钥的</p>\n</blockquote>\n<ol>\n<li><p><strong>关于公钥、私钥</strong></p>\n<p> 正确理解：</p>\n<pre><code>公钥是用于 加密 和 认证 的\n私钥是用于 解密 和 签名 的\n\n* 这两个密钥，任意一个都可以用来加密，另一个用来解密\n* 公钥是公开的\n</code></pre></li>\n<li><p><strong>非对称加密过程</strong></p>\n<p> <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/%E9%9D%9E%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86%E8%BF%87%E7%A8%8B.png\" alt=\"\"></p>\n</li>\n<li><p><strong>RSA简介</strong></p>\n<p> 第一个能用于数据加密也能用于数字签名的算法，RSA是一种分组密码</p>\n<ul>\n<li>易于理解和操作，但安全性一直没有得到理论上的证明</li>\n<li><p>RSA的加密和解密时间是DES的上百倍，效率较低</p>\n<blockquote>\n<p>选取密钥的过程：</p>\n</blockquote>\n<p>  (1). 选取两个 大质数 p, q. 质数值越大，破解 RSA 就越困难，进行加密和解密的时间就越长<br>  (2). 计算 n = p <em> q,  z = (p-1) </em> (q-1)<br>  (3). 选取 e &lt; n, 且与 z 互质（e 和 z没有公约数）<br>  (4). 找到数 d, 满足 ed - 1 被 z 整除（ ((e * d) - 1) % n) == 0 ）<br>  (5). 公钥：（n, e）;  私钥：（n, d）</p>\n<blockquote>\n<p>加密、解密过程：</p>\n</blockquote>\n<p>  (1). 甲方（发送方）：发送 m (发送数)，m &lt; n,<br>  (2). 发送时，用乙方（接收方）的公钥加密：密文 c = m^e % n<br>  (3). 乙方：解密用自己的私钥，得到明文 m = c^d % n</p>\n</li>\n</ul>\n</li>\n<li><p><strong>其他非对称加密算法</strong></p>\n<ul>\n<li>ElGamal算法：基于公钥密码体制和椭圆曲线加密体系，既能用于数据加密，又能用于数字签名</li>\n<li>背包加密算法：基于背包算法，但是大多数一次背包体制均被破译了，因此很少有人使用它</li>\n</ul>\n</li>\n</ol>\n<ol>\n<li><p><strong>散列(哈希)函数</strong></p>\n<p> 是公开的函数，可以将任意长的串映射成一个固定长度的串，Hash值 由下面的函数 H 生成：</p>\n<pre><code>h = H (M)\n\nM: 变长的消息，H(M)是定长的 Hash值\n</code></pre><p> 常见的散列函数有： <strong>MD5</strong>，<strong>SHA-1</strong> </p>\n<ul>\n<li><p>MD5：</p>\n<p>  有广泛的应用，如在 Java API 中就有体现，但也不安全，有人专门将大量的明文和密文收集起来存至数据库中，用于暴力破解MD5。所以实际使用时，需 “加盐”</p>\n</li>\n<li><p>SHA-1:</p>\n<p>  在Linux系统、Git中都有广泛的使用，它的原理类似于 MD4(MD5的前身)。</p>\n<blockquote>\n<p>说明： MD5 和 SHA-1被好多人称为 加密算法，其实这两个散列函数，是用于散列获得消息摘要的，严格来说，应该叫做 <strong>消息摘要算法</strong></p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li><p><strong>数字签名</strong></p>\n<p> 签名是用来验证 发送方的身份 和 数据的完整性(数据是否被第三方篡改)的</p>\n<p> 签名分为：</p>\n<ul>\n<li>普通数字签名（如：RSA，DES）</li>\n<li><p>特殊数字签名（如：有盲签名，代理签名）</p>\n<p><strong>数字签名过程</strong>：</p>\n<p>  (1). 发送方 生成一对公钥和私钥，将自己的 公钥 发送给 接收方<br>  (2). 发送方 将 要发送的消息 msg, 进行散列(MD5或者SHA-1)，得到 消息摘要<br>  (3). 发送方 将 消息摘要 用自己的私钥加密，加密后的信息就是 数字签名<br>  (4). 发送方 将 数字签名 附在 要发送的消息 msg’ (是通过接收方的公钥加密后的) 的后面，再一起发送至 接收方<br><strong>数字签名的验证过程</strong>：</p>\n<p>  (1). 接收方 收到消息后，对消息 msg’ 使用自己的私钥进行解密得到 msg<br>  (2). 接收方 对 数字签名 使用 发送方的公钥解密，得到 消息摘要(之前是由消息经过散列得到)<br>  (3). 接收方 使用相同的 散列函数(散列函数也是公开的)对 msg 进行散列，再计算得到一个 消息摘要<br>  (4). 接收方 对比着两个 消息摘要 即可判断出 消息的完整性</p>\n<blockquote>\n<p>身份的正确性：可通过 使用公钥能否解开数字签名 来判断</p>\n<p>数据的完整性：可通过 对比两个消息摘要是否相同 来判断</p>\n</blockquote>\n<p><img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/%E6%95%B0%E5%AD%97%E7%AD%BE%E5%90%8D.png\" alt=\"\"></p>\n</li>\n</ul>\n</li>\n</ol>\n<hr>\n<p>附(https,http2相关)：<br><a href=\"http://www.cnblogs.com/zhuqil/archive/2012/07/23/2604572.html\" target=\"_blank\" rel=\"external\">http://www.cnblogs.com/zhuqil/archive/2012/07/23/2604572.html</a><br><a href=\"https://segmentfault.com/a/1190000007219256\" target=\"_blank\" rel=\"external\">https://segmentfault.com/a/1190000007219256</a></p>\n","excerpt":"","more":"<h3 id=\"一、对称加密\"><a href=\"#一、对称加密\" class=\"headerlink\" title=\"一、对称加密\"></a>一、对称加密</h3><ol>\n<li><p><strong>对称加密简介</strong></p>\n<p> 对称加密算法所用到的基本的方法是：代换 和 置换。简单来说：（以早期的加密方式举例）</p>\n<ul>\n<li><p>代换：是将明文字母替换成其他字母、数字或符号的方法</p>\n<p>  对于明文中的每一个字母，用字母表中k个字母来代替（允许循环，即a可以在z的后面）</p>\n<blockquote>\n<p>例如：如果 k = 3，那么明文中的 a 在密文中就变 d ，b 就变成 e。这里 k 值充当密钥</p>\n</blockquote>\n</li>\n<li><p>置换：可以说对代换的一种改进，通过并不是通过固定的规则来替换字母，任意字母都可以替换为别的其他字母，但是一一对应的。例如（单表置换加密）：</p>\n<blockquote>\n<p>明文：a b c d e f g</p>\n<p>密文：d c h n q i a</p>\n</blockquote>\n<p>以上是早期加密时用的简单的方法，其思想还是通过 替换 来进行加密的</p>\n</li>\n</ul>\n</li>\n<li><p><strong>对称加密过程</strong></p>\n<p> <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86%E8%BF%87%E7%A8%8B.PNG\" alt=\"\"></p>\n</li>\n<li><p><strong>常见对称加密算法</strong></p>\n<ul>\n<li><p><strong>DES</strong>   </p>\n<p>  采用64位的分组长度，和56位的密钥长度，将64位的输入经过一系列的变换得到64位的输出。加密解密使用了相同的密钥。</p>\n<pre><code>* 注： 此算法可以被暴力破解，穷举即可解密，所以不再单纯使用 \n</code></pre></li>\n<li><p><strong>3DES</strong></p>\n<p>  对DES的改进，使用多个密钥对DES进行三次加密，有些基于Internet的应用已经采纳了这种算法，如：PGP，S/MIME</p>\n</li>\n<li><p><strong>AES</strong>(高级加密标准)</p>\n<p>  对DES的再次改进，性能不低于3DES， 它的密钥长度为128、192或256位，分组长度为128位</p>\n</li>\n<li><p><strong>Blowfish算法</strong></p>\n<p>  一种可变密钥长度的分组加密算法，分组长度64位。迄今为止，该算法的安全性还没有受到挑战</p>\n</li>\n<li><p><strong>RC5算法</strong></p>\n<p>  参数可变的分组加密算法，此算法使用了三种运算：异或、加、循环</p>\n</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"二、非对称加密\"><a href=\"#二、非对称加密\" class=\"headerlink\" title=\"二、非对称加密\"></a>二、非对称加密</h3><blockquote>\n<p>基于数学函数的算法，而不再是基于代换和置换技术，公钥加密算法是 非对称的</p>\n<p>根据加密算法 和 加密密钥 是推不出 解密密钥的</p>\n</blockquote>\n<ol>\n<li><p><strong>关于公钥、私钥</strong></p>\n<p> 正确理解：</p>\n<pre><code>公钥是用于 加密 和 认证 的\n私钥是用于 解密 和 签名 的\n\n* 这两个密钥，任意一个都可以用来加密，另一个用来解密\n* 公钥是公开的\n</code></pre></li>\n<li><p><strong>非对称加密过程</strong></p>\n<p> <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/%E9%9D%9E%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86%E8%BF%87%E7%A8%8B.png\" alt=\"\"></p>\n</li>\n<li><p><strong>RSA简介</strong></p>\n<p> 第一个能用于数据加密也能用于数字签名的算法，RSA是一种分组密码</p>\n<ul>\n<li>易于理解和操作，但安全性一直没有得到理论上的证明</li>\n<li><p>RSA的加密和解密时间是DES的上百倍，效率较低</p>\n<blockquote>\n<p>选取密钥的过程：</p>\n</blockquote>\n<p>  (1). 选取两个 大质数 p, q. 质数值越大，破解 RSA 就越困难，进行加密和解密的时间就越长<br>  (2). 计算 n = p <em> q,  z = (p-1) </em> (q-1)<br>  (3). 选取 e &lt; n, 且与 z 互质（e 和 z没有公约数）<br>  (4). 找到数 d, 满足 ed - 1 被 z 整除（ ((e * d) - 1) % n) == 0 ）<br>  (5). 公钥：（n, e）;  私钥：（n, d）</p>\n<blockquote>\n<p>加密、解密过程：</p>\n</blockquote>\n<p>  (1). 甲方（发送方）：发送 m (发送数)，m &lt; n,<br>  (2). 发送时，用乙方（接收方）的公钥加密：密文 c = m^e % n<br>  (3). 乙方：解密用自己的私钥，得到明文 m = c^d % n</p>\n</li>\n</ul>\n</li>\n<li><p><strong>其他非对称加密算法</strong></p>\n<ul>\n<li>ElGamal算法：基于公钥密码体制和椭圆曲线加密体系，既能用于数据加密，又能用于数字签名</li>\n<li>背包加密算法：基于背包算法，但是大多数一次背包体制均被破译了，因此很少有人使用它</li>\n</ul>\n</li>\n</ol>\n<ol>\n<li><p><strong>散列(哈希)函数</strong></p>\n<p> 是公开的函数，可以将任意长的串映射成一个固定长度的串，Hash值 由下面的函数 H 生成：</p>\n<pre><code>h = H (M)\n\nM: 变长的消息，H(M)是定长的 Hash值\n</code></pre><p> 常见的散列函数有： <strong>MD5</strong>，<strong>SHA-1</strong> </p>\n<ul>\n<li><p>MD5：</p>\n<p>  有广泛的应用，如在 Java API 中就有体现，但也不安全，有人专门将大量的明文和密文收集起来存至数据库中，用于暴力破解MD5。所以实际使用时，需 “加盐”</p>\n</li>\n<li><p>SHA-1:</p>\n<p>  在Linux系统、Git中都有广泛的使用，它的原理类似于 MD4(MD5的前身)。</p>\n<blockquote>\n<p>说明： MD5 和 SHA-1被好多人称为 加密算法，其实这两个散列函数，是用于散列获得消息摘要的，严格来说，应该叫做 <strong>消息摘要算法</strong></p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li><p><strong>数字签名</strong></p>\n<p> 签名是用来验证 发送方的身份 和 数据的完整性(数据是否被第三方篡改)的</p>\n<p> 签名分为：</p>\n<ul>\n<li>普通数字签名（如：RSA，DES）</li>\n<li><p>特殊数字签名（如：有盲签名，代理签名）</p>\n<p><strong>数字签名过程</strong>：</p>\n<p>  (1). 发送方 生成一对公钥和私钥，将自己的 公钥 发送给 接收方<br>  (2). 发送方 将 要发送的消息 msg, 进行散列(MD5或者SHA-1)，得到 消息摘要<br>  (3). 发送方 将 消息摘要 用自己的私钥加密，加密后的信息就是 数字签名<br>  (4). 发送方 将 数字签名 附在 要发送的消息 msg’ (是通过接收方的公钥加密后的) 的后面，再一起发送至 接收方<br><strong>数字签名的验证过程</strong>：</p>\n<p>  (1). 接收方 收到消息后，对消息 msg’ 使用自己的私钥进行解密得到 msg<br>  (2). 接收方 对 数字签名 使用 发送方的公钥解密，得到 消息摘要(之前是由消息经过散列得到)<br>  (3). 接收方 使用相同的 散列函数(散列函数也是公开的)对 msg 进行散列，再计算得到一个 消息摘要<br>  (4). 接收方 对比着两个 消息摘要 即可判断出 消息的完整性</p>\n<blockquote>\n<p>身份的正确性：可通过 使用公钥能否解开数字签名 来判断</p>\n<p>数据的完整性：可通过 对比两个消息摘要是否相同 来判断</p>\n</blockquote>\n<p><img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/%E6%95%B0%E5%AD%97%E7%AD%BE%E5%90%8D.png\" alt=\"\"></p>\n</li>\n</ul>\n</li>\n</ol>\n<hr>\n<p>附(https,http2相关)：<br><a href=\"http://www.cnblogs.com/zhuqil/archive/2012/07/23/2604572.html\">http://www.cnblogs.com/zhuqil/archive/2012/07/23/2604572.html</a><br><a href=\"https://segmentfault.com/a/1190000007219256\">https://segmentfault.com/a/1190000007219256</a></p>\n"},{"title":"instant run 相关分析","date":"2016-12-17T05:00:00.000Z","_content":"Android Studio 2.0 引入了即时编译功能：instant run，一定程度上进行了增量编译、增量更新代码，节省了开发耗时（喝咖啡的时间）。\n下面具体分析下instant run相关工作流程和相关的源码\n\n### instant run 使用\n#### 版本要求\nGradle 2.0 以上\nbuild.gradle：minSdkVersion 15 以上（设置21以上可获得最佳性能）\nAndroid 5.0以上的手机或模拟器\n\n#### 使用\n首先确认开启instant run，在settings中搜索instant run，可看到相关设置，默认instant run功能是开启的\n![](http://7xr1vo.com1.z0.glb.clouddn.com/Image.png)\n\n当第一次点击 run 按钮 ![](http://7xr1vo.com1.z0.glb.clouddn.com/Image1.png)，进行第一次编译打包。\napk成功安装之后，再观察工具栏，run按钮发生了变化：![](http://7xr1vo.com1.z0.glb.clouddn.com/Image2.png)\n\n然后我们随意修改一部分代码，点击运行，可看到手机屏幕上弹出toast，提示代码已经改变了，可看到最新的运行效果。使用起来也比较方便、快捷。\n\n#### 更新方式\n * 热交换 hot swap\n更改现有方法的实现代码；不会重新初始化正在运行的app，不要做重启app，activity的操作，即可看到最新代码运行结果\n * 温交换 warm swap\n更改或移除当前的资源；activity会自动重启（小闪烁），即可看到最新运行结果\n * 冷交换 cold swap\n 对代码有结构性的更改（字段更改、类继承关系、清单文件更改）；此时会重启app\n\n![](http://7xr1vo.com1.z0.glb.clouddn.com/1-Y-gIucAGyqQscMdXuHaSiA.png)\n\n参考：\nhttps://developer.android.com/studio/run/index.html?hl=zh-cn\nhttps://medium.com/google-developers/instant-run-how-does-it-work-294a1633367f#.go1u6yq2o\n\n### 过程分析\n#### 第一次打包\ninstant run 第一次编译打包流程，会执行下面的工作\n![](http://7xr1vo.com1.z0.glb.clouddn.com/1-U2tXGUWaeDU7L3u9Z_U0fw.png)\n\n先来看看生成的apk：\n![](http://7xr1vo.com1.z0.glb.clouddn.com/instant%20run%20apk.png)\n \n 多出了 instant-run.zip文件，那它里面是什么内容呢？\n ![](http://7xr1vo.com1.z0.glb.clouddn.com/instant%20run%20zip%20class.png)\n instant-run.zip里的dex文件，是我们真正的业务代码\n\n 那instant run 相关的类呢，反而跑到了外层的classes.dex和classes2.dex中。\n \n![](http://7xr1vo.com1.z0.glb.clouddn.com/%E6%97%A0%E6%A0%87%E9%A2%98.png)\n![](http://7xr1vo.com1.z0.glb.clouddn.com/instant%20run%20%E7%9B%B8%E5%85%B3jar.png)\n\n实际上这2个dex中的内容是instant-run.jar和instant-run-bootstrap.jar 的内容（自己可反编译出来看看）：\n\n**就是说，第一次运行打包时候，是将 instant-run.jar 和 instant-run-bootstrap.jar 2个jar 变成 2个dex文件，真正的业务代码编译后整合到别的dex中，然后放在了instant-run.zip中**\n> classes.dex  ->   instant-run.jar &nbsp;&nbsp;&nbsp;&nbsp; instant run 相关api类\n> classes2.dex  ->  instant-run-bootstrap.jar   &nbsp;&nbsp;  AppInfo.class\n\n再来看看清单文件，application 被替换成 BootstrapApplication：\n![](http://7xr1vo.com1.z0.glb.clouddn.com/instant%20run%20application.png)\n\n#### instant run 代码分析\n##### attachBaseContext() 中执行的三个步骤\n首先来观察下该类下的 attachBaseContext()方法，其中做了3个比较重要的事情：\ncreateResources() 、setupClassLoaders()、createRealApplication()\n\n* createResources() \n主要是判断资源resource.ap_是否改变，然后保存resource.ap_的路径到externalResourcePath中\n* setupClassLoaders()\n设置instant run 相关的classLoader，及其继承关系（PathClassLoader -> BootClassLoader   变为  PathClassLoader -> IncrementalClassLoader -> BootClassLoader）\n* createRealApplication()\n进行application 的相关替换，当前app的application变为realApplication；\n反射的方式拿到 真实的 Application，通过AppInfo相关字段进行获取\n\n\n下面我们分析一下setClassLoader详细过程：\n主要经历了以下的方法：\n![](http://7xr1vo.com1.z0.glb.clouddn.com/instant%20run%20%E8%AE%BE%E7%BD%AE%E7%88%B6classloader%E8%BF%87%E7%A8%8B.png)\n这几个ClassLoader类定义的逻辑关系如下：\n![](http://7xr1vo.com1.z0.glb.clouddn.com/instant-run%E7%9B%B8%E5%85%B3classLoader%E5%AE%9A%E4%B9%89.png)\nfindClass过程依次委托给 父ClassLoader，最后是让PathClassLoader去加载类\n\n##### onCreate() 过程\n* 通过MonkeyPatcher 替换当前的 application 为 realApplication\n包含ActivityThread中相应的Application 都替换成 realApplication\n* 替换相应的资源resource\n替换当前app的assetManager，资源相关的变量等等（期间都是用反射的方式）\n* Server 创建，建立Socket连接，开启连接\n\n##### Server 部署工作\n在Server 建立起连接后，三种部署工作（hot swap、warm swap、cold swap），都是通过Server进行操作。具体在那种情形下进行哪种交换，源码中有具体实现：\n\n``` java\nprivate int handlePatches(List<ApplicationPatch> paramList, boolean paramBoolean, int paramInt) {\n    if (paramBoolean) {\n        FileManager.startUpdate();\n    }\n    Iterator localIterator = paramList.iterator();\n    while (localIterator.hasNext()) {\n        Object localObject = (ApplicationPatch) localIterator.next();\n        String str = ((ApplicationPatch) localObject).getPath();\n        if (str.endsWith(\".dex\")) {// 冷交换\n            handleColdSwapPatch((ApplicationPatch) localObject);\n            int j = 0;\n            localObject = paramList.iterator();\n            do {\n                i = j;\n                if (!((Iterator) localObject).hasNext()) {\n                    break;\n                }\n            }\n            while (!((ApplicationPatch) ((Iterator) localObject).next()).getPath().equals(\"classes.dex.3\"));\n            int i = 1;\n            if (i == 0) {\n                paramInt = 3;\n            }\n        } else if (str.equals(\"classes.dex.3\")) {// 热交换\n            paramInt = handleHotSwapPatch(paramInt, (ApplicationPatch) localObject);\n        } else if (isResourcePath(str)) {// 资源：温交换\n            paramInt = handleResourcePatch(paramInt, (ApplicationPatch) localObject, str);\n        }\n    }\n    if (paramBoolean) {\n        FileManager.finishUpdate(true);\n    }\n    return paramInt;\n}\n```\n### 代码热更新流程\n在我们增加一行代码后，点击运行，我们来观察生成的类的变化\n在 build 目录下，transforms 中有生成相关的代码\n![](http://7xr1vo.com1.z0.glb.clouddn.com/instant-run%E6%9C%89%E4%BB%A3%E7%A0%81%E5%8F%98%E6%9B%B4%E6%97%B6%E6%96%B0%E7%94%9F%E6%88%90.png)\n\n#### 几个重要类\n我们来具体看看demo 中代码更改：MainActivity$override类内容的确是最新的代码内容\n![](http://7xr1vo.com1.z0.glb.clouddn.com/instant%20run%20%E5%A2%9E%E5%8A%A0%E7%9A%84%E4%BB%A3%E7%A0%81override%E7%B1%BB.png)\n\nAppPatchesLoaderImpl类记录了更改的类，存储在一个数组中，供类加载时候，替换成最新的类的代码内容\n![](http://7xr1vo.com1.z0.glb.clouddn.com/instant%20run%20%E5%8F%98%E5%8C%96%E7%9A%84%E7%B1%BB%E6%95%B0%E7%BB%84%E5%AD%98%E5%82%A8.png)\n\n![](http://7xr1vo.com1.z0.glb.clouddn.com/instant-run%20patch%E7%9B%B8%E5%85%B3.png)\n\n在此处，我反编译了slice_0-classes.dex：\n ![](http://7xr1vo.com1.z0.glb.clouddn.com/instant%20run%E7%AC%AC%E4%B8%80%E6%AC%A1%E6%89%93%E5%8C%85%E7%BB%93%E6%9E%9C.png)\n\n第一次运行打包生成的 “业务代码” 中，生成的类中的方法里都增加了 IncrementalChange 相关的判断，如果 $change 不为空，说明我们有更改的代码，有更改的代码，则执行最新更改的代码\n\n``` java\npublic Object access$dispatch(String paramString, Object... paramVarArgs) {\n        switch (paramString.hashCode()) {\n            case -833446436:\n                initView((MainActivity) paramVarArgs[0]);\n                return null;\n            case -641568046:\n                onCreate((MainActivity) paramVarArgs[0], (Bundle) paramVarArgs[1]);\n                return null;\n            case -399296056:\n                return init$args((MainActivity[]) paramVarArgs[0], (Object[]) paramVarArgs[1]);\n            case 781336394:\n                init$body((MainActivity) paramVarArgs[0], (Object[]) paramVarArgs[1]);\n                return null;\n            case 2118315029:\n                testClick((MainActivity) paramVarArgs[0], (View) paramVarArgs[1]);\n                return null;\n        }\n        throw new InstantReloadException(String.format(\"String switch could not find '%s' with hashcode %s in %s\", new Object[]{paramString, Integer.valueOf(paramString.hashCode()), \"com/geng/myapplication/MainActivity\"}));\n    }\n```\n最后根据不同的类型，进行相关的重启（activity 或者 app），主要由 Restarter负责，同时也提供了相关的重启方法：\n* restartActivity()\n* restartApp()\n\n<br>\n至此，整个 instant run 的分析告一段落，需要慢慢消化一下。。。\n\n<br>\n源码及工具资源：\nhttps://github.com/fenglincanyi/Study/tree/master/instant%20run%E7%9B%B8%E5%85%B3\n参考：\nhttps://github.com/nuptboyzhb/AndroidInstantRun\n","source":"_posts/instant run 相关分析.md","raw":"---\ntitle: instant run 相关分析\ndate: 2016-12-17 13:00\ncategories: Android\ntags: instant run\n---\nAndroid Studio 2.0 引入了即时编译功能：instant run，一定程度上进行了增量编译、增量更新代码，节省了开发耗时（喝咖啡的时间）。\n下面具体分析下instant run相关工作流程和相关的源码\n\n### instant run 使用\n#### 版本要求\nGradle 2.0 以上\nbuild.gradle：minSdkVersion 15 以上（设置21以上可获得最佳性能）\nAndroid 5.0以上的手机或模拟器\n\n#### 使用\n首先确认开启instant run，在settings中搜索instant run，可看到相关设置，默认instant run功能是开启的\n![](http://7xr1vo.com1.z0.glb.clouddn.com/Image.png)\n\n当第一次点击 run 按钮 ![](http://7xr1vo.com1.z0.glb.clouddn.com/Image1.png)，进行第一次编译打包。\napk成功安装之后，再观察工具栏，run按钮发生了变化：![](http://7xr1vo.com1.z0.glb.clouddn.com/Image2.png)\n\n然后我们随意修改一部分代码，点击运行，可看到手机屏幕上弹出toast，提示代码已经改变了，可看到最新的运行效果。使用起来也比较方便、快捷。\n\n#### 更新方式\n * 热交换 hot swap\n更改现有方法的实现代码；不会重新初始化正在运行的app，不要做重启app，activity的操作，即可看到最新代码运行结果\n * 温交换 warm swap\n更改或移除当前的资源；activity会自动重启（小闪烁），即可看到最新运行结果\n * 冷交换 cold swap\n 对代码有结构性的更改（字段更改、类继承关系、清单文件更改）；此时会重启app\n\n![](http://7xr1vo.com1.z0.glb.clouddn.com/1-Y-gIucAGyqQscMdXuHaSiA.png)\n\n参考：\nhttps://developer.android.com/studio/run/index.html?hl=zh-cn\nhttps://medium.com/google-developers/instant-run-how-does-it-work-294a1633367f#.go1u6yq2o\n\n### 过程分析\n#### 第一次打包\ninstant run 第一次编译打包流程，会执行下面的工作\n![](http://7xr1vo.com1.z0.glb.clouddn.com/1-U2tXGUWaeDU7L3u9Z_U0fw.png)\n\n先来看看生成的apk：\n![](http://7xr1vo.com1.z0.glb.clouddn.com/instant%20run%20apk.png)\n \n 多出了 instant-run.zip文件，那它里面是什么内容呢？\n ![](http://7xr1vo.com1.z0.glb.clouddn.com/instant%20run%20zip%20class.png)\n instant-run.zip里的dex文件，是我们真正的业务代码\n\n 那instant run 相关的类呢，反而跑到了外层的classes.dex和classes2.dex中。\n \n![](http://7xr1vo.com1.z0.glb.clouddn.com/%E6%97%A0%E6%A0%87%E9%A2%98.png)\n![](http://7xr1vo.com1.z0.glb.clouddn.com/instant%20run%20%E7%9B%B8%E5%85%B3jar.png)\n\n实际上这2个dex中的内容是instant-run.jar和instant-run-bootstrap.jar 的内容（自己可反编译出来看看）：\n\n**就是说，第一次运行打包时候，是将 instant-run.jar 和 instant-run-bootstrap.jar 2个jar 变成 2个dex文件，真正的业务代码编译后整合到别的dex中，然后放在了instant-run.zip中**\n> classes.dex  ->   instant-run.jar &nbsp;&nbsp;&nbsp;&nbsp; instant run 相关api类\n> classes2.dex  ->  instant-run-bootstrap.jar   &nbsp;&nbsp;  AppInfo.class\n\n再来看看清单文件，application 被替换成 BootstrapApplication：\n![](http://7xr1vo.com1.z0.glb.clouddn.com/instant%20run%20application.png)\n\n#### instant run 代码分析\n##### attachBaseContext() 中执行的三个步骤\n首先来观察下该类下的 attachBaseContext()方法，其中做了3个比较重要的事情：\ncreateResources() 、setupClassLoaders()、createRealApplication()\n\n* createResources() \n主要是判断资源resource.ap_是否改变，然后保存resource.ap_的路径到externalResourcePath中\n* setupClassLoaders()\n设置instant run 相关的classLoader，及其继承关系（PathClassLoader -> BootClassLoader   变为  PathClassLoader -> IncrementalClassLoader -> BootClassLoader）\n* createRealApplication()\n进行application 的相关替换，当前app的application变为realApplication；\n反射的方式拿到 真实的 Application，通过AppInfo相关字段进行获取\n\n\n下面我们分析一下setClassLoader详细过程：\n主要经历了以下的方法：\n![](http://7xr1vo.com1.z0.glb.clouddn.com/instant%20run%20%E8%AE%BE%E7%BD%AE%E7%88%B6classloader%E8%BF%87%E7%A8%8B.png)\n这几个ClassLoader类定义的逻辑关系如下：\n![](http://7xr1vo.com1.z0.glb.clouddn.com/instant-run%E7%9B%B8%E5%85%B3classLoader%E5%AE%9A%E4%B9%89.png)\nfindClass过程依次委托给 父ClassLoader，最后是让PathClassLoader去加载类\n\n##### onCreate() 过程\n* 通过MonkeyPatcher 替换当前的 application 为 realApplication\n包含ActivityThread中相应的Application 都替换成 realApplication\n* 替换相应的资源resource\n替换当前app的assetManager，资源相关的变量等等（期间都是用反射的方式）\n* Server 创建，建立Socket连接，开启连接\n\n##### Server 部署工作\n在Server 建立起连接后，三种部署工作（hot swap、warm swap、cold swap），都是通过Server进行操作。具体在那种情形下进行哪种交换，源码中有具体实现：\n\n``` java\nprivate int handlePatches(List<ApplicationPatch> paramList, boolean paramBoolean, int paramInt) {\n    if (paramBoolean) {\n        FileManager.startUpdate();\n    }\n    Iterator localIterator = paramList.iterator();\n    while (localIterator.hasNext()) {\n        Object localObject = (ApplicationPatch) localIterator.next();\n        String str = ((ApplicationPatch) localObject).getPath();\n        if (str.endsWith(\".dex\")) {// 冷交换\n            handleColdSwapPatch((ApplicationPatch) localObject);\n            int j = 0;\n            localObject = paramList.iterator();\n            do {\n                i = j;\n                if (!((Iterator) localObject).hasNext()) {\n                    break;\n                }\n            }\n            while (!((ApplicationPatch) ((Iterator) localObject).next()).getPath().equals(\"classes.dex.3\"));\n            int i = 1;\n            if (i == 0) {\n                paramInt = 3;\n            }\n        } else if (str.equals(\"classes.dex.3\")) {// 热交换\n            paramInt = handleHotSwapPatch(paramInt, (ApplicationPatch) localObject);\n        } else if (isResourcePath(str)) {// 资源：温交换\n            paramInt = handleResourcePatch(paramInt, (ApplicationPatch) localObject, str);\n        }\n    }\n    if (paramBoolean) {\n        FileManager.finishUpdate(true);\n    }\n    return paramInt;\n}\n```\n### 代码热更新流程\n在我们增加一行代码后，点击运行，我们来观察生成的类的变化\n在 build 目录下，transforms 中有生成相关的代码\n![](http://7xr1vo.com1.z0.glb.clouddn.com/instant-run%E6%9C%89%E4%BB%A3%E7%A0%81%E5%8F%98%E6%9B%B4%E6%97%B6%E6%96%B0%E7%94%9F%E6%88%90.png)\n\n#### 几个重要类\n我们来具体看看demo 中代码更改：MainActivity$override类内容的确是最新的代码内容\n![](http://7xr1vo.com1.z0.glb.clouddn.com/instant%20run%20%E5%A2%9E%E5%8A%A0%E7%9A%84%E4%BB%A3%E7%A0%81override%E7%B1%BB.png)\n\nAppPatchesLoaderImpl类记录了更改的类，存储在一个数组中，供类加载时候，替换成最新的类的代码内容\n![](http://7xr1vo.com1.z0.glb.clouddn.com/instant%20run%20%E5%8F%98%E5%8C%96%E7%9A%84%E7%B1%BB%E6%95%B0%E7%BB%84%E5%AD%98%E5%82%A8.png)\n\n![](http://7xr1vo.com1.z0.glb.clouddn.com/instant-run%20patch%E7%9B%B8%E5%85%B3.png)\n\n在此处，我反编译了slice_0-classes.dex：\n ![](http://7xr1vo.com1.z0.glb.clouddn.com/instant%20run%E7%AC%AC%E4%B8%80%E6%AC%A1%E6%89%93%E5%8C%85%E7%BB%93%E6%9E%9C.png)\n\n第一次运行打包生成的 “业务代码” 中，生成的类中的方法里都增加了 IncrementalChange 相关的判断，如果 $change 不为空，说明我们有更改的代码，有更改的代码，则执行最新更改的代码\n\n``` java\npublic Object access$dispatch(String paramString, Object... paramVarArgs) {\n        switch (paramString.hashCode()) {\n            case -833446436:\n                initView((MainActivity) paramVarArgs[0]);\n                return null;\n            case -641568046:\n                onCreate((MainActivity) paramVarArgs[0], (Bundle) paramVarArgs[1]);\n                return null;\n            case -399296056:\n                return init$args((MainActivity[]) paramVarArgs[0], (Object[]) paramVarArgs[1]);\n            case 781336394:\n                init$body((MainActivity) paramVarArgs[0], (Object[]) paramVarArgs[1]);\n                return null;\n            case 2118315029:\n                testClick((MainActivity) paramVarArgs[0], (View) paramVarArgs[1]);\n                return null;\n        }\n        throw new InstantReloadException(String.format(\"String switch could not find '%s' with hashcode %s in %s\", new Object[]{paramString, Integer.valueOf(paramString.hashCode()), \"com/geng/myapplication/MainActivity\"}));\n    }\n```\n最后根据不同的类型，进行相关的重启（activity 或者 app），主要由 Restarter负责，同时也提供了相关的重启方法：\n* restartActivity()\n* restartApp()\n\n<br>\n至此，整个 instant run 的分析告一段落，需要慢慢消化一下。。。\n\n<br>\n源码及工具资源：\nhttps://github.com/fenglincanyi/Study/tree/master/instant%20run%E7%9B%B8%E5%85%B3\n参考：\nhttps://github.com/nuptboyzhb/AndroidInstantRun\n","slug":"instant run 相关分析","published":1,"updated":"2017-02-08T11:57:39.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cizpjnf2y001cbaqwfb2vv5ys","content":"<p>Android Studio 2.0 引入了即时编译功能：instant run，一定程度上进行了增量编译、增量更新代码，节省了开发耗时（喝咖啡的时间）。<br>下面具体分析下instant run相关工作流程和相关的源码</p>\n<h3 id=\"instant-run-使用\"><a href=\"#instant-run-使用\" class=\"headerlink\" title=\"instant run 使用\"></a>instant run 使用</h3><h4 id=\"版本要求\"><a href=\"#版本要求\" class=\"headerlink\" title=\"版本要求\"></a>版本要求</h4><p>Gradle 2.0 以上<br>build.gradle：minSdkVersion 15 以上（设置21以上可获得最佳性能）<br>Android 5.0以上的手机或模拟器</p>\n<h4 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h4><p>首先确认开启instant run，在settings中搜索instant run，可看到相关设置，默认instant run功能是开启的<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/Image.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure></p>\n<p>当第一次点击 run 按钮 <figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/Image1.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>，进行第一次编译打包。<br>apk成功安装之后，再观察工具栏，run按钮发生了变化：<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/Image2.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure></p>\n<p>然后我们随意修改一部分代码，点击运行，可看到手机屏幕上弹出toast，提示代码已经改变了，可看到最新的运行效果。使用起来也比较方便、快捷。</p>\n<h4 id=\"更新方式\"><a href=\"#更新方式\" class=\"headerlink\" title=\"更新方式\"></a>更新方式</h4><ul>\n<li>热交换 hot swap<br>更改现有方法的实现代码；不会重新初始化正在运行的app，不要做重启app，activity的操作，即可看到最新代码运行结果</li>\n<li>温交换 warm swap<br>更改或移除当前的资源；activity会自动重启（小闪烁），即可看到最新运行结果</li>\n<li>冷交换 cold swap<br>对代码有结构性的更改（字段更改、类继承关系、清单文件更改）；此时会重启app</li>\n</ul>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/1-Y-gIucAGyqQscMdXuHaSiA.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>参考：<br><a href=\"https://developer.android.com/studio/run/index.html?hl=zh-cn\" target=\"_blank\" rel=\"external\">https://developer.android.com/studio/run/index.html?hl=zh-cn</a><br><a href=\"https://medium.com/google-developers/instant-run-how-does-it-work-294a1633367f#.go1u6yq2o\" target=\"_blank\" rel=\"external\">https://medium.com/google-developers/instant-run-how-does-it-work-294a1633367f#.go1u6yq2o</a></p>\n<h3 id=\"过程分析\"><a href=\"#过程分析\" class=\"headerlink\" title=\"过程分析\"></a>过程分析</h3><h4 id=\"第一次打包\"><a href=\"#第一次打包\" class=\"headerlink\" title=\"第一次打包\"></a>第一次打包</h4><p>instant run 第一次编译打包流程，会执行下面的工作<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/1-U2tXGUWaeDU7L3u9Z_U0fw.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure></p>\n<p>先来看看生成的apk：<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/instant%20run%20apk.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure></p>\n<p> 多出了 instant-run.zip文件，那它里面是什么内容呢？<br> <figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/instant%20run%20zip%20class.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure><br> instant-run.zip里的dex文件，是我们真正的业务代码</p>\n<p> 那instant run 相关的类呢，反而跑到了外层的classes.dex和classes2.dex中。</p>\n<p><img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/%E6%97%A0%E6%A0%87%E9%A2%98.png\" alt=\"\"><br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/instant%20run%20%E7%9B%B8%E5%85%B3jar.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure></p>\n<p>实际上这2个dex中的内容是instant-run.jar和instant-run-bootstrap.jar 的内容（自己可反编译出来看看）：</p>\n<p><strong>就是说，第一次运行打包时候，是将 instant-run.jar 和 instant-run-bootstrap.jar 2个jar 变成 2个dex文件，真正的业务代码编译后整合到别的dex中，然后放在了instant-run.zip中</strong></p>\n<blockquote>\n<p>classes.dex  -&gt;   instant-run.jar &nbsp;&nbsp;&nbsp;&nbsp; instant run 相关api类<br>classes2.dex  -&gt;  instant-run-bootstrap.jar   &nbsp;&nbsp;  AppInfo.class</p>\n</blockquote>\n<p>再来看看清单文件，application 被替换成 BootstrapApplication：<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/instant%20run%20application.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure></p>\n<h4 id=\"instant-run-代码分析\"><a href=\"#instant-run-代码分析\" class=\"headerlink\" title=\"instant run 代码分析\"></a>instant run 代码分析</h4><h5 id=\"attachBaseContext-中执行的三个步骤\"><a href=\"#attachBaseContext-中执行的三个步骤\" class=\"headerlink\" title=\"attachBaseContext() 中执行的三个步骤\"></a>attachBaseContext() 中执行的三个步骤</h5><p>首先来观察下该类下的 attachBaseContext()方法，其中做了3个比较重要的事情：<br>createResources() 、setupClassLoaders()、createRealApplication()</p>\n<ul>\n<li>createResources()<br>主要是判断资源resource.ap<em>是否改变，然后保存resource.ap</em>的路径到externalResourcePath中</li>\n<li>setupClassLoaders()<br>设置instant run 相关的classLoader，及其继承关系（PathClassLoader -&gt; BootClassLoader   变为  PathClassLoader -&gt; IncrementalClassLoader -&gt; BootClassLoader）</li>\n<li>createRealApplication()<br>进行application 的相关替换，当前app的application变为realApplication；<br>反射的方式拿到 真实的 Application，通过AppInfo相关字段进行获取</li>\n</ul>\n<p>下面我们分析一下setClassLoader详细过程：<br>主要经历了以下的方法：<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/instant%20run%20%E8%AE%BE%E7%BD%AE%E7%88%B6classloader%E8%BF%87%E7%A8%8B.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure><br>这几个ClassLoader类定义的逻辑关系如下：<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/instant-run%E7%9B%B8%E5%85%B3classLoader%E5%AE%9A%E4%B9%89.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure><br>findClass过程依次委托给 父ClassLoader，最后是让PathClassLoader去加载类</p>\n<h5 id=\"onCreate-过程\"><a href=\"#onCreate-过程\" class=\"headerlink\" title=\"onCreate() 过程\"></a>onCreate() 过程</h5><ul>\n<li>通过MonkeyPatcher 替换当前的 application 为 realApplication<br>包含ActivityThread中相应的Application 都替换成 realApplication</li>\n<li>替换相应的资源resource<br>替换当前app的assetManager，资源相关的变量等等（期间都是用反射的方式）</li>\n<li>Server 创建，建立Socket连接，开启连接</li>\n</ul>\n<h5 id=\"Server-部署工作\"><a href=\"#Server-部署工作\" class=\"headerlink\" title=\"Server 部署工作\"></a>Server 部署工作</h5><p>在Server 建立起连接后，三种部署工作（hot swap、warm swap、cold swap），都是通过Server进行操作。具体在那种情形下进行哪种交换，源码中有具体实现：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">handlePatches</span><span class=\"params\">(List&lt;ApplicationPatch&gt; paramList, <span class=\"keyword\">boolean</span> paramBoolean, <span class=\"keyword\">int</span> paramInt)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (paramBoolean) &#123;</div><div class=\"line\">        FileManager.startUpdate();</div><div class=\"line\">    &#125;</div><div class=\"line\">    Iterator localIterator = paramList.iterator();</div><div class=\"line\">    <span class=\"keyword\">while</span> (localIterator.hasNext()) &#123;</div><div class=\"line\">        Object localObject = (ApplicationPatch) localIterator.next();</div><div class=\"line\">        String str = ((ApplicationPatch) localObject).getPath();</div><div class=\"line\">        <span class=\"keyword\">if</span> (str.endsWith(<span class=\"string\">\".dex\"</span>)) &#123;<span class=\"comment\">// 冷交换</span></div><div class=\"line\">            handleColdSwapPatch((ApplicationPatch) localObject);</div><div class=\"line\">            <span class=\"keyword\">int</span> j = <span class=\"number\">0</span>;</div><div class=\"line\">            localObject = paramList.iterator();</div><div class=\"line\">            <span class=\"keyword\">do</span> &#123;</div><div class=\"line\">                i = j;</div><div class=\"line\">                <span class=\"keyword\">if</span> (!((Iterator) localObject).hasNext()) &#123;</div><div class=\"line\">                    <span class=\"keyword\">break</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">while</span> (!((ApplicationPatch) ((Iterator) localObject).next()).getPath().equals(<span class=\"string\">\"classes.dex.3\"</span>));</div><div class=\"line\">            <span class=\"keyword\">int</span> i = <span class=\"number\">1</span>;</div><div class=\"line\">            <span class=\"keyword\">if</span> (i == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                paramInt = <span class=\"number\">3</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (str.equals(<span class=\"string\">\"classes.dex.3\"</span>)) &#123;<span class=\"comment\">// 热交换</span></div><div class=\"line\">            paramInt = handleHotSwapPatch(paramInt, (ApplicationPatch) localObject);</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (isResourcePath(str)) &#123;<span class=\"comment\">// 资源：温交换</span></div><div class=\"line\">            paramInt = handleResourcePatch(paramInt, (ApplicationPatch) localObject, str);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> (paramBoolean) &#123;</div><div class=\"line\">        FileManager.finishUpdate(<span class=\"keyword\">true</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> paramInt;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"代码热更新流程\"><a href=\"#代码热更新流程\" class=\"headerlink\" title=\"代码热更新流程\"></a>代码热更新流程</h3><p>在我们增加一行代码后，点击运行，我们来观察生成的类的变化<br>在 build 目录下，transforms 中有生成相关的代码<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/instant-run%E6%9C%89%E4%BB%A3%E7%A0%81%E5%8F%98%E6%9B%B4%E6%97%B6%E6%96%B0%E7%94%9F%E6%88%90.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure></p>\n<h4 id=\"几个重要类\"><a href=\"#几个重要类\" class=\"headerlink\" title=\"几个重要类\"></a>几个重要类</h4><p>我们来具体看看demo 中代码更改：MainActivity$override类内容的确是最新的代码内容<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/instant%20run%20%E5%A2%9E%E5%8A%A0%E7%9A%84%E4%BB%A3%E7%A0%81override%E7%B1%BB.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure></p>\n<p>AppPatchesLoaderImpl类记录了更改的类，存储在一个数组中，供类加载时候，替换成最新的类的代码内容<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/instant%20run%20%E5%8F%98%E5%8C%96%E7%9A%84%E7%B1%BB%E6%95%B0%E7%BB%84%E5%AD%98%E5%82%A8.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure></p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/instant-run%20patch%E7%9B%B8%E5%85%B3.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>在此处，我反编译了slice_0-classes.dex：<br> <figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/instant%20run%E7%AC%AC%E4%B8%80%E6%AC%A1%E6%89%93%E5%8C%85%E7%BB%93%E6%9E%9C.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure></p>\n<p>第一次运行打包生成的 “业务代码” 中，生成的类中的方法里都增加了 IncrementalChange 相关的判断，如果 $change 不为空，说明我们有更改的代码，有更改的代码，则执行最新更改的代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> Object access$dispatch(String paramString, Object... paramVarArgs) &#123;</div><div class=\"line\">        <span class=\"keyword\">switch</span> (paramString.hashCode()) &#123;</div><div class=\"line\">            <span class=\"keyword\">case</span> -<span class=\"number\">833446436</span>:</div><div class=\"line\">                initView((MainActivity) paramVarArgs[<span class=\"number\">0</span>]);</div><div class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">            <span class=\"keyword\">case</span> -<span class=\"number\">641568046</span>:</div><div class=\"line\">                onCreate((MainActivity) paramVarArgs[<span class=\"number\">0</span>], (Bundle) paramVarArgs[<span class=\"number\">1</span>]);</div><div class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">            <span class=\"keyword\">case</span> -<span class=\"number\">399296056</span>:</div><div class=\"line\">                <span class=\"keyword\">return</span> init$args((MainActivity[]) paramVarArgs[<span class=\"number\">0</span>], (Object[]) paramVarArgs[<span class=\"number\">1</span>]);</div><div class=\"line\">            <span class=\"keyword\">case</span> <span class=\"number\">781336394</span>:</div><div class=\"line\">                init$body((MainActivity) paramVarArgs[<span class=\"number\">0</span>], (Object[]) paramVarArgs[<span class=\"number\">1</span>]);</div><div class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">            <span class=\"keyword\">case</span> <span class=\"number\">2118315029</span>:</div><div class=\"line\">                testClick((MainActivity) paramVarArgs[<span class=\"number\">0</span>], (View) paramVarArgs[<span class=\"number\">1</span>]);</div><div class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> InstantReloadException(String.format(<span class=\"string\">\"String switch could not find '%s' with hashcode %s in %s\"</span>, <span class=\"keyword\">new</span> Object[]&#123;paramString, Integer.valueOf(paramString.hashCode()), <span class=\"string\">\"com/geng/myapplication/MainActivity\"</span>&#125;));</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p>最后根据不同的类型，进行相关的重启（activity 或者 app），主要由 Restarter负责，同时也提供了相关的重启方法：</p>\n<ul>\n<li>restartActivity()</li>\n<li>restartApp()</li>\n</ul>\n<p><br><br>至此，整个 instant run 的分析告一段落，需要慢慢消化一下。。。</p>\n<p><br><br>源码及工具资源：<br><a href=\"https://github.com/fenglincanyi/Study/tree/master/instant%20run%E7%9B%B8%E5%85%B3\" target=\"_blank\" rel=\"external\">https://github.com/fenglincanyi/Study/tree/master/instant%20run%E7%9B%B8%E5%85%B3</a><br>参考：<br><a href=\"https://github.com/nuptboyzhb/AndroidInstantRun\" target=\"_blank\" rel=\"external\">https://github.com/nuptboyzhb/AndroidInstantRun</a></p>\n","excerpt":"","more":"<p>Android Studio 2.0 引入了即时编译功能：instant run，一定程度上进行了增量编译、增量更新代码，节省了开发耗时（喝咖啡的时间）。<br>下面具体分析下instant run相关工作流程和相关的源码</p>\n<h3 id=\"instant-run-使用\"><a href=\"#instant-run-使用\" class=\"headerlink\" title=\"instant run 使用\"></a>instant run 使用</h3><h4 id=\"版本要求\"><a href=\"#版本要求\" class=\"headerlink\" title=\"版本要求\"></a>版本要求</h4><p>Gradle 2.0 以上<br>build.gradle：minSdkVersion 15 以上（设置21以上可获得最佳性能）<br>Android 5.0以上的手机或模拟器</p>\n<h4 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h4><p>首先确认开启instant run，在settings中搜索instant run，可看到相关设置，默认instant run功能是开启的<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/Image.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure></p>\n<p>当第一次点击 run 按钮 <figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/Image1.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>，进行第一次编译打包。<br>apk成功安装之后，再观察工具栏，run按钮发生了变化：<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/Image2.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure></p>\n<p>然后我们随意修改一部分代码，点击运行，可看到手机屏幕上弹出toast，提示代码已经改变了，可看到最新的运行效果。使用起来也比较方便、快捷。</p>\n<h4 id=\"更新方式\"><a href=\"#更新方式\" class=\"headerlink\" title=\"更新方式\"></a>更新方式</h4><ul>\n<li>热交换 hot swap<br>更改现有方法的实现代码；不会重新初始化正在运行的app，不要做重启app，activity的操作，即可看到最新代码运行结果</li>\n<li>温交换 warm swap<br>更改或移除当前的资源；activity会自动重启（小闪烁），即可看到最新运行结果</li>\n<li>冷交换 cold swap<br>对代码有结构性的更改（字段更改、类继承关系、清单文件更改）；此时会重启app</li>\n</ul>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/1-Y-gIucAGyqQscMdXuHaSiA.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>参考：<br><a href=\"https://developer.android.com/studio/run/index.html?hl=zh-cn\">https://developer.android.com/studio/run/index.html?hl=zh-cn</a><br><a href=\"https://medium.com/google-developers/instant-run-how-does-it-work-294a1633367f#.go1u6yq2o\">https://medium.com/google-developers/instant-run-how-does-it-work-294a1633367f#.go1u6yq2o</a></p>\n<h3 id=\"过程分析\"><a href=\"#过程分析\" class=\"headerlink\" title=\"过程分析\"></a>过程分析</h3><h4 id=\"第一次打包\"><a href=\"#第一次打包\" class=\"headerlink\" title=\"第一次打包\"></a>第一次打包</h4><p>instant run 第一次编译打包流程，会执行下面的工作<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/1-U2tXGUWaeDU7L3u9Z_U0fw.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure></p>\n<p>先来看看生成的apk：<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/instant%20run%20apk.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure></p>\n<p> 多出了 instant-run.zip文件，那它里面是什么内容呢？<br> <figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/instant%20run%20zip%20class.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure><br> instant-run.zip里的dex文件，是我们真正的业务代码</p>\n<p> 那instant run 相关的类呢，反而跑到了外层的classes.dex和classes2.dex中。</p>\n<p><img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/%E6%97%A0%E6%A0%87%E9%A2%98.png\" alt=\"\"><br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/instant%20run%20%E7%9B%B8%E5%85%B3jar.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure></p>\n<p>实际上这2个dex中的内容是instant-run.jar和instant-run-bootstrap.jar 的内容（自己可反编译出来看看）：</p>\n<p><strong>就是说，第一次运行打包时候，是将 instant-run.jar 和 instant-run-bootstrap.jar 2个jar 变成 2个dex文件，真正的业务代码编译后整合到别的dex中，然后放在了instant-run.zip中</strong></p>\n<blockquote>\n<p>classes.dex  -&gt;   instant-run.jar &nbsp;&nbsp;&nbsp;&nbsp; instant run 相关api类<br>classes2.dex  -&gt;  instant-run-bootstrap.jar   &nbsp;&nbsp;  AppInfo.class</p>\n</blockquote>\n<p>再来看看清单文件，application 被替换成 BootstrapApplication：<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/instant%20run%20application.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure></p>\n<h4 id=\"instant-run-代码分析\"><a href=\"#instant-run-代码分析\" class=\"headerlink\" title=\"instant run 代码分析\"></a>instant run 代码分析</h4><h5 id=\"attachBaseContext-中执行的三个步骤\"><a href=\"#attachBaseContext-中执行的三个步骤\" class=\"headerlink\" title=\"attachBaseContext() 中执行的三个步骤\"></a>attachBaseContext() 中执行的三个步骤</h5><p>首先来观察下该类下的 attachBaseContext()方法，其中做了3个比较重要的事情：<br>createResources() 、setupClassLoaders()、createRealApplication()</p>\n<ul>\n<li>createResources()<br>主要是判断资源resource.ap<em>是否改变，然后保存resource.ap</em>的路径到externalResourcePath中</li>\n<li>setupClassLoaders()<br>设置instant run 相关的classLoader，及其继承关系（PathClassLoader -&gt; BootClassLoader   变为  PathClassLoader -&gt; IncrementalClassLoader -&gt; BootClassLoader）</li>\n<li>createRealApplication()<br>进行application 的相关替换，当前app的application变为realApplication；<br>反射的方式拿到 真实的 Application，通过AppInfo相关字段进行获取</li>\n</ul>\n<p>下面我们分析一下setClassLoader详细过程：<br>主要经历了以下的方法：<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/instant%20run%20%E8%AE%BE%E7%BD%AE%E7%88%B6classloader%E8%BF%87%E7%A8%8B.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure><br>这几个ClassLoader类定义的逻辑关系如下：<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/instant-run%E7%9B%B8%E5%85%B3classLoader%E5%AE%9A%E4%B9%89.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure><br>findClass过程依次委托给 父ClassLoader，最后是让PathClassLoader去加载类</p>\n<h5 id=\"onCreate-过程\"><a href=\"#onCreate-过程\" class=\"headerlink\" title=\"onCreate() 过程\"></a>onCreate() 过程</h5><ul>\n<li>通过MonkeyPatcher 替换当前的 application 为 realApplication<br>包含ActivityThread中相应的Application 都替换成 realApplication</li>\n<li>替换相应的资源resource<br>替换当前app的assetManager，资源相关的变量等等（期间都是用反射的方式）</li>\n<li>Server 创建，建立Socket连接，开启连接</li>\n</ul>\n<h5 id=\"Server-部署工作\"><a href=\"#Server-部署工作\" class=\"headerlink\" title=\"Server 部署工作\"></a>Server 部署工作</h5><p>在Server 建立起连接后，三种部署工作（hot swap、warm swap、cold swap），都是通过Server进行操作。具体在那种情形下进行哪种交换，源码中有具体实现：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">handlePatches</span><span class=\"params\">(List&lt;ApplicationPatch&gt; paramList, <span class=\"keyword\">boolean</span> paramBoolean, <span class=\"keyword\">int</span> paramInt)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (paramBoolean) &#123;</div><div class=\"line\">        FileManager.startUpdate();</div><div class=\"line\">    &#125;</div><div class=\"line\">    Iterator localIterator = paramList.iterator();</div><div class=\"line\">    <span class=\"keyword\">while</span> (localIterator.hasNext()) &#123;</div><div class=\"line\">        Object localObject = (ApplicationPatch) localIterator.next();</div><div class=\"line\">        String str = ((ApplicationPatch) localObject).getPath();</div><div class=\"line\">        <span class=\"keyword\">if</span> (str.endsWith(<span class=\"string\">\".dex\"</span>)) &#123;<span class=\"comment\">// 冷交换</span></div><div class=\"line\">            handleColdSwapPatch((ApplicationPatch) localObject);</div><div class=\"line\">            <span class=\"keyword\">int</span> j = <span class=\"number\">0</span>;</div><div class=\"line\">            localObject = paramList.iterator();</div><div class=\"line\">            <span class=\"keyword\">do</span> &#123;</div><div class=\"line\">                i = j;</div><div class=\"line\">                <span class=\"keyword\">if</span> (!((Iterator) localObject).hasNext()) &#123;</div><div class=\"line\">                    <span class=\"keyword\">break</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">while</span> (!((ApplicationPatch) ((Iterator) localObject).next()).getPath().equals(<span class=\"string\">\"classes.dex.3\"</span>));</div><div class=\"line\">            <span class=\"keyword\">int</span> i = <span class=\"number\">1</span>;</div><div class=\"line\">            <span class=\"keyword\">if</span> (i == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                paramInt = <span class=\"number\">3</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (str.equals(<span class=\"string\">\"classes.dex.3\"</span>)) &#123;<span class=\"comment\">// 热交换</span></div><div class=\"line\">            paramInt = handleHotSwapPatch(paramInt, (ApplicationPatch) localObject);</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (isResourcePath(str)) &#123;<span class=\"comment\">// 资源：温交换</span></div><div class=\"line\">            paramInt = handleResourcePatch(paramInt, (ApplicationPatch) localObject, str);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> (paramBoolean) &#123;</div><div class=\"line\">        FileManager.finishUpdate(<span class=\"keyword\">true</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> paramInt;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"代码热更新流程\"><a href=\"#代码热更新流程\" class=\"headerlink\" title=\"代码热更新流程\"></a>代码热更新流程</h3><p>在我们增加一行代码后，点击运行，我们来观察生成的类的变化<br>在 build 目录下，transforms 中有生成相关的代码<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/instant-run%E6%9C%89%E4%BB%A3%E7%A0%81%E5%8F%98%E6%9B%B4%E6%97%B6%E6%96%B0%E7%94%9F%E6%88%90.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure></p>\n<h4 id=\"几个重要类\"><a href=\"#几个重要类\" class=\"headerlink\" title=\"几个重要类\"></a>几个重要类</h4><p>我们来具体看看demo 中代码更改：MainActivity$override类内容的确是最新的代码内容<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/instant%20run%20%E5%A2%9E%E5%8A%A0%E7%9A%84%E4%BB%A3%E7%A0%81override%E7%B1%BB.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure></p>\n<p>AppPatchesLoaderImpl类记录了更改的类，存储在一个数组中，供类加载时候，替换成最新的类的代码内容<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/instant%20run%20%E5%8F%98%E5%8C%96%E7%9A%84%E7%B1%BB%E6%95%B0%E7%BB%84%E5%AD%98%E5%82%A8.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure></p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/instant-run%20patch%E7%9B%B8%E5%85%B3.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>在此处，我反编译了slice_0-classes.dex：<br> <figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/instant%20run%E7%AC%AC%E4%B8%80%E6%AC%A1%E6%89%93%E5%8C%85%E7%BB%93%E6%9E%9C.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure></p>\n<p>第一次运行打包生成的 “业务代码” 中，生成的类中的方法里都增加了 IncrementalChange 相关的判断，如果 $change 不为空，说明我们有更改的代码，有更改的代码，则执行最新更改的代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> Object access$dispatch(String paramString, Object... paramVarArgs) &#123;</div><div class=\"line\">        <span class=\"keyword\">switch</span> (paramString.hashCode()) &#123;</div><div class=\"line\">            <span class=\"keyword\">case</span> -<span class=\"number\">833446436</span>:</div><div class=\"line\">                initView((MainActivity) paramVarArgs[<span class=\"number\">0</span>]);</div><div class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">            <span class=\"keyword\">case</span> -<span class=\"number\">641568046</span>:</div><div class=\"line\">                onCreate((MainActivity) paramVarArgs[<span class=\"number\">0</span>], (Bundle) paramVarArgs[<span class=\"number\">1</span>]);</div><div class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">            <span class=\"keyword\">case</span> -<span class=\"number\">399296056</span>:</div><div class=\"line\">                <span class=\"keyword\">return</span> init$args((MainActivity[]) paramVarArgs[<span class=\"number\">0</span>], (Object[]) paramVarArgs[<span class=\"number\">1</span>]);</div><div class=\"line\">            <span class=\"keyword\">case</span> <span class=\"number\">781336394</span>:</div><div class=\"line\">                init$body((MainActivity) paramVarArgs[<span class=\"number\">0</span>], (Object[]) paramVarArgs[<span class=\"number\">1</span>]);</div><div class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">            <span class=\"keyword\">case</span> <span class=\"number\">2118315029</span>:</div><div class=\"line\">                testClick((MainActivity) paramVarArgs[<span class=\"number\">0</span>], (View) paramVarArgs[<span class=\"number\">1</span>]);</div><div class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> InstantReloadException(String.format(<span class=\"string\">\"String switch could not find '%s' with hashcode %s in %s\"</span>, <span class=\"keyword\">new</span> Object[]&#123;paramString, Integer.valueOf(paramString.hashCode()), <span class=\"string\">\"com/geng/myapplication/MainActivity\"</span>&#125;));</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p>最后根据不同的类型，进行相关的重启（activity 或者 app），主要由 Restarter负责，同时也提供了相关的重启方法：</p>\n<ul>\n<li>restartActivity()</li>\n<li>restartApp()</li>\n</ul>\n<p><br><br>至此，整个 instant run 的分析告一段落，需要慢慢消化一下。。。</p>\n<p><br><br>源码及工具资源：<br><a href=\"https://github.com/fenglincanyi/Study/tree/master/instant%20run%E7%9B%B8%E5%85%B3\">https://github.com/fenglincanyi/Study/tree/master/instant%20run%E7%9B%B8%E5%85%B3</a><br>参考：<br><a href=\"https://github.com/nuptboyzhb/AndroidInstantRun\">https://github.com/nuptboyzhb/AndroidInstantRun</a></p>\n"},{"title":"滑动冲突之EditText-ScrollView","date":"2016-08-16T09:14:00.000Z","_content":"### 问题一\n    EditText的内容过多时，EditText的内容并不能滚动，而是ScrollView的滚动\n### 解决\n        重写EditText的onTouch事件，将触摸事件交给EditText来处理\n\n``` java\net.setOnTouchListener(new View.OnTouchListener() {\n            @Override\n            public boolean onTouch(View v, MotionEvent event) {\n                // 设置ScrollView不拦截事件\n                scrollView.requestDisallowInterceptTouchEvent(true);\n                switch (event.getAction() & MotionEvent.ACTION_MASK){\n                    case MotionEvent.ACTION_UP:\n                    // 手指离开时：重置ScrollView事件拦截的状态\n                    scrollView.requestDisallowInterceptTouchEvent(false);\n                        break;\n                }\n                return false;\n            }\n        });\n    }\n```\n### 问题二\n        若有ScrollView内容比较多，比较长时，编辑EditText里的内容时会出现ScrollView滑到底部的现象，使得当前编辑的EditText看不到了\n### 解决\n        修改AndroidManifest.xml中Activity的windowSoftInputMode属性(看具体逻辑而定：adjustPan)\n``` xml\n<activity\n    android:name=\".me.MineResumeProjectExperienceActivity\"\n    android:screenOrientation=\"portrait\n    android:windowSoftInputMode=\"stateHidden|adjustPan\"/>\n```","source":"_posts/滑动冲突之EditText-ScrollView.md","raw":"---\ntitle: 滑动冲突之EditText-ScrollView\ndate: 2016-08-16 17:14\ncategories: Android\ntags: 滑动冲突\n---\n### 问题一\n    EditText的内容过多时，EditText的内容并不能滚动，而是ScrollView的滚动\n### 解决\n        重写EditText的onTouch事件，将触摸事件交给EditText来处理\n\n``` java\net.setOnTouchListener(new View.OnTouchListener() {\n            @Override\n            public boolean onTouch(View v, MotionEvent event) {\n                // 设置ScrollView不拦截事件\n                scrollView.requestDisallowInterceptTouchEvent(true);\n                switch (event.getAction() & MotionEvent.ACTION_MASK){\n                    case MotionEvent.ACTION_UP:\n                    // 手指离开时：重置ScrollView事件拦截的状态\n                    scrollView.requestDisallowInterceptTouchEvent(false);\n                        break;\n                }\n                return false;\n            }\n        });\n    }\n```\n### 问题二\n        若有ScrollView内容比较多，比较长时，编辑EditText里的内容时会出现ScrollView滑到底部的现象，使得当前编辑的EditText看不到了\n### 解决\n        修改AndroidManifest.xml中Activity的windowSoftInputMode属性(看具体逻辑而定：adjustPan)\n``` xml\n<activity\n    android:name=\".me.MineResumeProjectExperienceActivity\"\n    android:screenOrientation=\"portrait\n    android:windowSoftInputMode=\"stateHidden|adjustPan\"/>\n```","slug":"滑动冲突之EditText-ScrollView","published":1,"updated":"2017-02-16T03:09:09.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cizpjnf31001gbaqwxtcssbm5","content":"<h3 id=\"问题一\"><a href=\"#问题一\" class=\"headerlink\" title=\"问题一\"></a>问题一</h3><pre><code>EditText的内容过多时，EditText的内容并不能滚动，而是ScrollView的滚动\n</code></pre><h3 id=\"解决\"><a href=\"#解决\" class=\"headerlink\" title=\"解决\"></a>解决</h3><pre><code>重写EditText的onTouch事件，将触摸事件交给EditText来处理\n</code></pre><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">et.setOnTouchListener(<span class=\"keyword\">new</span> View.OnTouchListener() &#123;</div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onTouch</span><span class=\"params\">(View v, MotionEvent event)</span> </span>&#123;</div><div class=\"line\">                <span class=\"comment\">// 设置ScrollView不拦截事件</span></div><div class=\"line\">                scrollView.requestDisallowInterceptTouchEvent(<span class=\"keyword\">true</span>);</div><div class=\"line\">                <span class=\"keyword\">switch</span> (event.getAction() &amp; MotionEvent.ACTION_MASK)&#123;</div><div class=\"line\">                    <span class=\"keyword\">case</span> MotionEvent.ACTION_UP:</div><div class=\"line\">                    <span class=\"comment\">// 手指离开时：重置ScrollView事件拦截的状态</span></div><div class=\"line\">                    scrollView.requestDisallowInterceptTouchEvent(<span class=\"keyword\">false</span>);</div><div class=\"line\">                        <span class=\"keyword\">break</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;);</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<h3 id=\"问题二\"><a href=\"#问题二\" class=\"headerlink\" title=\"问题二\"></a>问题二</h3><pre><code>若有ScrollView内容比较多，比较长时，编辑EditText里的内容时会出现ScrollView滑到底部的现象，使得当前编辑的EditText看不到了\n</code></pre><h3 id=\"解决-1\"><a href=\"#解决-1\" class=\"headerlink\" title=\"解决\"></a>解决</h3><pre><code>修改AndroidManifest.xml中Activity的windowSoftInputMode属性(看具体逻辑而定：adjustPan)\n</code></pre><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">activity</span></span></div><div class=\"line\">    <span class=\"attr\">android:name</span>=<span class=\"string\">\".me.MineResumeProjectExperienceActivity\"</span></div><div class=\"line\">    <span class=\"attr\">android:screenOrientation</span>=<span class=\"string\">\"portrait</span></div><div class=\"line\">    android:windowSoftInputMode=\"<span class=\"attr\">stateHidden</span>|<span class=\"attr\">adjustPan</span>\"/&gt;</div></pre></td></tr></table></figure>","excerpt":"","more":"<h3 id=\"问题一\"><a href=\"#问题一\" class=\"headerlink\" title=\"问题一\"></a>问题一</h3><pre><code>EditText的内容过多时，EditText的内容并不能滚动，而是ScrollView的滚动\n</code></pre><h3 id=\"解决\"><a href=\"#解决\" class=\"headerlink\" title=\"解决\"></a>解决</h3><pre><code>重写EditText的onTouch事件，将触摸事件交给EditText来处理\n</code></pre><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">et.setOnTouchListener(<span class=\"keyword\">new</span> View.OnTouchListener() &#123;</div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onTouch</span><span class=\"params\">(View v, MotionEvent event)</span> </span>&#123;</div><div class=\"line\">                <span class=\"comment\">// 设置ScrollView不拦截事件</span></div><div class=\"line\">                scrollView.requestDisallowInterceptTouchEvent(<span class=\"keyword\">true</span>);</div><div class=\"line\">                <span class=\"keyword\">switch</span> (event.getAction() &amp; MotionEvent.ACTION_MASK)&#123;</div><div class=\"line\">                    <span class=\"keyword\">case</span> MotionEvent.ACTION_UP:</div><div class=\"line\">                    <span class=\"comment\">// 手指离开时：重置ScrollView事件拦截的状态</span></div><div class=\"line\">                    scrollView.requestDisallowInterceptTouchEvent(<span class=\"keyword\">false</span>);</div><div class=\"line\">                        <span class=\"keyword\">break</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;);</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<h3 id=\"问题二\"><a href=\"#问题二\" class=\"headerlink\" title=\"问题二\"></a>问题二</h3><pre><code>若有ScrollView内容比较多，比较长时，编辑EditText里的内容时会出现ScrollView滑到底部的现象，使得当前编辑的EditText看不到了\n</code></pre><h3 id=\"解决-1\"><a href=\"#解决-1\" class=\"headerlink\" title=\"解决\"></a>解决</h3><pre><code>修改AndroidManifest.xml中Activity的windowSoftInputMode属性(看具体逻辑而定：adjustPan)\n</code></pre><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">activity</span></div><div class=\"line\">    <span class=\"attr\">android:name</span>=<span class=\"string\">\".me.MineResumeProjectExperienceActivity\"</span></div><div class=\"line\">    <span class=\"attr\">android:screenOrientation</span>=<span class=\"string\">\"portrait</div><div class=\"line\">    android:windowSoftInputMode=\"</span><span class=\"attr\">stateHidden</span>|<span class=\"attr\">adjustPan</span>\"/&gt;</span></div></pre></td></tr></table></figure>"},{"title":"简单的页面置换算法分析","date":"2016-06-04T11:39:00.000Z","_content":">本文主要分析操作系统中涉及到的一些常见的置换算法，并不对涉及的操作系统内容过多介绍。这些算法在其他的计算机应用中也有体现，基本原理都是一致的，可参考理解。\n\n### 一、前提说明\n本文主要针对一个例子进行说明，以下的算法实现过程均是按照本例进行分析。页面的走向为：\n\n    4 3 2 1 4 3 5 4 3 2 1 5 \n一段程序在内存中，分配3个页面，初始情况下为空。\n以下依次根据不同的算法进行页面置换过程的分析。\n### 二、算法分析过程\n#### 1. FIFO（先进先出）\nFIFO算是最简单、最容易理解的算法了，只要按照依次装入内存的页面的页号按照进入的先后次序排好队列，每次总是从队首出，队尾出。当发生缺页时，置换队首的页面即可。<br>\n对上面的页面走向序列，分析过程如下图：\n\n![](http://7xr1vo.com1.z0.glb.clouddn.com/%E5%9B%BE1.png)\n#### 2. LRU （最近最少使用 Least Recently Used）\n在缺页发生时，选择离现在最长时间内，没有被访问过的页面置换出来。<br>\n分析过程，如下图：\n\n![](http://7xr1vo.com1.z0.glb.clouddn.com/%E5%9B%BE2.png)\n\n* 此算法应用的比较广泛，尤其是拿来做缓存算法。Android的API中，已经封装了相关的LRU的算法直接可以调用。\n* 一些图片的缓存算法都是使用LRU进行缓存优化的。ImageLoader框架更是将好几种缓存算法融合到里面，可以灵活选用。详细可以查看源码的实现。\n#### 3. LFU （最近最不常用 Least Frequently Used）\n选择访问次数最少的页面置换出来。<br>此算法的实现要花费的开销很大，并且要确定一个合适的周期T也有一定的难度，就不在分析了。\n#### 3. OPT （理想）\n此算法置换以后不再需要或最长时间以后才会用到的页面。这一算法一般不可能实现，但它可以作为衡量其他页面置换算法的标准。<br>\n分析过程，如下图：\n\n![](http://7xr1vo.com1.z0.glb.clouddn.com/%E5%9B%BE3.png)\n","source":"_posts/简单的页面置换算法分析.md","raw":"---\ntitle: 简单的页面置换算法分析\ndate: 2016-06-04 19:39\ncategories: 算法\ntags: LRU\n---\n>本文主要分析操作系统中涉及到的一些常见的置换算法，并不对涉及的操作系统内容过多介绍。这些算法在其他的计算机应用中也有体现，基本原理都是一致的，可参考理解。\n\n### 一、前提说明\n本文主要针对一个例子进行说明，以下的算法实现过程均是按照本例进行分析。页面的走向为：\n\n    4 3 2 1 4 3 5 4 3 2 1 5 \n一段程序在内存中，分配3个页面，初始情况下为空。\n以下依次根据不同的算法进行页面置换过程的分析。\n### 二、算法分析过程\n#### 1. FIFO（先进先出）\nFIFO算是最简单、最容易理解的算法了，只要按照依次装入内存的页面的页号按照进入的先后次序排好队列，每次总是从队首出，队尾出。当发生缺页时，置换队首的页面即可。<br>\n对上面的页面走向序列，分析过程如下图：\n\n![](http://7xr1vo.com1.z0.glb.clouddn.com/%E5%9B%BE1.png)\n#### 2. LRU （最近最少使用 Least Recently Used）\n在缺页发生时，选择离现在最长时间内，没有被访问过的页面置换出来。<br>\n分析过程，如下图：\n\n![](http://7xr1vo.com1.z0.glb.clouddn.com/%E5%9B%BE2.png)\n\n* 此算法应用的比较广泛，尤其是拿来做缓存算法。Android的API中，已经封装了相关的LRU的算法直接可以调用。\n* 一些图片的缓存算法都是使用LRU进行缓存优化的。ImageLoader框架更是将好几种缓存算法融合到里面，可以灵活选用。详细可以查看源码的实现。\n#### 3. LFU （最近最不常用 Least Frequently Used）\n选择访问次数最少的页面置换出来。<br>此算法的实现要花费的开销很大，并且要确定一个合适的周期T也有一定的难度，就不在分析了。\n#### 3. OPT （理想）\n此算法置换以后不再需要或最长时间以后才会用到的页面。这一算法一般不可能实现，但它可以作为衡量其他页面置换算法的标准。<br>\n分析过程，如下图：\n\n![](http://7xr1vo.com1.z0.glb.clouddn.com/%E5%9B%BE3.png)\n","slug":"简单的页面置换算法分析","published":1,"updated":"2017-01-19T08:20:55.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cizpjnf35001jbaqwtdxmnqqg","content":"<blockquote>\n<p>本文主要分析操作系统中涉及到的一些常见的置换算法，并不对涉及的操作系统内容过多介绍。这些算法在其他的计算机应用中也有体现，基本原理都是一致的，可参考理解。</p>\n</blockquote>\n<h3 id=\"一、前提说明\"><a href=\"#一、前提说明\" class=\"headerlink\" title=\"一、前提说明\"></a>一、前提说明</h3><p>本文主要针对一个例子进行说明，以下的算法实现过程均是按照本例进行分析。页面的走向为：</p>\n<pre><code>4 3 2 1 4 3 5 4 3 2 1 5 \n</code></pre><p>一段程序在内存中，分配3个页面，初始情况下为空。<br>以下依次根据不同的算法进行页面置换过程的分析。</p>\n<h3 id=\"二、算法分析过程\"><a href=\"#二、算法分析过程\" class=\"headerlink\" title=\"二、算法分析过程\"></a>二、算法分析过程</h3><h4 id=\"1-FIFO（先进先出）\"><a href=\"#1-FIFO（先进先出）\" class=\"headerlink\" title=\"1. FIFO（先进先出）\"></a>1. FIFO（先进先出）</h4><p>FIFO算是最简单、最容易理解的算法了，只要按照依次装入内存的页面的页号按照进入的先后次序排好队列，每次总是从队首出，队尾出。当发生缺页时，置换队首的页面即可。<br><br>对上面的页面走向序列，分析过程如下图：</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/%E5%9B%BE1.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<h4 id=\"2-LRU-（最近最少使用-Least-Recently-Used）\"><a href=\"#2-LRU-（最近最少使用-Least-Recently-Used）\" class=\"headerlink\" title=\"2. LRU （最近最少使用 Least Recently Used）\"></a>2. LRU （最近最少使用 Least Recently Used）</h4><p>在缺页发生时，选择离现在最长时间内，没有被访问过的页面置换出来。<br><br>分析过程，如下图：</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/%E5%9B%BE2.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<ul>\n<li>此算法应用的比较广泛，尤其是拿来做缓存算法。Android的API中，已经封装了相关的LRU的算法直接可以调用。</li>\n<li>一些图片的缓存算法都是使用LRU进行缓存优化的。ImageLoader框架更是将好几种缓存算法融合到里面，可以灵活选用。详细可以查看源码的实现。<h4 id=\"3-LFU-（最近最不常用-Least-Frequently-Used）\"><a href=\"#3-LFU-（最近最不常用-Least-Frequently-Used）\" class=\"headerlink\" title=\"3. LFU （最近最不常用 Least Frequently Used）\"></a>3. LFU （最近最不常用 Least Frequently Used）</h4>选择访问次数最少的页面置换出来。<br>此算法的实现要花费的开销很大，并且要确定一个合适的周期T也有一定的难度，就不在分析了。<h4 id=\"3-OPT-（理想）\"><a href=\"#3-OPT-（理想）\" class=\"headerlink\" title=\"3. OPT （理想）\"></a>3. OPT （理想）</h4>此算法置换以后不再需要或最长时间以后才会用到的页面。这一算法一般不可能实现，但它可以作为衡量其他页面置换算法的标准。<br><br>分析过程，如下图：</li>\n</ul>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/%E5%9B%BE3.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n","excerpt":"","more":"<blockquote>\n<p>本文主要分析操作系统中涉及到的一些常见的置换算法，并不对涉及的操作系统内容过多介绍。这些算法在其他的计算机应用中也有体现，基本原理都是一致的，可参考理解。</p>\n</blockquote>\n<h3 id=\"一、前提说明\"><a href=\"#一、前提说明\" class=\"headerlink\" title=\"一、前提说明\"></a>一、前提说明</h3><p>本文主要针对一个例子进行说明，以下的算法实现过程均是按照本例进行分析。页面的走向为：</p>\n<pre><code>4 3 2 1 4 3 5 4 3 2 1 5 \n</code></pre><p>一段程序在内存中，分配3个页面，初始情况下为空。<br>以下依次根据不同的算法进行页面置换过程的分析。</p>\n<h3 id=\"二、算法分析过程\"><a href=\"#二、算法分析过程\" class=\"headerlink\" title=\"二、算法分析过程\"></a>二、算法分析过程</h3><h4 id=\"1-FIFO（先进先出）\"><a href=\"#1-FIFO（先进先出）\" class=\"headerlink\" title=\"1. FIFO（先进先出）\"></a>1. FIFO（先进先出）</h4><p>FIFO算是最简单、最容易理解的算法了，只要按照依次装入内存的页面的页号按照进入的先后次序排好队列，每次总是从队首出，队尾出。当发生缺页时，置换队首的页面即可。<br><br>对上面的页面走向序列，分析过程如下图：</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/%E5%9B%BE1.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<h4 id=\"2-LRU-（最近最少使用-Least-Recently-Used）\"><a href=\"#2-LRU-（最近最少使用-Least-Recently-Used）\" class=\"headerlink\" title=\"2. LRU （最近最少使用 Least Recently Used）\"></a>2. LRU （最近最少使用 Least Recently Used）</h4><p>在缺页发生时，选择离现在最长时间内，没有被访问过的页面置换出来。<br><br>分析过程，如下图：</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/%E5%9B%BE2.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<ul>\n<li>此算法应用的比较广泛，尤其是拿来做缓存算法。Android的API中，已经封装了相关的LRU的算法直接可以调用。</li>\n<li>一些图片的缓存算法都是使用LRU进行缓存优化的。ImageLoader框架更是将好几种缓存算法融合到里面，可以灵活选用。详细可以查看源码的实现。<h4 id=\"3-LFU-（最近最不常用-Least-Frequently-Used）\"><a href=\"#3-LFU-（最近最不常用-Least-Frequently-Used）\" class=\"headerlink\" title=\"3. LFU （最近最不常用 Least Frequently Used）\"></a>3. LFU （最近最不常用 Least Frequently Used）</h4>选择访问次数最少的页面置换出来。<br>此算法的实现要花费的开销很大，并且要确定一个合适的周期T也有一定的难度，就不在分析了。<h4 id=\"3-OPT-（理想）\"><a href=\"#3-OPT-（理想）\" class=\"headerlink\" title=\"3. OPT （理想）\"></a>3. OPT （理想）</h4>此算法置换以后不再需要或最长时间以后才会用到的页面。这一算法一般不可能实现，但它可以作为衡量其他页面置换算法的标准。<br><br>分析过程，如下图：</li>\n</ul>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/%E5%9B%BE3.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n"},{"title":"Spring 学习（三）","date":"2017-01-07T04:01:00.000Z","_content":"> 本次学习内容：Spring AOP相关\n\n# 问题引入\n\n``` java\npublic class User {\n\n    public void addUser() {\n        // ...\n    }\n}\n```\n—— 需求，在上面原有的功能中，加入用户日志，记录用户信息？如何做？\n—— 方法尝试：\n\n``` java\npublic class BaseUser {\n    \n    public void writeLog() {\n        // 写日志，记录用户信息\n    }\n}\n```\n\n``` java\npublic class User extends BaseUser{\n\n    public void addUser() {\n        // ...\n        super.writeLog();\n    }\n}\n```\n这种 纵向 的抽取，并不能友好的解决问题，一旦父类的名称改变，后面也要接着更改\n\n# AOP 原理\n## 有接口\n\n``` java\npublic interface Dao {\n    \n    void add();\n}\n\npublic class DaoImpl implements Dao {\n    \n    public void add() {\n        \n    }\n}\n```\n使用 jdk 动态代理，生成 接口实现类的代理对象，来增相应方法的功能\n## 没有接口\n\n``` java\npublic class User {\n\n    public void addUser() {\n    }\n}\n```\n使用 cglib 动态代理，生成其子类的代理对象，调用父类的方法，来增强相应功能\n\n# 几个重要 术语\n* 连接点 JoinPoint：类中哪些方法可以被 增强，这些方法就是 连接点\n* 切入点 PointCut：类中实际增强类那些方法（如：add,update)，这些方法称为 切入点\n* 通知／增强 advice: 增强的逻辑，如：要扩展日志功能，则日志功能为 增强／通知\n分为：前置通知(方法之前执行），后置通知，异常通知(方法出现异常)，最终通知(后置之后执行)，环绕通知(方法之前和之后执行)\n* 切面 aspect：把增强功能应用到具体方法上，这个过程叫切面。即：把增强应用到切入点的过程\n* 目标对象 target: 要增强的类，代理的目标对象\n* 织入 weaving: 把增强应用到目标的过程，把advice 应用到target的过程\n* 代理 Proxy: 一个类被aop织入增强后，就产生一个结果代理类\n\n# 实现AOP\n## xml 配置实现\n* 切入点配置表达式：\n**execution(<访问修饰符> <返回类型><方法名>(参数)<异常>）**\ne.g.\n\n        execution(* com.gjr.aop.Book.add(..))\n        execution(* com.gjr.aop.Book.*(..))          book 类下的所有方法加强\n        execution(* *.*(..))                         所有类下的所有方法加强\n        execution(* xxx*(..))                        所有xxx开头的方法加强\n\n<br>\ndemo 示例：\n\n``` java\npublic class Book {\n\n    public void show() {\n        System.out.println(\"show book ....\");\n    }\n}\npublic class MyBook {\n\n    public void addFunctionBefore() {\n        System.out.println(\"在前面，加点功能 。。。\");\n    }\n\n    public void addFunctionAfter() {\n        System.out.println(\"在后面，加点功能 。。。\");\n    }\n\n    public void arroundFunction(ProceedingJoinPoint proceedingJoinPoint) throws Throwable {\n        System.out.println(\"之前环绕 。。。\");\n        proceedingJoinPoint.proceed();\n        System.out.println(\"之后环绕 。。。\");\n        // 注意 环绕通知 的参数：ProceedingJoinPoint\n    }\n}\n```\nxml配置：\n\n``` xml\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xmlns:aop=\"http://www.springframework.org/schema/aop\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n            http://www.springframework.org/schema/beans/spring-beans.xsd\n            http://www.springframework.org/schema/aop\n            http://www.springframework.org/schema/aop/spring-aop.xsd\">\n    <!-- 加入 aop 约束，xml 配置aop 来实现功能—>\n\n    <bean id=\"book\" class=\"com.gjr.aspect.Book\"/>\n    <bean id=\"myBook\" class=\"com.gjr.aspect.MyBook\"/>\n\n    <aop:config>\n        <!-- 切点: 需要被增强功能的方法 -->\n        <aop:pointcut id=\"bookPoint\" expression=\"execution(* com.gjr.aspect.Book.show(..))\"/>\n        <!-- 切面: 把增强方法加到需要增强的方法上 -->\n        <aop:aspect ref=\"myBook\">\n            <aop:before method=\"addFunctionBefore\" pointcut-ref=\"bookPoint\"/>\n            <aop:after method=\"addFunctionAfter\" pointcut-ref=\"bookPoint\"/>\n            <aop:around method=\"arroundFunction\" pointcut-ref=\"bookPoint\"/>\n        </aop:aspect>\n    </aop:config>\n</beans>\n```\n![](http://7xr1vo.com1.z0.glb.clouddn.com/DE37AB73-E35C-4515-8EE9-377A606E3956.png)\n\n3种 切面类型同时存在时：before最先调用，after最后调用\n## 注解实现 aop（只列出@Before，其他的相同）\n\n``` java\npublic class Order {\n\n    public void show() {\n        System.out.println(\"show order ...\");\n    }\n}\n@Aspect\npublic class MyOrder {\n\n    @Before(value = \"execution(* Order.show(..))\")\n    public void addFunction() {\n        System.out.println(\"add function ...\");\n    }\n}\n```\n\n``` xml\n<bean id=\"order\" class=\"com.gjr.annaop.Order\"/>\n<bean id=\"myOrder\" class=\"com.gjr.annaop.MyOrder\"/>\n\n<!-- 注解 实现 aop-->\n<aop:aspectj-autoproxy/>\n```\n![](http://7xr1vo.com1.z0.glb.clouddn.com/83664DD4-196B-44DB-BF22-16A94F0FFA01.png)\n\n\n# Spring 相关的 pom 配置\n| GroupId      |     ArtifactId |   Description   |\n| :-------- | --------:| :------: |\n| org.springframework    |   spring-aop |  Proxy-based AOP support  |\n| org.springframework    |   spring-aspects |  AspectJ based aspects  |\n| org.springframework    |   spring-beans |  Beans support, including Groovy |\n| org.springframework    |   spring-context |  Application context runtime, including scheduling and remoting abstractions |\n| org.springframework    |   spring-context-support |  Support classes for integrating common third-party libraries into a Spring application context  |\n| org.springframework    |   spring-core |  Core utilities, used by many other Spring modules  |\n| org.springframework    |   spring-expression |  Spring Expression Language (SpEL)  |\n| org.springframework    |   spring-instrument |  Instrumentation agent for JVM bootstrapping  |\n| org.springframework    |   spring-instrument-tomcat |  Instrumentation agent for Tomcat  |\n| org.springframework    |   spring-jdbc |  JDBC support package, including DataSource setup and JDBC access support  |\n| org.springframework    |   spring-jms |  JMS support package, including helper classes to send and receive JMS messages  |\n| org.springframework    |   spring-messaging |  Support for messaging architectures and protocols  |\n| org.springframework    |   spring-orm |  Object/Relational Mapping, including JPA and Hibernate support  |\n| org.springframework    |   spring-oxm |  Object/XML Mapping  |\n| org.springframework    |   spring-test |  Support for unit testing and integration testing Spring components  |\n| org.springframework    |   spring-tx |  Transaction infrastructure, including DAO support and JCA integration  |\n| org.springframework    |   spring-web |  Web support packages, including client and web remoting  |\n| org.springframework    |   spring-webmvc |  REST Web Services and model-view-controller implementation for web applications  |\n| org.springframework    |   spring-webmvc-portlet |  MVC implementation to be used in a Portlet environment  |\n| org.springframework    |   spring-websocket |  WebSocket and SockJS implementations, including STOMP support  |\n\n\n\n\n<br>\n\n附录\ndemo 地址：\nhttps://github.com/fenglincanyi/springdemo2","source":"_posts/Spring 学习（三）.md","raw":"---\ntitle: Spring 学习（三）\ndate: 2017-01-07 12:01\ncategories: Java后台\ntags: Spring\n---\n> 本次学习内容：Spring AOP相关\n\n# 问题引入\n\n``` java\npublic class User {\n\n    public void addUser() {\n        // ...\n    }\n}\n```\n—— 需求，在上面原有的功能中，加入用户日志，记录用户信息？如何做？\n—— 方法尝试：\n\n``` java\npublic class BaseUser {\n    \n    public void writeLog() {\n        // 写日志，记录用户信息\n    }\n}\n```\n\n``` java\npublic class User extends BaseUser{\n\n    public void addUser() {\n        // ...\n        super.writeLog();\n    }\n}\n```\n这种 纵向 的抽取，并不能友好的解决问题，一旦父类的名称改变，后面也要接着更改\n\n# AOP 原理\n## 有接口\n\n``` java\npublic interface Dao {\n    \n    void add();\n}\n\npublic class DaoImpl implements Dao {\n    \n    public void add() {\n        \n    }\n}\n```\n使用 jdk 动态代理，生成 接口实现类的代理对象，来增相应方法的功能\n## 没有接口\n\n``` java\npublic class User {\n\n    public void addUser() {\n    }\n}\n```\n使用 cglib 动态代理，生成其子类的代理对象，调用父类的方法，来增强相应功能\n\n# 几个重要 术语\n* 连接点 JoinPoint：类中哪些方法可以被 增强，这些方法就是 连接点\n* 切入点 PointCut：类中实际增强类那些方法（如：add,update)，这些方法称为 切入点\n* 通知／增强 advice: 增强的逻辑，如：要扩展日志功能，则日志功能为 增强／通知\n分为：前置通知(方法之前执行），后置通知，异常通知(方法出现异常)，最终通知(后置之后执行)，环绕通知(方法之前和之后执行)\n* 切面 aspect：把增强功能应用到具体方法上，这个过程叫切面。即：把增强应用到切入点的过程\n* 目标对象 target: 要增强的类，代理的目标对象\n* 织入 weaving: 把增强应用到目标的过程，把advice 应用到target的过程\n* 代理 Proxy: 一个类被aop织入增强后，就产生一个结果代理类\n\n# 实现AOP\n## xml 配置实现\n* 切入点配置表达式：\n**execution(<访问修饰符> <返回类型><方法名>(参数)<异常>）**\ne.g.\n\n        execution(* com.gjr.aop.Book.add(..))\n        execution(* com.gjr.aop.Book.*(..))          book 类下的所有方法加强\n        execution(* *.*(..))                         所有类下的所有方法加强\n        execution(* xxx*(..))                        所有xxx开头的方法加强\n\n<br>\ndemo 示例：\n\n``` java\npublic class Book {\n\n    public void show() {\n        System.out.println(\"show book ....\");\n    }\n}\npublic class MyBook {\n\n    public void addFunctionBefore() {\n        System.out.println(\"在前面，加点功能 。。。\");\n    }\n\n    public void addFunctionAfter() {\n        System.out.println(\"在后面，加点功能 。。。\");\n    }\n\n    public void arroundFunction(ProceedingJoinPoint proceedingJoinPoint) throws Throwable {\n        System.out.println(\"之前环绕 。。。\");\n        proceedingJoinPoint.proceed();\n        System.out.println(\"之后环绕 。。。\");\n        // 注意 环绕通知 的参数：ProceedingJoinPoint\n    }\n}\n```\nxml配置：\n\n``` xml\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xmlns:aop=\"http://www.springframework.org/schema/aop\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n            http://www.springframework.org/schema/beans/spring-beans.xsd\n            http://www.springframework.org/schema/aop\n            http://www.springframework.org/schema/aop/spring-aop.xsd\">\n    <!-- 加入 aop 约束，xml 配置aop 来实现功能—>\n\n    <bean id=\"book\" class=\"com.gjr.aspect.Book\"/>\n    <bean id=\"myBook\" class=\"com.gjr.aspect.MyBook\"/>\n\n    <aop:config>\n        <!-- 切点: 需要被增强功能的方法 -->\n        <aop:pointcut id=\"bookPoint\" expression=\"execution(* com.gjr.aspect.Book.show(..))\"/>\n        <!-- 切面: 把增强方法加到需要增强的方法上 -->\n        <aop:aspect ref=\"myBook\">\n            <aop:before method=\"addFunctionBefore\" pointcut-ref=\"bookPoint\"/>\n            <aop:after method=\"addFunctionAfter\" pointcut-ref=\"bookPoint\"/>\n            <aop:around method=\"arroundFunction\" pointcut-ref=\"bookPoint\"/>\n        </aop:aspect>\n    </aop:config>\n</beans>\n```\n![](http://7xr1vo.com1.z0.glb.clouddn.com/DE37AB73-E35C-4515-8EE9-377A606E3956.png)\n\n3种 切面类型同时存在时：before最先调用，after最后调用\n## 注解实现 aop（只列出@Before，其他的相同）\n\n``` java\npublic class Order {\n\n    public void show() {\n        System.out.println(\"show order ...\");\n    }\n}\n@Aspect\npublic class MyOrder {\n\n    @Before(value = \"execution(* Order.show(..))\")\n    public void addFunction() {\n        System.out.println(\"add function ...\");\n    }\n}\n```\n\n``` xml\n<bean id=\"order\" class=\"com.gjr.annaop.Order\"/>\n<bean id=\"myOrder\" class=\"com.gjr.annaop.MyOrder\"/>\n\n<!-- 注解 实现 aop-->\n<aop:aspectj-autoproxy/>\n```\n![](http://7xr1vo.com1.z0.glb.clouddn.com/83664DD4-196B-44DB-BF22-16A94F0FFA01.png)\n\n\n# Spring 相关的 pom 配置\n| GroupId      |     ArtifactId |   Description   |\n| :-------- | --------:| :------: |\n| org.springframework    |   spring-aop |  Proxy-based AOP support  |\n| org.springframework    |   spring-aspects |  AspectJ based aspects  |\n| org.springframework    |   spring-beans |  Beans support, including Groovy |\n| org.springframework    |   spring-context |  Application context runtime, including scheduling and remoting abstractions |\n| org.springframework    |   spring-context-support |  Support classes for integrating common third-party libraries into a Spring application context  |\n| org.springframework    |   spring-core |  Core utilities, used by many other Spring modules  |\n| org.springframework    |   spring-expression |  Spring Expression Language (SpEL)  |\n| org.springframework    |   spring-instrument |  Instrumentation agent for JVM bootstrapping  |\n| org.springframework    |   spring-instrument-tomcat |  Instrumentation agent for Tomcat  |\n| org.springframework    |   spring-jdbc |  JDBC support package, including DataSource setup and JDBC access support  |\n| org.springframework    |   spring-jms |  JMS support package, including helper classes to send and receive JMS messages  |\n| org.springframework    |   spring-messaging |  Support for messaging architectures and protocols  |\n| org.springframework    |   spring-orm |  Object/Relational Mapping, including JPA and Hibernate support  |\n| org.springframework    |   spring-oxm |  Object/XML Mapping  |\n| org.springframework    |   spring-test |  Support for unit testing and integration testing Spring components  |\n| org.springframework    |   spring-tx |  Transaction infrastructure, including DAO support and JCA integration  |\n| org.springframework    |   spring-web |  Web support packages, including client and web remoting  |\n| org.springframework    |   spring-webmvc |  REST Web Services and model-view-controller implementation for web applications  |\n| org.springframework    |   spring-webmvc-portlet |  MVC implementation to be used in a Portlet environment  |\n| org.springframework    |   spring-websocket |  WebSocket and SockJS implementations, including STOMP support  |\n\n\n\n\n<br>\n\n附录\ndemo 地址：\nhttps://github.com/fenglincanyi/springdemo2","slug":"Spring 学习（三）","published":1,"updated":"2017-03-05T08:53:15.000Z","_id":"cizweuq2z0000jqqwdyjvohd4","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>本次学习内容：Spring AOP相关</p>\n</blockquote>\n<h1 id=\"问题引入\"><a href=\"#问题引入\" class=\"headerlink\" title=\"问题引入\"></a>问题引入</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addUser</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// ...</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>—— 需求，在上面原有的功能中，加入用户日志，记录用户信息？如何做？<br>—— 方法尝试：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BaseUser</span> </span>&#123;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">writeLog</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// 写日志，记录用户信息</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span> <span class=\"keyword\">extends</span> <span class=\"title\">BaseUser</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addUser</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// ...</span></div><div class=\"line\">        <span class=\"keyword\">super</span>.writeLog();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这种 纵向 的抽取，并不能友好的解决问题，一旦父类的名称改变，后面也要接着更改</p>\n<h1 id=\"AOP-原理\"><a href=\"#AOP-原理\" class=\"headerlink\" title=\"AOP 原理\"></a>AOP 原理</h1><h2 id=\"有接口\"><a href=\"#有接口\" class=\"headerlink\" title=\"有接口\"></a>有接口</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Dao</span> </span>&#123;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">()</span></span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DaoImpl</span> <span class=\"keyword\">implements</span> <span class=\"title\">Dao</span> </span>&#123;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        </div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>使用 jdk 动态代理，生成 接口实现类的代理对象，来增相应方法的功能</p>\n<h2 id=\"没有接口\"><a href=\"#没有接口\" class=\"headerlink\" title=\"没有接口\"></a>没有接口</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addUser</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>使用 cglib 动态代理，生成其子类的代理对象，调用父类的方法，来增强相应功能</p>\n<h1 id=\"几个重要-术语\"><a href=\"#几个重要-术语\" class=\"headerlink\" title=\"几个重要 术语\"></a>几个重要 术语</h1><ul>\n<li>连接点 JoinPoint：类中哪些方法可以被 增强，这些方法就是 连接点</li>\n<li>切入点 PointCut：类中实际增强类那些方法（如：add,update)，这些方法称为 切入点</li>\n<li>通知／增强 advice: 增强的逻辑，如：要扩展日志功能，则日志功能为 增强／通知<br>分为：前置通知(方法之前执行），后置通知，异常通知(方法出现异常)，最终通知(后置之后执行)，环绕通知(方法之前和之后执行)</li>\n<li>切面 aspect：把增强功能应用到具体方法上，这个过程叫切面。即：把增强应用到切入点的过程</li>\n<li>目标对象 target: 要增强的类，代理的目标对象</li>\n<li>织入 weaving: 把增强应用到目标的过程，把advice 应用到target的过程</li>\n<li>代理 Proxy: 一个类被aop织入增强后，就产生一个结果代理类</li>\n</ul>\n<h1 id=\"实现AOP\"><a href=\"#实现AOP\" class=\"headerlink\" title=\"实现AOP\"></a>实现AOP</h1><h2 id=\"xml-配置实现\"><a href=\"#xml-配置实现\" class=\"headerlink\" title=\"xml 配置实现\"></a>xml 配置实现</h2><ul>\n<li><p>切入点配置表达式：<br><strong>execution(&lt;访问修饰符&gt; &lt;返回类型&gt;&lt;方法名&gt;(参数)&lt;异常&gt;）</strong><br>e.g.</p>\n<pre><code>execution(* com.gjr.aop.Book.add(..))\nexecution(* com.gjr.aop.Book.*(..))          book 类下的所有方法加强\nexecution(* *.*(..))                         所有类下的所有方法加强\nexecution(* xxx*(..))                        所有xxx开头的方法加强\n</code></pre></li>\n</ul>\n<p><br><br>demo 示例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Book</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">show</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        System.out.println(<span class=\"string\">\"show book ....\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyBook</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addFunctionBefore</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        System.out.println(<span class=\"string\">\"在前面，加点功能 。。。\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addFunctionAfter</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        System.out.println(<span class=\"string\">\"在后面，加点功能 。。。\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">arroundFunction</span><span class=\"params\">(ProceedingJoinPoint proceedingJoinPoint)</span> <span class=\"keyword\">throws</span> Throwable </span>&#123;</div><div class=\"line\">        System.out.println(<span class=\"string\">\"之前环绕 。。。\"</span>);</div><div class=\"line\">        proceedingJoinPoint.proceed();</div><div class=\"line\">        System.out.println(<span class=\"string\">\"之后环绕 。。。\"</span>);</div><div class=\"line\">        <span class=\"comment\">// 注意 环绕通知 的参数：ProceedingJoinPoint</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>xml配置：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans\"</span></span></div><div class=\"line\">       <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></div><div class=\"line\">       <span class=\"attr\">xmlns:aop</span>=<span class=\"string\">\"http://www.springframework.org/schema/aop\"</span></div><div class=\"line\">       <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans</span></div><div class=\"line\">            http://www.springframework.org/schema/beans/spring-beans.xsd</div><div class=\"line\">            http://www.springframework.org/schema/aop</div><div class=\"line\">            http://www.springframework.org/schema/aop/spring-aop.xsd\"&gt;</div><div class=\"line\">    <span class=\"comment\">&lt;!-- 加入 aop 约束，xml 配置aop 来实现功能—&gt;</span></div><div class=\"line\"></div><div class=\"line\">    &lt;bean id=\"book\" class=\"com.gjr.aspect.Book\"/&gt;</div><div class=\"line\">    &lt;bean id=\"myBook\" class=\"com.gjr.aspect.MyBook\"/&gt;</div><div class=\"line\"></div><div class=\"line\">    &lt;aop:config&gt;</div><div class=\"line\">        &lt;!-- 切点: 需要被增强功能的方法 --&gt;</div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">aop:pointcut</span> <span class=\"attr\">id</span>=<span class=\"string\">\"bookPoint\"</span> <span class=\"attr\">expression</span>=<span class=\"string\">\"execution(* com.gjr.aspect.Book.show(..))\"</span>/&gt;</span></div><div class=\"line\">        <span class=\"comment\">&lt;!-- 切面: 把增强方法加到需要增强的方法上 --&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">aop:aspect</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"myBook\"</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">aop:before</span> <span class=\"attr\">method</span>=<span class=\"string\">\"addFunctionBefore\"</span> <span class=\"attr\">pointcut-ref</span>=<span class=\"string\">\"bookPoint\"</span>/&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">aop:after</span> <span class=\"attr\">method</span>=<span class=\"string\">\"addFunctionAfter\"</span> <span class=\"attr\">pointcut-ref</span>=<span class=\"string\">\"bookPoint\"</span>/&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">aop:around</span> <span class=\"attr\">method</span>=<span class=\"string\">\"arroundFunction\"</span> <span class=\"attr\">pointcut-ref</span>=<span class=\"string\">\"bookPoint\"</span>/&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">aop:aspect</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">aop:config</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/DE37AB73-E35C-4515-8EE9-377A606E3956.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>3种 切面类型同时存在时：before最先调用，after最后调用</p>\n<h2 id=\"注解实现-aop（只列出-Before，其他的相同）\"><a href=\"#注解实现-aop（只列出-Before，其他的相同）\" class=\"headerlink\" title=\"注解实现 aop（只列出@Before，其他的相同）\"></a>注解实现 aop（只列出@Before，其他的相同）</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Order</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">show</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        System.out.println(<span class=\"string\">\"show order ...\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"meta\">@Aspect</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyOrder</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Before</span>(value = <span class=\"string\">\"execution(* Order.show(..))\"</span>)</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addFunction</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        System.out.println(<span class=\"string\">\"add function ...\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"order\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.gjr.annaop.Order\"</span>/&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"myOrder\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.gjr.annaop.MyOrder\"</span>/&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- 注解 实现 aop--&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">aop:aspectj-autoproxy</span>/&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/83664DD4-196B-44DB-BF22-16A94F0FFA01.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<h1 id=\"Spring-相关的-pom-配置\"><a href=\"#Spring-相关的-pom-配置\" class=\"headerlink\" title=\"Spring 相关的 pom 配置\"></a>Spring 相关的 pom 配置</h1><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">GroupId</th>\n<th style=\"text-align:right\">ArtifactId</th>\n<th style=\"text-align:center\">Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">org.springframework</td>\n<td style=\"text-align:right\">spring-aop</td>\n<td style=\"text-align:center\">Proxy-based AOP support</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">org.springframework</td>\n<td style=\"text-align:right\">spring-aspects</td>\n<td style=\"text-align:center\">AspectJ based aspects</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">org.springframework</td>\n<td style=\"text-align:right\">spring-beans</td>\n<td style=\"text-align:center\">Beans support, including Groovy</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">org.springframework</td>\n<td style=\"text-align:right\">spring-context</td>\n<td style=\"text-align:center\">Application context runtime, including scheduling and remoting abstractions</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">org.springframework</td>\n<td style=\"text-align:right\">spring-context-support</td>\n<td style=\"text-align:center\">Support classes for integrating common third-party libraries into a Spring application context</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">org.springframework</td>\n<td style=\"text-align:right\">spring-core</td>\n<td style=\"text-align:center\">Core utilities, used by many other Spring modules</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">org.springframework</td>\n<td style=\"text-align:right\">spring-expression</td>\n<td style=\"text-align:center\">Spring Expression Language (SpEL)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">org.springframework</td>\n<td style=\"text-align:right\">spring-instrument</td>\n<td style=\"text-align:center\">Instrumentation agent for JVM bootstrapping</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">org.springframework</td>\n<td style=\"text-align:right\">spring-instrument-tomcat</td>\n<td style=\"text-align:center\">Instrumentation agent for Tomcat</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">org.springframework</td>\n<td style=\"text-align:right\">spring-jdbc</td>\n<td style=\"text-align:center\">JDBC support package, including DataSource setup and JDBC access support</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">org.springframework</td>\n<td style=\"text-align:right\">spring-jms</td>\n<td style=\"text-align:center\">JMS support package, including helper classes to send and receive JMS messages</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">org.springframework</td>\n<td style=\"text-align:right\">spring-messaging</td>\n<td style=\"text-align:center\">Support for messaging architectures and protocols</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">org.springframework</td>\n<td style=\"text-align:right\">spring-orm</td>\n<td style=\"text-align:center\">Object/Relational Mapping, including JPA and Hibernate support</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">org.springframework</td>\n<td style=\"text-align:right\">spring-oxm</td>\n<td style=\"text-align:center\">Object/XML Mapping</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">org.springframework</td>\n<td style=\"text-align:right\">spring-test</td>\n<td style=\"text-align:center\">Support for unit testing and integration testing Spring components</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">org.springframework</td>\n<td style=\"text-align:right\">spring-tx</td>\n<td style=\"text-align:center\">Transaction infrastructure, including DAO support and JCA integration</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">org.springframework</td>\n<td style=\"text-align:right\">spring-web</td>\n<td style=\"text-align:center\">Web support packages, including client and web remoting</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">org.springframework</td>\n<td style=\"text-align:right\">spring-webmvc</td>\n<td style=\"text-align:center\">REST Web Services and model-view-controller implementation for web applications</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">org.springframework</td>\n<td style=\"text-align:right\">spring-webmvc-portlet</td>\n<td style=\"text-align:center\">MVC implementation to be used in a Portlet environment</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">org.springframework</td>\n<td style=\"text-align:right\">spring-websocket</td>\n<td style=\"text-align:center\">WebSocket and SockJS implementations, including STOMP support</td>\n</tr>\n</tbody>\n</table>\n<p><br></p>\n<p>附录<br>demo 地址：<br><a href=\"https://github.com/fenglincanyi/springdemo2\" target=\"_blank\" rel=\"external\">https://github.com/fenglincanyi/springdemo2</a></p>\n","excerpt":"","more":"<blockquote>\n<p>本次学习内容：Spring AOP相关</p>\n</blockquote>\n<h1 id=\"问题引入\"><a href=\"#问题引入\" class=\"headerlink\" title=\"问题引入\"></a>问题引入</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addUser</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// ...</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>—— 需求，在上面原有的功能中，加入用户日志，记录用户信息？如何做？<br>—— 方法尝试：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BaseUser</span> </span>&#123;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">writeLog</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// 写日志，记录用户信息</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span> <span class=\"keyword\">extends</span> <span class=\"title\">BaseUser</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addUser</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// ...</span></div><div class=\"line\">        <span class=\"keyword\">super</span>.writeLog();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这种 纵向 的抽取，并不能友好的解决问题，一旦父类的名称改变，后面也要接着更改</p>\n<h1 id=\"AOP-原理\"><a href=\"#AOP-原理\" class=\"headerlink\" title=\"AOP 原理\"></a>AOP 原理</h1><h2 id=\"有接口\"><a href=\"#有接口\" class=\"headerlink\" title=\"有接口\"></a>有接口</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Dao</span> </span>&#123;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">()</span></span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DaoImpl</span> <span class=\"keyword\">implements</span> <span class=\"title\">Dao</span> </span>&#123;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        </div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>使用 jdk 动态代理，生成 接口实现类的代理对象，来增相应方法的功能</p>\n<h2 id=\"没有接口\"><a href=\"#没有接口\" class=\"headerlink\" title=\"没有接口\"></a>没有接口</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addUser</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>使用 cglib 动态代理，生成其子类的代理对象，调用父类的方法，来增强相应功能</p>\n<h1 id=\"几个重要-术语\"><a href=\"#几个重要-术语\" class=\"headerlink\" title=\"几个重要 术语\"></a>几个重要 术语</h1><ul>\n<li>连接点 JoinPoint：类中哪些方法可以被 增强，这些方法就是 连接点</li>\n<li>切入点 PointCut：类中实际增强类那些方法（如：add,update)，这些方法称为 切入点</li>\n<li>通知／增强 advice: 增强的逻辑，如：要扩展日志功能，则日志功能为 增强／通知<br>分为：前置通知(方法之前执行），后置通知，异常通知(方法出现异常)，最终通知(后置之后执行)，环绕通知(方法之前和之后执行)</li>\n<li>切面 aspect：把增强功能应用到具体方法上，这个过程叫切面。即：把增强应用到切入点的过程</li>\n<li>目标对象 target: 要增强的类，代理的目标对象</li>\n<li>织入 weaving: 把增强应用到目标的过程，把advice 应用到target的过程</li>\n<li>代理 Proxy: 一个类被aop织入增强后，就产生一个结果代理类</li>\n</ul>\n<h1 id=\"实现AOP\"><a href=\"#实现AOP\" class=\"headerlink\" title=\"实现AOP\"></a>实现AOP</h1><h2 id=\"xml-配置实现\"><a href=\"#xml-配置实现\" class=\"headerlink\" title=\"xml 配置实现\"></a>xml 配置实现</h2><ul>\n<li><p>切入点配置表达式：<br><strong>execution(&lt;访问修饰符&gt; &lt;返回类型&gt;&lt;方法名&gt;(参数)&lt;异常&gt;）</strong><br>e.g.</p>\n<pre><code>execution(* com.gjr.aop.Book.add(..))\nexecution(* com.gjr.aop.Book.*(..))          book 类下的所有方法加强\nexecution(* *.*(..))                         所有类下的所有方法加强\nexecution(* xxx*(..))                        所有xxx开头的方法加强\n</code></pre></li>\n</ul>\n<p><br><br>demo 示例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Book</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">show</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        System.out.println(<span class=\"string\">\"show book ....\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyBook</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addFunctionBefore</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        System.out.println(<span class=\"string\">\"在前面，加点功能 。。。\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addFunctionAfter</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        System.out.println(<span class=\"string\">\"在后面，加点功能 。。。\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">arroundFunction</span><span class=\"params\">(ProceedingJoinPoint proceedingJoinPoint)</span> <span class=\"keyword\">throws</span> Throwable </span>&#123;</div><div class=\"line\">        System.out.println(<span class=\"string\">\"之前环绕 。。。\"</span>);</div><div class=\"line\">        proceedingJoinPoint.proceed();</div><div class=\"line\">        System.out.println(<span class=\"string\">\"之后环绕 。。。\"</span>);</div><div class=\"line\">        <span class=\"comment\">// 注意 环绕通知 的参数：ProceedingJoinPoint</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>xml配置：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans\"</span></div><div class=\"line\">       <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></div><div class=\"line\">       <span class=\"attr\">xmlns:aop</span>=<span class=\"string\">\"http://www.springframework.org/schema/aop\"</span></div><div class=\"line\">       <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans</div><div class=\"line\">            http://www.springframework.org/schema/beans/spring-beans.xsd</div><div class=\"line\">            http://www.springframework.org/schema/aop</div><div class=\"line\">            http://www.springframework.org/schema/aop/spring-aop.xsd\"</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- 加入 aop 约束，xml 配置aop 来实现功能—&gt;</div><div class=\"line\"></div><div class=\"line\">    &lt;bean id=\"book\" class=\"com.gjr.aspect.Book\"/&gt;</div><div class=\"line\">    &lt;bean id=\"myBook\" class=\"com.gjr.aspect.MyBook\"/&gt;</div><div class=\"line\"></div><div class=\"line\">    &lt;aop:config&gt;</div><div class=\"line\">        &lt;!-- 切点: 需要被增强功能的方法 --&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">aop:pointcut</span> <span class=\"attr\">id</span>=<span class=\"string\">\"bookPoint\"</span> <span class=\"attr\">expression</span>=<span class=\"string\">\"execution(* com.gjr.aspect.Book.show(..))\"</span>/&gt;</span></div><div class=\"line\">        <span class=\"comment\">&lt;!-- 切面: 把增强方法加到需要增强的方法上 --&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">aop:aspect</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"myBook\"</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">aop:before</span> <span class=\"attr\">method</span>=<span class=\"string\">\"addFunctionBefore\"</span> <span class=\"attr\">pointcut-ref</span>=<span class=\"string\">\"bookPoint\"</span>/&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">aop:after</span> <span class=\"attr\">method</span>=<span class=\"string\">\"addFunctionAfter\"</span> <span class=\"attr\">pointcut-ref</span>=<span class=\"string\">\"bookPoint\"</span>/&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">aop:around</span> <span class=\"attr\">method</span>=<span class=\"string\">\"arroundFunction\"</span> <span class=\"attr\">pointcut-ref</span>=<span class=\"string\">\"bookPoint\"</span>/&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">aop:aspect</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">aop:config</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/DE37AB73-E35C-4515-8EE9-377A606E3956.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>3种 切面类型同时存在时：before最先调用，after最后调用</p>\n<h2 id=\"注解实现-aop（只列出-Before，其他的相同）\"><a href=\"#注解实现-aop（只列出-Before，其他的相同）\" class=\"headerlink\" title=\"注解实现 aop（只列出@Before，其他的相同）\"></a>注解实现 aop（只列出@Before，其他的相同）</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Order</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">show</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        System.out.println(<span class=\"string\">\"show order ...\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"meta\">@Aspect</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyOrder</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Before</span>(value = <span class=\"string\">\"execution(* Order.show(..))\"</span>)</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addFunction</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        System.out.println(<span class=\"string\">\"add function ...\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"order\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.gjr.annaop.Order\"</span>/&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"myOrder\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.gjr.annaop.MyOrder\"</span>/&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- 注解 实现 aop--&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">aop:aspectj-autoproxy</span>/&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/83664DD4-196B-44DB-BF22-16A94F0FFA01.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<h1 id=\"Spring-相关的-pom-配置\"><a href=\"#Spring-相关的-pom-配置\" class=\"headerlink\" title=\"Spring 相关的 pom 配置\"></a>Spring 相关的 pom 配置</h1><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">GroupId</th>\n<th style=\"text-align:right\">ArtifactId</th>\n<th style=\"text-align:center\">Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">org.springframework</td>\n<td style=\"text-align:right\">spring-aop</td>\n<td style=\"text-align:center\">Proxy-based AOP support</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">org.springframework</td>\n<td style=\"text-align:right\">spring-aspects</td>\n<td style=\"text-align:center\">AspectJ based aspects</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">org.springframework</td>\n<td style=\"text-align:right\">spring-beans</td>\n<td style=\"text-align:center\">Beans support, including Groovy</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">org.springframework</td>\n<td style=\"text-align:right\">spring-context</td>\n<td style=\"text-align:center\">Application context runtime, including scheduling and remoting abstractions</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">org.springframework</td>\n<td style=\"text-align:right\">spring-context-support</td>\n<td style=\"text-align:center\">Support classes for integrating common third-party libraries into a Spring application context</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">org.springframework</td>\n<td style=\"text-align:right\">spring-core</td>\n<td style=\"text-align:center\">Core utilities, used by many other Spring modules</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">org.springframework</td>\n<td style=\"text-align:right\">spring-expression</td>\n<td style=\"text-align:center\">Spring Expression Language (SpEL)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">org.springframework</td>\n<td style=\"text-align:right\">spring-instrument</td>\n<td style=\"text-align:center\">Instrumentation agent for JVM bootstrapping</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">org.springframework</td>\n<td style=\"text-align:right\">spring-instrument-tomcat</td>\n<td style=\"text-align:center\">Instrumentation agent for Tomcat</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">org.springframework</td>\n<td style=\"text-align:right\">spring-jdbc</td>\n<td style=\"text-align:center\">JDBC support package, including DataSource setup and JDBC access support</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">org.springframework</td>\n<td style=\"text-align:right\">spring-jms</td>\n<td style=\"text-align:center\">JMS support package, including helper classes to send and receive JMS messages</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">org.springframework</td>\n<td style=\"text-align:right\">spring-messaging</td>\n<td style=\"text-align:center\">Support for messaging architectures and protocols</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">org.springframework</td>\n<td style=\"text-align:right\">spring-orm</td>\n<td style=\"text-align:center\">Object/Relational Mapping, including JPA and Hibernate support</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">org.springframework</td>\n<td style=\"text-align:right\">spring-oxm</td>\n<td style=\"text-align:center\">Object/XML Mapping</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">org.springframework</td>\n<td style=\"text-align:right\">spring-test</td>\n<td style=\"text-align:center\">Support for unit testing and integration testing Spring components</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">org.springframework</td>\n<td style=\"text-align:right\">spring-tx</td>\n<td style=\"text-align:center\">Transaction infrastructure, including DAO support and JCA integration</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">org.springframework</td>\n<td style=\"text-align:right\">spring-web</td>\n<td style=\"text-align:center\">Web support packages, including client and web remoting</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">org.springframework</td>\n<td style=\"text-align:right\">spring-webmvc</td>\n<td style=\"text-align:center\">REST Web Services and model-view-controller implementation for web applications</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">org.springframework</td>\n<td style=\"text-align:right\">spring-webmvc-portlet</td>\n<td style=\"text-align:center\">MVC implementation to be used in a Portlet environment</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">org.springframework</td>\n<td style=\"text-align:right\">spring-websocket</td>\n<td style=\"text-align:center\">WebSocket and SockJS implementations, including STOMP support</td>\n</tr>\n</tbody>\n</table>\n<p><br></p>\n<p>附录<br>demo 地址：<br><a href=\"https://github.com/fenglincanyi/springdemo2\">https://github.com/fenglincanyi/springdemo2</a></p>\n"},{"title":"Mybatis 学习（一）","date":"2017-01-11T04:01:00.000Z","_content":"> 本次学习内容：MyBatis 基础\n\n## 介绍\nmybatis 是一个持久层框架，是apache下的开源项目\n是一个半自动化框架，与Hibernate相比，需要开发者手动写sql，这样更为灵活配置\nmybatis 可以将PreparedStatement 中输入的参数自动进行输入映射，将查询结果灵活映射成 Java 对象\n\n## 基本原理\n执行过程：\n\nSqlMapConfig.xml/mapper.xml … —>\nSqlSessionFactory —> \nSqlSession —> \nExecutor —> \nmapper statement —> \ndb\n\n* 配置数据源，映射文件\n* 创建SqlSession 交给执行器操作数据库\n* 操作数据库\n* 对操作数据库存储做封装，包括SQL语句，输入参数，输出结果\n\n## 遇到问题\n报错：\norg.apache.ibatis.binding.BindingException: Invalid bound statement (not found):    ………\n然后，发现target目录下，XxxMapper.xml 没有在 target 下相应的目录生成\n![](http://7xr1vo.com1.z0.glb.clouddn.com/4B5E209A-0C22-4072-8B8D-AD3532042E98.png)\n\n原因：\n\n    在使用maven等构建工具时，默认会将源码编译后再加上资源目录的文件放到target目录下作为最后运行的文件（可以是war,jar,或者目录）。有时为了方便，我们会在src/main/java源码目录下放了资源文件，例如mybatis的mapper文件，方便我们编程时展开查看。这时，我们需要设置编译时也将这些配置文件放到target目录下，否则最后的target目录式没有这些文件的。\n\n解决：\n在maven中，在build元素中添加：\n\n``` xml\n<build>\n    <resources>\n        <resource>\n            <directory>src/main/java</directory>\n            <includes>\n                <include>**/*.xml</include>\n            </includes>\n        </resource>\n    </resources>\n</build>\n```\n\n## 总结\n* Mybatis 框架实际上 是对原来 jdbc 代码的封装，将繁琐重复的代码，交付给配置文件和接口类进行灵活的对象映射\n* 动态sql 有点像 jstl，很容易理解，目的就是为了灵活的玩 sql 语句\n* 对于各种类型的sql 语句，需要记住mybatis的处理方式即可\n* Mybatis 是将 对象或简单类型输入，将结果以数据实体/简单类型输出，省去了 jdbc 的复杂操作\n* 进行 事务性操作时，一定要 commit，否则不生效\nsqlSession.commit();\n\n## mybatis 插件\n附录：\n    使用：https://www.oschina.net/p/intellij-mybatis-plugin\n    下载：https://github.com/CHN-Jaylin/Plugins-Cracked （破解的)\n\n\n<br>\n\n参考：\nhttp://ask.csdn.net/questions/226091\n\n附录\ndemo 地址：\nhttps://github.com/fenglincanyi/mybaitsdemo1","source":"_posts/Mybatis 学习（一）.md","raw":"---\ntitle: Mybatis 学习（一）\ndate: 2017-01-11 12:01\ncategories: Java后台\ntags: Mybatis\n---\n> 本次学习内容：MyBatis 基础\n\n## 介绍\nmybatis 是一个持久层框架，是apache下的开源项目\n是一个半自动化框架，与Hibernate相比，需要开发者手动写sql，这样更为灵活配置\nmybatis 可以将PreparedStatement 中输入的参数自动进行输入映射，将查询结果灵活映射成 Java 对象\n\n## 基本原理\n执行过程：\n\nSqlMapConfig.xml/mapper.xml … —>\nSqlSessionFactory —> \nSqlSession —> \nExecutor —> \nmapper statement —> \ndb\n\n* 配置数据源，映射文件\n* 创建SqlSession 交给执行器操作数据库\n* 操作数据库\n* 对操作数据库存储做封装，包括SQL语句，输入参数，输出结果\n\n## 遇到问题\n报错：\norg.apache.ibatis.binding.BindingException: Invalid bound statement (not found):    ………\n然后，发现target目录下，XxxMapper.xml 没有在 target 下相应的目录生成\n![](http://7xr1vo.com1.z0.glb.clouddn.com/4B5E209A-0C22-4072-8B8D-AD3532042E98.png)\n\n原因：\n\n    在使用maven等构建工具时，默认会将源码编译后再加上资源目录的文件放到target目录下作为最后运行的文件（可以是war,jar,或者目录）。有时为了方便，我们会在src/main/java源码目录下放了资源文件，例如mybatis的mapper文件，方便我们编程时展开查看。这时，我们需要设置编译时也将这些配置文件放到target目录下，否则最后的target目录式没有这些文件的。\n\n解决：\n在maven中，在build元素中添加：\n\n``` xml\n<build>\n    <resources>\n        <resource>\n            <directory>src/main/java</directory>\n            <includes>\n                <include>**/*.xml</include>\n            </includes>\n        </resource>\n    </resources>\n</build>\n```\n\n## 总结\n* Mybatis 框架实际上 是对原来 jdbc 代码的封装，将繁琐重复的代码，交付给配置文件和接口类进行灵活的对象映射\n* 动态sql 有点像 jstl，很容易理解，目的就是为了灵活的玩 sql 语句\n* 对于各种类型的sql 语句，需要记住mybatis的处理方式即可\n* Mybatis 是将 对象或简单类型输入，将结果以数据实体/简单类型输出，省去了 jdbc 的复杂操作\n* 进行 事务性操作时，一定要 commit，否则不生效\nsqlSession.commit();\n\n## mybatis 插件\n附录：\n    使用：https://www.oschina.net/p/intellij-mybatis-plugin\n    下载：https://github.com/CHN-Jaylin/Plugins-Cracked （破解的)\n\n\n<br>\n\n参考：\nhttp://ask.csdn.net/questions/226091\n\n附录\ndemo 地址：\nhttps://github.com/fenglincanyi/mybaitsdemo1","slug":"Mybatis 学习（一）","published":1,"updated":"2017-03-05T09:14:37.000Z","_id":"cizwgny8t00030qqwx7hjdu4p","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>本次学习内容：MyBatis 基础</p>\n</blockquote>\n<h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><p>mybatis 是一个持久层框架，是apache下的开源项目<br>是一个半自动化框架，与Hibernate相比，需要开发者手动写sql，这样更为灵活配置<br>mybatis 可以将PreparedStatement 中输入的参数自动进行输入映射，将查询结果灵活映射成 Java 对象</p>\n<h2 id=\"基本原理\"><a href=\"#基本原理\" class=\"headerlink\" title=\"基本原理\"></a>基本原理</h2><p>执行过程：</p>\n<p>SqlMapConfig.xml/mapper.xml … —&gt;<br>SqlSessionFactory —&gt;<br>SqlSession —&gt;<br>Executor —&gt;<br>mapper statement —&gt;<br>db</p>\n<ul>\n<li>配置数据源，映射文件</li>\n<li>创建SqlSession 交给执行器操作数据库</li>\n<li>操作数据库</li>\n<li>对操作数据库存储做封装，包括SQL语句，输入参数，输出结果</li>\n</ul>\n<h2 id=\"遇到问题\"><a href=\"#遇到问题\" class=\"headerlink\" title=\"遇到问题\"></a>遇到问题</h2><p>报错：<br>org.apache.ibatis.binding.BindingException: Invalid bound statement (not found):    ………<br>然后，发现target目录下，XxxMapper.xml 没有在 target 下相应的目录生成<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/4B5E209A-0C22-4072-8B8D-AD3532042E98.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure></p>\n<p>原因：</p>\n<pre><code>在使用maven等构建工具时，默认会将源码编译后再加上资源目录的文件放到target目录下作为最后运行的文件（可以是war,jar,或者目录）。有时为了方便，我们会在src/main/java源码目录下放了资源文件，例如mybatis的mapper文件，方便我们编程时展开查看。这时，我们需要设置编译时也将这些配置文件放到target目录下，否则最后的target目录式没有这些文件的。\n</code></pre><p>解决：<br>在maven中，在build元素中添加：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">resources</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">resource</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">directory</span>&gt;</span>src/main/java<span class=\"tag\">&lt;/<span class=\"name\">directory</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">includes</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">include</span>&gt;</span>**/*.xml<span class=\"tag\">&lt;/<span class=\"name\">include</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">includes</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">resource</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">resources</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">build</span>&gt;</span></div></pre></td></tr></table></figure>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ul>\n<li>Mybatis 框架实际上 是对原来 jdbc 代码的封装，将繁琐重复的代码，交付给配置文件和接口类进行灵活的对象映射</li>\n<li>动态sql 有点像 jstl，很容易理解，目的就是为了灵活的玩 sql 语句</li>\n<li>对于各种类型的sql 语句，需要记住mybatis的处理方式即可</li>\n<li>Mybatis 是将 对象或简单类型输入，将结果以数据实体/简单类型输出，省去了 jdbc 的复杂操作</li>\n<li>进行 事务性操作时，一定要 commit，否则不生效<br>sqlSession.commit();</li>\n</ul>\n<h2 id=\"mybatis-插件\"><a href=\"#mybatis-插件\" class=\"headerlink\" title=\"mybatis 插件\"></a>mybatis 插件</h2><p>附录：<br>    使用：<a href=\"https://www.oschina.net/p/intellij-mybatis-plugin\" target=\"_blank\" rel=\"external\">https://www.oschina.net/p/intellij-mybatis-plugin</a><br>    下载：<a href=\"https://github.com/CHN-Jaylin/Plugins-Cracked\" target=\"_blank\" rel=\"external\">https://github.com/CHN-Jaylin/Plugins-Cracked</a> （破解的)</p>\n<p><br></p>\n<p>参考：<br><a href=\"http://ask.csdn.net/questions/226091\" target=\"_blank\" rel=\"external\">http://ask.csdn.net/questions/226091</a></p>\n<p>附录<br>demo 地址：<br><a href=\"https://github.com/fenglincanyi/mybaitsdemo1\" target=\"_blank\" rel=\"external\">https://github.com/fenglincanyi/mybaitsdemo1</a></p>\n","excerpt":"","more":"<blockquote>\n<p>本次学习内容：MyBatis 基础</p>\n</blockquote>\n<h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><p>mybatis 是一个持久层框架，是apache下的开源项目<br>是一个半自动化框架，与Hibernate相比，需要开发者手动写sql，这样更为灵活配置<br>mybatis 可以将PreparedStatement 中输入的参数自动进行输入映射，将查询结果灵活映射成 Java 对象</p>\n<h2 id=\"基本原理\"><a href=\"#基本原理\" class=\"headerlink\" title=\"基本原理\"></a>基本原理</h2><p>执行过程：</p>\n<p>SqlMapConfig.xml/mapper.xml … —&gt;<br>SqlSessionFactory —&gt;<br>SqlSession —&gt;<br>Executor —&gt;<br>mapper statement —&gt;<br>db</p>\n<ul>\n<li>配置数据源，映射文件</li>\n<li>创建SqlSession 交给执行器操作数据库</li>\n<li>操作数据库</li>\n<li>对操作数据库存储做封装，包括SQL语句，输入参数，输出结果</li>\n</ul>\n<h2 id=\"遇到问题\"><a href=\"#遇到问题\" class=\"headerlink\" title=\"遇到问题\"></a>遇到问题</h2><p>报错：<br>org.apache.ibatis.binding.BindingException: Invalid bound statement (not found):    ………<br>然后，发现target目录下，XxxMapper.xml 没有在 target 下相应的目录生成<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/4B5E209A-0C22-4072-8B8D-AD3532042E98.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure></p>\n<p>原因：</p>\n<pre><code>在使用maven等构建工具时，默认会将源码编译后再加上资源目录的文件放到target目录下作为最后运行的文件（可以是war,jar,或者目录）。有时为了方便，我们会在src/main/java源码目录下放了资源文件，例如mybatis的mapper文件，方便我们编程时展开查看。这时，我们需要设置编译时也将这些配置文件放到target目录下，否则最后的target目录式没有这些文件的。\n</code></pre><p>解决：<br>在maven中，在build元素中添加：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">resources</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">resource</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">directory</span>&gt;</span>src/main/java<span class=\"tag\">&lt;/<span class=\"name\">directory</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">includes</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">include</span>&gt;</span>**/*.xml<span class=\"tag\">&lt;/<span class=\"name\">include</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">includes</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">resource</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">resources</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">build</span>&gt;</span></div></pre></td></tr></table></figure>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ul>\n<li>Mybatis 框架实际上 是对原来 jdbc 代码的封装，将繁琐重复的代码，交付给配置文件和接口类进行灵活的对象映射</li>\n<li>动态sql 有点像 jstl，很容易理解，目的就是为了灵活的玩 sql 语句</li>\n<li>对于各种类型的sql 语句，需要记住mybatis的处理方式即可</li>\n<li>Mybatis 是将 对象或简单类型输入，将结果以数据实体/简单类型输出，省去了 jdbc 的复杂操作</li>\n<li>进行 事务性操作时，一定要 commit，否则不生效<br>sqlSession.commit();</li>\n</ul>\n<h2 id=\"mybatis-插件\"><a href=\"#mybatis-插件\" class=\"headerlink\" title=\"mybatis 插件\"></a>mybatis 插件</h2><p>附录：<br>    使用：<a href=\"https://www.oschina.net/p/intellij-mybatis-plugin\">https://www.oschina.net/p/intellij-mybatis-plugin</a><br>    下载：<a href=\"https://github.com/CHN-Jaylin/Plugins-Cracked\">https://github.com/CHN-Jaylin/Plugins-Cracked</a> （破解的)</p>\n<p><br></p>\n<p>参考：<br><a href=\"http://ask.csdn.net/questions/226091\">http://ask.csdn.net/questions/226091</a></p>\n<p>附录<br>demo 地址：<br><a href=\"https://github.com/fenglincanyi/mybaitsdemo1\">https://github.com/fenglincanyi/mybaitsdemo1</a></p>\n"},{"title":"Mybatis 学习（二）","date":"2017-01-15T06:32:00.000Z","_content":"> 本次学习内容：MyBatis 高级\n> 结合demo进行学习\n\n## 2张表关联查询，一对一查询\n* 需求\n查询订单的信息及用户信息\n\n``` sql\nselect\norders.*,user.username,user.sex, user.address\nfrom orders, user\nwhere orders.user_id=user.id\n```\n结果集：\n![](http://7xr1vo.com1.z0.glb.clouddn.com/0A6D42AE-B4E6-4960-8313-FAE563CBA426.png)\n\n主要对 结果集 进行分析，再书写 mapper.xml\n\n* resultType实现\n新建一个 po , 继承自 Orders（因为此sql 中 orders表的字段较多），再增加 user 的几个字段即可.\n\n``` java\npublic class OrdersCustom extends Orders{\n\n    // 需求：\n    // select orders.*,user.username,user.sex, user.address\n    // from orders, user\n    // where orders.user_id=user.id\n\n    private String username;\n    private String sex;\n    private String address;\n\n    public String getUsername() {\n        return username;\n    }\n\n    public void setUsername(String username) {\n        this.username = username;\n    }\n\n    public String getSex() {\n        return sex;\n    }\n\n    public void setSex(String sex) {\n        this.sex = sex;\n    }\n\n    public String getAddress() {\n        return address;\n    }\n\n    public void setAddress(String address) {\n        this.address = address;\n    }\n}\n```\n\n``` java\npublic interface OrdersCustomMapper {\n\n    // 一对一查询 使用 resultType实现\n    List<OrdersCustom> queryOrdersUser();\n}\n```\n\n``` xml\n<select id=\"queryOrdersUser\" resultType=\"com.gjr.po.OrdersCustom\">\n    select\n    orders.*,user.username,user.sex, user.address\n    from orders, user\n    where orders.user_id=user.id\n</select>\n```\n\n* resultMap实现\n需要使用 association 进行关联，在原来的 Orders 类中 添加 user 属性\n\n``` java\n/**\n* 一对一查询：使用 resultMap实现，优点：可实现懒加载\n*/\nprivate User user;\n\npublic User getUser() {\n    return user;\n}\n\npublic void setUser(User user) {\n    this.user = user;\n}\n```\n\n``` xml\n<select id=\"queryOrdersUser1\" resultMap=\"OrdersUserResultMap\">\n    select\n    orders.*,user.username,user.sex, user.address\n    from orders, user\n    where orders.user_id=user.id\n</select>\n```\n\n``` xml\n<resultMap id=\"OrdersUserResultMap\" type=\"com.gjr.po.Orders\">\n    <!-- 配置订单信息 -->\n    <id column=\"id\" property=\"id\"/>\n    <result column=\"user_id\" property=\"userId\"/>\n    <result column=\"number\" property=\"number\"/>\n    <result column=\"createtime\" property=\"createtime\"/>\n    <result column=\"note\" property=\"note\"/>\n\n    <!-- 配置用户信息 -->\n    <association property=\"user\" javaType=\"com.gjr.po.User\"> <!-- 这个 property=\"user\" 就是 com.gjr.po.Orders 中增加的那个 user 属性-->\n        <id column=\"user_id\" property=\"id\"/> <!-- column=\"user_id\" 是查出来的结果中 用户的 唯一标示 -->\n        <result column=\"username\" property=\"username\"/>\n        <result column=\"sex\" property=\"sex\"/>\n        <result column=\"address\" property=\"address\"/>\n    </association>\n</resultMap>\n```\n![](http://7xr1vo.com1.z0.glb.clouddn.com/CB9AFFD6-B061-41CC-BC0B-0376C263DC0F.png)\n\n\n## 3张表关联查询，一对多查询\n\n**确定主表，对其 po 添加所需字段**\n* 需求\n-- 查询用户订单详情\n\n``` sql\nselect\norders.*,\nuser.username,user.sex, user.address,\norderdetail.id orderdetail_id,\norderdetail.items_id,\norderdetail.items_num,\norderdetail.orders_id\nfrom orders, user, orderdetail\nwhere orders.user_id = user.id and orders_id = orders.id\n```\n结果集：\n![](http://7xr1vo.com1.z0.glb.clouddn.com/937F9118-45DC-4D2F-83A3-8ED359C2CD7F.png)\n\n* 实现\n\n``` xml\n<select id=\"queryOrdersDetailUser\" resultMap=\"OrdersDetailUserMap\">\nselect\n    orders.*,\n    user.username,user.sex, user.address,\n    orderdetail.id orderdetail_id,\n    orderdetail.items_id,\n    orderdetail.items_num,\n    orderdetail.orders_id\nfrom orders, user, orderdetail\nwhere orders.user_id = user.id and orders_id = orders.id\n</select>\n\n<resultMap id=\"OrdersDetailUserMap\" type=\"com.gjr.po.Orders\" extends=\"OrdersUserResultMap\">\n    <!-- 用户信息、订单信息、复用前面的-->\n    \n    <collection property=\"orderdetailList\" ofType=\"com.gjr.po.Orderdetail\"> <!--使用 ofType-->\n        <id column=\"orderdetail_id\" property=\"id\"/>\n        <result column=\"items_id\" property=\"itemsId\"/>\n        <result column=\"items_num\" property=\"itemsNum\"/>\n        <result column=\"orders_id\" property=\"ordersId\"/>\n    </collection>\n</resultMap>\n```\n在查询主表对应的po类， Orders 中增加字段 \n\n``` java\nprivate List<Orderdetail> orderdetailList;\n```\n\n## 3张表联合查询，多对多查询\n* 需求\n查询用户订单商品明细\n\n``` sql\nSELECT\n  orders.*,\n  user.username,\n  user.sex,\n  user.address,\n  orderdetail.id orderdetail_id,\n  orderdetail.items_id,\n  orderdetail.items_num,\n  orderdetail.orders_id,\n  items.name items_name,\n  items.detail items_detail,\n  items.price items_price\nFROM\n  orders,\n  user,\n  orderdetail,\n  items\nWHERE orders.user_id = user.id AND orderdetail.orders_id=orders.id AND orderdetail.items_id = items.id\n```\n结果集：\n![](http://7xr1vo.com1.z0.glb.clouddn.com/C9339305-3D30-4A4F-B349-73DC6B6C9D50.png)\n\n* 实现\n\n``` xml\n<select id=\"queryOrdersDetailUserItems\" resultMap=\"OrdersDetailUserItemsMap\">\n--     查询用户订单商品明细\n        SELECT\n          orders.*,\n          user.username,\n          user.sex,\n          user.address,\n          orderdetail.id orderdetail_id,\n          orderdetail.items_id,\n          orderdetail.items_num,\n          orderdetail.orders_id,\n          items.name items_name,\n          items.detail items_detail,\n          items.price items_price\n        FROM\n          orders,\n          user,\n          orderdetail,\n          items\n        WHERE orders.user_id = user.id AND orderdetail.orders_id=orders.id AND orderdetail.items_id = items.id\n    </select>\n\n\n<resultMap id=\"OrdersDetailUserItemsMap\" type=\"com.gjr.po.User\">\n    <!-- 用户信息-->\n    <id column=\"user_id\" property=\"id\"/> <!-- 根据查询结果 写 column !!! -->\n    <result column=\"username\" property=\"username\"/>\n    <result column=\"sex\" property=\"sex\"/>\n    <result column=\"address\" property=\"address\"/>\n\n\n    <!-- 订单信息: 一个用户对应多个订单-->\n    <collection property=\"ordersList\" ofType=\"com.gjr.po.Orders\">\n        <id column=\"id\" property=\"id\"/>\n        <result column=\"user_id\" property=\"userId\"/>\n        <result column=\"number\" property=\"number\"/>\n        <result column=\"createtime\" property=\"createtime\"/>\n        <result column=\"note\" property=\"note\"/>\n\n\n        <!-- 订单明细：一个订单对应多个明细 -->\n        <collection property=\"orderdetailList\" ofType=\"com.gjr.po.Orderdetail\">\n            <id column=\"orderdetail_id\" property=\"id\"/>\n            <result column=\"items_id\" property=\"itemsId\"/>\n            <result column=\"items_num\" property=\"itemsNum\"/>\n            <result column=\"orders_id\" property=\"ordersId\"/>\n\n\n            <!-- 商品信息：一个明细对应一个商品 -->\n            <association property=\"items\" javaType=\"com.gjr.po.Items\">\n                <id column=\"items_id\" property=\"id\"/>\n                <result column=\"items_name\" property=\"name\"/>\n                <result column=\"items_detail\" property=\"detail\"/>\n                <result column=\"items_price\" property=\"price\"/>\n            </association>\n        </collection>\n    </collection>\n</resultMap>\n```\n各个 po 类需要分别增加相关字段即可，安装关联的类型和字段\n\n## 懒加载\n配置 mybatisConfig.xml 相关参数：\n\n``` xml\n<settings>\n    <!-- 打开 延迟加载 的开关-->\n    <setting name=\"lazyLoadingEnabled\" value=\"true\"/>\n    <!-- 设置按需加载 -->\n    <setting name=\"aggressiveLazyLoading\" value=\"false\"/>\n</settings>\n```\n\n``` xml\n    <select id=\"findOrdersUserLazyLoading\" resultMap=\"OrdersUserLazyLoadingResultMap\">\n--         懒加载测试\n        SELECT * FROM orders\n    </select>\n```\n用 association 实现延迟加载：\n\n``` xml\n<resultMap id=\"OrdersUserLazyLoadingResultMap\" type=\"com.gjr.po.Orders\">\n    <!--对订单信息进行映射配置  -->\n    <id column=\"id\" property=\"id\"/>\n    <result column=\"user_id\" property=\"userId\"/>\n    <result column=\"number\" property=\"number\"/>\n    <result column=\"createtime\" property=\"createtime\"/>\n    <result column=\"note\" property=\"note\"/>\n    \n    <association property=\"user\" javaType=\"com.gjr.po.User\"\n                 select=\"com.gjr.mapper.UserMapper.findUserById\"\n                 column=\"user_id\">\n        <!-- 实现对用户信息进行延迟加载 -->\n\n    </association>\n</resultMap>\n```\n测试：\n![](http://7xr1vo.com1.z0.glb.clouddn.com/51C2ECFE-8AD9-4354-B9D1-3E0B7DC66FE8.png)\n\n## mybatis 缓存相关\n* mybatis默认开启一级缓存，二级缓存\n* Mybatis查询得数据，缓存至一级缓存，再缓存至二级缓存中，二级缓存是 mapper 级别的，凡是同一个mapper，都会有自己的二级缓存区\n* 多个sqlsession可以同享同一个 mapper的二级缓存\n\n## 总结\n* resultMap可以实现高级映射（使用association、collection实现一对一及一对多映射），association、collection具备延迟加载功能。\n* 延迟加载：先从单表查询、需要时再从关联表去关联查询，大大提高数据库性能，因为查询单表要比关联查询多张表速度要快。\n* 查询结果 必须要和 pojo 类型保持一致\n* 联系实际问题的关系类型（如：一个订单对应一个用户，一个订单对应多个明细），进行 po 的修改或扩展\n* association, collection 分别是 关系类型为：1对1，1对多   配置时分别是 javaType 、ofType\n\n<br>\n\n附录\ndemo 地址：\nhttps://github.com/fenglincanyi/mybaitsdemo2","source":"_posts/Mybatis 学习（二）.md","raw":"---\ntitle: Mybatis 学习（二）\ndate: 2017-01-15 14:32\ncategories: Java后台\ntags: Mybatis\n---\n> 本次学习内容：MyBatis 高级\n> 结合demo进行学习\n\n## 2张表关联查询，一对一查询\n* 需求\n查询订单的信息及用户信息\n\n``` sql\nselect\norders.*,user.username,user.sex, user.address\nfrom orders, user\nwhere orders.user_id=user.id\n```\n结果集：\n![](http://7xr1vo.com1.z0.glb.clouddn.com/0A6D42AE-B4E6-4960-8313-FAE563CBA426.png)\n\n主要对 结果集 进行分析，再书写 mapper.xml\n\n* resultType实现\n新建一个 po , 继承自 Orders（因为此sql 中 orders表的字段较多），再增加 user 的几个字段即可.\n\n``` java\npublic class OrdersCustom extends Orders{\n\n    // 需求：\n    // select orders.*,user.username,user.sex, user.address\n    // from orders, user\n    // where orders.user_id=user.id\n\n    private String username;\n    private String sex;\n    private String address;\n\n    public String getUsername() {\n        return username;\n    }\n\n    public void setUsername(String username) {\n        this.username = username;\n    }\n\n    public String getSex() {\n        return sex;\n    }\n\n    public void setSex(String sex) {\n        this.sex = sex;\n    }\n\n    public String getAddress() {\n        return address;\n    }\n\n    public void setAddress(String address) {\n        this.address = address;\n    }\n}\n```\n\n``` java\npublic interface OrdersCustomMapper {\n\n    // 一对一查询 使用 resultType实现\n    List<OrdersCustom> queryOrdersUser();\n}\n```\n\n``` xml\n<select id=\"queryOrdersUser\" resultType=\"com.gjr.po.OrdersCustom\">\n    select\n    orders.*,user.username,user.sex, user.address\n    from orders, user\n    where orders.user_id=user.id\n</select>\n```\n\n* resultMap实现\n需要使用 association 进行关联，在原来的 Orders 类中 添加 user 属性\n\n``` java\n/**\n* 一对一查询：使用 resultMap实现，优点：可实现懒加载\n*/\nprivate User user;\n\npublic User getUser() {\n    return user;\n}\n\npublic void setUser(User user) {\n    this.user = user;\n}\n```\n\n``` xml\n<select id=\"queryOrdersUser1\" resultMap=\"OrdersUserResultMap\">\n    select\n    orders.*,user.username,user.sex, user.address\n    from orders, user\n    where orders.user_id=user.id\n</select>\n```\n\n``` xml\n<resultMap id=\"OrdersUserResultMap\" type=\"com.gjr.po.Orders\">\n    <!-- 配置订单信息 -->\n    <id column=\"id\" property=\"id\"/>\n    <result column=\"user_id\" property=\"userId\"/>\n    <result column=\"number\" property=\"number\"/>\n    <result column=\"createtime\" property=\"createtime\"/>\n    <result column=\"note\" property=\"note\"/>\n\n    <!-- 配置用户信息 -->\n    <association property=\"user\" javaType=\"com.gjr.po.User\"> <!-- 这个 property=\"user\" 就是 com.gjr.po.Orders 中增加的那个 user 属性-->\n        <id column=\"user_id\" property=\"id\"/> <!-- column=\"user_id\" 是查出来的结果中 用户的 唯一标示 -->\n        <result column=\"username\" property=\"username\"/>\n        <result column=\"sex\" property=\"sex\"/>\n        <result column=\"address\" property=\"address\"/>\n    </association>\n</resultMap>\n```\n![](http://7xr1vo.com1.z0.glb.clouddn.com/CB9AFFD6-B061-41CC-BC0B-0376C263DC0F.png)\n\n\n## 3张表关联查询，一对多查询\n\n**确定主表，对其 po 添加所需字段**\n* 需求\n-- 查询用户订单详情\n\n``` sql\nselect\norders.*,\nuser.username,user.sex, user.address,\norderdetail.id orderdetail_id,\norderdetail.items_id,\norderdetail.items_num,\norderdetail.orders_id\nfrom orders, user, orderdetail\nwhere orders.user_id = user.id and orders_id = orders.id\n```\n结果集：\n![](http://7xr1vo.com1.z0.glb.clouddn.com/937F9118-45DC-4D2F-83A3-8ED359C2CD7F.png)\n\n* 实现\n\n``` xml\n<select id=\"queryOrdersDetailUser\" resultMap=\"OrdersDetailUserMap\">\nselect\n    orders.*,\n    user.username,user.sex, user.address,\n    orderdetail.id orderdetail_id,\n    orderdetail.items_id,\n    orderdetail.items_num,\n    orderdetail.orders_id\nfrom orders, user, orderdetail\nwhere orders.user_id = user.id and orders_id = orders.id\n</select>\n\n<resultMap id=\"OrdersDetailUserMap\" type=\"com.gjr.po.Orders\" extends=\"OrdersUserResultMap\">\n    <!-- 用户信息、订单信息、复用前面的-->\n    \n    <collection property=\"orderdetailList\" ofType=\"com.gjr.po.Orderdetail\"> <!--使用 ofType-->\n        <id column=\"orderdetail_id\" property=\"id\"/>\n        <result column=\"items_id\" property=\"itemsId\"/>\n        <result column=\"items_num\" property=\"itemsNum\"/>\n        <result column=\"orders_id\" property=\"ordersId\"/>\n    </collection>\n</resultMap>\n```\n在查询主表对应的po类， Orders 中增加字段 \n\n``` java\nprivate List<Orderdetail> orderdetailList;\n```\n\n## 3张表联合查询，多对多查询\n* 需求\n查询用户订单商品明细\n\n``` sql\nSELECT\n  orders.*,\n  user.username,\n  user.sex,\n  user.address,\n  orderdetail.id orderdetail_id,\n  orderdetail.items_id,\n  orderdetail.items_num,\n  orderdetail.orders_id,\n  items.name items_name,\n  items.detail items_detail,\n  items.price items_price\nFROM\n  orders,\n  user,\n  orderdetail,\n  items\nWHERE orders.user_id = user.id AND orderdetail.orders_id=orders.id AND orderdetail.items_id = items.id\n```\n结果集：\n![](http://7xr1vo.com1.z0.glb.clouddn.com/C9339305-3D30-4A4F-B349-73DC6B6C9D50.png)\n\n* 实现\n\n``` xml\n<select id=\"queryOrdersDetailUserItems\" resultMap=\"OrdersDetailUserItemsMap\">\n--     查询用户订单商品明细\n        SELECT\n          orders.*,\n          user.username,\n          user.sex,\n          user.address,\n          orderdetail.id orderdetail_id,\n          orderdetail.items_id,\n          orderdetail.items_num,\n          orderdetail.orders_id,\n          items.name items_name,\n          items.detail items_detail,\n          items.price items_price\n        FROM\n          orders,\n          user,\n          orderdetail,\n          items\n        WHERE orders.user_id = user.id AND orderdetail.orders_id=orders.id AND orderdetail.items_id = items.id\n    </select>\n\n\n<resultMap id=\"OrdersDetailUserItemsMap\" type=\"com.gjr.po.User\">\n    <!-- 用户信息-->\n    <id column=\"user_id\" property=\"id\"/> <!-- 根据查询结果 写 column !!! -->\n    <result column=\"username\" property=\"username\"/>\n    <result column=\"sex\" property=\"sex\"/>\n    <result column=\"address\" property=\"address\"/>\n\n\n    <!-- 订单信息: 一个用户对应多个订单-->\n    <collection property=\"ordersList\" ofType=\"com.gjr.po.Orders\">\n        <id column=\"id\" property=\"id\"/>\n        <result column=\"user_id\" property=\"userId\"/>\n        <result column=\"number\" property=\"number\"/>\n        <result column=\"createtime\" property=\"createtime\"/>\n        <result column=\"note\" property=\"note\"/>\n\n\n        <!-- 订单明细：一个订单对应多个明细 -->\n        <collection property=\"orderdetailList\" ofType=\"com.gjr.po.Orderdetail\">\n            <id column=\"orderdetail_id\" property=\"id\"/>\n            <result column=\"items_id\" property=\"itemsId\"/>\n            <result column=\"items_num\" property=\"itemsNum\"/>\n            <result column=\"orders_id\" property=\"ordersId\"/>\n\n\n            <!-- 商品信息：一个明细对应一个商品 -->\n            <association property=\"items\" javaType=\"com.gjr.po.Items\">\n                <id column=\"items_id\" property=\"id\"/>\n                <result column=\"items_name\" property=\"name\"/>\n                <result column=\"items_detail\" property=\"detail\"/>\n                <result column=\"items_price\" property=\"price\"/>\n            </association>\n        </collection>\n    </collection>\n</resultMap>\n```\n各个 po 类需要分别增加相关字段即可，安装关联的类型和字段\n\n## 懒加载\n配置 mybatisConfig.xml 相关参数：\n\n``` xml\n<settings>\n    <!-- 打开 延迟加载 的开关-->\n    <setting name=\"lazyLoadingEnabled\" value=\"true\"/>\n    <!-- 设置按需加载 -->\n    <setting name=\"aggressiveLazyLoading\" value=\"false\"/>\n</settings>\n```\n\n``` xml\n    <select id=\"findOrdersUserLazyLoading\" resultMap=\"OrdersUserLazyLoadingResultMap\">\n--         懒加载测试\n        SELECT * FROM orders\n    </select>\n```\n用 association 实现延迟加载：\n\n``` xml\n<resultMap id=\"OrdersUserLazyLoadingResultMap\" type=\"com.gjr.po.Orders\">\n    <!--对订单信息进行映射配置  -->\n    <id column=\"id\" property=\"id\"/>\n    <result column=\"user_id\" property=\"userId\"/>\n    <result column=\"number\" property=\"number\"/>\n    <result column=\"createtime\" property=\"createtime\"/>\n    <result column=\"note\" property=\"note\"/>\n    \n    <association property=\"user\" javaType=\"com.gjr.po.User\"\n                 select=\"com.gjr.mapper.UserMapper.findUserById\"\n                 column=\"user_id\">\n        <!-- 实现对用户信息进行延迟加载 -->\n\n    </association>\n</resultMap>\n```\n测试：\n![](http://7xr1vo.com1.z0.glb.clouddn.com/51C2ECFE-8AD9-4354-B9D1-3E0B7DC66FE8.png)\n\n## mybatis 缓存相关\n* mybatis默认开启一级缓存，二级缓存\n* Mybatis查询得数据，缓存至一级缓存，再缓存至二级缓存中，二级缓存是 mapper 级别的，凡是同一个mapper，都会有自己的二级缓存区\n* 多个sqlsession可以同享同一个 mapper的二级缓存\n\n## 总结\n* resultMap可以实现高级映射（使用association、collection实现一对一及一对多映射），association、collection具备延迟加载功能。\n* 延迟加载：先从单表查询、需要时再从关联表去关联查询，大大提高数据库性能，因为查询单表要比关联查询多张表速度要快。\n* 查询结果 必须要和 pojo 类型保持一致\n* 联系实际问题的关系类型（如：一个订单对应一个用户，一个订单对应多个明细），进行 po 的修改或扩展\n* association, collection 分别是 关系类型为：1对1，1对多   配置时分别是 javaType 、ofType\n\n<br>\n\n附录\ndemo 地址：\nhttps://github.com/fenglincanyi/mybaitsdemo2","slug":"Mybatis 学习（二）","published":1,"updated":"2017-03-05T09:45:47.000Z","_id":"cizwhdzrr0003f4qwwo0erdlf","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>本次学习内容：MyBatis 高级<br>结合demo进行学习</p>\n</blockquote>\n<h2 id=\"2张表关联查询，一对一查询\"><a href=\"#2张表关联查询，一对一查询\" class=\"headerlink\" title=\"2张表关联查询，一对一查询\"></a>2张表关联查询，一对一查询</h2><ul>\n<li>需求<br>查询订单的信息及用户信息</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">select</span></div><div class=\"line\">orders.*,user.username,user.sex, user.address</div><div class=\"line\"><span class=\"keyword\">from</span> orders, <span class=\"keyword\">user</span></div><div class=\"line\"><span class=\"keyword\">where</span> orders.user_id=user.id</div></pre></td></tr></table></figure>\n<p>结果集：<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/0A6D42AE-B4E6-4960-8313-FAE563CBA426.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure></p>\n<p>主要对 结果集 进行分析，再书写 mapper.xml</p>\n<ul>\n<li>resultType实现<br>新建一个 po , 继承自 Orders（因为此sql 中 orders表的字段较多），再增加 user 的几个字段即可.</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OrdersCustom</span> <span class=\"keyword\">extends</span> <span class=\"title\">Orders</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 需求：</span></div><div class=\"line\">    <span class=\"comment\">// select orders.*,user.username,user.sex, user.address</span></div><div class=\"line\">    <span class=\"comment\">// from orders, user</span></div><div class=\"line\">    <span class=\"comment\">// where orders.user_id=user.id</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> String username;</div><div class=\"line\">    <span class=\"keyword\">private</span> String sex;</div><div class=\"line\">    <span class=\"keyword\">private</span> String address;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getUsername</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> username;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setUsername</span><span class=\"params\">(String username)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.username = username;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getSex</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> sex;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setSex</span><span class=\"params\">(String sex)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.sex = sex;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getAddress</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> address;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setAddress</span><span class=\"params\">(String address)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.address = address;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">OrdersCustomMapper</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 一对一查询 使用 resultType实现</span></div><div class=\"line\">    <span class=\"function\">List&lt;OrdersCustom&gt; <span class=\"title\">queryOrdersUser</span><span class=\"params\">()</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">\"queryOrdersUser\"</span> <span class=\"attr\">resultType</span>=<span class=\"string\">\"com.gjr.po.OrdersCustom\"</span>&gt;</span></div><div class=\"line\">    select</div><div class=\"line\">    orders.*,user.username,user.sex, user.address</div><div class=\"line\">    from orders, user</div><div class=\"line\">    where orders.user_id=user.id</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></div></pre></td></tr></table></figure>\n<ul>\n<li>resultMap实现<br>需要使用 association 进行关联，在原来的 Orders 类中 添加 user 属性</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\">* 一对一查询：使用 resultMap实现，优点：可实现懒加载</div><div class=\"line\">*/</div><div class=\"line\"><span class=\"keyword\">private</span> User user;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> User <span class=\"title\">getUser</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> user;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setUser</span><span class=\"params\">(User user)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.user = user;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">\"queryOrdersUser1\"</span> <span class=\"attr\">resultMap</span>=<span class=\"string\">\"OrdersUserResultMap\"</span>&gt;</span></div><div class=\"line\">    select</div><div class=\"line\">    orders.*,user.username,user.sex, user.address</div><div class=\"line\">    from orders, user</div><div class=\"line\">    where orders.user_id=user.id</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">resultMap</span> <span class=\"attr\">id</span>=<span class=\"string\">\"OrdersUserResultMap\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"com.gjr.po.Orders\"</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- 配置订单信息 --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">id</span> <span class=\"attr\">column</span>=<span class=\"string\">\"id\"</span> <span class=\"attr\">property</span>=<span class=\"string\">\"id\"</span>/&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">column</span>=<span class=\"string\">\"user_id\"</span> <span class=\"attr\">property</span>=<span class=\"string\">\"userId\"</span>/&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">column</span>=<span class=\"string\">\"number\"</span> <span class=\"attr\">property</span>=<span class=\"string\">\"number\"</span>/&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">column</span>=<span class=\"string\">\"createtime\"</span> <span class=\"attr\">property</span>=<span class=\"string\">\"createtime\"</span>/&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">column</span>=<span class=\"string\">\"note\"</span> <span class=\"attr\">property</span>=<span class=\"string\">\"note\"</span>/&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">&lt;!-- 配置用户信息 --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">association</span> <span class=\"attr\">property</span>=<span class=\"string\">\"user\"</span> <span class=\"attr\">javaType</span>=<span class=\"string\">\"com.gjr.po.User\"</span>&gt;</span> <span class=\"comment\">&lt;!-- 这个 property=\"user\" 就是 com.gjr.po.Orders 中增加的那个 user 属性--&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">id</span> <span class=\"attr\">column</span>=<span class=\"string\">\"user_id\"</span> <span class=\"attr\">property</span>=<span class=\"string\">\"id\"</span>/&gt;</span> <span class=\"comment\">&lt;!-- column=\"user_id\" 是查出来的结果中 用户的 唯一标示 --&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">column</span>=<span class=\"string\">\"username\"</span> <span class=\"attr\">property</span>=<span class=\"string\">\"username\"</span>/&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">column</span>=<span class=\"string\">\"sex\"</span> <span class=\"attr\">property</span>=<span class=\"string\">\"sex\"</span>/&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">column</span>=<span class=\"string\">\"address\"</span> <span class=\"attr\">property</span>=<span class=\"string\">\"address\"</span>/&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">association</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">resultMap</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/CB9AFFD6-B061-41CC-BC0B-0376C263DC0F.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<h2 id=\"3张表关联查询，一对多查询\"><a href=\"#3张表关联查询，一对多查询\" class=\"headerlink\" title=\"3张表关联查询，一对多查询\"></a>3张表关联查询，一对多查询</h2><p><strong>确定主表，对其 po 添加所需字段</strong></p>\n<ul>\n<li>需求<br>– 查询用户订单详情</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">select</span></div><div class=\"line\">orders.*,</div><div class=\"line\">user.username,user.sex, user.address,</div><div class=\"line\">orderdetail.id orderdetail_id,</div><div class=\"line\">orderdetail.items_id,</div><div class=\"line\">orderdetail.items_num,</div><div class=\"line\">orderdetail.orders_id</div><div class=\"line\"><span class=\"keyword\">from</span> orders, <span class=\"keyword\">user</span>, orderdetail</div><div class=\"line\"><span class=\"keyword\">where</span> orders.user_id = user.id <span class=\"keyword\">and</span> orders_id = orders.id</div></pre></td></tr></table></figure>\n<p>结果集：<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/937F9118-45DC-4D2F-83A3-8ED359C2CD7F.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure></p>\n<ul>\n<li>实现</li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">\"queryOrdersDetailUser\"</span> <span class=\"attr\">resultMap</span>=<span class=\"string\">\"OrdersDetailUserMap\"</span>&gt;</span></div><div class=\"line\">select</div><div class=\"line\">    orders.*,</div><div class=\"line\">    user.username,user.sex, user.address,</div><div class=\"line\">    orderdetail.id orderdetail_id,</div><div class=\"line\">    orderdetail.items_id,</div><div class=\"line\">    orderdetail.items_num,</div><div class=\"line\">    orderdetail.orders_id</div><div class=\"line\">from orders, user, orderdetail</div><div class=\"line\">where orders.user_id = user.id and orders_id = orders.id</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">resultMap</span> <span class=\"attr\">id</span>=<span class=\"string\">\"OrdersDetailUserMap\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"com.gjr.po.Orders\"</span> <span class=\"attr\">extends</span>=<span class=\"string\">\"OrdersUserResultMap\"</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- 用户信息、订单信息、复用前面的--&gt;</span></div><div class=\"line\">    </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">collection</span> <span class=\"attr\">property</span>=<span class=\"string\">\"orderdetailList\"</span> <span class=\"attr\">ofType</span>=<span class=\"string\">\"com.gjr.po.Orderdetail\"</span>&gt;</span> <span class=\"comment\">&lt;!--使用 ofType--&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">id</span> <span class=\"attr\">column</span>=<span class=\"string\">\"orderdetail_id\"</span> <span class=\"attr\">property</span>=<span class=\"string\">\"id\"</span>/&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">column</span>=<span class=\"string\">\"items_id\"</span> <span class=\"attr\">property</span>=<span class=\"string\">\"itemsId\"</span>/&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">column</span>=<span class=\"string\">\"items_num\"</span> <span class=\"attr\">property</span>=<span class=\"string\">\"itemsNum\"</span>/&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">column</span>=<span class=\"string\">\"orders_id\"</span> <span class=\"attr\">property</span>=<span class=\"string\">\"ordersId\"</span>/&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">collection</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">resultMap</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>在查询主表对应的po类， Orders 中增加字段 </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> List&lt;Orderdetail&gt; orderdetailList;</div></pre></td></tr></table></figure>\n<h2 id=\"3张表联合查询，多对多查询\"><a href=\"#3张表联合查询，多对多查询\" class=\"headerlink\" title=\"3张表联合查询，多对多查询\"></a>3张表联合查询，多对多查询</h2><ul>\n<li>需求<br>查询用户订单商品明细</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">SELECT</span></div><div class=\"line\">  orders.*,</div><div class=\"line\">  user.username,</div><div class=\"line\">  user.sex,</div><div class=\"line\">  user.address,</div><div class=\"line\">  orderdetail.id orderdetail_id,</div><div class=\"line\">  orderdetail.items_id,</div><div class=\"line\">  orderdetail.items_num,</div><div class=\"line\">  orderdetail.orders_id,</div><div class=\"line\">  items.name items_name,</div><div class=\"line\">  items.detail items_detail,</div><div class=\"line\">  items.price items_price</div><div class=\"line\"><span class=\"keyword\">FROM</span></div><div class=\"line\">  orders,</div><div class=\"line\">  <span class=\"keyword\">user</span>,</div><div class=\"line\">  orderdetail,</div><div class=\"line\">  items</div><div class=\"line\"><span class=\"keyword\">WHERE</span> orders.user_id = user.id <span class=\"keyword\">AND</span> orderdetail.orders_id=orders.id <span class=\"keyword\">AND</span> orderdetail.items_id = items.id</div></pre></td></tr></table></figure>\n<p>结果集：<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/C9339305-3D30-4A4F-B349-73DC6B6C9D50.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure></p>\n<ul>\n<li>实现</li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">\"queryOrdersDetailUserItems\"</span> <span class=\"attr\">resultMap</span>=<span class=\"string\">\"OrdersDetailUserItemsMap\"</span>&gt;</span></div><div class=\"line\">--     查询用户订单商品明细</div><div class=\"line\">        SELECT</div><div class=\"line\">          orders.*,</div><div class=\"line\">          user.username,</div><div class=\"line\">          user.sex,</div><div class=\"line\">          user.address,</div><div class=\"line\">          orderdetail.id orderdetail_id,</div><div class=\"line\">          orderdetail.items_id,</div><div class=\"line\">          orderdetail.items_num,</div><div class=\"line\">          orderdetail.orders_id,</div><div class=\"line\">          items.name items_name,</div><div class=\"line\">          items.detail items_detail,</div><div class=\"line\">          items.price items_price</div><div class=\"line\">        FROM</div><div class=\"line\">          orders,</div><div class=\"line\">          user,</div><div class=\"line\">          orderdetail,</div><div class=\"line\">          items</div><div class=\"line\">        WHERE orders.user_id = user.id AND orderdetail.orders_id=orders.id AND orderdetail.items_id = items.id</div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">resultMap</span> <span class=\"attr\">id</span>=<span class=\"string\">\"OrdersDetailUserItemsMap\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"com.gjr.po.User\"</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- 用户信息--&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">id</span> <span class=\"attr\">column</span>=<span class=\"string\">\"user_id\"</span> <span class=\"attr\">property</span>=<span class=\"string\">\"id\"</span>/&gt;</span> <span class=\"comment\">&lt;!-- 根据查询结果 写 column !!! --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">column</span>=<span class=\"string\">\"username\"</span> <span class=\"attr\">property</span>=<span class=\"string\">\"username\"</span>/&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">column</span>=<span class=\"string\">\"sex\"</span> <span class=\"attr\">property</span>=<span class=\"string\">\"sex\"</span>/&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">column</span>=<span class=\"string\">\"address\"</span> <span class=\"attr\">property</span>=<span class=\"string\">\"address\"</span>/&gt;</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">&lt;!-- 订单信息: 一个用户对应多个订单--&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">collection</span> <span class=\"attr\">property</span>=<span class=\"string\">\"ordersList\"</span> <span class=\"attr\">ofType</span>=<span class=\"string\">\"com.gjr.po.Orders\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">id</span> <span class=\"attr\">column</span>=<span class=\"string\">\"id\"</span> <span class=\"attr\">property</span>=<span class=\"string\">\"id\"</span>/&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">column</span>=<span class=\"string\">\"user_id\"</span> <span class=\"attr\">property</span>=<span class=\"string\">\"userId\"</span>/&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">column</span>=<span class=\"string\">\"number\"</span> <span class=\"attr\">property</span>=<span class=\"string\">\"number\"</span>/&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">column</span>=<span class=\"string\">\"createtime\"</span> <span class=\"attr\">property</span>=<span class=\"string\">\"createtime\"</span>/&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">column</span>=<span class=\"string\">\"note\"</span> <span class=\"attr\">property</span>=<span class=\"string\">\"note\"</span>/&gt;</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">&lt;!-- 订单明细：一个订单对应多个明细 --&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">collection</span> <span class=\"attr\">property</span>=<span class=\"string\">\"orderdetailList\"</span> <span class=\"attr\">ofType</span>=<span class=\"string\">\"com.gjr.po.Orderdetail\"</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">id</span> <span class=\"attr\">column</span>=<span class=\"string\">\"orderdetail_id\"</span> <span class=\"attr\">property</span>=<span class=\"string\">\"id\"</span>/&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">column</span>=<span class=\"string\">\"items_id\"</span> <span class=\"attr\">property</span>=<span class=\"string\">\"itemsId\"</span>/&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">column</span>=<span class=\"string\">\"items_num\"</span> <span class=\"attr\">property</span>=<span class=\"string\">\"itemsNum\"</span>/&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">column</span>=<span class=\"string\">\"orders_id\"</span> <span class=\"attr\">property</span>=<span class=\"string\">\"ordersId\"</span>/&gt;</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">&lt;!-- 商品信息：一个明细对应一个商品 --&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">association</span> <span class=\"attr\">property</span>=<span class=\"string\">\"items\"</span> <span class=\"attr\">javaType</span>=<span class=\"string\">\"com.gjr.po.Items\"</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">id</span> <span class=\"attr\">column</span>=<span class=\"string\">\"items_id\"</span> <span class=\"attr\">property</span>=<span class=\"string\">\"id\"</span>/&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">column</span>=<span class=\"string\">\"items_name\"</span> <span class=\"attr\">property</span>=<span class=\"string\">\"name\"</span>/&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">column</span>=<span class=\"string\">\"items_detail\"</span> <span class=\"attr\">property</span>=<span class=\"string\">\"detail\"</span>/&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">column</span>=<span class=\"string\">\"items_price\"</span> <span class=\"attr\">property</span>=<span class=\"string\">\"price\"</span>/&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">association</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">collection</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">collection</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">resultMap</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>各个 po 类需要分别增加相关字段即可，安装关联的类型和字段</p>\n<h2 id=\"懒加载\"><a href=\"#懒加载\" class=\"headerlink\" title=\"懒加载\"></a>懒加载</h2><p>配置 mybatisConfig.xml 相关参数：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">settings</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- 打开 延迟加载 的开关--&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">setting</span> <span class=\"attr\">name</span>=<span class=\"string\">\"lazyLoadingEnabled\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"true\"</span>/&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- 设置按需加载 --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">setting</span> <span class=\"attr\">name</span>=<span class=\"string\">\"aggressiveLazyLoading\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"false\"</span>/&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">settings</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">\"findOrdersUserLazyLoading\"</span> <span class=\"attr\">resultMap</span>=<span class=\"string\">\"OrdersUserLazyLoadingResultMap\"</span>&gt;</span></div><div class=\"line\">--         懒加载测试</div><div class=\"line\">        SELECT * FROM orders</div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>用 association 实现延迟加载：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">resultMap</span> <span class=\"attr\">id</span>=<span class=\"string\">\"OrdersUserLazyLoadingResultMap\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"com.gjr.po.Orders\"</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!--对订单信息进行映射配置  --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">id</span> <span class=\"attr\">column</span>=<span class=\"string\">\"id\"</span> <span class=\"attr\">property</span>=<span class=\"string\">\"id\"</span>/&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">column</span>=<span class=\"string\">\"user_id\"</span> <span class=\"attr\">property</span>=<span class=\"string\">\"userId\"</span>/&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">column</span>=<span class=\"string\">\"number\"</span> <span class=\"attr\">property</span>=<span class=\"string\">\"number\"</span>/&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">column</span>=<span class=\"string\">\"createtime\"</span> <span class=\"attr\">property</span>=<span class=\"string\">\"createtime\"</span>/&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">column</span>=<span class=\"string\">\"note\"</span> <span class=\"attr\">property</span>=<span class=\"string\">\"note\"</span>/&gt;</span></div><div class=\"line\">    </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">association</span> <span class=\"attr\">property</span>=<span class=\"string\">\"user\"</span> <span class=\"attr\">javaType</span>=<span class=\"string\">\"com.gjr.po.User\"</span></span></div><div class=\"line\">                 <span class=\"attr\">select</span>=<span class=\"string\">\"com.gjr.mapper.UserMapper.findUserById\"</span></div><div class=\"line\">                 <span class=\"attr\">column</span>=<span class=\"string\">\"user_id\"</span>&gt;</div><div class=\"line\">        <span class=\"comment\">&lt;!-- 实现对用户信息进行延迟加载 --&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">association</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">resultMap</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>测试：<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/51C2ECFE-8AD9-4354-B9D1-3E0B7DC66FE8.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure></p>\n<h2 id=\"mybatis-缓存相关\"><a href=\"#mybatis-缓存相关\" class=\"headerlink\" title=\"mybatis 缓存相关\"></a>mybatis 缓存相关</h2><ul>\n<li>mybatis默认开启一级缓存，二级缓存</li>\n<li>Mybatis查询得数据，缓存至一级缓存，再缓存至二级缓存中，二级缓存是 mapper 级别的，凡是同一个mapper，都会有自己的二级缓存区</li>\n<li>多个sqlsession可以同享同一个 mapper的二级缓存</li>\n</ul>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ul>\n<li>resultMap可以实现高级映射（使用association、collection实现一对一及一对多映射），association、collection具备延迟加载功能。</li>\n<li>延迟加载：先从单表查询、需要时再从关联表去关联查询，大大提高数据库性能，因为查询单表要比关联查询多张表速度要快。</li>\n<li>查询结果 必须要和 pojo 类型保持一致</li>\n<li>联系实际问题的关系类型（如：一个订单对应一个用户，一个订单对应多个明细），进行 po 的修改或扩展</li>\n<li>association, collection 分别是 关系类型为：1对1，1对多   配置时分别是 javaType 、ofType</li>\n</ul>\n<p><br></p>\n<p>附录<br>demo 地址：<br><a href=\"https://github.com/fenglincanyi/mybaitsdemo2\" target=\"_blank\" rel=\"external\">https://github.com/fenglincanyi/mybaitsdemo2</a></p>\n","excerpt":"","more":"<blockquote>\n<p>本次学习内容：MyBatis 高级<br>结合demo进行学习</p>\n</blockquote>\n<h2 id=\"2张表关联查询，一对一查询\"><a href=\"#2张表关联查询，一对一查询\" class=\"headerlink\" title=\"2张表关联查询，一对一查询\"></a>2张表关联查询，一对一查询</h2><ul>\n<li>需求<br>查询订单的信息及用户信息</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">select</span></div><div class=\"line\">orders.*,user.username,user.sex, user.address</div><div class=\"line\"><span class=\"keyword\">from</span> orders, <span class=\"keyword\">user</span></div><div class=\"line\"><span class=\"keyword\">where</span> orders.user_id=user.id</div></pre></td></tr></table></figure>\n<p>结果集：<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/0A6D42AE-B4E6-4960-8313-FAE563CBA426.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure></p>\n<p>主要对 结果集 进行分析，再书写 mapper.xml</p>\n<ul>\n<li>resultType实现<br>新建一个 po , 继承自 Orders（因为此sql 中 orders表的字段较多），再增加 user 的几个字段即可.</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OrdersCustom</span> <span class=\"keyword\">extends</span> <span class=\"title\">Orders</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 需求：</span></div><div class=\"line\">    <span class=\"comment\">// select orders.*,user.username,user.sex, user.address</span></div><div class=\"line\">    <span class=\"comment\">// from orders, user</span></div><div class=\"line\">    <span class=\"comment\">// where orders.user_id=user.id</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> String username;</div><div class=\"line\">    <span class=\"keyword\">private</span> String sex;</div><div class=\"line\">    <span class=\"keyword\">private</span> String address;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getUsername</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> username;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setUsername</span><span class=\"params\">(String username)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.username = username;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getSex</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> sex;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setSex</span><span class=\"params\">(String sex)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.sex = sex;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getAddress</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> address;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setAddress</span><span class=\"params\">(String address)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.address = address;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">OrdersCustomMapper</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 一对一查询 使用 resultType实现</span></div><div class=\"line\">    <span class=\"function\">List&lt;OrdersCustom&gt; <span class=\"title\">queryOrdersUser</span><span class=\"params\">()</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">\"queryOrdersUser\"</span> <span class=\"attr\">resultType</span>=<span class=\"string\">\"com.gjr.po.OrdersCustom\"</span>&gt;</span></div><div class=\"line\">    select</div><div class=\"line\">    orders.*,user.username,user.sex, user.address</div><div class=\"line\">    from orders, user</div><div class=\"line\">    where orders.user_id=user.id</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></div></pre></td></tr></table></figure>\n<ul>\n<li>resultMap实现<br>需要使用 association 进行关联，在原来的 Orders 类中 添加 user 属性</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\">* 一对一查询：使用 resultMap实现，优点：可实现懒加载</div><div class=\"line\">*/</span></div><div class=\"line\"><span class=\"keyword\">private</span> User user;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> User <span class=\"title\">getUser</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> user;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setUser</span><span class=\"params\">(User user)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.user = user;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">\"queryOrdersUser1\"</span> <span class=\"attr\">resultMap</span>=<span class=\"string\">\"OrdersUserResultMap\"</span>&gt;</span></div><div class=\"line\">    select</div><div class=\"line\">    orders.*,user.username,user.sex, user.address</div><div class=\"line\">    from orders, user</div><div class=\"line\">    where orders.user_id=user.id</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">resultMap</span> <span class=\"attr\">id</span>=<span class=\"string\">\"OrdersUserResultMap\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"com.gjr.po.Orders\"</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- 配置订单信息 --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">id</span> <span class=\"attr\">column</span>=<span class=\"string\">\"id\"</span> <span class=\"attr\">property</span>=<span class=\"string\">\"id\"</span>/&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">column</span>=<span class=\"string\">\"user_id\"</span> <span class=\"attr\">property</span>=<span class=\"string\">\"userId\"</span>/&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">column</span>=<span class=\"string\">\"number\"</span> <span class=\"attr\">property</span>=<span class=\"string\">\"number\"</span>/&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">column</span>=<span class=\"string\">\"createtime\"</span> <span class=\"attr\">property</span>=<span class=\"string\">\"createtime\"</span>/&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">column</span>=<span class=\"string\">\"note\"</span> <span class=\"attr\">property</span>=<span class=\"string\">\"note\"</span>/&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">&lt;!-- 配置用户信息 --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">association</span> <span class=\"attr\">property</span>=<span class=\"string\">\"user\"</span> <span class=\"attr\">javaType</span>=<span class=\"string\">\"com.gjr.po.User\"</span>&gt;</span> <span class=\"comment\">&lt;!-- 这个 property=\"user\" 就是 com.gjr.po.Orders 中增加的那个 user 属性--&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">id</span> <span class=\"attr\">column</span>=<span class=\"string\">\"user_id\"</span> <span class=\"attr\">property</span>=<span class=\"string\">\"id\"</span>/&gt;</span> <span class=\"comment\">&lt;!-- column=\"user_id\" 是查出来的结果中 用户的 唯一标示 --&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">column</span>=<span class=\"string\">\"username\"</span> <span class=\"attr\">property</span>=<span class=\"string\">\"username\"</span>/&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">column</span>=<span class=\"string\">\"sex\"</span> <span class=\"attr\">property</span>=<span class=\"string\">\"sex\"</span>/&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">column</span>=<span class=\"string\">\"address\"</span> <span class=\"attr\">property</span>=<span class=\"string\">\"address\"</span>/&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">association</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">resultMap</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/CB9AFFD6-B061-41CC-BC0B-0376C263DC0F.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<h2 id=\"3张表关联查询，一对多查询\"><a href=\"#3张表关联查询，一对多查询\" class=\"headerlink\" title=\"3张表关联查询，一对多查询\"></a>3张表关联查询，一对多查询</h2><p><strong>确定主表，对其 po 添加所需字段</strong></p>\n<ul>\n<li>需求<br>– 查询用户订单详情</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">select</span></div><div class=\"line\">orders.*,</div><div class=\"line\">user.username,user.sex, user.address,</div><div class=\"line\">orderdetail.id orderdetail_id,</div><div class=\"line\">orderdetail.items_id,</div><div class=\"line\">orderdetail.items_num,</div><div class=\"line\">orderdetail.orders_id</div><div class=\"line\"><span class=\"keyword\">from</span> orders, <span class=\"keyword\">user</span>, orderdetail</div><div class=\"line\"><span class=\"keyword\">where</span> orders.user_id = user.id <span class=\"keyword\">and</span> orders_id = orders.id</div></pre></td></tr></table></figure>\n<p>结果集：<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/937F9118-45DC-4D2F-83A3-8ED359C2CD7F.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure></p>\n<ul>\n<li>实现</li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">\"queryOrdersDetailUser\"</span> <span class=\"attr\">resultMap</span>=<span class=\"string\">\"OrdersDetailUserMap\"</span>&gt;</span></div><div class=\"line\">select</div><div class=\"line\">    orders.*,</div><div class=\"line\">    user.username,user.sex, user.address,</div><div class=\"line\">    orderdetail.id orderdetail_id,</div><div class=\"line\">    orderdetail.items_id,</div><div class=\"line\">    orderdetail.items_num,</div><div class=\"line\">    orderdetail.orders_id</div><div class=\"line\">from orders, user, orderdetail</div><div class=\"line\">where orders.user_id = user.id and orders_id = orders.id</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">resultMap</span> <span class=\"attr\">id</span>=<span class=\"string\">\"OrdersDetailUserMap\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"com.gjr.po.Orders\"</span> <span class=\"attr\">extends</span>=<span class=\"string\">\"OrdersUserResultMap\"</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- 用户信息、订单信息、复用前面的--&gt;</span></div><div class=\"line\">    </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">collection</span> <span class=\"attr\">property</span>=<span class=\"string\">\"orderdetailList\"</span> <span class=\"attr\">ofType</span>=<span class=\"string\">\"com.gjr.po.Orderdetail\"</span>&gt;</span> <span class=\"comment\">&lt;!--使用 ofType--&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">id</span> <span class=\"attr\">column</span>=<span class=\"string\">\"orderdetail_id\"</span> <span class=\"attr\">property</span>=<span class=\"string\">\"id\"</span>/&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">column</span>=<span class=\"string\">\"items_id\"</span> <span class=\"attr\">property</span>=<span class=\"string\">\"itemsId\"</span>/&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">column</span>=<span class=\"string\">\"items_num\"</span> <span class=\"attr\">property</span>=<span class=\"string\">\"itemsNum\"</span>/&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">column</span>=<span class=\"string\">\"orders_id\"</span> <span class=\"attr\">property</span>=<span class=\"string\">\"ordersId\"</span>/&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">collection</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">resultMap</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>在查询主表对应的po类， Orders 中增加字段 </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> List&lt;Orderdetail&gt; orderdetailList;</div></pre></td></tr></table></figure>\n<h2 id=\"3张表联合查询，多对多查询\"><a href=\"#3张表联合查询，多对多查询\" class=\"headerlink\" title=\"3张表联合查询，多对多查询\"></a>3张表联合查询，多对多查询</h2><ul>\n<li>需求<br>查询用户订单商品明细</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">SELECT</span></div><div class=\"line\">  orders.*,</div><div class=\"line\">  user.username,</div><div class=\"line\">  user.sex,</div><div class=\"line\">  user.address,</div><div class=\"line\">  orderdetail.id orderdetail_id,</div><div class=\"line\">  orderdetail.items_id,</div><div class=\"line\">  orderdetail.items_num,</div><div class=\"line\">  orderdetail.orders_id,</div><div class=\"line\">  items.name items_name,</div><div class=\"line\">  items.detail items_detail,</div><div class=\"line\">  items.price items_price</div><div class=\"line\"><span class=\"keyword\">FROM</span></div><div class=\"line\">  orders,</div><div class=\"line\">  <span class=\"keyword\">user</span>,</div><div class=\"line\">  orderdetail,</div><div class=\"line\">  items</div><div class=\"line\"><span class=\"keyword\">WHERE</span> orders.user_id = user.id <span class=\"keyword\">AND</span> orderdetail.orders_id=orders.id <span class=\"keyword\">AND</span> orderdetail.items_id = items.id</div></pre></td></tr></table></figure>\n<p>结果集：<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/C9339305-3D30-4A4F-B349-73DC6B6C9D50.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure></p>\n<ul>\n<li>实现</li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">\"queryOrdersDetailUserItems\"</span> <span class=\"attr\">resultMap</span>=<span class=\"string\">\"OrdersDetailUserItemsMap\"</span>&gt;</span></div><div class=\"line\">--     查询用户订单商品明细</div><div class=\"line\">        SELECT</div><div class=\"line\">          orders.*,</div><div class=\"line\">          user.username,</div><div class=\"line\">          user.sex,</div><div class=\"line\">          user.address,</div><div class=\"line\">          orderdetail.id orderdetail_id,</div><div class=\"line\">          orderdetail.items_id,</div><div class=\"line\">          orderdetail.items_num,</div><div class=\"line\">          orderdetail.orders_id,</div><div class=\"line\">          items.name items_name,</div><div class=\"line\">          items.detail items_detail,</div><div class=\"line\">          items.price items_price</div><div class=\"line\">        FROM</div><div class=\"line\">          orders,</div><div class=\"line\">          user,</div><div class=\"line\">          orderdetail,</div><div class=\"line\">          items</div><div class=\"line\">        WHERE orders.user_id = user.id AND orderdetail.orders_id=orders.id AND orderdetail.items_id = items.id</div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">resultMap</span> <span class=\"attr\">id</span>=<span class=\"string\">\"OrdersDetailUserItemsMap\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"com.gjr.po.User\"</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- 用户信息--&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">id</span> <span class=\"attr\">column</span>=<span class=\"string\">\"user_id\"</span> <span class=\"attr\">property</span>=<span class=\"string\">\"id\"</span>/&gt;</span> <span class=\"comment\">&lt;!-- 根据查询结果 写 column !!! --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">column</span>=<span class=\"string\">\"username\"</span> <span class=\"attr\">property</span>=<span class=\"string\">\"username\"</span>/&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">column</span>=<span class=\"string\">\"sex\"</span> <span class=\"attr\">property</span>=<span class=\"string\">\"sex\"</span>/&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">column</span>=<span class=\"string\">\"address\"</span> <span class=\"attr\">property</span>=<span class=\"string\">\"address\"</span>/&gt;</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">&lt;!-- 订单信息: 一个用户对应多个订单--&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">collection</span> <span class=\"attr\">property</span>=<span class=\"string\">\"ordersList\"</span> <span class=\"attr\">ofType</span>=<span class=\"string\">\"com.gjr.po.Orders\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">id</span> <span class=\"attr\">column</span>=<span class=\"string\">\"id\"</span> <span class=\"attr\">property</span>=<span class=\"string\">\"id\"</span>/&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">column</span>=<span class=\"string\">\"user_id\"</span> <span class=\"attr\">property</span>=<span class=\"string\">\"userId\"</span>/&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">column</span>=<span class=\"string\">\"number\"</span> <span class=\"attr\">property</span>=<span class=\"string\">\"number\"</span>/&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">column</span>=<span class=\"string\">\"createtime\"</span> <span class=\"attr\">property</span>=<span class=\"string\">\"createtime\"</span>/&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">column</span>=<span class=\"string\">\"note\"</span> <span class=\"attr\">property</span>=<span class=\"string\">\"note\"</span>/&gt;</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">&lt;!-- 订单明细：一个订单对应多个明细 --&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">collection</span> <span class=\"attr\">property</span>=<span class=\"string\">\"orderdetailList\"</span> <span class=\"attr\">ofType</span>=<span class=\"string\">\"com.gjr.po.Orderdetail\"</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">id</span> <span class=\"attr\">column</span>=<span class=\"string\">\"orderdetail_id\"</span> <span class=\"attr\">property</span>=<span class=\"string\">\"id\"</span>/&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">column</span>=<span class=\"string\">\"items_id\"</span> <span class=\"attr\">property</span>=<span class=\"string\">\"itemsId\"</span>/&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">column</span>=<span class=\"string\">\"items_num\"</span> <span class=\"attr\">property</span>=<span class=\"string\">\"itemsNum\"</span>/&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">column</span>=<span class=\"string\">\"orders_id\"</span> <span class=\"attr\">property</span>=<span class=\"string\">\"ordersId\"</span>/&gt;</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">&lt;!-- 商品信息：一个明细对应一个商品 --&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">association</span> <span class=\"attr\">property</span>=<span class=\"string\">\"items\"</span> <span class=\"attr\">javaType</span>=<span class=\"string\">\"com.gjr.po.Items\"</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">id</span> <span class=\"attr\">column</span>=<span class=\"string\">\"items_id\"</span> <span class=\"attr\">property</span>=<span class=\"string\">\"id\"</span>/&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">column</span>=<span class=\"string\">\"items_name\"</span> <span class=\"attr\">property</span>=<span class=\"string\">\"name\"</span>/&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">column</span>=<span class=\"string\">\"items_detail\"</span> <span class=\"attr\">property</span>=<span class=\"string\">\"detail\"</span>/&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">column</span>=<span class=\"string\">\"items_price\"</span> <span class=\"attr\">property</span>=<span class=\"string\">\"price\"</span>/&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">association</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">collection</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">collection</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">resultMap</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>各个 po 类需要分别增加相关字段即可，安装关联的类型和字段</p>\n<h2 id=\"懒加载\"><a href=\"#懒加载\" class=\"headerlink\" title=\"懒加载\"></a>懒加载</h2><p>配置 mybatisConfig.xml 相关参数：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">settings</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- 打开 延迟加载 的开关--&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">setting</span> <span class=\"attr\">name</span>=<span class=\"string\">\"lazyLoadingEnabled\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"true\"</span>/&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- 设置按需加载 --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">setting</span> <span class=\"attr\">name</span>=<span class=\"string\">\"aggressiveLazyLoading\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"false\"</span>/&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">settings</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">\"findOrdersUserLazyLoading\"</span> <span class=\"attr\">resultMap</span>=<span class=\"string\">\"OrdersUserLazyLoadingResultMap\"</span>&gt;</span></div><div class=\"line\">--         懒加载测试</div><div class=\"line\">        SELECT * FROM orders</div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>用 association 实现延迟加载：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">resultMap</span> <span class=\"attr\">id</span>=<span class=\"string\">\"OrdersUserLazyLoadingResultMap\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"com.gjr.po.Orders\"</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!--对订单信息进行映射配置  --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">id</span> <span class=\"attr\">column</span>=<span class=\"string\">\"id\"</span> <span class=\"attr\">property</span>=<span class=\"string\">\"id\"</span>/&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">column</span>=<span class=\"string\">\"user_id\"</span> <span class=\"attr\">property</span>=<span class=\"string\">\"userId\"</span>/&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">column</span>=<span class=\"string\">\"number\"</span> <span class=\"attr\">property</span>=<span class=\"string\">\"number\"</span>/&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">column</span>=<span class=\"string\">\"createtime\"</span> <span class=\"attr\">property</span>=<span class=\"string\">\"createtime\"</span>/&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">column</span>=<span class=\"string\">\"note\"</span> <span class=\"attr\">property</span>=<span class=\"string\">\"note\"</span>/&gt;</span></div><div class=\"line\">    </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">association</span> <span class=\"attr\">property</span>=<span class=\"string\">\"user\"</span> <span class=\"attr\">javaType</span>=<span class=\"string\">\"com.gjr.po.User\"</span></div><div class=\"line\">                 <span class=\"attr\">select</span>=<span class=\"string\">\"com.gjr.mapper.UserMapper.findUserById\"</span></div><div class=\"line\">                 <span class=\"attr\">column</span>=<span class=\"string\">\"user_id\"</span>&gt;</span></div><div class=\"line\">        <span class=\"comment\">&lt;!-- 实现对用户信息进行延迟加载 --&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">association</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">resultMap</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>测试：<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/51C2ECFE-8AD9-4354-B9D1-3E0B7DC66FE8.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure></p>\n<h2 id=\"mybatis-缓存相关\"><a href=\"#mybatis-缓存相关\" class=\"headerlink\" title=\"mybatis 缓存相关\"></a>mybatis 缓存相关</h2><ul>\n<li>mybatis默认开启一级缓存，二级缓存</li>\n<li>Mybatis查询得数据，缓存至一级缓存，再缓存至二级缓存中，二级缓存是 mapper 级别的，凡是同一个mapper，都会有自己的二级缓存区</li>\n<li>多个sqlsession可以同享同一个 mapper的二级缓存</li>\n</ul>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ul>\n<li>resultMap可以实现高级映射（使用association、collection实现一对一及一对多映射），association、collection具备延迟加载功能。</li>\n<li>延迟加载：先从单表查询、需要时再从关联表去关联查询，大大提高数据库性能，因为查询单表要比关联查询多张表速度要快。</li>\n<li>查询结果 必须要和 pojo 类型保持一致</li>\n<li>联系实际问题的关系类型（如：一个订单对应一个用户，一个订单对应多个明细），进行 po 的修改或扩展</li>\n<li>association, collection 分别是 关系类型为：1对1，1对多   配置时分别是 javaType 、ofType</li>\n</ul>\n<p><br></p>\n<p>附录<br>demo 地址：<br><a href=\"https://github.com/fenglincanyi/mybaitsdemo2\">https://github.com/fenglincanyi/mybaitsdemo2</a></p>\n"},{"title":"Mybatis 逆向工程","date":"2017-01-17T02:11:00.000Z","_content":"\n## pom 配置\npom.xml 中 加入：\n\n``` xml\n<plugins>\n    <plugin>\n        <groupId>org.mybatis.generator</groupId>\n        <artifactId>mybatis-generator-maven-plugin</artifactId>\n        <version>1.3.5</version>\n        <configuration>\n            <verbose>true</verbose>\n            <overwrite>true</overwrite>\n        </configuration>\n    </plugin>\n</plugins>\n```\n## maven配置\n![](http://7xr1vo.com1.z0.glb.clouddn.com/5709477C-1A4B-4AEF-B0E6-5EBE20688677.png)\n\n![](http://7xr1vo.com1.z0.glb.clouddn.com/8C4EFD37-2282-4BEA-81C7-4C4E11D2A91C.png)\n\n命名：\nmybatis-generator:generate -e\n\n![](http://7xr1vo.com1.z0.glb.clouddn.com/C97FA1F0-DEDF-4A13-9810-6029D03D97DE.png)\n\n![](http://7xr1vo.com1.z0.glb.clouddn.com/4EAE9177-A8D0-411D-869D-2167D54CB026.png)\n\n![](http://7xr1vo.com1.z0.glb.clouddn.com/E3C00FBA-21F9-4B6B-80BE-74D553270C6A.png)\n\n![](http://7xr1vo.com1.z0.glb.clouddn.com/D0FC7201-E1D6-4D16-90E6-87D079213CA3.png)\n\n注意：\n文件名必须是：generatorConfig.xml\n否则报错： configfile /Users/geng/ssm/Demo/ssmdemo/src/main/resources/generatorConfig.xml does not exist\n\n## mybatis config.xml 文件配置\n拷贝驱动包的绝对路径\n![](http://7xr1vo.com1.z0.glb.clouddn.com/68C3A3B3-DB05-4786-A412-C808F0A8AA17.png)\n\nxml 配置：\n\n``` xml\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<!DOCTYPE generatorConfiguration PUBLIC\n        \"-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN\"\n        \"http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd\" >\n<generatorConfiguration>\n\n    <!-- !!!! Driver Class Path !!!! —>\n    <classPathEntry location=\"/Users/geng/ssm/Demo/mybaitsdemo2/src/main/resources/mysql-connector-java-5.1.7-bin.jar\"/>\n\n    <context id=\"context\" targetRuntime=\"MyBatis3\">\n        <commentGenerator>\n            <property name=\"suppressAllComments\" value=\"false\"/>\n            <property name=\"suppressDate\" value=\"true\"/>\n        </commentGenerator>\n\n        <!-- !!!! Database Configurations !!!! -->\n        <jdbcConnection driverClass=\"com.mysql.jdbc.Driver\"\n                        connectionURL=\"jdbc:mysql://localhost:3306/mybatis_demo2_db?characterEncoding=utf-8\"\n                        userId=\"root\"\n                        password=\"root\"/>\n\n        <javaTypeResolver>\n            <property name=\"forceBigDecimals\" value=\"false\"/>\n        </javaTypeResolver>\n\n        <!-- !!!! Model Configurations !!!! -->\n        <javaModelGenerator targetPackage=\"com.gjr.testgenerator.po\" targetProject=\"src/main/java\">\n            <property name=\"enableSubPackages\" value=\"false\"/>\n            <property name=\"trimStrings\" value=\"true\"/>\n        </javaModelGenerator>\n\n        <!-- !!!! Mapper XML Configurations !!!! -->\n        <sqlMapGenerator targetPackage=\"com.gjr.testgenerator.mapper\" targetProject=\"src/main/java\">\n            <property name=\"enableSubPackages\" value=\"false\"/>\n        </sqlMapGenerator>\n\n        <!-- !!!! Mapper Interface Configurations !!!! -->\n        <javaClientGenerator targetPackage=\"com.gjr.testgenerator.mapper\" targetProject=\"src/main/java\" type=\"XMLMAPPER\">\n            <property name=\"enableSubPackages\" value=\"false\"/>\n        </javaClientGenerator>\n\n        <!-- !!!! Table Configurations !!!! -->\n        <table tableName=\"items\" enableCountByExample=\"false\" enableDeleteByExample=\"false\" enableSelectByExample=\"false\"\n               enableUpdateByExample=\"false\"/>\n        <table tableName=\"orders\" enableCountByExample=\"false\" enableDeleteByExample=\"false\" enableSelectByExample=\"false\"\n               enableUpdateByExample=\"false\"/>\n        <table tableName=\"orderdetail\" enableCountByExample=\"false\" enableDeleteByExample=\"false\" enableSelectByExample=\"false\"\n               enableUpdateByExample=\"false\"/>\n        <table tableName=\"user\" enableCountByExample=\"false\" enableDeleteByExample=\"false\" enableSelectByExample=\"false\"\n               enableUpdateByExample=\"false\"/>\n\n    </context>\n</generatorConfiguration>\n```\n\n## 运行逆向生成代码\n\n![](http://7xr1vo.com1.z0.glb.clouddn.com/90C77448-2475-4EE3-B0D3-BF49D2A79606.png)\n\n![](http://7xr1vo.com1.z0.glb.clouddn.com/617ABCDF-11AB-45AF-BA9C-1150393FEDC9.png)\n\n运行成功\n\n<br>\n\n附录\ndemo 地址：\nhttps://github.com/fenglincanyi/mybaitsdemo2","source":"_posts/Mybatis 逆向工程.md","raw":"---\ntitle: Mybatis 逆向工程\ndate: 2017-01-17 10:11\ncategories: Java后台\ntags: Mybatis\n---\n\n## pom 配置\npom.xml 中 加入：\n\n``` xml\n<plugins>\n    <plugin>\n        <groupId>org.mybatis.generator</groupId>\n        <artifactId>mybatis-generator-maven-plugin</artifactId>\n        <version>1.3.5</version>\n        <configuration>\n            <verbose>true</verbose>\n            <overwrite>true</overwrite>\n        </configuration>\n    </plugin>\n</plugins>\n```\n## maven配置\n![](http://7xr1vo.com1.z0.glb.clouddn.com/5709477C-1A4B-4AEF-B0E6-5EBE20688677.png)\n\n![](http://7xr1vo.com1.z0.glb.clouddn.com/8C4EFD37-2282-4BEA-81C7-4C4E11D2A91C.png)\n\n命名：\nmybatis-generator:generate -e\n\n![](http://7xr1vo.com1.z0.glb.clouddn.com/C97FA1F0-DEDF-4A13-9810-6029D03D97DE.png)\n\n![](http://7xr1vo.com1.z0.glb.clouddn.com/4EAE9177-A8D0-411D-869D-2167D54CB026.png)\n\n![](http://7xr1vo.com1.z0.glb.clouddn.com/E3C00FBA-21F9-4B6B-80BE-74D553270C6A.png)\n\n![](http://7xr1vo.com1.z0.glb.clouddn.com/D0FC7201-E1D6-4D16-90E6-87D079213CA3.png)\n\n注意：\n文件名必须是：generatorConfig.xml\n否则报错： configfile /Users/geng/ssm/Demo/ssmdemo/src/main/resources/generatorConfig.xml does not exist\n\n## mybatis config.xml 文件配置\n拷贝驱动包的绝对路径\n![](http://7xr1vo.com1.z0.glb.clouddn.com/68C3A3B3-DB05-4786-A412-C808F0A8AA17.png)\n\nxml 配置：\n\n``` xml\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<!DOCTYPE generatorConfiguration PUBLIC\n        \"-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN\"\n        \"http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd\" >\n<generatorConfiguration>\n\n    <!-- !!!! Driver Class Path !!!! —>\n    <classPathEntry location=\"/Users/geng/ssm/Demo/mybaitsdemo2/src/main/resources/mysql-connector-java-5.1.7-bin.jar\"/>\n\n    <context id=\"context\" targetRuntime=\"MyBatis3\">\n        <commentGenerator>\n            <property name=\"suppressAllComments\" value=\"false\"/>\n            <property name=\"suppressDate\" value=\"true\"/>\n        </commentGenerator>\n\n        <!-- !!!! Database Configurations !!!! -->\n        <jdbcConnection driverClass=\"com.mysql.jdbc.Driver\"\n                        connectionURL=\"jdbc:mysql://localhost:3306/mybatis_demo2_db?characterEncoding=utf-8\"\n                        userId=\"root\"\n                        password=\"root\"/>\n\n        <javaTypeResolver>\n            <property name=\"forceBigDecimals\" value=\"false\"/>\n        </javaTypeResolver>\n\n        <!-- !!!! Model Configurations !!!! -->\n        <javaModelGenerator targetPackage=\"com.gjr.testgenerator.po\" targetProject=\"src/main/java\">\n            <property name=\"enableSubPackages\" value=\"false\"/>\n            <property name=\"trimStrings\" value=\"true\"/>\n        </javaModelGenerator>\n\n        <!-- !!!! Mapper XML Configurations !!!! -->\n        <sqlMapGenerator targetPackage=\"com.gjr.testgenerator.mapper\" targetProject=\"src/main/java\">\n            <property name=\"enableSubPackages\" value=\"false\"/>\n        </sqlMapGenerator>\n\n        <!-- !!!! Mapper Interface Configurations !!!! -->\n        <javaClientGenerator targetPackage=\"com.gjr.testgenerator.mapper\" targetProject=\"src/main/java\" type=\"XMLMAPPER\">\n            <property name=\"enableSubPackages\" value=\"false\"/>\n        </javaClientGenerator>\n\n        <!-- !!!! Table Configurations !!!! -->\n        <table tableName=\"items\" enableCountByExample=\"false\" enableDeleteByExample=\"false\" enableSelectByExample=\"false\"\n               enableUpdateByExample=\"false\"/>\n        <table tableName=\"orders\" enableCountByExample=\"false\" enableDeleteByExample=\"false\" enableSelectByExample=\"false\"\n               enableUpdateByExample=\"false\"/>\n        <table tableName=\"orderdetail\" enableCountByExample=\"false\" enableDeleteByExample=\"false\" enableSelectByExample=\"false\"\n               enableUpdateByExample=\"false\"/>\n        <table tableName=\"user\" enableCountByExample=\"false\" enableDeleteByExample=\"false\" enableSelectByExample=\"false\"\n               enableUpdateByExample=\"false\"/>\n\n    </context>\n</generatorConfiguration>\n```\n\n## 运行逆向生成代码\n\n![](http://7xr1vo.com1.z0.glb.clouddn.com/90C77448-2475-4EE3-B0D3-BF49D2A79606.png)\n\n![](http://7xr1vo.com1.z0.glb.clouddn.com/617ABCDF-11AB-45AF-BA9C-1150393FEDC9.png)\n\n运行成功\n\n<br>\n\n附录\ndemo 地址：\nhttps://github.com/fenglincanyi/mybaitsdemo2","slug":"Mybatis 逆向工程","published":1,"updated":"2017-03-05T10:14:14.000Z","_id":"cizwit1hi0003rnqwkkdcv271","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"pom-配置\"><a href=\"#pom-配置\" class=\"headerlink\" title=\"pom 配置\"></a>pom 配置</h2><p>pom.xml 中 加入：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">plugins</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.mybatis.generator<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mybatis-generator-maven-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.3.5<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">verbose</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">verbose</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">overwrite</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">overwrite</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">plugins</span>&gt;</span></div></pre></td></tr></table></figure>\n<h2 id=\"maven配置\"><a href=\"#maven配置\" class=\"headerlink\" title=\"maven配置\"></a>maven配置</h2><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/5709477C-1A4B-4AEF-B0E6-5EBE20688677.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/8C4EFD37-2282-4BEA-81C7-4C4E11D2A91C.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>命名：<br>mybatis-generator:generate -e</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/C97FA1F0-DEDF-4A13-9810-6029D03D97DE.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/4EAE9177-A8D0-411D-869D-2167D54CB026.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/E3C00FBA-21F9-4B6B-80BE-74D553270C6A.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/D0FC7201-E1D6-4D16-90E6-87D079213CA3.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>注意：<br>文件名必须是：generatorConfig.xml<br>否则报错： configfile /Users/geng/ssm/Demo/ssmdemo/src/main/resources/generatorConfig.xml does not exist</p>\n<h2 id=\"mybatis-config-xml-文件配置\"><a href=\"#mybatis-config-xml-文件配置\" class=\"headerlink\" title=\"mybatis config.xml 文件配置\"></a>mybatis config.xml 文件配置</h2><p>拷贝驱动包的绝对路径<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/68C3A3B3-DB05-4786-A412-C808F0A8AA17.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure></p>\n<p>xml 配置：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?&gt;</div><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE generatorConfiguration PUBLIC</span></div><div class=\"line\">        \"-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN\"</div><div class=\"line\">        \"http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd\" &gt;</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">generatorConfiguration</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">&lt;!-- !!!! Driver Class Path !!!! —&gt;</span></div><div class=\"line\">    &lt;classPathEntry location=\"/Users/geng/ssm/Demo/mybaitsdemo2/src/main/resources/mysql-connector-java-5.1.7-bin.jar\"/&gt;</div><div class=\"line\"></div><div class=\"line\">    &lt;context id=\"context\" targetRuntime=\"MyBatis3\"&gt;</div><div class=\"line\">        &lt;commentGenerator&gt;</div><div class=\"line\">            &lt;property name=\"suppressAllComments\" value=\"false\"/&gt;</div><div class=\"line\">            &lt;property name=\"suppressDate\" value=\"true\"/&gt;</div><div class=\"line\">        &lt;/commentGenerator&gt;</div><div class=\"line\"></div><div class=\"line\">        &lt;!-- !!!! Database Configurations !!!! --&gt;</div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">jdbcConnection</span> <span class=\"attr\">driverClass</span>=<span class=\"string\">\"com.mysql.jdbc.Driver\"</span></span></div><div class=\"line\">                        <span class=\"attr\">connectionURL</span>=<span class=\"string\">\"jdbc:mysql://localhost:3306/mybatis_demo2_db?characterEncoding=utf-8\"</span></div><div class=\"line\">                        <span class=\"attr\">userId</span>=<span class=\"string\">\"root\"</span></div><div class=\"line\">                        <span class=\"attr\">password</span>=<span class=\"string\">\"root\"</span>/&gt;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">javaTypeResolver</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"forceBigDecimals\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"false\"</span>/&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">javaTypeResolver</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">&lt;!-- !!!! Model Configurations !!!! --&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">javaModelGenerator</span> <span class=\"attr\">targetPackage</span>=<span class=\"string\">\"com.gjr.testgenerator.po\"</span> <span class=\"attr\">targetProject</span>=<span class=\"string\">\"src/main/java\"</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"enableSubPackages\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"false\"</span>/&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"trimStrings\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"true\"</span>/&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">javaModelGenerator</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">&lt;!-- !!!! Mapper XML Configurations !!!! --&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">sqlMapGenerator</span> <span class=\"attr\">targetPackage</span>=<span class=\"string\">\"com.gjr.testgenerator.mapper\"</span> <span class=\"attr\">targetProject</span>=<span class=\"string\">\"src/main/java\"</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"enableSubPackages\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"false\"</span>/&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">sqlMapGenerator</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">&lt;!-- !!!! Mapper Interface Configurations !!!! --&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">javaClientGenerator</span> <span class=\"attr\">targetPackage</span>=<span class=\"string\">\"com.gjr.testgenerator.mapper\"</span> <span class=\"attr\">targetProject</span>=<span class=\"string\">\"src/main/java\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"XMLMAPPER\"</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"enableSubPackages\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"false\"</span>/&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">javaClientGenerator</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">&lt;!-- !!!! Table Configurations !!!! --&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">table</span> <span class=\"attr\">tableName</span>=<span class=\"string\">\"items\"</span> <span class=\"attr\">enableCountByExample</span>=<span class=\"string\">\"false\"</span> <span class=\"attr\">enableDeleteByExample</span>=<span class=\"string\">\"false\"</span> <span class=\"attr\">enableSelectByExample</span>=<span class=\"string\">\"false\"</span></span></div><div class=\"line\">               <span class=\"attr\">enableUpdateByExample</span>=<span class=\"string\">\"false\"</span>/&gt;</div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">table</span> <span class=\"attr\">tableName</span>=<span class=\"string\">\"orders\"</span> <span class=\"attr\">enableCountByExample</span>=<span class=\"string\">\"false\"</span> <span class=\"attr\">enableDeleteByExample</span>=<span class=\"string\">\"false\"</span> <span class=\"attr\">enableSelectByExample</span>=<span class=\"string\">\"false\"</span></span></div><div class=\"line\">               <span class=\"attr\">enableUpdateByExample</span>=<span class=\"string\">\"false\"</span>/&gt;</div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">table</span> <span class=\"attr\">tableName</span>=<span class=\"string\">\"orderdetail\"</span> <span class=\"attr\">enableCountByExample</span>=<span class=\"string\">\"false\"</span> <span class=\"attr\">enableDeleteByExample</span>=<span class=\"string\">\"false\"</span> <span class=\"attr\">enableSelectByExample</span>=<span class=\"string\">\"false\"</span></span></div><div class=\"line\">               <span class=\"attr\">enableUpdateByExample</span>=<span class=\"string\">\"false\"</span>/&gt;</div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">table</span> <span class=\"attr\">tableName</span>=<span class=\"string\">\"user\"</span> <span class=\"attr\">enableCountByExample</span>=<span class=\"string\">\"false\"</span> <span class=\"attr\">enableDeleteByExample</span>=<span class=\"string\">\"false\"</span> <span class=\"attr\">enableSelectByExample</span>=<span class=\"string\">\"false\"</span></span></div><div class=\"line\">               <span class=\"attr\">enableUpdateByExample</span>=<span class=\"string\">\"false\"</span>/&gt;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">context</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">generatorConfiguration</span>&gt;</span></div></pre></td></tr></table></figure>\n<h2 id=\"运行逆向生成代码\"><a href=\"#运行逆向生成代码\" class=\"headerlink\" title=\"运行逆向生成代码\"></a>运行逆向生成代码</h2><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/90C77448-2475-4EE3-B0D3-BF49D2A79606.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/617ABCDF-11AB-45AF-BA9C-1150393FEDC9.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>运行成功</p>\n<p><br></p>\n<p>附录<br>demo 地址：<br><a href=\"https://github.com/fenglincanyi/mybaitsdemo2\" target=\"_blank\" rel=\"external\">https://github.com/fenglincanyi/mybaitsdemo2</a></p>\n","excerpt":"","more":"<h2 id=\"pom-配置\"><a href=\"#pom-配置\" class=\"headerlink\" title=\"pom 配置\"></a>pom 配置</h2><p>pom.xml 中 加入：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">plugins</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.mybatis.generator<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mybatis-generator-maven-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.3.5<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">verbose</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">verbose</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">overwrite</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">overwrite</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">plugins</span>&gt;</span></div></pre></td></tr></table></figure>\n<h2 id=\"maven配置\"><a href=\"#maven配置\" class=\"headerlink\" title=\"maven配置\"></a>maven配置</h2><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/5709477C-1A4B-4AEF-B0E6-5EBE20688677.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/8C4EFD37-2282-4BEA-81C7-4C4E11D2A91C.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>命名：<br>mybatis-generator:generate -e</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/C97FA1F0-DEDF-4A13-9810-6029D03D97DE.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/4EAE9177-A8D0-411D-869D-2167D54CB026.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/E3C00FBA-21F9-4B6B-80BE-74D553270C6A.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/D0FC7201-E1D6-4D16-90E6-87D079213CA3.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>注意：<br>文件名必须是：generatorConfig.xml<br>否则报错： configfile /Users/geng/ssm/Demo/ssmdemo/src/main/resources/generatorConfig.xml does not exist</p>\n<h2 id=\"mybatis-config-xml-文件配置\"><a href=\"#mybatis-config-xml-文件配置\" class=\"headerlink\" title=\"mybatis config.xml 文件配置\"></a>mybatis config.xml 文件配置</h2><p>拷贝驱动包的绝对路径<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/68C3A3B3-DB05-4786-A412-C808F0A8AA17.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure></p>\n<p>xml 配置：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?&gt;</div><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE generatorConfiguration PUBLIC</div><div class=\"line\">        \"-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN\"</div><div class=\"line\">        \"http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd\" &gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">generatorConfiguration</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">&lt;!-- !!!! Driver Class Path !!!! —&gt;</div><div class=\"line\">    &lt;classPathEntry location=\"/Users/geng/ssm/Demo/mybaitsdemo2/src/main/resources/mysql-connector-java-5.1.7-bin.jar\"/&gt;</div><div class=\"line\"></div><div class=\"line\">    &lt;context id=\"context\" targetRuntime=\"MyBatis3\"&gt;</div><div class=\"line\">        &lt;commentGenerator&gt;</div><div class=\"line\">            &lt;property name=\"suppressAllComments\" value=\"false\"/&gt;</div><div class=\"line\">            &lt;property name=\"suppressDate\" value=\"true\"/&gt;</div><div class=\"line\">        &lt;/commentGenerator&gt;</div><div class=\"line\"></div><div class=\"line\">        &lt;!-- !!!! Database Configurations !!!! --&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">jdbcConnection</span> <span class=\"attr\">driverClass</span>=<span class=\"string\">\"com.mysql.jdbc.Driver\"</span></div><div class=\"line\">                        <span class=\"attr\">connectionURL</span>=<span class=\"string\">\"jdbc:mysql://localhost:3306/mybatis_demo2_db?characterEncoding=utf-8\"</span></div><div class=\"line\">                        <span class=\"attr\">userId</span>=<span class=\"string\">\"root\"</span></div><div class=\"line\">                        <span class=\"attr\">password</span>=<span class=\"string\">\"root\"</span>/&gt;</span></div><div class=\"line\"></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">javaTypeResolver</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"forceBigDecimals\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"false\"</span>/&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">javaTypeResolver</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">&lt;!-- !!!! Model Configurations !!!! --&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">javaModelGenerator</span> <span class=\"attr\">targetPackage</span>=<span class=\"string\">\"com.gjr.testgenerator.po\"</span> <span class=\"attr\">targetProject</span>=<span class=\"string\">\"src/main/java\"</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"enableSubPackages\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"false\"</span>/&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"trimStrings\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"true\"</span>/&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">javaModelGenerator</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">&lt;!-- !!!! Mapper XML Configurations !!!! --&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">sqlMapGenerator</span> <span class=\"attr\">targetPackage</span>=<span class=\"string\">\"com.gjr.testgenerator.mapper\"</span> <span class=\"attr\">targetProject</span>=<span class=\"string\">\"src/main/java\"</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"enableSubPackages\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"false\"</span>/&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">sqlMapGenerator</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">&lt;!-- !!!! Mapper Interface Configurations !!!! --&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">javaClientGenerator</span> <span class=\"attr\">targetPackage</span>=<span class=\"string\">\"com.gjr.testgenerator.mapper\"</span> <span class=\"attr\">targetProject</span>=<span class=\"string\">\"src/main/java\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"XMLMAPPER\"</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"enableSubPackages\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"false\"</span>/&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">javaClientGenerator</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">&lt;!-- !!!! Table Configurations !!!! --&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">table</span> <span class=\"attr\">tableName</span>=<span class=\"string\">\"items\"</span> <span class=\"attr\">enableCountByExample</span>=<span class=\"string\">\"false\"</span> <span class=\"attr\">enableDeleteByExample</span>=<span class=\"string\">\"false\"</span> <span class=\"attr\">enableSelectByExample</span>=<span class=\"string\">\"false\"</span></div><div class=\"line\">               <span class=\"attr\">enableUpdateByExample</span>=<span class=\"string\">\"false\"</span>/&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">table</span> <span class=\"attr\">tableName</span>=<span class=\"string\">\"orders\"</span> <span class=\"attr\">enableCountByExample</span>=<span class=\"string\">\"false\"</span> <span class=\"attr\">enableDeleteByExample</span>=<span class=\"string\">\"false\"</span> <span class=\"attr\">enableSelectByExample</span>=<span class=\"string\">\"false\"</span></div><div class=\"line\">               <span class=\"attr\">enableUpdateByExample</span>=<span class=\"string\">\"false\"</span>/&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">table</span> <span class=\"attr\">tableName</span>=<span class=\"string\">\"orderdetail\"</span> <span class=\"attr\">enableCountByExample</span>=<span class=\"string\">\"false\"</span> <span class=\"attr\">enableDeleteByExample</span>=<span class=\"string\">\"false\"</span> <span class=\"attr\">enableSelectByExample</span>=<span class=\"string\">\"false\"</span></div><div class=\"line\">               <span class=\"attr\">enableUpdateByExample</span>=<span class=\"string\">\"false\"</span>/&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">table</span> <span class=\"attr\">tableName</span>=<span class=\"string\">\"user\"</span> <span class=\"attr\">enableCountByExample</span>=<span class=\"string\">\"false\"</span> <span class=\"attr\">enableDeleteByExample</span>=<span class=\"string\">\"false\"</span> <span class=\"attr\">enableSelectByExample</span>=<span class=\"string\">\"false\"</span></div><div class=\"line\">               <span class=\"attr\">enableUpdateByExample</span>=<span class=\"string\">\"false\"</span>/&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">context</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">generatorConfiguration</span>&gt;</span></div></pre></td></tr></table></figure>\n<h2 id=\"运行逆向生成代码\"><a href=\"#运行逆向生成代码\" class=\"headerlink\" title=\"运行逆向生成代码\"></a>运行逆向生成代码</h2><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/90C77448-2475-4EE3-B0D3-BF49D2A79606.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/617ABCDF-11AB-45AF-BA9C-1150393FEDC9.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>运行成功</p>\n<p><br></p>\n<p>附录<br>demo 地址：<br><a href=\"https://github.com/fenglincanyi/mybaitsdemo2\">https://github.com/fenglincanyi/mybaitsdemo2</a></p>\n"},{"title":"Springmvc 相关","date":"2017-01-21T06:55:00.000Z","_content":"## springmvc 框架原理\n![](http://7xr1vo.com1.z0.glb.clouddn.com/mvc.png)\n\nspringmvc执行流程：\n1. 前端控制器（DispatcherServlet）, 接受请求，然后请求 处理器映射器（HanderMapping）\n2. HanderMapping 根据 xml / 注解 进行查找相关的 handler，并返回给 前端控制器\n3. 前端控制器 调用 处理器适配器（HanderAdapter）按照一定规则去执行 handler\n4. handler执行完毕后，返回给 HanderAdapter ModelAndView，HandlerAdapter 再返回给 前端控制器\n5. 前端控制器 将 ModelAndView 发送给 视图解析器（ViewResolver），试图解析器根据试图名解析为真正的视图\n6. 视图解析器解析后，将view 返回给 前端控制器，前端控制器 进行视图渲染，视图渲染将模型数据(在ModelAndView对象中)填充到request域\n7. 前端控制器 向用户相应结果\n\n重要的组件：\n* 前端控制器 DispatherServlet：接受请求，相应结果，转发器的作用\n* 处理器映射器 HandlerMapping: 根据配置查找 handler\n* 处理器适配器 HandlerAdapter: 按照规则去执行 handler\n* 处理器 Handler: 业务处理\n* 视图解析器 ViewResolver: 进行视图解析，将ModelAndView解析为真正的view\n\n\n## springmvc 基本配置\n如果不在 springmvc.xml 配置相关的映射器、适配器，spring会使用默认的，默认的配置 在 DispatcherServlet.properties 中：\n这些默认的都不建议使用了。\n![](http://7xr1vo.com1.z0.glb.clouddn.com/B77F53FF-BBEF-40EC-BD0A-E176EB7AD8DA.png)\n\n\n``` java\n# Default implementation classes for DispatcherServlet's strategy interfaces.\n# Used as fallback when no matching beans are found in the DispatcherServlet context.\n# Not meant to be customized by application developers.\n\norg.springframework.web.servlet.LocaleResolver=org.springframework.web.servlet.i18n.AcceptHeaderLocaleResolver\n\norg.springframework.web.servlet.ThemeResolver=org.springframework.web.servlet.theme.FixedThemeResolver\n\norg.springframework.web.servlet.HandlerMapping=org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping,\\\n   org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping\n\norg.springframework.web.servlet.HandlerAdapter=org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter,\\\n   org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter,\\\n   org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter\n\norg.springframework.web.servlet.HandlerExceptionResolver=org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerExceptionResolver,\\\n   org.springframework.web.servlet.mvc.annotation.ResponseStatusExceptionResolver,\\\n   org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver\n\norg.springframework.web.servlet.RequestToViewNameTranslator=org.springframework.web.servlet.view.DefaultRequestToViewNameTranslator\n\norg.springframework.web.servlet.ViewResolver=org.springframework.web.servlet.view.InternalResourceViewResolver\n\norg.springframework.web.servlet.FlashMapManager=org.springframework.web.servlet.support.SessionFlashMapManager\n```\n\nSpring 3.1之后 使用的 映射器 和 适配器：\n\norg.springframework.web.servlet.mvc.method.RequestMappingInfoHandlerMapping\norg.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter\n\n\nspringmvc.xml 中的约束配置，参考文档进行配置：\n![](http://7xr1vo.com1.z0.glb.clouddn.com/5665FF5D-517B-45F0-819D-3707A9534C8B.png)\n\n``` xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n    xmlns:mvc=\"http://www.springframework.org/schema/mvc\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://www.springframework.org/schema/beans         \n        http://www.springframework.org/schema/beans/spring-beans.xsd         \n        http://www.springframework.org/schema/mvc         \n        http://www.springframework.org/schema/mvc/spring-mvc.xsd\">\n</beans>\n```\n基本配置：\nweb.xml：\n\n``` xml\n<!DOCTYPE web-app PUBLIC\n        \"-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN\"\n        \"http://java.sun.com/dtd/web-app_2_3.dtd\" >\n\n<web-app>\n    <display-name>springmvcdemo1</display-name>\n\n    <servlet>\n        <servlet-name>springmvc</servlet-name>\n        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>\n\n        <!-- 设置 springmvc 的配置文件 -->\n        <init-param>\n            <param-name>contextConfigLocation</param-name>\n            <param-value>classpath:springmvcConfig.xml</param-value>\n        </init-param>\n    </servlet>\n\n    <servlet-mapping>\n        <servlet-name>springmvc</servlet-name>\n        <!-- 访问 action 结尾的，由 DispatcherServlet 来解析-->\n\n        <!--http://localhost:8080/springmvcdemo1/queryItems.action-->\n        <!--<url-pattern>*.action</url-pattern>-->\n\n        <!--http://localhost:8080/springmvcdemo1/queryItems-->\n        <url-pattern>/</url-pattern>\n\n    </servlet-mapping>\n\n</web-app>\n```\nspringmvc.xml 基本配置： \n\n``` xml\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xmlns:mvc=\"http://www.springframework.org/schema/mvc\"\n       xmlns:context=\"http://www.springframework.org/schema/context\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n      http://www.springframework.org/schema/beans/spring-beans-3.2.xsd\n      http://www.springframework.org/schema/context\n        http://www.springframework.org/schema/context/spring-context.xsd\n      http://www.springframework.org/schema/mvc\n      http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd\">\n\n    <!-- 注解的 映射器、适配器-->\n    <!--<bean class=\"org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping\"/>-->\n    <!--<bean class=\"org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter\"/>-->\n\n\n    <!-- 此配置默认 设置了 映射器、适配器，而且加载了许多的参数绑定，如json的自动转换\n        开发时候使用它 ：   -->\n    <mvc:annotation-driven />\n\n    <!-- 视图解析器-->\n    <bean class=\"org.springframework.web.servlet.view.InternalResourceViewResolver\">\n        <property name=\"prefix\" value=\"/WEB-INF/jsp/\"/>\n        <property name=\"suffix\" value=\".jsp\"/>\n    </bean>\n\n    <!-- 使用扫描controller,service等等 -->\n    <context:component-scan base-package=\"com.gjr.controller\"/>\n</beans>\n```\n\n## 参数绑定\n此处举例，具体看项目\n@RequestMap中的简单类型，直接安装相关参数进行设置即可\n对于包装类型 pojo, 客户端请求时候，相关的参数必须要和Pojo的属性名称一致\n\n如：\n\n``` java\npublic class ItemsQueryVo {\n\n    // 商品信息\n    private Items items;\n\n    // 为了扩展性，对生成的 po 进行扩展\n    private ItemsCustom itemsCustom;\n}\n```\n\n``` java\n@RequestMapping(value = \"/editItemsSubmit\")\npublic ModelAndView editItemsSubmit(Integer id, ItemsQueryVo itemsQueryVo) throws Exception {\n\n    return modelAndView;\n}\n```\n前端页面请求时候，表单信息中：\n\n``` xml\n<input name=“itemsCustom.name” …/>\n```\n\n## Spring 校验相关\n\n使用的是 Hibernate 的校验框架：\n\n``` xml\n<dependency>\n    <groupId>org.hibernate</groupId>\n    <artifactId>hibernate-validator</artifactId>\n    <version>5.3.4.Final</version>\n</dependency>\n```\n\n![](http://7xr1vo.com1.z0.glb.clouddn.com/BD15A0C3-C8A8-4C0E-84AB-656C19A1C1B0.png)\n\n具体看项目。。。\n\n<br>\n\n附录\ndemo 地址：\nhttps://github.com/fenglincanyi/ssmdemo","source":"_posts/Springmvc 相关.md","raw":"---\ntitle: Springmvc 相关\ndate: 2017-01-21 14:55\ncategories: Java后台\ntags: Springmvc\n---\n## springmvc 框架原理\n![](http://7xr1vo.com1.z0.glb.clouddn.com/mvc.png)\n\nspringmvc执行流程：\n1. 前端控制器（DispatcherServlet）, 接受请求，然后请求 处理器映射器（HanderMapping）\n2. HanderMapping 根据 xml / 注解 进行查找相关的 handler，并返回给 前端控制器\n3. 前端控制器 调用 处理器适配器（HanderAdapter）按照一定规则去执行 handler\n4. handler执行完毕后，返回给 HanderAdapter ModelAndView，HandlerAdapter 再返回给 前端控制器\n5. 前端控制器 将 ModelAndView 发送给 视图解析器（ViewResolver），试图解析器根据试图名解析为真正的视图\n6. 视图解析器解析后，将view 返回给 前端控制器，前端控制器 进行视图渲染，视图渲染将模型数据(在ModelAndView对象中)填充到request域\n7. 前端控制器 向用户相应结果\n\n重要的组件：\n* 前端控制器 DispatherServlet：接受请求，相应结果，转发器的作用\n* 处理器映射器 HandlerMapping: 根据配置查找 handler\n* 处理器适配器 HandlerAdapter: 按照规则去执行 handler\n* 处理器 Handler: 业务处理\n* 视图解析器 ViewResolver: 进行视图解析，将ModelAndView解析为真正的view\n\n\n## springmvc 基本配置\n如果不在 springmvc.xml 配置相关的映射器、适配器，spring会使用默认的，默认的配置 在 DispatcherServlet.properties 中：\n这些默认的都不建议使用了。\n![](http://7xr1vo.com1.z0.glb.clouddn.com/B77F53FF-BBEF-40EC-BD0A-E176EB7AD8DA.png)\n\n\n``` java\n# Default implementation classes for DispatcherServlet's strategy interfaces.\n# Used as fallback when no matching beans are found in the DispatcherServlet context.\n# Not meant to be customized by application developers.\n\norg.springframework.web.servlet.LocaleResolver=org.springframework.web.servlet.i18n.AcceptHeaderLocaleResolver\n\norg.springframework.web.servlet.ThemeResolver=org.springframework.web.servlet.theme.FixedThemeResolver\n\norg.springframework.web.servlet.HandlerMapping=org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping,\\\n   org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping\n\norg.springframework.web.servlet.HandlerAdapter=org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter,\\\n   org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter,\\\n   org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter\n\norg.springframework.web.servlet.HandlerExceptionResolver=org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerExceptionResolver,\\\n   org.springframework.web.servlet.mvc.annotation.ResponseStatusExceptionResolver,\\\n   org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver\n\norg.springframework.web.servlet.RequestToViewNameTranslator=org.springframework.web.servlet.view.DefaultRequestToViewNameTranslator\n\norg.springframework.web.servlet.ViewResolver=org.springframework.web.servlet.view.InternalResourceViewResolver\n\norg.springframework.web.servlet.FlashMapManager=org.springframework.web.servlet.support.SessionFlashMapManager\n```\n\nSpring 3.1之后 使用的 映射器 和 适配器：\n\norg.springframework.web.servlet.mvc.method.RequestMappingInfoHandlerMapping\norg.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter\n\n\nspringmvc.xml 中的约束配置，参考文档进行配置：\n![](http://7xr1vo.com1.z0.glb.clouddn.com/5665FF5D-517B-45F0-819D-3707A9534C8B.png)\n\n``` xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n    xmlns:mvc=\"http://www.springframework.org/schema/mvc\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://www.springframework.org/schema/beans         \n        http://www.springframework.org/schema/beans/spring-beans.xsd         \n        http://www.springframework.org/schema/mvc         \n        http://www.springframework.org/schema/mvc/spring-mvc.xsd\">\n</beans>\n```\n基本配置：\nweb.xml：\n\n``` xml\n<!DOCTYPE web-app PUBLIC\n        \"-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN\"\n        \"http://java.sun.com/dtd/web-app_2_3.dtd\" >\n\n<web-app>\n    <display-name>springmvcdemo1</display-name>\n\n    <servlet>\n        <servlet-name>springmvc</servlet-name>\n        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>\n\n        <!-- 设置 springmvc 的配置文件 -->\n        <init-param>\n            <param-name>contextConfigLocation</param-name>\n            <param-value>classpath:springmvcConfig.xml</param-value>\n        </init-param>\n    </servlet>\n\n    <servlet-mapping>\n        <servlet-name>springmvc</servlet-name>\n        <!-- 访问 action 结尾的，由 DispatcherServlet 来解析-->\n\n        <!--http://localhost:8080/springmvcdemo1/queryItems.action-->\n        <!--<url-pattern>*.action</url-pattern>-->\n\n        <!--http://localhost:8080/springmvcdemo1/queryItems-->\n        <url-pattern>/</url-pattern>\n\n    </servlet-mapping>\n\n</web-app>\n```\nspringmvc.xml 基本配置： \n\n``` xml\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xmlns:mvc=\"http://www.springframework.org/schema/mvc\"\n       xmlns:context=\"http://www.springframework.org/schema/context\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n      http://www.springframework.org/schema/beans/spring-beans-3.2.xsd\n      http://www.springframework.org/schema/context\n        http://www.springframework.org/schema/context/spring-context.xsd\n      http://www.springframework.org/schema/mvc\n      http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd\">\n\n    <!-- 注解的 映射器、适配器-->\n    <!--<bean class=\"org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping\"/>-->\n    <!--<bean class=\"org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter\"/>-->\n\n\n    <!-- 此配置默认 设置了 映射器、适配器，而且加载了许多的参数绑定，如json的自动转换\n        开发时候使用它 ：   -->\n    <mvc:annotation-driven />\n\n    <!-- 视图解析器-->\n    <bean class=\"org.springframework.web.servlet.view.InternalResourceViewResolver\">\n        <property name=\"prefix\" value=\"/WEB-INF/jsp/\"/>\n        <property name=\"suffix\" value=\".jsp\"/>\n    </bean>\n\n    <!-- 使用扫描controller,service等等 -->\n    <context:component-scan base-package=\"com.gjr.controller\"/>\n</beans>\n```\n\n## 参数绑定\n此处举例，具体看项目\n@RequestMap中的简单类型，直接安装相关参数进行设置即可\n对于包装类型 pojo, 客户端请求时候，相关的参数必须要和Pojo的属性名称一致\n\n如：\n\n``` java\npublic class ItemsQueryVo {\n\n    // 商品信息\n    private Items items;\n\n    // 为了扩展性，对生成的 po 进行扩展\n    private ItemsCustom itemsCustom;\n}\n```\n\n``` java\n@RequestMapping(value = \"/editItemsSubmit\")\npublic ModelAndView editItemsSubmit(Integer id, ItemsQueryVo itemsQueryVo) throws Exception {\n\n    return modelAndView;\n}\n```\n前端页面请求时候，表单信息中：\n\n``` xml\n<input name=“itemsCustom.name” …/>\n```\n\n## Spring 校验相关\n\n使用的是 Hibernate 的校验框架：\n\n``` xml\n<dependency>\n    <groupId>org.hibernate</groupId>\n    <artifactId>hibernate-validator</artifactId>\n    <version>5.3.4.Final</version>\n</dependency>\n```\n\n![](http://7xr1vo.com1.z0.glb.clouddn.com/BD15A0C3-C8A8-4C0E-84AB-656C19A1C1B0.png)\n\n具体看项目。。。\n\n<br>\n\n附录\ndemo 地址：\nhttps://github.com/fenglincanyi/ssmdemo","slug":"Springmvc 相关","published":1,"updated":"2017-03-05T10:49:24.000Z","_id":"cizwjz0ba0003uzqwdnwqfv1i","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"springmvc-框架原理\"><a href=\"#springmvc-框架原理\" class=\"headerlink\" title=\"springmvc 框架原理\"></a>springmvc 框架原理</h2><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/mvc.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>springmvc执行流程：</p>\n<ol>\n<li>前端控制器（DispatcherServlet）, 接受请求，然后请求 处理器映射器（HanderMapping）</li>\n<li>HanderMapping 根据 xml / 注解 进行查找相关的 handler，并返回给 前端控制器</li>\n<li>前端控制器 调用 处理器适配器（HanderAdapter）按照一定规则去执行 handler</li>\n<li>handler执行完毕后，返回给 HanderAdapter ModelAndView，HandlerAdapter 再返回给 前端控制器</li>\n<li>前端控制器 将 ModelAndView 发送给 视图解析器（ViewResolver），试图解析器根据试图名解析为真正的视图</li>\n<li>视图解析器解析后，将view 返回给 前端控制器，前端控制器 进行视图渲染，视图渲染将模型数据(在ModelAndView对象中)填充到request域</li>\n<li>前端控制器 向用户相应结果</li>\n</ol>\n<p>重要的组件：</p>\n<ul>\n<li>前端控制器 DispatherServlet：接受请求，相应结果，转发器的作用</li>\n<li>处理器映射器 HandlerMapping: 根据配置查找 handler</li>\n<li>处理器适配器 HandlerAdapter: 按照规则去执行 handler</li>\n<li>处理器 Handler: 业务处理</li>\n<li>视图解析器 ViewResolver: 进行视图解析，将ModelAndView解析为真正的view</li>\n</ul>\n<h2 id=\"springmvc-基本配置\"><a href=\"#springmvc-基本配置\" class=\"headerlink\" title=\"springmvc 基本配置\"></a>springmvc 基本配置</h2><p>如果不在 springmvc.xml 配置相关的映射器、适配器，spring会使用默认的，默认的配置 在 DispatcherServlet.properties 中：<br>这些默认的都不建议使用了。<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/B77F53FF-BBEF-40EC-BD0A-E176EB7AD8DA.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"># Default implementation classes for DispatcherServlet's strategy interfaces.</div><div class=\"line\"># Used as fallback when no matching beans are found in the DispatcherServlet context.</div><div class=\"line\"># Not meant to be customized by application developers.</div><div class=\"line\"></div><div class=\"line\">org.springframework.web.servlet.LocaleResolver=org.springframework.web.servlet.i18n.AcceptHeaderLocaleResolver</div><div class=\"line\"></div><div class=\"line\">org.springframework.web.servlet.ThemeResolver=org.springframework.web.servlet.theme.FixedThemeResolver</div><div class=\"line\"></div><div class=\"line\">org.springframework.web.servlet.HandlerMapping=org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping,\\</div><div class=\"line\">   org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping</div><div class=\"line\"></div><div class=\"line\">org.springframework.web.servlet.HandlerAdapter=org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter,\\</div><div class=\"line\">   org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter,\\</div><div class=\"line\">   org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter</div><div class=\"line\"></div><div class=\"line\">org.springframework.web.servlet.HandlerExceptionResolver=org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerExceptionResolver,\\</div><div class=\"line\">   org.springframework.web.servlet.mvc.annotation.ResponseStatusExceptionResolver,\\</div><div class=\"line\">   org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver</div><div class=\"line\"></div><div class=\"line\">org.springframework.web.servlet.RequestToViewNameTranslator=org.springframework.web.servlet.view.DefaultRequestToViewNameTranslator</div><div class=\"line\"></div><div class=\"line\">org.springframework.web.servlet.ViewResolver=org.springframework.web.servlet.view.InternalResourceViewResolver</div><div class=\"line\"></div><div class=\"line\">org.springframework.web.servlet.FlashMapManager=org.springframework.web.servlet.support.SessionFlashMapManager</div></pre></td></tr></table></figure>\n<p>Spring 3.1之后 使用的 映射器 和 适配器：</p>\n<p>org.springframework.web.servlet.mvc.method.RequestMappingInfoHandlerMapping<br>org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter</p>\n<p>springmvc.xml 中的约束配置，参考文档进行配置：<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/5665FF5D-517B-45F0-819D-3707A9534C8B.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans\"</span></span></div><div class=\"line\">    <span class=\"attr\">xmlns:mvc</span>=<span class=\"string\">\"http://www.springframework.org/schema/mvc\"</span></div><div class=\"line\">    <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></div><div class=\"line\">    <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans         </span></div><div class=\"line\">        http://www.springframework.org/schema/beans/spring-beans.xsd         </div><div class=\"line\">        http://www.springframework.org/schema/mvc         </div><div class=\"line\">        http://www.springframework.org/schema/mvc/spring-mvc.xsd\"&gt;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>基本配置：<br>web.xml：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE web-app PUBLIC</span></div><div class=\"line\">        \"-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN\"</div><div class=\"line\">        \"http://java.sun.com/dtd/web-app_2_3.dtd\" &gt;</div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">web-app</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">display-name</span>&gt;</span>springmvcdemo1<span class=\"tag\">&lt;/<span class=\"name\">display-name</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">servlet</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>springmvc<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class=\"tag\">&lt;/<span class=\"name\">servlet-class</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">&lt;!-- 设置 springmvc 的配置文件 --&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">init-param</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">param-name</span>&gt;</span>contextConfigLocation<span class=\"tag\">&lt;/<span class=\"name\">param-name</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">param-value</span>&gt;</span>classpath:springmvcConfig.xml<span class=\"tag\">&lt;/<span class=\"name\">param-value</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">init-param</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">servlet</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">servlet-mapping</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>springmvc<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span></div><div class=\"line\">        <span class=\"comment\">&lt;!-- 访问 action 结尾的，由 DispatcherServlet 来解析--&gt;</span></div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">&lt;!--http://localhost:8080/springmvcdemo1/queryItems.action--&gt;</span></div><div class=\"line\">        <span class=\"comment\">&lt;!--&lt;url-pattern&gt;*.action&lt;/url-pattern&gt;--&gt;</span></div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">&lt;!--http://localhost:8080/springmvcdemo1/queryItems--&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>/<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">servlet-mapping</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">web-app</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>springmvc.xml 基本配置： </p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans\"</span></span></div><div class=\"line\">       <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></div><div class=\"line\">       <span class=\"attr\">xmlns:mvc</span>=<span class=\"string\">\"http://www.springframework.org/schema/mvc\"</span></div><div class=\"line\">       <span class=\"attr\">xmlns:context</span>=<span class=\"string\">\"http://www.springframework.org/schema/context\"</span></div><div class=\"line\">       <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans</span></div><div class=\"line\">      http://www.springframework.org/schema/beans/spring-beans-3.2.xsd</div><div class=\"line\">      http://www.springframework.org/schema/context</div><div class=\"line\">        http://www.springframework.org/schema/context/spring-context.xsd</div><div class=\"line\">      http://www.springframework.org/schema/mvc</div><div class=\"line\">      http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd\"&gt;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">&lt;!-- 注解的 映射器、适配器--&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!--&lt;bean class=\"org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping\"/&gt;--&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!--&lt;bean class=\"org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter\"/&gt;--&gt;</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">&lt;!-- 此配置默认 设置了 映射器、适配器，而且加载了许多的参数绑定，如json的自动转换</span></div><div class=\"line\">        开发时候使用它 ：   --&gt;</div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">mvc:annotation-driven</span> /&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">&lt;!-- 视图解析器--&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.springframework.web.servlet.view.InternalResourceViewResolver\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"prefix\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"/WEB-INF/jsp/\"</span>/&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"suffix\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\".jsp\"</span>/&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">&lt;!-- 使用扫描controller,service等等 --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">context:component-scan</span> <span class=\"attr\">base-package</span>=<span class=\"string\">\"com.gjr.controller\"</span>/&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></div></pre></td></tr></table></figure>\n<h2 id=\"参数绑定\"><a href=\"#参数绑定\" class=\"headerlink\" title=\"参数绑定\"></a>参数绑定</h2><p>此处举例，具体看项目<br>@RequestMap中的简单类型，直接安装相关参数进行设置即可<br>对于包装类型 pojo, 客户端请求时候，相关的参数必须要和Pojo的属性名称一致</p>\n<p>如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ItemsQueryVo</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 商品信息</span></div><div class=\"line\">    <span class=\"keyword\">private</span> Items items;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 为了扩展性，对生成的 po 进行扩展</span></div><div class=\"line\">    <span class=\"keyword\">private</span> ItemsCustom itemsCustom;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@RequestMapping</span>(value = <span class=\"string\">\"/editItemsSubmit\"</span>)</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ModelAndView <span class=\"title\">editItemsSubmit</span><span class=\"params\">(Integer id, ItemsQueryVo itemsQueryVo)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> modelAndView;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>前端页面请求时候，表单信息中：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">name</span>=<span class=\"string\">“itemsCustom.name”</span> …/&gt;</span></div></pre></td></tr></table></figure>\n<h2 id=\"Spring-校验相关\"><a href=\"#Spring-校验相关\" class=\"headerlink\" title=\"Spring 校验相关\"></a>Spring 校验相关</h2><p>使用的是 Hibernate 的校验框架：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.hibernate<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>hibernate-validator<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>5.3.4.Final<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/BD15A0C3-C8A8-4C0E-84AB-656C19A1C1B0.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>具体看项目。。。</p>\n<p><br></p>\n<p>附录<br>demo 地址：<br><a href=\"https://github.com/fenglincanyi/ssmdemo\" target=\"_blank\" rel=\"external\">https://github.com/fenglincanyi/ssmdemo</a></p>\n","excerpt":"","more":"<h2 id=\"springmvc-框架原理\"><a href=\"#springmvc-框架原理\" class=\"headerlink\" title=\"springmvc 框架原理\"></a>springmvc 框架原理</h2><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/mvc.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>springmvc执行流程：</p>\n<ol>\n<li>前端控制器（DispatcherServlet）, 接受请求，然后请求 处理器映射器（HanderMapping）</li>\n<li>HanderMapping 根据 xml / 注解 进行查找相关的 handler，并返回给 前端控制器</li>\n<li>前端控制器 调用 处理器适配器（HanderAdapter）按照一定规则去执行 handler</li>\n<li>handler执行完毕后，返回给 HanderAdapter ModelAndView，HandlerAdapter 再返回给 前端控制器</li>\n<li>前端控制器 将 ModelAndView 发送给 视图解析器（ViewResolver），试图解析器根据试图名解析为真正的视图</li>\n<li>视图解析器解析后，将view 返回给 前端控制器，前端控制器 进行视图渲染，视图渲染将模型数据(在ModelAndView对象中)填充到request域</li>\n<li>前端控制器 向用户相应结果</li>\n</ol>\n<p>重要的组件：</p>\n<ul>\n<li>前端控制器 DispatherServlet：接受请求，相应结果，转发器的作用</li>\n<li>处理器映射器 HandlerMapping: 根据配置查找 handler</li>\n<li>处理器适配器 HandlerAdapter: 按照规则去执行 handler</li>\n<li>处理器 Handler: 业务处理</li>\n<li>视图解析器 ViewResolver: 进行视图解析，将ModelAndView解析为真正的view</li>\n</ul>\n<h2 id=\"springmvc-基本配置\"><a href=\"#springmvc-基本配置\" class=\"headerlink\" title=\"springmvc 基本配置\"></a>springmvc 基本配置</h2><p>如果不在 springmvc.xml 配置相关的映射器、适配器，spring会使用默认的，默认的配置 在 DispatcherServlet.properties 中：<br>这些默认的都不建议使用了。<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/B77F53FF-BBEF-40EC-BD0A-E176EB7AD8DA.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"># Default implementation classes for DispatcherServlet's strategy interfaces.</div><div class=\"line\"># Used as fallback when no matching beans are found in the DispatcherServlet context.</div><div class=\"line\"># Not meant to be customized by application developers.</div><div class=\"line\"></div><div class=\"line\">org.springframework.web.servlet.LocaleResolver=org.springframework.web.servlet.i18n.AcceptHeaderLocaleResolver</div><div class=\"line\"></div><div class=\"line\">org.springframework.web.servlet.ThemeResolver=org.springframework.web.servlet.theme.FixedThemeResolver</div><div class=\"line\"></div><div class=\"line\">org.springframework.web.servlet.HandlerMapping=org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping,\\</div><div class=\"line\">   org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping</div><div class=\"line\"></div><div class=\"line\">org.springframework.web.servlet.HandlerAdapter=org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter,\\</div><div class=\"line\">   org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter,\\</div><div class=\"line\">   org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter</div><div class=\"line\"></div><div class=\"line\">org.springframework.web.servlet.HandlerExceptionResolver=org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerExceptionResolver,\\</div><div class=\"line\">   org.springframework.web.servlet.mvc.annotation.ResponseStatusExceptionResolver,\\</div><div class=\"line\">   org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver</div><div class=\"line\"></div><div class=\"line\">org.springframework.web.servlet.RequestToViewNameTranslator=org.springframework.web.servlet.view.DefaultRequestToViewNameTranslator</div><div class=\"line\"></div><div class=\"line\">org.springframework.web.servlet.ViewResolver=org.springframework.web.servlet.view.InternalResourceViewResolver</div><div class=\"line\"></div><div class=\"line\">org.springframework.web.servlet.FlashMapManager=org.springframework.web.servlet.support.SessionFlashMapManager</div></pre></td></tr></table></figure>\n<p>Spring 3.1之后 使用的 映射器 和 适配器：</p>\n<p>org.springframework.web.servlet.mvc.method.RequestMappingInfoHandlerMapping<br>org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter</p>\n<p>springmvc.xml 中的约束配置，参考文档进行配置：<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/5665FF5D-517B-45F0-819D-3707A9534C8B.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans\"</span></div><div class=\"line\">    <span class=\"attr\">xmlns:mvc</span>=<span class=\"string\">\"http://www.springframework.org/schema/mvc\"</span></div><div class=\"line\">    <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></div><div class=\"line\">    <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans         </div><div class=\"line\">        http://www.springframework.org/schema/beans/spring-beans.xsd         </div><div class=\"line\">        http://www.springframework.org/schema/mvc         </div><div class=\"line\">        http://www.springframework.org/schema/mvc/spring-mvc.xsd\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>基本配置：<br>web.xml：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE web-app PUBLIC</div><div class=\"line\">        \"-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN\"</div><div class=\"line\">        \"http://java.sun.com/dtd/web-app_2_3.dtd\" &gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">web-app</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">display-name</span>&gt;</span>springmvcdemo1<span class=\"tag\">&lt;/<span class=\"name\">display-name</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">servlet</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>springmvc<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class=\"tag\">&lt;/<span class=\"name\">servlet-class</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">&lt;!-- 设置 springmvc 的配置文件 --&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">init-param</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">param-name</span>&gt;</span>contextConfigLocation<span class=\"tag\">&lt;/<span class=\"name\">param-name</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">param-value</span>&gt;</span>classpath:springmvcConfig.xml<span class=\"tag\">&lt;/<span class=\"name\">param-value</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">init-param</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">servlet</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">servlet-mapping</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>springmvc<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span></div><div class=\"line\">        <span class=\"comment\">&lt;!-- 访问 action 结尾的，由 DispatcherServlet 来解析--&gt;</span></div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">&lt;!--http://localhost:8080/springmvcdemo1/queryItems.action--&gt;</span></div><div class=\"line\">        <span class=\"comment\">&lt;!--&lt;url-pattern&gt;*.action&lt;/url-pattern&gt;--&gt;</span></div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">&lt;!--http://localhost:8080/springmvcdemo1/queryItems--&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>/<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">servlet-mapping</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">web-app</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>springmvc.xml 基本配置： </p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans\"</span></div><div class=\"line\">       <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></div><div class=\"line\">       <span class=\"attr\">xmlns:mvc</span>=<span class=\"string\">\"http://www.springframework.org/schema/mvc\"</span></div><div class=\"line\">       <span class=\"attr\">xmlns:context</span>=<span class=\"string\">\"http://www.springframework.org/schema/context\"</span></div><div class=\"line\">       <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans</div><div class=\"line\">      http://www.springframework.org/schema/beans/spring-beans-3.2.xsd</div><div class=\"line\">      http://www.springframework.org/schema/context</div><div class=\"line\">        http://www.springframework.org/schema/context/spring-context.xsd</div><div class=\"line\">      http://www.springframework.org/schema/mvc</div><div class=\"line\">      http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd\"</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">&lt;!-- 注解的 映射器、适配器--&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!--&lt;bean class=\"org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping\"/&gt;--&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!--&lt;bean class=\"org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter\"/&gt;--&gt;</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">&lt;!-- 此配置默认 设置了 映射器、适配器，而且加载了许多的参数绑定，如json的自动转换</div><div class=\"line\">        开发时候使用它 ：   --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">mvc:annotation-driven</span> /&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">&lt;!-- 视图解析器--&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.springframework.web.servlet.view.InternalResourceViewResolver\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"prefix\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"/WEB-INF/jsp/\"</span>/&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"suffix\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\".jsp\"</span>/&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">&lt;!-- 使用扫描controller,service等等 --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">context:component-scan</span> <span class=\"attr\">base-package</span>=<span class=\"string\">\"com.gjr.controller\"</span>/&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></div></pre></td></tr></table></figure>\n<h2 id=\"参数绑定\"><a href=\"#参数绑定\" class=\"headerlink\" title=\"参数绑定\"></a>参数绑定</h2><p>此处举例，具体看项目<br>@RequestMap中的简单类型，直接安装相关参数进行设置即可<br>对于包装类型 pojo, 客户端请求时候，相关的参数必须要和Pojo的属性名称一致</p>\n<p>如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ItemsQueryVo</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 商品信息</span></div><div class=\"line\">    <span class=\"keyword\">private</span> Items items;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 为了扩展性，对生成的 po 进行扩展</span></div><div class=\"line\">    <span class=\"keyword\">private</span> ItemsCustom itemsCustom;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@RequestMapping</span>(value = <span class=\"string\">\"/editItemsSubmit\"</span>)</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ModelAndView <span class=\"title\">editItemsSubmit</span><span class=\"params\">(Integer id, ItemsQueryVo itemsQueryVo)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> modelAndView;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>前端页面请求时候，表单信息中：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">name</span>=<span class=\"string\">“itemsCustom.name”</span> …/&gt;</span></div></pre></td></tr></table></figure>\n<h2 id=\"Spring-校验相关\"><a href=\"#Spring-校验相关\" class=\"headerlink\" title=\"Spring 校验相关\"></a>Spring 校验相关</h2><p>使用的是 Hibernate 的校验框架：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.hibernate<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>hibernate-validator<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>5.3.4.Final<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/BD15A0C3-C8A8-4C0E-84AB-656C19A1C1B0.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>具体看项目。。。</p>\n<p><br></p>\n<p>附录<br>demo 地址：<br><a href=\"https://github.com/fenglincanyi/ssmdemo\">https://github.com/fenglincanyi/ssmdemo</a></p>\n"},{"title":"常见排序算法（C++实现）","date":"2016-05-24T05:55:00.000Z","_content":"\n## 一、直接插入排序\n\n``` cpp\n#include<iostream>\nusing namespace std;\n\n/*\n直接插入排序\n稳定的排序算法，时间复杂度：O(n^2)\n*/\nvoid insertSort(int a[], int n){\n    int temp;//存储要插入的数\n    int i, j;//j:实际上用来记录位置\n\n/*只需要对后面n-1个数排序*/\n    for (i = 1; i < n; i++){\n        temp = a[i];// 暂时存储要插入的数\n        if (a[i] < a[i - 1]){\n            for (j = i - 1; j>=0 && temp < a[j]; j--){//遍历前面的数，进行比较，寻找插入的位置\n                a[j + 1] = a[j];//前面大的数后移\n            }\n            a[j + 1] = temp;// j是刚好不满足情况的位置，则 j+1 满足该位置\n        }\n    }\n}\n\n/*打印数组*/\nvoid print(int a[], int n){\n    for (int i = 0; i < n; i++){\n        cout << a[i]<<\" \";\n    }\n    cout << endl;\n}\n\nvoid main(){\n    int a[] = { 3, 2, 43, 12, 90, 23 };\n    int n = sizeof(a) / sizeof(a[0]);\n    //cout << n << endl;\n    cout << \"排序前：\" << endl;\n    print(a, n);\n\n    insertSort(a, n);\n\n    cout << \"排序后：\" << endl;\n    print(a, n);\n    system(\"pause\");\n}\n```\n\n## 二、折半插入排序 \n \n\n``` cpp\n#include<iostream>\nusing namespace std;\n\n/*\n折半插入排序：时间复杂度：O(n^2)，稳定\n对直接插入排序 “初步优化”，寻找插入位置更快\n*/\nvoid binaryInsertSort(int a[], int n) {\n    int temp;\n    int i, j;\n    for (i = 1; i < n; i++) {\n        if (a[i] < a[i - 1]) {\n            temp = a[i];\n\n            // “二分法”，寻找插入位置，存储到low\n            int low = 0, high = i - 1, mid;\n            while (low <= high) {\n                mid = (low + high) / 2;\n                if (temp < a[mid]) {\n                    high = mid - 1;\n                }\n                else {\n                    low = mid + 1;\n                }\n            }\n\n            // 对要插入数之前小的数，整体后移\n            for (j = i - 1; j >= low; j--) {\n                a[j + 1] = a[j];\n            }\n\n            // 最后将刚要插入的数放到找到的位置上\n            a[low] = temp;\n        }\n    }\n}\n\n/*打印数组*/\nvoid print(int a[], int n) {\n    for (int i = 0; i < n; i++) {\n        cout << a[i] << \" \";\n    }\n    cout << endl;\n}\n\nvoid main() {\n    int a[] = {3, 2, 488, 12, 90, 23};\n    int n = sizeof(a) / sizeof(a[0]);\n    cout << \"排序前：\" << endl;\n    print(a, n);\n\n    binaryInsertSort(a, n);\n\n    cout << \"排序后：\" << endl;\n    print(a, n);\n    system(\"pause\");\n}\n```\n\n## 三、希尔排序\n\n``` cpp\n#include<iostream>\nusing namespace std;\n\n/*\n希尔排序：不稳定的排序\n对直接插入排序的 “终极优化”，分组进行直接插入排序\n时间复杂度： O(n^1.3),范围： [O(n^2), O(nlog2(n))]\n*/\nvoid shellSort(int a[],int n){\n    int d;// 数之间的间隔\n    int temp;// 存储要插入的数\n    int i, j;\n    // 先对要排序的数，进行分组,间隔直到1\n    for (d = n / 2; d >= 1; d /= 2){\n        // i++,对每个分组交替执行排序，并不是一整个组排完\n        for (i = d; i < n; i++){// 也是从该组的第二个数开始，和后面的数比较\n            temp = a[i];\n\n            for (j = i - d; j >= 0 && temp < a[j]; j -= d){\n                a[j + d] = a[j];\n            }\n            a[j + d] = temp;\n        }\n    }\n}\n\n/*打印数组*/\nvoid print(int a[], int n){\n    for (int i = 0; i < n; i++){\n        cout << a[i]<<\" \";\n    }\n    cout << endl;\n}\n\nvoid main(){\n    int a[] = { 13, 0, 43, 12, 1, 23 };\n    int n = sizeof(a) / sizeof(a[0]);\n    //cout << n << endl;\n    cout << \"排序前：\" << endl;\n    print(a, n);\n\n    shellSort(a, n);\n\n    cout << \"排序后：\" << endl;\n    print(a, n);\n    system(\"pause\");\n}\n```\n\n## 四、冒泡排序\n\n``` cpp\n#include<iostream>\nusing namespace std;\n// 提前声明\nvoid Swap(int &a, int &b);\n\n/*\n冒泡排序O(n^2)\n稳定的排序\n*/\nvoid bubbleSort(int a[], int n){\n    // n-1趟\n    for (int i = 0; i < n - 1; i++){\n        for (int j = i; j < n - 1 - i; j++){// 注意最后两个数\n            if (a[j]>a[j + 1]){\n                Swap(a[j], a[j + 1]);\n            }\n        }\n    }\n}\n\n/*交换两个数*/\nvoid Swap(int &a, int &b){\n    a = a^b;\n    b = a^b;\n    a = a^b;\n}\n\n/*打印数组*/\nvoid print(int a[], int n){\n    for (int i = 0; i < n; i++){\n        cout << a[i] << \" \";\n    }\n    cout << endl;\n}\n\nvoid main(){\n    int a[] = { 3, 2, 28, 12, 90, 23 };\n    int n = sizeof(a) / sizeof(a[0]);\n    cout << \"排序前：\" << endl;\n    print(a, n);\n\n    bubbleSort(a, n);\n\n    cout << \"排序后：\" << endl;\n    print(a, n);\n    system(\"pause\");\n}\n```\n\n## 五、快速排序\n\n``` cpp\n#include<iostream>\nusing namespace std;\nint partition(int a[], int p, int r);\n\n/*\n快速排序,对冒泡排序的改进,不稳定\nO(nlog2n),最差情况下：退化为冒泡排序O(n^2)\n*/\nvoid quickSort(int a[], int left,int right){\n    if (left < right){\n        // 递归进行排序\n        int q = partition(a, left, right);\n        quickSort(a, left, q - 1);//左半边\n        quickSort(a, q + 1, right);//右半边\n    }\n}\n\n/*选取基准元素key，进行划分*/\nint partition(int a[], int p, int r){\n    int i = p;\n    int j = r;\n    int key = a[i];\n\n    while (i<j) {\n        while (i < j && key < a[j]){//右侧扫描\n            j--;\n        }\n        a[i] = a[j];\n        while (i < j && a[i] < key){//左侧扫描\n            i++;\n        }\n        a[j] = a[i];\n    }\n    a[i] = key;//一轮循环完，找到key的位置\n    return i;\n}\n\n/*打印数组*/\nvoid print(int a[], int n){\n    for (int i = 0; i < n; i++){\n        cout << a[i] << \" \";\n    }\n    cout << endl;\n}\n\nvoid main(){\n    int a[] = { 3, 2, 28, 12, 90, 23 };\n    int n = sizeof(a) / sizeof(a[0]);\n    cout << \"排序前：\" << endl;\n    print(a, n);\n\n    quickSort(a, 0, n-1);\n\n    cout << \"排序后：\" << endl;\n    print(a, n);\n    system(\"pause\");\n}\n```\n\n## 六、选择排序\n\n``` cpp\nusing namespace std;\nvoid Swap(int &a,int &b);\n\n/*\n简单选择排序稳定\n时间复杂度：O(n^2)\n*/\nvoid selectionSort(int a[], int n){\n// n-1趟，每次选出一个最小的放入有序区\n    for (int i = 0; i < n - 1; i++){\n        for (int j = i+1; j < n; j++){\n            if (a[i]>a[j]){\n                Swap(a[i], a[j]);\n            }\n        }\n    }\n}\n\n/*交换两个数*/\nvoid Swap(int &a, int &b){\n    a = a^b;\n    b = a^b;\n    a = a^b;\n}\n\n/*打印数组*/\nvoid print(int a[], int n){\n    for (int i = 0; i < n; i++){\n        cout << a[i] << \" \";\n    }\n    cout << endl;\n}\n\nvoid main(){\n    int a[] = { 3, 2, 28, 12, 90, 23 };\n    int n = sizeof(a) / sizeof(a[0]);\n    cout << \"排序前：\" << endl;\n    print(a, n);\n\n    selectionSort(a, n);\n\n    cout << \"排序后：\" << endl;\n    print(a, n);\n    system(\"pause\");\n}\n```\n\n## 七、堆排序\n\n``` cpp\n#include<iostream>\nusing namespace std;\n\n/*\n    堆排序：        所有情况下：O(nlog2n)\n    不稳定，        对选择排序的一种改进\n    （下面采用大根堆方法）\n*/\n\n/*交换两个数*/\nvoid Swap(int &a, int &b){\n    a = a^b;\n    b = a^b;\n    a = a^b;\n}\n\n/*堆的筛选算法*/\nvoid sift(int a[], int start, int end){\n    int i = start;\n    for (int j = 2 * i + 1; j <= end; j = 2 * j + 1){// 重复操作至叶节点\n        if (j < end && a[j] < a[j + 1]){// 选出孩子节点最大的，后面来比较\n            j++;\n        }\n        if (a[i] >= a[j]){// 已经是堆了，不用调整\n            break;\n        }else{\n            Swap(a[i], a[j]);// 最大孩子上移至根节点\n            i = j;\n        }\n    }\n}\n\n/*堆排序*/\nvoid heapSort(int a[], int n){\n    for (int i = n / 2; i >= 0; i--){// 初始建堆，完全二叉树，只需从  n/2 中间节点处开始，向上\n        sift(a, i, n-1);\n    }\n    for (int i = n - 1; i > 0;i--){// 根节点和每次最后一个节点交换\n        Swap(a[0], a[i]);\n        sift(a, 0, i-1);\n    }\n}\n\n/*打印数组*/\nvoid print(int a[], int n){\n    for (int i = 0; i < n; i++){\n        cout << a[i] << \" \";\n    }\n    cout << endl;\n}\n\nvoid main(){\n    int a[] = { 3, 112, 28, 12, 90, 23 };\n    int n = sizeof(a) / sizeof(a[0]);\n    cout << \"排序前：\" << endl;\n    print(a, n);\n\n    heapSort(a, n);\n\n    cout << \"排序后：\" << endl;\n    print(a, n);\n    system(\"pause\");\n}\n```\n\n## 八、归并排序\n\n``` cpp\n#include<iostream>\nusing namespace std;\n\n/*\n归并排序任何情况下： O(nlog2n)空间复杂度O(n)\n稳定的排序算法（外排采用）\n*/\n\n/*一次归并算法*/\nvoid merge(int a[], int start, int mid, int end){\n    int i = start;\n    int j = mid + 1;\n    int k = 0;\n    int *temp = new int[end - start + 1];//临时存放排好序的数组\n\n    while (i <= mid && j <= end){\n        if (a[i] < a[j]){\n            temp[k++] = a[i++];\n        }\n        else{\n            temp[k++] = a[j++];\n        }\n    }\n\n    //处理其中一个没有取完的序列\n    if (i <= mid){\n        while (i <= mid){\n            temp[k++] = a[i++];\n        }\n    }\n    else{\n        while (j <= end){\n            temp[k++] = a[j++];\n        }\n    }\n\n    // 将临时数组有序数据赋值给原数组\n    for (i = start,k=0; i <= end; i++,k++){\n        a[i] = temp[k];\n    }\n\n    // 释放内存空间\n    delete []temp;//此处是数组，必须是[]\n}\n\n/*归并排序递归*/\nvoid mergeSort(int arr[], int low, int high)\n{\n    if (low<high)\n    {\n        int mid = (low + high) / 2;\n        mergeSort(arr, low, mid);\n        mergeSort(arr, mid + 1, high);\n        // 将最后两个有序的序列合并\n        merge(arr, low, mid, high);\n    }\n}\n\n/*打印数组*/\nvoid print(int a[], int n){\n    for (int i = 0; i < n; i++){\n        cout << a[i] << \" \";\n    }\n    cout << endl;\n}\n\nvoid main(){\n    int a[] = { 3, 112, 0, 12, 90, 23 };\n    int n = sizeof(a) / sizeof(a[0]);\n    cout << \"排序前：\" << endl;\n    print(a, n);\n\n    mergeSort(a, 0, n - 1);\n\n    cout << \"排序后：\" << endl;\n    print(a, n);\n    system(\"pause\");\n}\n```\n\n","source":"_posts/常见排序算法（C++实现）.md","raw":"---\ntitle: 常见排序算法（C++实现）\ndate: 2016-05-24 13:55\ncategories: 算法\ntags: 排序\n---\n\n## 一、直接插入排序\n\n``` cpp\n#include<iostream>\nusing namespace std;\n\n/*\n直接插入排序\n稳定的排序算法，时间复杂度：O(n^2)\n*/\nvoid insertSort(int a[], int n){\n    int temp;//存储要插入的数\n    int i, j;//j:实际上用来记录位置\n\n/*只需要对后面n-1个数排序*/\n    for (i = 1; i < n; i++){\n        temp = a[i];// 暂时存储要插入的数\n        if (a[i] < a[i - 1]){\n            for (j = i - 1; j>=0 && temp < a[j]; j--){//遍历前面的数，进行比较，寻找插入的位置\n                a[j + 1] = a[j];//前面大的数后移\n            }\n            a[j + 1] = temp;// j是刚好不满足情况的位置，则 j+1 满足该位置\n        }\n    }\n}\n\n/*打印数组*/\nvoid print(int a[], int n){\n    for (int i = 0; i < n; i++){\n        cout << a[i]<<\" \";\n    }\n    cout << endl;\n}\n\nvoid main(){\n    int a[] = { 3, 2, 43, 12, 90, 23 };\n    int n = sizeof(a) / sizeof(a[0]);\n    //cout << n << endl;\n    cout << \"排序前：\" << endl;\n    print(a, n);\n\n    insertSort(a, n);\n\n    cout << \"排序后：\" << endl;\n    print(a, n);\n    system(\"pause\");\n}\n```\n\n## 二、折半插入排序 \n \n\n``` cpp\n#include<iostream>\nusing namespace std;\n\n/*\n折半插入排序：时间复杂度：O(n^2)，稳定\n对直接插入排序 “初步优化”，寻找插入位置更快\n*/\nvoid binaryInsertSort(int a[], int n) {\n    int temp;\n    int i, j;\n    for (i = 1; i < n; i++) {\n        if (a[i] < a[i - 1]) {\n            temp = a[i];\n\n            // “二分法”，寻找插入位置，存储到low\n            int low = 0, high = i - 1, mid;\n            while (low <= high) {\n                mid = (low + high) / 2;\n                if (temp < a[mid]) {\n                    high = mid - 1;\n                }\n                else {\n                    low = mid + 1;\n                }\n            }\n\n            // 对要插入数之前小的数，整体后移\n            for (j = i - 1; j >= low; j--) {\n                a[j + 1] = a[j];\n            }\n\n            // 最后将刚要插入的数放到找到的位置上\n            a[low] = temp;\n        }\n    }\n}\n\n/*打印数组*/\nvoid print(int a[], int n) {\n    for (int i = 0; i < n; i++) {\n        cout << a[i] << \" \";\n    }\n    cout << endl;\n}\n\nvoid main() {\n    int a[] = {3, 2, 488, 12, 90, 23};\n    int n = sizeof(a) / sizeof(a[0]);\n    cout << \"排序前：\" << endl;\n    print(a, n);\n\n    binaryInsertSort(a, n);\n\n    cout << \"排序后：\" << endl;\n    print(a, n);\n    system(\"pause\");\n}\n```\n\n## 三、希尔排序\n\n``` cpp\n#include<iostream>\nusing namespace std;\n\n/*\n希尔排序：不稳定的排序\n对直接插入排序的 “终极优化”，分组进行直接插入排序\n时间复杂度： O(n^1.3),范围： [O(n^2), O(nlog2(n))]\n*/\nvoid shellSort(int a[],int n){\n    int d;// 数之间的间隔\n    int temp;// 存储要插入的数\n    int i, j;\n    // 先对要排序的数，进行分组,间隔直到1\n    for (d = n / 2; d >= 1; d /= 2){\n        // i++,对每个分组交替执行排序，并不是一整个组排完\n        for (i = d; i < n; i++){// 也是从该组的第二个数开始，和后面的数比较\n            temp = a[i];\n\n            for (j = i - d; j >= 0 && temp < a[j]; j -= d){\n                a[j + d] = a[j];\n            }\n            a[j + d] = temp;\n        }\n    }\n}\n\n/*打印数组*/\nvoid print(int a[], int n){\n    for (int i = 0; i < n; i++){\n        cout << a[i]<<\" \";\n    }\n    cout << endl;\n}\n\nvoid main(){\n    int a[] = { 13, 0, 43, 12, 1, 23 };\n    int n = sizeof(a) / sizeof(a[0]);\n    //cout << n << endl;\n    cout << \"排序前：\" << endl;\n    print(a, n);\n\n    shellSort(a, n);\n\n    cout << \"排序后：\" << endl;\n    print(a, n);\n    system(\"pause\");\n}\n```\n\n## 四、冒泡排序\n\n``` cpp\n#include<iostream>\nusing namespace std;\n// 提前声明\nvoid Swap(int &a, int &b);\n\n/*\n冒泡排序O(n^2)\n稳定的排序\n*/\nvoid bubbleSort(int a[], int n){\n    // n-1趟\n    for (int i = 0; i < n - 1; i++){\n        for (int j = i; j < n - 1 - i; j++){// 注意最后两个数\n            if (a[j]>a[j + 1]){\n                Swap(a[j], a[j + 1]);\n            }\n        }\n    }\n}\n\n/*交换两个数*/\nvoid Swap(int &a, int &b){\n    a = a^b;\n    b = a^b;\n    a = a^b;\n}\n\n/*打印数组*/\nvoid print(int a[], int n){\n    for (int i = 0; i < n; i++){\n        cout << a[i] << \" \";\n    }\n    cout << endl;\n}\n\nvoid main(){\n    int a[] = { 3, 2, 28, 12, 90, 23 };\n    int n = sizeof(a) / sizeof(a[0]);\n    cout << \"排序前：\" << endl;\n    print(a, n);\n\n    bubbleSort(a, n);\n\n    cout << \"排序后：\" << endl;\n    print(a, n);\n    system(\"pause\");\n}\n```\n\n## 五、快速排序\n\n``` cpp\n#include<iostream>\nusing namespace std;\nint partition(int a[], int p, int r);\n\n/*\n快速排序,对冒泡排序的改进,不稳定\nO(nlog2n),最差情况下：退化为冒泡排序O(n^2)\n*/\nvoid quickSort(int a[], int left,int right){\n    if (left < right){\n        // 递归进行排序\n        int q = partition(a, left, right);\n        quickSort(a, left, q - 1);//左半边\n        quickSort(a, q + 1, right);//右半边\n    }\n}\n\n/*选取基准元素key，进行划分*/\nint partition(int a[], int p, int r){\n    int i = p;\n    int j = r;\n    int key = a[i];\n\n    while (i<j) {\n        while (i < j && key < a[j]){//右侧扫描\n            j--;\n        }\n        a[i] = a[j];\n        while (i < j && a[i] < key){//左侧扫描\n            i++;\n        }\n        a[j] = a[i];\n    }\n    a[i] = key;//一轮循环完，找到key的位置\n    return i;\n}\n\n/*打印数组*/\nvoid print(int a[], int n){\n    for (int i = 0; i < n; i++){\n        cout << a[i] << \" \";\n    }\n    cout << endl;\n}\n\nvoid main(){\n    int a[] = { 3, 2, 28, 12, 90, 23 };\n    int n = sizeof(a) / sizeof(a[0]);\n    cout << \"排序前：\" << endl;\n    print(a, n);\n\n    quickSort(a, 0, n-1);\n\n    cout << \"排序后：\" << endl;\n    print(a, n);\n    system(\"pause\");\n}\n```\n\n## 六、选择排序\n\n``` cpp\nusing namespace std;\nvoid Swap(int &a,int &b);\n\n/*\n简单选择排序稳定\n时间复杂度：O(n^2)\n*/\nvoid selectionSort(int a[], int n){\n// n-1趟，每次选出一个最小的放入有序区\n    for (int i = 0; i < n - 1; i++){\n        for (int j = i+1; j < n; j++){\n            if (a[i]>a[j]){\n                Swap(a[i], a[j]);\n            }\n        }\n    }\n}\n\n/*交换两个数*/\nvoid Swap(int &a, int &b){\n    a = a^b;\n    b = a^b;\n    a = a^b;\n}\n\n/*打印数组*/\nvoid print(int a[], int n){\n    for (int i = 0; i < n; i++){\n        cout << a[i] << \" \";\n    }\n    cout << endl;\n}\n\nvoid main(){\n    int a[] = { 3, 2, 28, 12, 90, 23 };\n    int n = sizeof(a) / sizeof(a[0]);\n    cout << \"排序前：\" << endl;\n    print(a, n);\n\n    selectionSort(a, n);\n\n    cout << \"排序后：\" << endl;\n    print(a, n);\n    system(\"pause\");\n}\n```\n\n## 七、堆排序\n\n``` cpp\n#include<iostream>\nusing namespace std;\n\n/*\n    堆排序：        所有情况下：O(nlog2n)\n    不稳定，        对选择排序的一种改进\n    （下面采用大根堆方法）\n*/\n\n/*交换两个数*/\nvoid Swap(int &a, int &b){\n    a = a^b;\n    b = a^b;\n    a = a^b;\n}\n\n/*堆的筛选算法*/\nvoid sift(int a[], int start, int end){\n    int i = start;\n    for (int j = 2 * i + 1; j <= end; j = 2 * j + 1){// 重复操作至叶节点\n        if (j < end && a[j] < a[j + 1]){// 选出孩子节点最大的，后面来比较\n            j++;\n        }\n        if (a[i] >= a[j]){// 已经是堆了，不用调整\n            break;\n        }else{\n            Swap(a[i], a[j]);// 最大孩子上移至根节点\n            i = j;\n        }\n    }\n}\n\n/*堆排序*/\nvoid heapSort(int a[], int n){\n    for (int i = n / 2; i >= 0; i--){// 初始建堆，完全二叉树，只需从  n/2 中间节点处开始，向上\n        sift(a, i, n-1);\n    }\n    for (int i = n - 1; i > 0;i--){// 根节点和每次最后一个节点交换\n        Swap(a[0], a[i]);\n        sift(a, 0, i-1);\n    }\n}\n\n/*打印数组*/\nvoid print(int a[], int n){\n    for (int i = 0; i < n; i++){\n        cout << a[i] << \" \";\n    }\n    cout << endl;\n}\n\nvoid main(){\n    int a[] = { 3, 112, 28, 12, 90, 23 };\n    int n = sizeof(a) / sizeof(a[0]);\n    cout << \"排序前：\" << endl;\n    print(a, n);\n\n    heapSort(a, n);\n\n    cout << \"排序后：\" << endl;\n    print(a, n);\n    system(\"pause\");\n}\n```\n\n## 八、归并排序\n\n``` cpp\n#include<iostream>\nusing namespace std;\n\n/*\n归并排序任何情况下： O(nlog2n)空间复杂度O(n)\n稳定的排序算法（外排采用）\n*/\n\n/*一次归并算法*/\nvoid merge(int a[], int start, int mid, int end){\n    int i = start;\n    int j = mid + 1;\n    int k = 0;\n    int *temp = new int[end - start + 1];//临时存放排好序的数组\n\n    while (i <= mid && j <= end){\n        if (a[i] < a[j]){\n            temp[k++] = a[i++];\n        }\n        else{\n            temp[k++] = a[j++];\n        }\n    }\n\n    //处理其中一个没有取完的序列\n    if (i <= mid){\n        while (i <= mid){\n            temp[k++] = a[i++];\n        }\n    }\n    else{\n        while (j <= end){\n            temp[k++] = a[j++];\n        }\n    }\n\n    // 将临时数组有序数据赋值给原数组\n    for (i = start,k=0; i <= end; i++,k++){\n        a[i] = temp[k];\n    }\n\n    // 释放内存空间\n    delete []temp;//此处是数组，必须是[]\n}\n\n/*归并排序递归*/\nvoid mergeSort(int arr[], int low, int high)\n{\n    if (low<high)\n    {\n        int mid = (low + high) / 2;\n        mergeSort(arr, low, mid);\n        mergeSort(arr, mid + 1, high);\n        // 将最后两个有序的序列合并\n        merge(arr, low, mid, high);\n    }\n}\n\n/*打印数组*/\nvoid print(int a[], int n){\n    for (int i = 0; i < n; i++){\n        cout << a[i] << \" \";\n    }\n    cout << endl;\n}\n\nvoid main(){\n    int a[] = { 3, 112, 0, 12, 90, 23 };\n    int n = sizeof(a) / sizeof(a[0]);\n    cout << \"排序前：\" << endl;\n    print(a, n);\n\n    mergeSort(a, 0, n - 1);\n\n    cout << \"排序后：\" << endl;\n    print(a, n);\n    system(\"pause\");\n}\n```\n\n","slug":"常见排序算法（C++实现）","published":1,"updated":"2017-03-14T12:45:39.000Z","_id":"cj09j1r880001c1qw4shyo8dw","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"一、直接插入排序\"><a href=\"#一、直接插入排序\" class=\"headerlink\" title=\"一、直接插入排序\"></a>一、直接插入排序</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/*</span></div><div class=\"line\">直接插入排序</div><div class=\"line\">稳定的排序算法，时间复杂度：O(n^2)</div><div class=\"line\">*/</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">insertSort</span><span class=\"params\">(<span class=\"keyword\">int</span> a[], <span class=\"keyword\">int</span> n)</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> temp;<span class=\"comment\">//存储要插入的数</span></div><div class=\"line\">    <span class=\"keyword\">int</span> i, j;<span class=\"comment\">//j:实际上用来记录位置</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/*只需要对后面n-1个数排序*/</span></div><div class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">1</span>; i &lt; n; i++)&#123;</div><div class=\"line\">        temp = a[i];<span class=\"comment\">// 暂时存储要插入的数</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (a[i] &lt; a[i - <span class=\"number\">1</span>])&#123;</div><div class=\"line\">            <span class=\"keyword\">for</span> (j = i - <span class=\"number\">1</span>; j&gt;=<span class=\"number\">0</span> &amp;&amp; temp &lt; a[j]; j--)&#123;<span class=\"comment\">//遍历前面的数，进行比较，寻找插入的位置</span></div><div class=\"line\">                a[j + <span class=\"number\">1</span>] = a[j];<span class=\"comment\">//前面大的数后移</span></div><div class=\"line\">            &#125;</div><div class=\"line\">            a[j + <span class=\"number\">1</span>] = temp;<span class=\"comment\">// j是刚好不满足情况的位置，则 j+1 满足该位置</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/*打印数组*/</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">print</span><span class=\"params\">(<span class=\"keyword\">int</span> a[], <span class=\"keyword\">int</span> n)</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)&#123;</div><div class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; a[i]&lt;&lt;<span class=\"string\">\" \"</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> a[] = &#123; <span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">43</span>, <span class=\"number\">12</span>, <span class=\"number\">90</span>, <span class=\"number\">23</span> &#125;;</div><div class=\"line\">    <span class=\"keyword\">int</span> n = <span class=\"keyword\">sizeof</span>(a) / <span class=\"keyword\">sizeof</span>(a[<span class=\"number\">0</span>]);</div><div class=\"line\">    <span class=\"comment\">//cout &lt;&lt; n &lt;&lt; endl;</span></div><div class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"排序前：\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">    print(a, n);</div><div class=\"line\"></div><div class=\"line\">    insertSort(a, n);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"排序后：\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">    print(a, n);</div><div class=\"line\">    system(<span class=\"string\">\"pause\"</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"二、折半插入排序\"><a href=\"#二、折半插入排序\" class=\"headerlink\" title=\"二、折半插入排序\"></a>二、折半插入排序</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/*</span></div><div class=\"line\">折半插入排序：时间复杂度：O(n^2)，稳定</div><div class=\"line\">对直接插入排序 “初步优化”，寻找插入位置更快</div><div class=\"line\">*/</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">binaryInsertSort</span><span class=\"params\">(<span class=\"keyword\">int</span> a[], <span class=\"keyword\">int</span> n)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> temp;</div><div class=\"line\">    <span class=\"keyword\">int</span> i, j;</div><div class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">1</span>; i &lt; n; i++) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (a[i] &lt; a[i - <span class=\"number\">1</span>]) &#123;</div><div class=\"line\">            temp = a[i];</div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">// “二分法”，寻找插入位置，存储到low</span></div><div class=\"line\">            <span class=\"keyword\">int</span> low = <span class=\"number\">0</span>, high = i - <span class=\"number\">1</span>, mid;</div><div class=\"line\">            <span class=\"keyword\">while</span> (low &lt;= high) &#123;</div><div class=\"line\">                mid = (low + high) / <span class=\"number\">2</span>;</div><div class=\"line\">                <span class=\"keyword\">if</span> (temp &lt; a[mid]) &#123;</div><div class=\"line\">                    high = mid - <span class=\"number\">1</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\">                <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                    low = mid + <span class=\"number\">1</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">// 对要插入数之前小的数，整体后移</span></div><div class=\"line\">            <span class=\"keyword\">for</span> (j = i - <span class=\"number\">1</span>; j &gt;= low; j--) &#123;</div><div class=\"line\">                a[j + <span class=\"number\">1</span>] = a[j];</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">// 最后将刚要插入的数放到找到的位置上</span></div><div class=\"line\">            a[low] = temp;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/*打印数组*/</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">print</span><span class=\"params\">(<span class=\"keyword\">int</span> a[], <span class=\"keyword\">int</span> n)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</div><div class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; a[i] &lt;&lt; <span class=\"string\">\" \"</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> a[] = &#123;<span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">488</span>, <span class=\"number\">12</span>, <span class=\"number\">90</span>, <span class=\"number\">23</span>&#125;;</div><div class=\"line\">    <span class=\"keyword\">int</span> n = <span class=\"keyword\">sizeof</span>(a) / <span class=\"keyword\">sizeof</span>(a[<span class=\"number\">0</span>]);</div><div class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"排序前：\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">    print(a, n);</div><div class=\"line\"></div><div class=\"line\">    binaryInsertSort(a, n);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"排序后：\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">    print(a, n);</div><div class=\"line\">    system(<span class=\"string\">\"pause\"</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"三、希尔排序\"><a href=\"#三、希尔排序\" class=\"headerlink\" title=\"三、希尔排序\"></a>三、希尔排序</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/*</span></div><div class=\"line\">希尔排序：不稳定的排序</div><div class=\"line\">对直接插入排序的 “终极优化”，分组进行直接插入排序</div><div class=\"line\">时间复杂度： O(n^1.3),范围： [O(n^2), O(nlog2(n))]</div><div class=\"line\">*/</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">shellSort</span><span class=\"params\">(<span class=\"keyword\">int</span> a[],<span class=\"keyword\">int</span> n)</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> d;<span class=\"comment\">// 数之间的间隔</span></div><div class=\"line\">    <span class=\"keyword\">int</span> temp;<span class=\"comment\">// 存储要插入的数</span></div><div class=\"line\">    <span class=\"keyword\">int</span> i, j;</div><div class=\"line\">    <span class=\"comment\">// 先对要排序的数，进行分组,间隔直到1</span></div><div class=\"line\">    <span class=\"keyword\">for</span> (d = n / <span class=\"number\">2</span>; d &gt;= <span class=\"number\">1</span>; d /= <span class=\"number\">2</span>)&#123;</div><div class=\"line\">        <span class=\"comment\">// i++,对每个分组交替执行排序，并不是一整个组排完</span></div><div class=\"line\">        <span class=\"keyword\">for</span> (i = d; i &lt; n; i++)&#123;<span class=\"comment\">// 也是从该组的第二个数开始，和后面的数比较</span></div><div class=\"line\">            temp = a[i];</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">for</span> (j = i - d; j &gt;= <span class=\"number\">0</span> &amp;&amp; temp &lt; a[j]; j -= d)&#123;</div><div class=\"line\">                a[j + d] = a[j];</div><div class=\"line\">            &#125;</div><div class=\"line\">            a[j + d] = temp;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/*打印数组*/</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">print</span><span class=\"params\">(<span class=\"keyword\">int</span> a[], <span class=\"keyword\">int</span> n)</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)&#123;</div><div class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; a[i]&lt;&lt;<span class=\"string\">\" \"</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> a[] = &#123; <span class=\"number\">13</span>, <span class=\"number\">0</span>, <span class=\"number\">43</span>, <span class=\"number\">12</span>, <span class=\"number\">1</span>, <span class=\"number\">23</span> &#125;;</div><div class=\"line\">    <span class=\"keyword\">int</span> n = <span class=\"keyword\">sizeof</span>(a) / <span class=\"keyword\">sizeof</span>(a[<span class=\"number\">0</span>]);</div><div class=\"line\">    <span class=\"comment\">//cout &lt;&lt; n &lt;&lt; endl;</span></div><div class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"排序前：\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">    print(a, n);</div><div class=\"line\"></div><div class=\"line\">    shellSort(a, n);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"排序后：\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">    print(a, n);</div><div class=\"line\">    system(<span class=\"string\">\"pause\"</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"四、冒泡排序\"><a href=\"#四、冒泡排序\" class=\"headerlink\" title=\"四、冒泡排序\"></a>四、冒泡排序</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"><span class=\"comment\">// 提前声明</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Swap</span><span class=\"params\">(<span class=\"keyword\">int</span> &amp;a, <span class=\"keyword\">int</span> &amp;b)</span></span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/*</span></div><div class=\"line\">冒泡排序O(n^2)</div><div class=\"line\">稳定的排序</div><div class=\"line\">*/</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">bubbleSort</span><span class=\"params\">(<span class=\"keyword\">int</span> a[], <span class=\"keyword\">int</span> n)</span></span>&#123;</div><div class=\"line\">    <span class=\"comment\">// n-1趟</span></div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n - <span class=\"number\">1</span>; i++)&#123;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = i; j &lt; n - <span class=\"number\">1</span> - i; j++)&#123;<span class=\"comment\">// 注意最后两个数</span></div><div class=\"line\">            <span class=\"keyword\">if</span> (a[j]&gt;a[j + <span class=\"number\">1</span>])&#123;</div><div class=\"line\">                Swap(a[j], a[j + <span class=\"number\">1</span>]);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/*交换两个数*/</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Swap</span><span class=\"params\">(<span class=\"keyword\">int</span> &amp;a, <span class=\"keyword\">int</span> &amp;b)</span></span>&#123;</div><div class=\"line\">    a = a^b;</div><div class=\"line\">    b = a^b;</div><div class=\"line\">    a = a^b;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/*打印数组*/</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">print</span><span class=\"params\">(<span class=\"keyword\">int</span> a[], <span class=\"keyword\">int</span> n)</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)&#123;</div><div class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; a[i] &lt;&lt; <span class=\"string\">\" \"</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> a[] = &#123; <span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">28</span>, <span class=\"number\">12</span>, <span class=\"number\">90</span>, <span class=\"number\">23</span> &#125;;</div><div class=\"line\">    <span class=\"keyword\">int</span> n = <span class=\"keyword\">sizeof</span>(a) / <span class=\"keyword\">sizeof</span>(a[<span class=\"number\">0</span>]);</div><div class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"排序前：\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">    print(a, n);</div><div class=\"line\"></div><div class=\"line\">    bubbleSort(a, n);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"排序后：\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">    print(a, n);</div><div class=\"line\">    system(<span class=\"string\">\"pause\"</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"五、快速排序\"><a href=\"#五、快速排序\" class=\"headerlink\" title=\"五、快速排序\"></a>五、快速排序</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">partition</span><span class=\"params\">(<span class=\"keyword\">int</span> a[], <span class=\"keyword\">int</span> p, <span class=\"keyword\">int</span> r)</span></span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/*</span></div><div class=\"line\">快速排序,对冒泡排序的改进,不稳定</div><div class=\"line\">O(nlog2n),最差情况下：退化为冒泡排序O(n^2)</div><div class=\"line\">*/</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">quickSort</span><span class=\"params\">(<span class=\"keyword\">int</span> a[], <span class=\"keyword\">int</span> left,<span class=\"keyword\">int</span> right)</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (left &lt; right)&#123;</div><div class=\"line\">        <span class=\"comment\">// 递归进行排序</span></div><div class=\"line\">        <span class=\"keyword\">int</span> q = partition(a, left, right);</div><div class=\"line\">        quickSort(a, left, q - <span class=\"number\">1</span>);<span class=\"comment\">//左半边</span></div><div class=\"line\">        quickSort(a, q + <span class=\"number\">1</span>, right);<span class=\"comment\">//右半边</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/*选取基准元素key，进行划分*/</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">partition</span><span class=\"params\">(<span class=\"keyword\">int</span> a[], <span class=\"keyword\">int</span> p, <span class=\"keyword\">int</span> r)</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> i = p;</div><div class=\"line\">    <span class=\"keyword\">int</span> j = r;</div><div class=\"line\">    <span class=\"keyword\">int</span> key = a[i];</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">while</span> (i&lt;j) &#123;</div><div class=\"line\">        <span class=\"keyword\">while</span> (i &lt; j &amp;&amp; key &lt; a[j])&#123;<span class=\"comment\">//右侧扫描</span></div><div class=\"line\">            j--;</div><div class=\"line\">        &#125;</div><div class=\"line\">        a[i] = a[j];</div><div class=\"line\">        <span class=\"keyword\">while</span> (i &lt; j &amp;&amp; a[i] &lt; key)&#123;<span class=\"comment\">//左侧扫描</span></div><div class=\"line\">            i++;</div><div class=\"line\">        &#125;</div><div class=\"line\">        a[j] = a[i];</div><div class=\"line\">    &#125;</div><div class=\"line\">    a[i] = key;<span class=\"comment\">//一轮循环完，找到key的位置</span></div><div class=\"line\">    <span class=\"keyword\">return</span> i;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/*打印数组*/</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">print</span><span class=\"params\">(<span class=\"keyword\">int</span> a[], <span class=\"keyword\">int</span> n)</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)&#123;</div><div class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; a[i] &lt;&lt; <span class=\"string\">\" \"</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> a[] = &#123; <span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">28</span>, <span class=\"number\">12</span>, <span class=\"number\">90</span>, <span class=\"number\">23</span> &#125;;</div><div class=\"line\">    <span class=\"keyword\">int</span> n = <span class=\"keyword\">sizeof</span>(a) / <span class=\"keyword\">sizeof</span>(a[<span class=\"number\">0</span>]);</div><div class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"排序前：\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">    print(a, n);</div><div class=\"line\"></div><div class=\"line\">    quickSort(a, <span class=\"number\">0</span>, n<span class=\"number\">-1</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"排序后：\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">    print(a, n);</div><div class=\"line\">    system(<span class=\"string\">\"pause\"</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"六、选择排序\"><a href=\"#六、选择排序\" class=\"headerlink\" title=\"六、选择排序\"></a>六、选择排序</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Swap</span><span class=\"params\">(<span class=\"keyword\">int</span> &amp;a,<span class=\"keyword\">int</span> &amp;b)</span></span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/*</span></div><div class=\"line\">简单选择排序稳定</div><div class=\"line\">时间复杂度：O(n^2)</div><div class=\"line\">*/</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">selectionSort</span><span class=\"params\">(<span class=\"keyword\">int</span> a[], <span class=\"keyword\">int</span> n)</span></span>&#123;</div><div class=\"line\"><span class=\"comment\">// n-1趟，每次选出一个最小的放入有序区</span></div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n - <span class=\"number\">1</span>; i++)&#123;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = i+<span class=\"number\">1</span>; j &lt; n; j++)&#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (a[i]&gt;a[j])&#123;</div><div class=\"line\">                Swap(a[i], a[j]);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/*交换两个数*/</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Swap</span><span class=\"params\">(<span class=\"keyword\">int</span> &amp;a, <span class=\"keyword\">int</span> &amp;b)</span></span>&#123;</div><div class=\"line\">    a = a^b;</div><div class=\"line\">    b = a^b;</div><div class=\"line\">    a = a^b;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/*打印数组*/</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">print</span><span class=\"params\">(<span class=\"keyword\">int</span> a[], <span class=\"keyword\">int</span> n)</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)&#123;</div><div class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; a[i] &lt;&lt; <span class=\"string\">\" \"</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> a[] = &#123; <span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">28</span>, <span class=\"number\">12</span>, <span class=\"number\">90</span>, <span class=\"number\">23</span> &#125;;</div><div class=\"line\">    <span class=\"keyword\">int</span> n = <span class=\"keyword\">sizeof</span>(a) / <span class=\"keyword\">sizeof</span>(a[<span class=\"number\">0</span>]);</div><div class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"排序前：\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">    print(a, n);</div><div class=\"line\"></div><div class=\"line\">    selectionSort(a, n);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"排序后：\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">    print(a, n);</div><div class=\"line\">    system(<span class=\"string\">\"pause\"</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"七、堆排序\"><a href=\"#七、堆排序\" class=\"headerlink\" title=\"七、堆排序\"></a>七、堆排序</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/*</span></div><div class=\"line\">    堆排序：        所有情况下：O(nlog2n)</div><div class=\"line\">    不稳定，        对选择排序的一种改进</div><div class=\"line\">    （下面采用大根堆方法）</div><div class=\"line\">*/</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/*交换两个数*/</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Swap</span><span class=\"params\">(<span class=\"keyword\">int</span> &amp;a, <span class=\"keyword\">int</span> &amp;b)</span></span>&#123;</div><div class=\"line\">    a = a^b;</div><div class=\"line\">    b = a^b;</div><div class=\"line\">    a = a^b;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/*堆的筛选算法*/</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">sift</span><span class=\"params\">(<span class=\"keyword\">int</span> a[], <span class=\"keyword\">int</span> start, <span class=\"keyword\">int</span> end)</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> i = start;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">2</span> * i + <span class=\"number\">1</span>; j &lt;= end; j = <span class=\"number\">2</span> * j + <span class=\"number\">1</span>)&#123;<span class=\"comment\">// 重复操作至叶节点</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (j &lt; end &amp;&amp; a[j] &lt; a[j + <span class=\"number\">1</span>])&#123;<span class=\"comment\">// 选出孩子节点最大的，后面来比较</span></div><div class=\"line\">            j++;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">if</span> (a[i] &gt;= a[j])&#123;<span class=\"comment\">// 已经是堆了，不用调整</span></div><div class=\"line\">            <span class=\"keyword\">break</span>;</div><div class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">            Swap(a[i], a[j]);<span class=\"comment\">// 最大孩子上移至根节点</span></div><div class=\"line\">            i = j;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/*堆排序*/</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">heapSort</span><span class=\"params\">(<span class=\"keyword\">int</span> a[], <span class=\"keyword\">int</span> n)</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = n / <span class=\"number\">2</span>; i &gt;= <span class=\"number\">0</span>; i--)&#123;<span class=\"comment\">// 初始建堆，完全二叉树，只需从  n/2 中间节点处开始，向上</span></div><div class=\"line\">        sift(a, i, n<span class=\"number\">-1</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = n - <span class=\"number\">1</span>; i &gt; <span class=\"number\">0</span>;i--)&#123;<span class=\"comment\">// 根节点和每次最后一个节点交换</span></div><div class=\"line\">        Swap(a[<span class=\"number\">0</span>], a[i]);</div><div class=\"line\">        sift(a, <span class=\"number\">0</span>, i<span class=\"number\">-1</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/*打印数组*/</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">print</span><span class=\"params\">(<span class=\"keyword\">int</span> a[], <span class=\"keyword\">int</span> n)</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)&#123;</div><div class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; a[i] &lt;&lt; <span class=\"string\">\" \"</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> a[] = &#123; <span class=\"number\">3</span>, <span class=\"number\">112</span>, <span class=\"number\">28</span>, <span class=\"number\">12</span>, <span class=\"number\">90</span>, <span class=\"number\">23</span> &#125;;</div><div class=\"line\">    <span class=\"keyword\">int</span> n = <span class=\"keyword\">sizeof</span>(a) / <span class=\"keyword\">sizeof</span>(a[<span class=\"number\">0</span>]);</div><div class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"排序前：\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">    print(a, n);</div><div class=\"line\"></div><div class=\"line\">    heapSort(a, n);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"排序后：\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">    print(a, n);</div><div class=\"line\">    system(<span class=\"string\">\"pause\"</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"八、归并排序\"><a href=\"#八、归并排序\" class=\"headerlink\" title=\"八、归并排序\"></a>八、归并排序</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/*</span></div><div class=\"line\">归并排序任何情况下： O(nlog2n)空间复杂度O(n)</div><div class=\"line\">稳定的排序算法（外排采用）</div><div class=\"line\">*/</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/*一次归并算法*/</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">merge</span><span class=\"params\">(<span class=\"keyword\">int</span> a[], <span class=\"keyword\">int</span> start, <span class=\"keyword\">int</span> mid, <span class=\"keyword\">int</span> end)</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> i = start;</div><div class=\"line\">    <span class=\"keyword\">int</span> j = mid + <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">int</span> k = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">int</span> *temp = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[end - start + <span class=\"number\">1</span>];<span class=\"comment\">//临时存放排好序的数组</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">while</span> (i &lt;= mid &amp;&amp; j &lt;= end)&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (a[i] &lt; a[j])&#123;</div><div class=\"line\">            temp[k++] = a[i++];</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">else</span>&#123;</div><div class=\"line\">            temp[k++] = a[j++];</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//处理其中一个没有取完的序列</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (i &lt;= mid)&#123;</div><div class=\"line\">        <span class=\"keyword\">while</span> (i &lt;= mid)&#123;</div><div class=\"line\">            temp[k++] = a[i++];</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">else</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">while</span> (j &lt;= end)&#123;</div><div class=\"line\">            temp[k++] = a[j++];</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 将临时数组有序数据赋值给原数组</span></div><div class=\"line\">    <span class=\"keyword\">for</span> (i = start,k=<span class=\"number\">0</span>; i &lt;= end; i++,k++)&#123;</div><div class=\"line\">        a[i] = temp[k];</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 释放内存空间</span></div><div class=\"line\">    <span class=\"keyword\">delete</span> []temp;<span class=\"comment\">//此处是数组，必须是[]</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/*归并排序递归*/</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">mergeSort</span><span class=\"params\">(<span class=\"keyword\">int</span> arr[], <span class=\"keyword\">int</span> low, <span class=\"keyword\">int</span> high)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (low&lt;high)</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> mid = (low + high) / <span class=\"number\">2</span>;</div><div class=\"line\">        mergeSort(arr, low, mid);</div><div class=\"line\">        mergeSort(arr, mid + <span class=\"number\">1</span>, high);</div><div class=\"line\">        <span class=\"comment\">// 将最后两个有序的序列合并</span></div><div class=\"line\">        merge(arr, low, mid, high);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/*打印数组*/</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">print</span><span class=\"params\">(<span class=\"keyword\">int</span> a[], <span class=\"keyword\">int</span> n)</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)&#123;</div><div class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; a[i] &lt;&lt; <span class=\"string\">\" \"</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> a[] = &#123; <span class=\"number\">3</span>, <span class=\"number\">112</span>, <span class=\"number\">0</span>, <span class=\"number\">12</span>, <span class=\"number\">90</span>, <span class=\"number\">23</span> &#125;;</div><div class=\"line\">    <span class=\"keyword\">int</span> n = <span class=\"keyword\">sizeof</span>(a) / <span class=\"keyword\">sizeof</span>(a[<span class=\"number\">0</span>]);</div><div class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"排序前：\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">    print(a, n);</div><div class=\"line\"></div><div class=\"line\">    mergeSort(a, <span class=\"number\">0</span>, n - <span class=\"number\">1</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"排序后：\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">    print(a, n);</div><div class=\"line\">    system(<span class=\"string\">\"pause\"</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n","excerpt":"","more":"<h2 id=\"一、直接插入排序\"><a href=\"#一、直接插入排序\" class=\"headerlink\" title=\"一、直接插入排序\"></a>一、直接插入排序</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/*</div><div class=\"line\">直接插入排序</div><div class=\"line\">稳定的排序算法，时间复杂度：O(n^2)</div><div class=\"line\">*/</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">insertSort</span><span class=\"params\">(<span class=\"keyword\">int</span> a[], <span class=\"keyword\">int</span> n)</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> temp;<span class=\"comment\">//存储要插入的数</span></div><div class=\"line\">    <span class=\"keyword\">int</span> i, j;<span class=\"comment\">//j:实际上用来记录位置</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/*只需要对后面n-1个数排序*/</span></div><div class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">1</span>; i &lt; n; i++)&#123;</div><div class=\"line\">        temp = a[i];<span class=\"comment\">// 暂时存储要插入的数</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (a[i] &lt; a[i - <span class=\"number\">1</span>])&#123;</div><div class=\"line\">            <span class=\"keyword\">for</span> (j = i - <span class=\"number\">1</span>; j&gt;=<span class=\"number\">0</span> &amp;&amp; temp &lt; a[j]; j--)&#123;<span class=\"comment\">//遍历前面的数，进行比较，寻找插入的位置</span></div><div class=\"line\">                a[j + <span class=\"number\">1</span>] = a[j];<span class=\"comment\">//前面大的数后移</span></div><div class=\"line\">            &#125;</div><div class=\"line\">            a[j + <span class=\"number\">1</span>] = temp;<span class=\"comment\">// j是刚好不满足情况的位置，则 j+1 满足该位置</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/*打印数组*/</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">print</span><span class=\"params\">(<span class=\"keyword\">int</span> a[], <span class=\"keyword\">int</span> n)</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)&#123;</div><div class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; a[i]&lt;&lt;<span class=\"string\">\" \"</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> a[] = &#123; <span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">43</span>, <span class=\"number\">12</span>, <span class=\"number\">90</span>, <span class=\"number\">23</span> &#125;;</div><div class=\"line\">    <span class=\"keyword\">int</span> n = <span class=\"keyword\">sizeof</span>(a) / <span class=\"keyword\">sizeof</span>(a[<span class=\"number\">0</span>]);</div><div class=\"line\">    <span class=\"comment\">//cout &lt;&lt; n &lt;&lt; endl;</span></div><div class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"排序前：\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">    print(a, n);</div><div class=\"line\"></div><div class=\"line\">    insertSort(a, n);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"排序后：\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">    print(a, n);</div><div class=\"line\">    system(<span class=\"string\">\"pause\"</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"二、折半插入排序\"><a href=\"#二、折半插入排序\" class=\"headerlink\" title=\"二、折半插入排序\"></a>二、折半插入排序</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/*</div><div class=\"line\">折半插入排序：时间复杂度：O(n^2)，稳定</div><div class=\"line\">对直接插入排序 “初步优化”，寻找插入位置更快</div><div class=\"line\">*/</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">binaryInsertSort</span><span class=\"params\">(<span class=\"keyword\">int</span> a[], <span class=\"keyword\">int</span> n)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> temp;</div><div class=\"line\">    <span class=\"keyword\">int</span> i, j;</div><div class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">1</span>; i &lt; n; i++) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (a[i] &lt; a[i - <span class=\"number\">1</span>]) &#123;</div><div class=\"line\">            temp = a[i];</div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">// “二分法”，寻找插入位置，存储到low</span></div><div class=\"line\">            <span class=\"keyword\">int</span> low = <span class=\"number\">0</span>, high = i - <span class=\"number\">1</span>, mid;</div><div class=\"line\">            <span class=\"keyword\">while</span> (low &lt;= high) &#123;</div><div class=\"line\">                mid = (low + high) / <span class=\"number\">2</span>;</div><div class=\"line\">                <span class=\"keyword\">if</span> (temp &lt; a[mid]) &#123;</div><div class=\"line\">                    high = mid - <span class=\"number\">1</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\">                <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                    low = mid + <span class=\"number\">1</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">// 对要插入数之前小的数，整体后移</span></div><div class=\"line\">            <span class=\"keyword\">for</span> (j = i - <span class=\"number\">1</span>; j &gt;= low; j--) &#123;</div><div class=\"line\">                a[j + <span class=\"number\">1</span>] = a[j];</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">// 最后将刚要插入的数放到找到的位置上</span></div><div class=\"line\">            a[low] = temp;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/*打印数组*/</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">print</span><span class=\"params\">(<span class=\"keyword\">int</span> a[], <span class=\"keyword\">int</span> n)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</div><div class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; a[i] &lt;&lt; <span class=\"string\">\" \"</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> a[] = &#123;<span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">488</span>, <span class=\"number\">12</span>, <span class=\"number\">90</span>, <span class=\"number\">23</span>&#125;;</div><div class=\"line\">    <span class=\"keyword\">int</span> n = <span class=\"keyword\">sizeof</span>(a) / <span class=\"keyword\">sizeof</span>(a[<span class=\"number\">0</span>]);</div><div class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"排序前：\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">    print(a, n);</div><div class=\"line\"></div><div class=\"line\">    binaryInsertSort(a, n);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"排序后：\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">    print(a, n);</div><div class=\"line\">    system(<span class=\"string\">\"pause\"</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"三、希尔排序\"><a href=\"#三、希尔排序\" class=\"headerlink\" title=\"三、希尔排序\"></a>三、希尔排序</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/*</div><div class=\"line\">希尔排序：不稳定的排序</div><div class=\"line\">对直接插入排序的 “终极优化”，分组进行直接插入排序</div><div class=\"line\">时间复杂度： O(n^1.3),范围： [O(n^2), O(nlog2(n))]</div><div class=\"line\">*/</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">shellSort</span><span class=\"params\">(<span class=\"keyword\">int</span> a[],<span class=\"keyword\">int</span> n)</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> d;<span class=\"comment\">// 数之间的间隔</span></div><div class=\"line\">    <span class=\"keyword\">int</span> temp;<span class=\"comment\">// 存储要插入的数</span></div><div class=\"line\">    <span class=\"keyword\">int</span> i, j;</div><div class=\"line\">    <span class=\"comment\">// 先对要排序的数，进行分组,间隔直到1</span></div><div class=\"line\">    <span class=\"keyword\">for</span> (d = n / <span class=\"number\">2</span>; d &gt;= <span class=\"number\">1</span>; d /= <span class=\"number\">2</span>)&#123;</div><div class=\"line\">        <span class=\"comment\">// i++,对每个分组交替执行排序，并不是一整个组排完</span></div><div class=\"line\">        <span class=\"keyword\">for</span> (i = d; i &lt; n; i++)&#123;<span class=\"comment\">// 也是从该组的第二个数开始，和后面的数比较</span></div><div class=\"line\">            temp = a[i];</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">for</span> (j = i - d; j &gt;= <span class=\"number\">0</span> &amp;&amp; temp &lt; a[j]; j -= d)&#123;</div><div class=\"line\">                a[j + d] = a[j];</div><div class=\"line\">            &#125;</div><div class=\"line\">            a[j + d] = temp;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/*打印数组*/</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">print</span><span class=\"params\">(<span class=\"keyword\">int</span> a[], <span class=\"keyword\">int</span> n)</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)&#123;</div><div class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; a[i]&lt;&lt;<span class=\"string\">\" \"</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> a[] = &#123; <span class=\"number\">13</span>, <span class=\"number\">0</span>, <span class=\"number\">43</span>, <span class=\"number\">12</span>, <span class=\"number\">1</span>, <span class=\"number\">23</span> &#125;;</div><div class=\"line\">    <span class=\"keyword\">int</span> n = <span class=\"keyword\">sizeof</span>(a) / <span class=\"keyword\">sizeof</span>(a[<span class=\"number\">0</span>]);</div><div class=\"line\">    <span class=\"comment\">//cout &lt;&lt; n &lt;&lt; endl;</span></div><div class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"排序前：\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">    print(a, n);</div><div class=\"line\"></div><div class=\"line\">    shellSort(a, n);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"排序后：\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">    print(a, n);</div><div class=\"line\">    system(<span class=\"string\">\"pause\"</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"四、冒泡排序\"><a href=\"#四、冒泡排序\" class=\"headerlink\" title=\"四、冒泡排序\"></a>四、冒泡排序</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"><span class=\"comment\">// 提前声明</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Swap</span><span class=\"params\">(<span class=\"keyword\">int</span> &amp;a, <span class=\"keyword\">int</span> &amp;b)</span></span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/*</div><div class=\"line\">冒泡排序O(n^2)</div><div class=\"line\">稳定的排序</div><div class=\"line\">*/</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">bubbleSort</span><span class=\"params\">(<span class=\"keyword\">int</span> a[], <span class=\"keyword\">int</span> n)</span></span>&#123;</div><div class=\"line\">    <span class=\"comment\">// n-1趟</span></div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n - <span class=\"number\">1</span>; i++)&#123;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = i; j &lt; n - <span class=\"number\">1</span> - i; j++)&#123;<span class=\"comment\">// 注意最后两个数</span></div><div class=\"line\">            <span class=\"keyword\">if</span> (a[j]&gt;a[j + <span class=\"number\">1</span>])&#123;</div><div class=\"line\">                Swap(a[j], a[j + <span class=\"number\">1</span>]);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/*交换两个数*/</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Swap</span><span class=\"params\">(<span class=\"keyword\">int</span> &amp;a, <span class=\"keyword\">int</span> &amp;b)</span></span>&#123;</div><div class=\"line\">    a = a^b;</div><div class=\"line\">    b = a^b;</div><div class=\"line\">    a = a^b;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/*打印数组*/</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">print</span><span class=\"params\">(<span class=\"keyword\">int</span> a[], <span class=\"keyword\">int</span> n)</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)&#123;</div><div class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; a[i] &lt;&lt; <span class=\"string\">\" \"</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> a[] = &#123; <span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">28</span>, <span class=\"number\">12</span>, <span class=\"number\">90</span>, <span class=\"number\">23</span> &#125;;</div><div class=\"line\">    <span class=\"keyword\">int</span> n = <span class=\"keyword\">sizeof</span>(a) / <span class=\"keyword\">sizeof</span>(a[<span class=\"number\">0</span>]);</div><div class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"排序前：\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">    print(a, n);</div><div class=\"line\"></div><div class=\"line\">    bubbleSort(a, n);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"排序后：\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">    print(a, n);</div><div class=\"line\">    system(<span class=\"string\">\"pause\"</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"五、快速排序\"><a href=\"#五、快速排序\" class=\"headerlink\" title=\"五、快速排序\"></a>五、快速排序</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">partition</span><span class=\"params\">(<span class=\"keyword\">int</span> a[], <span class=\"keyword\">int</span> p, <span class=\"keyword\">int</span> r)</span></span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/*</div><div class=\"line\">快速排序,对冒泡排序的改进,不稳定</div><div class=\"line\">O(nlog2n),最差情况下：退化为冒泡排序O(n^2)</div><div class=\"line\">*/</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">quickSort</span><span class=\"params\">(<span class=\"keyword\">int</span> a[], <span class=\"keyword\">int</span> left,<span class=\"keyword\">int</span> right)</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (left &lt; right)&#123;</div><div class=\"line\">        <span class=\"comment\">// 递归进行排序</span></div><div class=\"line\">        <span class=\"keyword\">int</span> q = partition(a, left, right);</div><div class=\"line\">        quickSort(a, left, q - <span class=\"number\">1</span>);<span class=\"comment\">//左半边</span></div><div class=\"line\">        quickSort(a, q + <span class=\"number\">1</span>, right);<span class=\"comment\">//右半边</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/*选取基准元素key，进行划分*/</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">partition</span><span class=\"params\">(<span class=\"keyword\">int</span> a[], <span class=\"keyword\">int</span> p, <span class=\"keyword\">int</span> r)</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> i = p;</div><div class=\"line\">    <span class=\"keyword\">int</span> j = r;</div><div class=\"line\">    <span class=\"keyword\">int</span> key = a[i];</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">while</span> (i&lt;j) &#123;</div><div class=\"line\">        <span class=\"keyword\">while</span> (i &lt; j &amp;&amp; key &lt; a[j])&#123;<span class=\"comment\">//右侧扫描</span></div><div class=\"line\">            j--;</div><div class=\"line\">        &#125;</div><div class=\"line\">        a[i] = a[j];</div><div class=\"line\">        <span class=\"keyword\">while</span> (i &lt; j &amp;&amp; a[i] &lt; key)&#123;<span class=\"comment\">//左侧扫描</span></div><div class=\"line\">            i++;</div><div class=\"line\">        &#125;</div><div class=\"line\">        a[j] = a[i];</div><div class=\"line\">    &#125;</div><div class=\"line\">    a[i] = key;<span class=\"comment\">//一轮循环完，找到key的位置</span></div><div class=\"line\">    <span class=\"keyword\">return</span> i;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/*打印数组*/</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">print</span><span class=\"params\">(<span class=\"keyword\">int</span> a[], <span class=\"keyword\">int</span> n)</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)&#123;</div><div class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; a[i] &lt;&lt; <span class=\"string\">\" \"</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> a[] = &#123; <span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">28</span>, <span class=\"number\">12</span>, <span class=\"number\">90</span>, <span class=\"number\">23</span> &#125;;</div><div class=\"line\">    <span class=\"keyword\">int</span> n = <span class=\"keyword\">sizeof</span>(a) / <span class=\"keyword\">sizeof</span>(a[<span class=\"number\">0</span>]);</div><div class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"排序前：\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">    print(a, n);</div><div class=\"line\"></div><div class=\"line\">    quickSort(a, <span class=\"number\">0</span>, n<span class=\"number\">-1</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"排序后：\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">    print(a, n);</div><div class=\"line\">    system(<span class=\"string\">\"pause\"</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"六、选择排序\"><a href=\"#六、选择排序\" class=\"headerlink\" title=\"六、选择排序\"></a>六、选择排序</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Swap</span><span class=\"params\">(<span class=\"keyword\">int</span> &amp;a,<span class=\"keyword\">int</span> &amp;b)</span></span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/*</div><div class=\"line\">简单选择排序稳定</div><div class=\"line\">时间复杂度：O(n^2)</div><div class=\"line\">*/</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">selectionSort</span><span class=\"params\">(<span class=\"keyword\">int</span> a[], <span class=\"keyword\">int</span> n)</span></span>&#123;</div><div class=\"line\"><span class=\"comment\">// n-1趟，每次选出一个最小的放入有序区</span></div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n - <span class=\"number\">1</span>; i++)&#123;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = i+<span class=\"number\">1</span>; j &lt; n; j++)&#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (a[i]&gt;a[j])&#123;</div><div class=\"line\">                Swap(a[i], a[j]);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/*交换两个数*/</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Swap</span><span class=\"params\">(<span class=\"keyword\">int</span> &amp;a, <span class=\"keyword\">int</span> &amp;b)</span></span>&#123;</div><div class=\"line\">    a = a^b;</div><div class=\"line\">    b = a^b;</div><div class=\"line\">    a = a^b;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/*打印数组*/</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">print</span><span class=\"params\">(<span class=\"keyword\">int</span> a[], <span class=\"keyword\">int</span> n)</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)&#123;</div><div class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; a[i] &lt;&lt; <span class=\"string\">\" \"</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> a[] = &#123; <span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">28</span>, <span class=\"number\">12</span>, <span class=\"number\">90</span>, <span class=\"number\">23</span> &#125;;</div><div class=\"line\">    <span class=\"keyword\">int</span> n = <span class=\"keyword\">sizeof</span>(a) / <span class=\"keyword\">sizeof</span>(a[<span class=\"number\">0</span>]);</div><div class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"排序前：\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">    print(a, n);</div><div class=\"line\"></div><div class=\"line\">    selectionSort(a, n);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"排序后：\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">    print(a, n);</div><div class=\"line\">    system(<span class=\"string\">\"pause\"</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"七、堆排序\"><a href=\"#七、堆排序\" class=\"headerlink\" title=\"七、堆排序\"></a>七、堆排序</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/*</div><div class=\"line\">    堆排序：        所有情况下：O(nlog2n)</div><div class=\"line\">    不稳定，        对选择排序的一种改进</div><div class=\"line\">    （下面采用大根堆方法）</div><div class=\"line\">*/</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/*交换两个数*/</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Swap</span><span class=\"params\">(<span class=\"keyword\">int</span> &amp;a, <span class=\"keyword\">int</span> &amp;b)</span></span>&#123;</div><div class=\"line\">    a = a^b;</div><div class=\"line\">    b = a^b;</div><div class=\"line\">    a = a^b;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/*堆的筛选算法*/</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">sift</span><span class=\"params\">(<span class=\"keyword\">int</span> a[], <span class=\"keyword\">int</span> start, <span class=\"keyword\">int</span> end)</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> i = start;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">2</span> * i + <span class=\"number\">1</span>; j &lt;= end; j = <span class=\"number\">2</span> * j + <span class=\"number\">1</span>)&#123;<span class=\"comment\">// 重复操作至叶节点</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (j &lt; end &amp;&amp; a[j] &lt; a[j + <span class=\"number\">1</span>])&#123;<span class=\"comment\">// 选出孩子节点最大的，后面来比较</span></div><div class=\"line\">            j++;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">if</span> (a[i] &gt;= a[j])&#123;<span class=\"comment\">// 已经是堆了，不用调整</span></div><div class=\"line\">            <span class=\"keyword\">break</span>;</div><div class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">            Swap(a[i], a[j]);<span class=\"comment\">// 最大孩子上移至根节点</span></div><div class=\"line\">            i = j;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/*堆排序*/</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">heapSort</span><span class=\"params\">(<span class=\"keyword\">int</span> a[], <span class=\"keyword\">int</span> n)</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = n / <span class=\"number\">2</span>; i &gt;= <span class=\"number\">0</span>; i--)&#123;<span class=\"comment\">// 初始建堆，完全二叉树，只需从  n/2 中间节点处开始，向上</span></div><div class=\"line\">        sift(a, i, n<span class=\"number\">-1</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = n - <span class=\"number\">1</span>; i &gt; <span class=\"number\">0</span>;i--)&#123;<span class=\"comment\">// 根节点和每次最后一个节点交换</span></div><div class=\"line\">        Swap(a[<span class=\"number\">0</span>], a[i]);</div><div class=\"line\">        sift(a, <span class=\"number\">0</span>, i<span class=\"number\">-1</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/*打印数组*/</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">print</span><span class=\"params\">(<span class=\"keyword\">int</span> a[], <span class=\"keyword\">int</span> n)</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)&#123;</div><div class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; a[i] &lt;&lt; <span class=\"string\">\" \"</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> a[] = &#123; <span class=\"number\">3</span>, <span class=\"number\">112</span>, <span class=\"number\">28</span>, <span class=\"number\">12</span>, <span class=\"number\">90</span>, <span class=\"number\">23</span> &#125;;</div><div class=\"line\">    <span class=\"keyword\">int</span> n = <span class=\"keyword\">sizeof</span>(a) / <span class=\"keyword\">sizeof</span>(a[<span class=\"number\">0</span>]);</div><div class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"排序前：\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">    print(a, n);</div><div class=\"line\"></div><div class=\"line\">    heapSort(a, n);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"排序后：\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">    print(a, n);</div><div class=\"line\">    system(<span class=\"string\">\"pause\"</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"八、归并排序\"><a href=\"#八、归并排序\" class=\"headerlink\" title=\"八、归并排序\"></a>八、归并排序</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/*</div><div class=\"line\">归并排序任何情况下： O(nlog2n)空间复杂度O(n)</div><div class=\"line\">稳定的排序算法（外排采用）</div><div class=\"line\">*/</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/*一次归并算法*/</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">merge</span><span class=\"params\">(<span class=\"keyword\">int</span> a[], <span class=\"keyword\">int</span> start, <span class=\"keyword\">int</span> mid, <span class=\"keyword\">int</span> end)</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> i = start;</div><div class=\"line\">    <span class=\"keyword\">int</span> j = mid + <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">int</span> k = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">int</span> *temp = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[end - start + <span class=\"number\">1</span>];<span class=\"comment\">//临时存放排好序的数组</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">while</span> (i &lt;= mid &amp;&amp; j &lt;= end)&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (a[i] &lt; a[j])&#123;</div><div class=\"line\">            temp[k++] = a[i++];</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">else</span>&#123;</div><div class=\"line\">            temp[k++] = a[j++];</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//处理其中一个没有取完的序列</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (i &lt;= mid)&#123;</div><div class=\"line\">        <span class=\"keyword\">while</span> (i &lt;= mid)&#123;</div><div class=\"line\">            temp[k++] = a[i++];</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">else</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">while</span> (j &lt;= end)&#123;</div><div class=\"line\">            temp[k++] = a[j++];</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 将临时数组有序数据赋值给原数组</span></div><div class=\"line\">    <span class=\"keyword\">for</span> (i = start,k=<span class=\"number\">0</span>; i &lt;= end; i++,k++)&#123;</div><div class=\"line\">        a[i] = temp[k];</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 释放内存空间</span></div><div class=\"line\">    <span class=\"keyword\">delete</span> []temp;<span class=\"comment\">//此处是数组，必须是[]</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/*归并排序递归*/</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">mergeSort</span><span class=\"params\">(<span class=\"keyword\">int</span> arr[], <span class=\"keyword\">int</span> low, <span class=\"keyword\">int</span> high)</span></div><div class=\"line\"></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (low&lt;high)</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> mid = (low + high) / <span class=\"number\">2</span>;</div><div class=\"line\">        mergeSort(arr, low, mid);</div><div class=\"line\">        mergeSort(arr, mid + <span class=\"number\">1</span>, high);</div><div class=\"line\">        <span class=\"comment\">// 将最后两个有序的序列合并</span></div><div class=\"line\">        merge(arr, low, mid, high);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/*打印数组*/</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">print</span><span class=\"params\">(<span class=\"keyword\">int</span> a[], <span class=\"keyword\">int</span> n)</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)&#123;</div><div class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; a[i] &lt;&lt; <span class=\"string\">\" \"</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> a[] = &#123; <span class=\"number\">3</span>, <span class=\"number\">112</span>, <span class=\"number\">0</span>, <span class=\"number\">12</span>, <span class=\"number\">90</span>, <span class=\"number\">23</span> &#125;;</div><div class=\"line\">    <span class=\"keyword\">int</span> n = <span class=\"keyword\">sizeof</span>(a) / <span class=\"keyword\">sizeof</span>(a[<span class=\"number\">0</span>]);</div><div class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"排序前：\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">    print(a, n);</div><div class=\"line\"></div><div class=\"line\">    mergeSort(a, <span class=\"number\">0</span>, n - <span class=\"number\">1</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"排序后：\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">    print(a, n);</div><div class=\"line\">    system(<span class=\"string\">\"pause\"</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n"},{"title":"Android 增量编译方案总结","date":"2017-03-18T12:10:00.000Z","_content":"\n> 自从去年10月份，使用Freeline 感觉非常不错，开发效率提升数倍。由于工作原因，一直将这篇总结拖到现在。ok，现在好好总结下。。。\n\n## 前言：Android 开发者之痛\n\n普通的编译流程：\n![](http://7xr1vo.com1.z0.glb.clouddn.com/freeline1.png)\n存在问题：\n* 存在问题：\n* 全量编译\n* 没有缓存机制\n* 单流程构建流程\n* 代码和资源越来越多，项目编译越来越慢\n\n现状：\n* Windows: 3.5min\n* Mac: 2.5min\n    提高机器硬件已不能解决开发耗时严重的问题了...\n\n![](http://7xr1vo.com1.z0.glb.clouddn.com/freeline2.jpeg)\n\n如何解决？\n1. 配置Gradle 参数、调整tasks间执行顺序、依赖\n2. 可否实现增量编译\n3. 组件化，独立module开发、维护\n\n## 探索之路\n### Buck \n—— Facebook\n\n* 并发编译，建立多个并发子任务依赖关系，有向拓扑图，通过多线程并发把各个子节点构建出来，充分利用多核优势\n* BUCK建立了一套完善的依赖规则以及细化的缓存系统来缩减编译时间\n\n    增量构建的方式：以工程目录为单位进行增量构建，发生变更时候，变更的工程，以及该工程作为父节点或祖先节点的工程，均需要重新构建，构建完这些变更涉及的工程后，Buck需要重新走一次合并各工程DEX,对齐，签名，打包APK的过程,构建完毕后，继续走安装流程\n\n![](http://7xr1vo.com1.z0.glb.clouddn.com/freeline3.gif)\n\n缺点：\n* 增量机制并不完善\n* 引入工程量大，入侵性强\n* Windows平台不支持\n\n后传：\n**OKBuck**\n    OkBuck 的目标，是通过读取工程的 Gradle 配置，自动生成 BUCK 脚本，免去开发者下载依赖的 jar/aar 文件，编写、维护 BUCK 脚本、处理依赖之间的冲突等繁琐又容易出错的工作。\n\n### LayoutCast \n——屠毅敏（AndroidDynamicLoader ）\n\n资源文件更改：\n![](http://7xr1vo.com1.z0.glb.clouddn.com/freeline4.gif)\n\n代码变动：\n![](http://7xr1vo.com1.z0.glb.clouddn.com/freeline5.gif)\n\n编译速度对比：\n![](http://7xr1vo.com1.z0.glb.clouddn.com/freeline6.png)\n\n**原理实现**：\n* 利用反射，将修改的patch dex 插入到 dex Elements[] 最前面 \n* 资源修改：通过运行时反射,拿到 R.class 字段，得出 ids.xml 和 pubilc.xml（ids: 我们定义的 view 的 id，public：包含ids的信息，及layout、drawable、color、string、dimen、style、attr）\n\n \n``` java\npublic class ArtUtils {\n\n    public static boolean overrideClassLoader(ClassLoader cl, File dex, File opt) {\n        try {\n            ClassLoader bootstrap = cl.getParent();\n            Field fPathList = BaseDexClassLoader.class.getDeclaredField(\"pathList\");\n            fPathList.setAccessible(true);\n            Object pathList = fPathList.get(cl);\n            Class cDexPathList = bootstrap.loadClass(\"dalvik.system.DexPathList\");\n            Field fDexElements = cDexPathList.getDeclaredField(\"dexElements\");\n            fDexElements.setAccessible(true);\n            Object dexElements = fDexElements.get(pathList);\n            DexClassLoader cl2 = new DexClassLoader(dex.getAbsolutePath(), opt.getAbsolutePath(), null, bootstrap);\n            Object pathList2 = fPathList.get(cl2);\n            Object dexElements2 = fDexElements.get(pathList2);\n            Object element2 = Array.get(dexElements2, 0);\n            int n = Array.getLength(dexElements) + 1;\n            Object newDexElements = Array.newInstance(fDexElements.getType().getComponentType(), n);\n            Array.set(newDexElements, 0, element2); // 插入到数组最前面\n            for (int i = 0; i < n - 1; i++) {\n                Object element = Array.get(dexElements, i);\n                Array.set(newDexElements, i + 1, element);\n                // 其余 dex 元素依次后移\n            }\n            fDexElements.set(pathList, newDexElements);\n            return true;\n        } catch (Exception e) {\n            Log.e(\"lcast\", \"fail to override classloader \" + cl + \" with \" + dex, e);\n            return false;\n        }\n    }\n}\n```\n\n缺点：\n* 当前的修改，会把之前的修改一起带进来，一起增量，修改次数多时，速度也会越来越慢（只是针对第一次build后的基线包做的增量修改，修改多次会带上很多的增量文件）\n* 资源修改是利用反射，项目中资源越来越多时，速度提升并不明显\n* 不支持Android 5.0以下的设备\n\n### Instant-Run\n\n原理实现\n* 第一次编译时，在transform 时通过ASM对每一个方法加入 局部变量 change，更改代码后，会将 更改的类 加上 $override ，将最新类 push 到 手机上。就是通过 hack method 的方式来实现动态代码替换的\n* 资源的修改更新，通过反射的方式，生成一个 AssetManager，调用 相关外界加载 资源的方法，将最新的资源包加载进来（全量的包），然后修剪删除缓存，刷新UI使之生效\n\n缺点：\n* 资源文件仍然是一个全量的过程，资源文件越大，速度并没有明显提升\n* 无法debug，因为是 方法的hack，无法追到 堆栈信息\n* 只支持Android5.0以上\n\n### JRebel for Android\n\nhttps://zeroturnaround.com/software/jrebel-for-android/features/\n\n缺点\n* 收费\n* Crash 后需要重新全量编译，第一次编译很慢，亲测结果\n\n## 神器Freeline——集百家之长\n\n### 简介\n* Freeline是蚂蚁金服旗下一站式理财平台蚂蚁聚宝团队在Android平台上的量身定做的一个基于动态替换的编译方案\n* Freeline 借鉴了layoutCast、buck, instant run 的思想和方法，在其他增量编译方案上做了各种优化和性能的提升\n\n### Freeline 整体工作流程\n\n![](http://7xr1vo.com1.z0.glb.clouddn.com/freeline7.png)\n\n<br>\n* PC端与手机建立TCP长连接\n* 扫描各个子工程文件变化\n* 各个子工程的增量dex构建、增量资源包构建\n* 合并所有工程dex\n* 传输增量包\n* App 更新代码或资源，刷新或重启\n\n### 单个工程流程\n![](http://7xr1vo.com1.z0.glb.clouddn.com/freeline8.png)\n\n#### 几个重要的模块\n##### Python 实现任务调度（调度中心、发号施令）\n\nbuild_commands.py   builder.py  \n各种命令, 各种构建\n\nfreeline_build.py  gradle_clean_build.py  gradle_inc_build.py\ntask拓扑序列构建,\n\ntask_engine.py\n任务并发执行，依赖的模块在进行构建时，当前task.wait()，当其依赖执行结束，再执行此task\n\nandroid_tools.py\n建立连接、安装apk、一些辅助类\n\ngradle_tools.py\nGradle执行的辅助类，扫描各个文件(GradleScanChangedFilesCommand)、资源，是否有变化、存储信息\n\nsync_client.py\n将代码、资源同步到手机\n\n\n##### Gradle-Plugin 负责构建任务、代码注入等\n\n注意：对于低版本的gradle插件，则不能使用 transform 时来进行字节码修改，要通过 preDex 这个 task 进行字节码的修改\n\n``` groovy\nif (!it.moduleVersion.startsWith(\"1.5\")\n        && !it.moduleVersion.startsWith(\"2\")) {\n    isLowerVersion = true\n    return false\n}\n```\n<br>\n##### Freeline-runtime  主要处理 设备连接，增量代码、资源的更新\n具体参考源码查看，此处不再贴\n\n\n#### 代码增量实现\n使用 Qzone 的思路进行实现：\nDexUtils:\n    分别对 4.0 以上和以下的做兼容，具体看代码：\n   \n\n``` java\ntry {\n   Object newDexElements;\n   int dexLength;\n   if (VERSION.SDK_INT >= 14) {\n       pathListField = ReflectUtil.fieldGetOrg(classLoader, Class.forName(\"dalvik.system.BaseDexClassLoader\"), \"pathList\");\n       fDexElements = ReflectUtil.fieldGetOrg(pathListField.get(classLoader), \"dexElements\");\n       Object e = fDexElements.get(pathListField.get(classLoader));\n       dstObject = e;\n       dexFiles = new DexFile[Array.getLength(e)];\n       for (int i = 0; i < Array.getLength(e); ++i) {\n           newDexElements = Array.get(e, i);\n           dexFiles[i] = (DexFile) ReflectUtil.fieldGet(newDexElements, \"dexFile\");\n       }\n   } else {\n       pathListField = ReflectUtil.fieldGetOrg(classLoader, \"mDexs\");\n       dstObject = pathListField.get(classLoader);\n       dexFiles = new DexFile[Array.getLength(dstObject)];\n       for (dexLength = 0; dexLength < Array.getLength(dstObject); ++dexLength) {\n           dexFiles[dexLength] = (DexFile) Array.get(dstObject, dexLength);\n       }\n   }\n   dexLength = Array.getLength(dstObject) + 1;\n   newDexElements = Array.newInstance(fDexElements.getType().getComponentType(), dexLength);\n\n   DexClassLoader dynamicDex = new DexClassLoader(dex.getAbsolutePath(), opt.getAbsolutePath(), null, classLoader.getParent());\n   Log.i(TAG, \"after opt, dex len:\" + dex.length() + \"; opt len:\" + opt.length());\n   Object pathList = pathListField.get(dynamicDex);\n   Object dexElements = fDexElements.get(pathList);\n   Object firstDexElement = Array.get(dexElements, 0);\n   Array.set(newDexElements, 0, firstDexElement);\n\n   for (int i = 0; i < dexLength - 1; ++i) {\n       Object element = Array.get(dstObject, i);\n       Array.set(newDexElements, i + 1, element);\n   }\n\n   if (VERSION.SDK_INT >= 14) {\n       fDexElements.set(pathListField.get(classLoader), newDexElements);\n   } else {\n       pathListField.set(classLoader, newDexElements);\n   }\n   return true;\n} catch (Exception e) {\n   Log.e(TAG, \"fail to override classloader \" + classLoader + \" with \" + dex.getAbsolutePath(), e);\n   return false;\n}\n```\n\n**Preverify 过程：**\ndex2opt过程中，若发现当前类中，存在一个直接引用类也和当前类在同一个dex中，则当前类会被打上 verified=true 的标记。下次加载时，则会判断这个类所在的dex是否是同一个dex\n\n**如何避免 preverify 异常？**\n在 dexopt 过程中，Class_isPreverfied 问题：\n通过在每个类的构造方式，加入一个 另一个dex的 类，让其preverify 失效，这样就可以让增量的class被加载了\n这也是Google的一个安全策略\n\n相关知识可参考：\n直接引用类的定义：\nhttps://zhuanlan.zhihu.com/p/20308548\ndex分包过程，dexopt介绍：\nhttps://segmentfault.com/a/1190000004053072\n\n\n#### 资源的更新逻辑\n根据最新的 R.java 文件 拿到 各个资源id  生成 public.xml 和 ids.xml，用于解决资源id 冲突    id-gen-tool 工具   \n ![](http://7xr1vo.com1.z0.glb.clouddn.com/freeline9.png)\n\n对于增量的 资源进行 Freelineaapt 编译，未做过更改的资源，直接使用 backup 中的资源，再打成一个 增量包：inc.pack\n\n![](http://7xr1vo.com1.z0.glb.clouddn.com/freeline10.png)\n\n增量包中，只包含 增量的资源，全量的arsc 和 AndroidManifest.xml\n\nResources.arsc 并不一定会打进 pack 中，只有 资源的更改引起 arsc 变化时，才打入包中，arsc 的体积也是占一定比例的\n\n手机端，资源更新生效：\n    通过借鉴 instant run的方式，找到 resDir 的路径，将pack解压覆盖至该目录，然后 pruneResourceCaches,刷新UI\n\n## Freeline 使用及相关问题 \n不再浪费篇幅，直接贴出我总结的内容：\n\nhttps://github.com/fenglincanyi/Study/blob/master/Freeline%E7%9B%B8%E5%85%B3/Freeline_use.md\n\n## 实例分析\n> 我们重点关注 项目目录下的 **app/build/freeline**\n\n![](http://7xr1vo.com1.z0.glb.clouddn.com/freeline11.png)\n\n更改代码后，再执行增量编译后，观察此目录：\n![](http://7xr1vo.com1.z0.glb.clouddn.com/freeline12.png)\n\n只生成了最新的更改过的文件\n反编译 dex 目录下的 classes.dex 得出, 此文件里全是更改过的类文件：\n![](http://7xr1vo.com1.z0.glb.clouddn.com/freeline13.png)\n\n换个目录看看：\n![](http://7xr1vo.com1.z0.glb.clouddn.com/freeline14.png)\n\n对 hackload.dex 反编译：\n![](http://7xr1vo.com1.z0.glb.clouddn.com/freeline15.png)\n\n发现这个 hackload.dex 就是插桩时候，使用的单独的dex，里面是用来避免 preverify 问题的类\n随后，我们看看编译后的apk 文件，解压缩，反编译看看任意一个classes.dex:\n![](http://7xr1vo.com1.z0.glb.clouddn.com/freeline16.png)\n发现，确实是在构造方法里插入一个其他dex中的类，来避免打上 verified 的标识，验证了上面的做法。\n<br>\n好，松一口气，代码更新算是说完了...\n\n<hr/>\n\n\n下面，我们看看资源是怎么更新的...\n\n前面说过：\n是通过反向对 R.java 文件摘出 资源 id信息，放在 ids.xml 和 public.xml 中，那我们来看看这两个文件：\n![](http://7xr1vo.com1.z0.glb.clouddn.com/freeline17.png)\n\n**ids.xml:**\n![](http://7xr1vo.com1.z0.glb.clouddn.com/freeline18.png)\n\n里面是压缩过的id信息，就是我们在写布局文件的那些内容\n\n**public.xml:**\n![](http://7xr1vo.com1.z0.glb.clouddn.com/freeline19.png)\n\n此处只是部分，public.xml 文件记录了 name 和 id 之间的映射\n\n一个普通的 R.java 文件，包含了以下资源信息\n![](http://7xr1vo.com1.z0.glb.clouddn.com/freeline20.png)\n所以，这里的 ids.xml 只存储了 我们自己写的 id 信息，而 public.xml 存储了 R.java 完整信息。\nids.xml 是为了处理资源id冲突问题，预先准备的文件\n\n**再来看看 增量资源相关的：**\n\napp.pack 文件压缩了所有的资源文件，包括assets 和 res 目录下的资源文件，和清单文件，资源索引表\n\n![](http://7xr1vo.com1.z0.glb.clouddn.com/freeline21.png)\n\n解压 app.pack 文件后：\n\n![](http://7xr1vo.com1.z0.glb.clouddn.com/freeline22.png)\n\n扩展一下，看看 resource.arsc 文件：\n此文件的并不是APP一下子解析加载的，是按需加载，\n它是一种二进制索引表,对应了app里所有资源name,及id\n![](http://7xr1vo.com1.z0.glb.clouddn.com/freeline23.png)\n\n\n## 总结\n* 整个 Freeline 项目的源码很值得研究，里面有好多的实现思路和解决方法都是精益求精的。把增量和优化做到极致。\n* 充分的借鉴了 layoucast 的代码更新思路，Buck 的并发构建、有向拓扑的规则、instant run的字节码修改、monkeyPatcher的实现方法，另外借助 gradle transform 插件及 preDex task时机进行字节码修改，真的是集百家之长。\n**工作启示：**\n* 解决方法永远会有更优的，只是你暂时没找到\n* 复杂的工程都是一点一点做出来的\n\n\n## 部分源码注释\n阅读 freeline 的 python模块代码的注释：\nhttps://github.com/fenglincanyi/Study/tree/master/Freeline%E7%9B%B8%E5%85%B3/freeline%E7%9B%B8%E5%85%B3%E6%BA%90%E7%A0%81%E6%B3%A8%E9%87%8A/freeline/freeline/freeline\n\n\n## 补充点\n想说的太多了，自己写个配注。。。\n\n* Gradle plugin 模块：\n负责构建时，做的一些逻辑\n如：项目描述文件（FreelineInitializer.groovy 执行初始化时，生成项目描述文件）\n\n* reelineInjector.groovy 里的  hackClass  -> new FreelineClassVisitor -> 进行字节码的注入\n这个思路借鉴了instant run的做法\n\n* Freeline-runtime/DexUtils\n处理dex增量包的逻辑\n\n* Instant-run-serve 项目下的 monkeyPatcher 被Freeline直接复用了\n\n* Gradle transform plugin\ntransform 是在java文件编译成class之后，合成dex之前，此期间执行的，来修改class内容\n\n\ntransform 解释：\nhttp://blog.csdn.net/sbsujjbcy/article/details/50839263\n源码位置：\nhttps://android.googlesource.com/platform/tools/base/+/gradle_2.0.0/build-system/gradle-core/\n\n\ninstant run 中涉及到的类：用到了ASM\nIncrementalChangeVisitor.java\nIncrementalSupportVisitor.java\nIncrementalVisitor.java\n\n\n使用到，调用 task 命令，传入参数：\n``` python\ncommand += ' -P freelineBuild=true' # 使用 gradle 方式，加入了freelineBuild 属性 ，在 FreelinePlugin.groovy 中有体现\n```\n","source":"_posts/Android 增量编译方案总结.md","raw":"---\ntitle: Android 增量编译方案总结\ndate: 2017-03-18 20:10\ncategories: Android\ntags: [Freeline]\n---\n\n> 自从去年10月份，使用Freeline 感觉非常不错，开发效率提升数倍。由于工作原因，一直将这篇总结拖到现在。ok，现在好好总结下。。。\n\n## 前言：Android 开发者之痛\n\n普通的编译流程：\n![](http://7xr1vo.com1.z0.glb.clouddn.com/freeline1.png)\n存在问题：\n* 存在问题：\n* 全量编译\n* 没有缓存机制\n* 单流程构建流程\n* 代码和资源越来越多，项目编译越来越慢\n\n现状：\n* Windows: 3.5min\n* Mac: 2.5min\n    提高机器硬件已不能解决开发耗时严重的问题了...\n\n![](http://7xr1vo.com1.z0.glb.clouddn.com/freeline2.jpeg)\n\n如何解决？\n1. 配置Gradle 参数、调整tasks间执行顺序、依赖\n2. 可否实现增量编译\n3. 组件化，独立module开发、维护\n\n## 探索之路\n### Buck \n—— Facebook\n\n* 并发编译，建立多个并发子任务依赖关系，有向拓扑图，通过多线程并发把各个子节点构建出来，充分利用多核优势\n* BUCK建立了一套完善的依赖规则以及细化的缓存系统来缩减编译时间\n\n    增量构建的方式：以工程目录为单位进行增量构建，发生变更时候，变更的工程，以及该工程作为父节点或祖先节点的工程，均需要重新构建，构建完这些变更涉及的工程后，Buck需要重新走一次合并各工程DEX,对齐，签名，打包APK的过程,构建完毕后，继续走安装流程\n\n![](http://7xr1vo.com1.z0.glb.clouddn.com/freeline3.gif)\n\n缺点：\n* 增量机制并不完善\n* 引入工程量大，入侵性强\n* Windows平台不支持\n\n后传：\n**OKBuck**\n    OkBuck 的目标，是通过读取工程的 Gradle 配置，自动生成 BUCK 脚本，免去开发者下载依赖的 jar/aar 文件，编写、维护 BUCK 脚本、处理依赖之间的冲突等繁琐又容易出错的工作。\n\n### LayoutCast \n——屠毅敏（AndroidDynamicLoader ）\n\n资源文件更改：\n![](http://7xr1vo.com1.z0.glb.clouddn.com/freeline4.gif)\n\n代码变动：\n![](http://7xr1vo.com1.z0.glb.clouddn.com/freeline5.gif)\n\n编译速度对比：\n![](http://7xr1vo.com1.z0.glb.clouddn.com/freeline6.png)\n\n**原理实现**：\n* 利用反射，将修改的patch dex 插入到 dex Elements[] 最前面 \n* 资源修改：通过运行时反射,拿到 R.class 字段，得出 ids.xml 和 pubilc.xml（ids: 我们定义的 view 的 id，public：包含ids的信息，及layout、drawable、color、string、dimen、style、attr）\n\n \n``` java\npublic class ArtUtils {\n\n    public static boolean overrideClassLoader(ClassLoader cl, File dex, File opt) {\n        try {\n            ClassLoader bootstrap = cl.getParent();\n            Field fPathList = BaseDexClassLoader.class.getDeclaredField(\"pathList\");\n            fPathList.setAccessible(true);\n            Object pathList = fPathList.get(cl);\n            Class cDexPathList = bootstrap.loadClass(\"dalvik.system.DexPathList\");\n            Field fDexElements = cDexPathList.getDeclaredField(\"dexElements\");\n            fDexElements.setAccessible(true);\n            Object dexElements = fDexElements.get(pathList);\n            DexClassLoader cl2 = new DexClassLoader(dex.getAbsolutePath(), opt.getAbsolutePath(), null, bootstrap);\n            Object pathList2 = fPathList.get(cl2);\n            Object dexElements2 = fDexElements.get(pathList2);\n            Object element2 = Array.get(dexElements2, 0);\n            int n = Array.getLength(dexElements) + 1;\n            Object newDexElements = Array.newInstance(fDexElements.getType().getComponentType(), n);\n            Array.set(newDexElements, 0, element2); // 插入到数组最前面\n            for (int i = 0; i < n - 1; i++) {\n                Object element = Array.get(dexElements, i);\n                Array.set(newDexElements, i + 1, element);\n                // 其余 dex 元素依次后移\n            }\n            fDexElements.set(pathList, newDexElements);\n            return true;\n        } catch (Exception e) {\n            Log.e(\"lcast\", \"fail to override classloader \" + cl + \" with \" + dex, e);\n            return false;\n        }\n    }\n}\n```\n\n缺点：\n* 当前的修改，会把之前的修改一起带进来，一起增量，修改次数多时，速度也会越来越慢（只是针对第一次build后的基线包做的增量修改，修改多次会带上很多的增量文件）\n* 资源修改是利用反射，项目中资源越来越多时，速度提升并不明显\n* 不支持Android 5.0以下的设备\n\n### Instant-Run\n\n原理实现\n* 第一次编译时，在transform 时通过ASM对每一个方法加入 局部变量 change，更改代码后，会将 更改的类 加上 $override ，将最新类 push 到 手机上。就是通过 hack method 的方式来实现动态代码替换的\n* 资源的修改更新，通过反射的方式，生成一个 AssetManager，调用 相关外界加载 资源的方法，将最新的资源包加载进来（全量的包），然后修剪删除缓存，刷新UI使之生效\n\n缺点：\n* 资源文件仍然是一个全量的过程，资源文件越大，速度并没有明显提升\n* 无法debug，因为是 方法的hack，无法追到 堆栈信息\n* 只支持Android5.0以上\n\n### JRebel for Android\n\nhttps://zeroturnaround.com/software/jrebel-for-android/features/\n\n缺点\n* 收费\n* Crash 后需要重新全量编译，第一次编译很慢，亲测结果\n\n## 神器Freeline——集百家之长\n\n### 简介\n* Freeline是蚂蚁金服旗下一站式理财平台蚂蚁聚宝团队在Android平台上的量身定做的一个基于动态替换的编译方案\n* Freeline 借鉴了layoutCast、buck, instant run 的思想和方法，在其他增量编译方案上做了各种优化和性能的提升\n\n### Freeline 整体工作流程\n\n![](http://7xr1vo.com1.z0.glb.clouddn.com/freeline7.png)\n\n<br>\n* PC端与手机建立TCP长连接\n* 扫描各个子工程文件变化\n* 各个子工程的增量dex构建、增量资源包构建\n* 合并所有工程dex\n* 传输增量包\n* App 更新代码或资源，刷新或重启\n\n### 单个工程流程\n![](http://7xr1vo.com1.z0.glb.clouddn.com/freeline8.png)\n\n#### 几个重要的模块\n##### Python 实现任务调度（调度中心、发号施令）\n\nbuild_commands.py   builder.py  \n各种命令, 各种构建\n\nfreeline_build.py  gradle_clean_build.py  gradle_inc_build.py\ntask拓扑序列构建,\n\ntask_engine.py\n任务并发执行，依赖的模块在进行构建时，当前task.wait()，当其依赖执行结束，再执行此task\n\nandroid_tools.py\n建立连接、安装apk、一些辅助类\n\ngradle_tools.py\nGradle执行的辅助类，扫描各个文件(GradleScanChangedFilesCommand)、资源，是否有变化、存储信息\n\nsync_client.py\n将代码、资源同步到手机\n\n\n##### Gradle-Plugin 负责构建任务、代码注入等\n\n注意：对于低版本的gradle插件，则不能使用 transform 时来进行字节码修改，要通过 preDex 这个 task 进行字节码的修改\n\n``` groovy\nif (!it.moduleVersion.startsWith(\"1.5\")\n        && !it.moduleVersion.startsWith(\"2\")) {\n    isLowerVersion = true\n    return false\n}\n```\n<br>\n##### Freeline-runtime  主要处理 设备连接，增量代码、资源的更新\n具体参考源码查看，此处不再贴\n\n\n#### 代码增量实现\n使用 Qzone 的思路进行实现：\nDexUtils:\n    分别对 4.0 以上和以下的做兼容，具体看代码：\n   \n\n``` java\ntry {\n   Object newDexElements;\n   int dexLength;\n   if (VERSION.SDK_INT >= 14) {\n       pathListField = ReflectUtil.fieldGetOrg(classLoader, Class.forName(\"dalvik.system.BaseDexClassLoader\"), \"pathList\");\n       fDexElements = ReflectUtil.fieldGetOrg(pathListField.get(classLoader), \"dexElements\");\n       Object e = fDexElements.get(pathListField.get(classLoader));\n       dstObject = e;\n       dexFiles = new DexFile[Array.getLength(e)];\n       for (int i = 0; i < Array.getLength(e); ++i) {\n           newDexElements = Array.get(e, i);\n           dexFiles[i] = (DexFile) ReflectUtil.fieldGet(newDexElements, \"dexFile\");\n       }\n   } else {\n       pathListField = ReflectUtil.fieldGetOrg(classLoader, \"mDexs\");\n       dstObject = pathListField.get(classLoader);\n       dexFiles = new DexFile[Array.getLength(dstObject)];\n       for (dexLength = 0; dexLength < Array.getLength(dstObject); ++dexLength) {\n           dexFiles[dexLength] = (DexFile) Array.get(dstObject, dexLength);\n       }\n   }\n   dexLength = Array.getLength(dstObject) + 1;\n   newDexElements = Array.newInstance(fDexElements.getType().getComponentType(), dexLength);\n\n   DexClassLoader dynamicDex = new DexClassLoader(dex.getAbsolutePath(), opt.getAbsolutePath(), null, classLoader.getParent());\n   Log.i(TAG, \"after opt, dex len:\" + dex.length() + \"; opt len:\" + opt.length());\n   Object pathList = pathListField.get(dynamicDex);\n   Object dexElements = fDexElements.get(pathList);\n   Object firstDexElement = Array.get(dexElements, 0);\n   Array.set(newDexElements, 0, firstDexElement);\n\n   for (int i = 0; i < dexLength - 1; ++i) {\n       Object element = Array.get(dstObject, i);\n       Array.set(newDexElements, i + 1, element);\n   }\n\n   if (VERSION.SDK_INT >= 14) {\n       fDexElements.set(pathListField.get(classLoader), newDexElements);\n   } else {\n       pathListField.set(classLoader, newDexElements);\n   }\n   return true;\n} catch (Exception e) {\n   Log.e(TAG, \"fail to override classloader \" + classLoader + \" with \" + dex.getAbsolutePath(), e);\n   return false;\n}\n```\n\n**Preverify 过程：**\ndex2opt过程中，若发现当前类中，存在一个直接引用类也和当前类在同一个dex中，则当前类会被打上 verified=true 的标记。下次加载时，则会判断这个类所在的dex是否是同一个dex\n\n**如何避免 preverify 异常？**\n在 dexopt 过程中，Class_isPreverfied 问题：\n通过在每个类的构造方式，加入一个 另一个dex的 类，让其preverify 失效，这样就可以让增量的class被加载了\n这也是Google的一个安全策略\n\n相关知识可参考：\n直接引用类的定义：\nhttps://zhuanlan.zhihu.com/p/20308548\ndex分包过程，dexopt介绍：\nhttps://segmentfault.com/a/1190000004053072\n\n\n#### 资源的更新逻辑\n根据最新的 R.java 文件 拿到 各个资源id  生成 public.xml 和 ids.xml，用于解决资源id 冲突    id-gen-tool 工具   \n ![](http://7xr1vo.com1.z0.glb.clouddn.com/freeline9.png)\n\n对于增量的 资源进行 Freelineaapt 编译，未做过更改的资源，直接使用 backup 中的资源，再打成一个 增量包：inc.pack\n\n![](http://7xr1vo.com1.z0.glb.clouddn.com/freeline10.png)\n\n增量包中，只包含 增量的资源，全量的arsc 和 AndroidManifest.xml\n\nResources.arsc 并不一定会打进 pack 中，只有 资源的更改引起 arsc 变化时，才打入包中，arsc 的体积也是占一定比例的\n\n手机端，资源更新生效：\n    通过借鉴 instant run的方式，找到 resDir 的路径，将pack解压覆盖至该目录，然后 pruneResourceCaches,刷新UI\n\n## Freeline 使用及相关问题 \n不再浪费篇幅，直接贴出我总结的内容：\n\nhttps://github.com/fenglincanyi/Study/blob/master/Freeline%E7%9B%B8%E5%85%B3/Freeline_use.md\n\n## 实例分析\n> 我们重点关注 项目目录下的 **app/build/freeline**\n\n![](http://7xr1vo.com1.z0.glb.clouddn.com/freeline11.png)\n\n更改代码后，再执行增量编译后，观察此目录：\n![](http://7xr1vo.com1.z0.glb.clouddn.com/freeline12.png)\n\n只生成了最新的更改过的文件\n反编译 dex 目录下的 classes.dex 得出, 此文件里全是更改过的类文件：\n![](http://7xr1vo.com1.z0.glb.clouddn.com/freeline13.png)\n\n换个目录看看：\n![](http://7xr1vo.com1.z0.glb.clouddn.com/freeline14.png)\n\n对 hackload.dex 反编译：\n![](http://7xr1vo.com1.z0.glb.clouddn.com/freeline15.png)\n\n发现这个 hackload.dex 就是插桩时候，使用的单独的dex，里面是用来避免 preverify 问题的类\n随后，我们看看编译后的apk 文件，解压缩，反编译看看任意一个classes.dex:\n![](http://7xr1vo.com1.z0.glb.clouddn.com/freeline16.png)\n发现，确实是在构造方法里插入一个其他dex中的类，来避免打上 verified 的标识，验证了上面的做法。\n<br>\n好，松一口气，代码更新算是说完了...\n\n<hr/>\n\n\n下面，我们看看资源是怎么更新的...\n\n前面说过：\n是通过反向对 R.java 文件摘出 资源 id信息，放在 ids.xml 和 public.xml 中，那我们来看看这两个文件：\n![](http://7xr1vo.com1.z0.glb.clouddn.com/freeline17.png)\n\n**ids.xml:**\n![](http://7xr1vo.com1.z0.glb.clouddn.com/freeline18.png)\n\n里面是压缩过的id信息，就是我们在写布局文件的那些内容\n\n**public.xml:**\n![](http://7xr1vo.com1.z0.glb.clouddn.com/freeline19.png)\n\n此处只是部分，public.xml 文件记录了 name 和 id 之间的映射\n\n一个普通的 R.java 文件，包含了以下资源信息\n![](http://7xr1vo.com1.z0.glb.clouddn.com/freeline20.png)\n所以，这里的 ids.xml 只存储了 我们自己写的 id 信息，而 public.xml 存储了 R.java 完整信息。\nids.xml 是为了处理资源id冲突问题，预先准备的文件\n\n**再来看看 增量资源相关的：**\n\napp.pack 文件压缩了所有的资源文件，包括assets 和 res 目录下的资源文件，和清单文件，资源索引表\n\n![](http://7xr1vo.com1.z0.glb.clouddn.com/freeline21.png)\n\n解压 app.pack 文件后：\n\n![](http://7xr1vo.com1.z0.glb.clouddn.com/freeline22.png)\n\n扩展一下，看看 resource.arsc 文件：\n此文件的并不是APP一下子解析加载的，是按需加载，\n它是一种二进制索引表,对应了app里所有资源name,及id\n![](http://7xr1vo.com1.z0.glb.clouddn.com/freeline23.png)\n\n\n## 总结\n* 整个 Freeline 项目的源码很值得研究，里面有好多的实现思路和解决方法都是精益求精的。把增量和优化做到极致。\n* 充分的借鉴了 layoucast 的代码更新思路，Buck 的并发构建、有向拓扑的规则、instant run的字节码修改、monkeyPatcher的实现方法，另外借助 gradle transform 插件及 preDex task时机进行字节码修改，真的是集百家之长。\n**工作启示：**\n* 解决方法永远会有更优的，只是你暂时没找到\n* 复杂的工程都是一点一点做出来的\n\n\n## 部分源码注释\n阅读 freeline 的 python模块代码的注释：\nhttps://github.com/fenglincanyi/Study/tree/master/Freeline%E7%9B%B8%E5%85%B3/freeline%E7%9B%B8%E5%85%B3%E6%BA%90%E7%A0%81%E6%B3%A8%E9%87%8A/freeline/freeline/freeline\n\n\n## 补充点\n想说的太多了，自己写个配注。。。\n\n* Gradle plugin 模块：\n负责构建时，做的一些逻辑\n如：项目描述文件（FreelineInitializer.groovy 执行初始化时，生成项目描述文件）\n\n* reelineInjector.groovy 里的  hackClass  -> new FreelineClassVisitor -> 进行字节码的注入\n这个思路借鉴了instant run的做法\n\n* Freeline-runtime/DexUtils\n处理dex增量包的逻辑\n\n* Instant-run-serve 项目下的 monkeyPatcher 被Freeline直接复用了\n\n* Gradle transform plugin\ntransform 是在java文件编译成class之后，合成dex之前，此期间执行的，来修改class内容\n\n\ntransform 解释：\nhttp://blog.csdn.net/sbsujjbcy/article/details/50839263\n源码位置：\nhttps://android.googlesource.com/platform/tools/base/+/gradle_2.0.0/build-system/gradle-core/\n\n\ninstant run 中涉及到的类：用到了ASM\nIncrementalChangeVisitor.java\nIncrementalSupportVisitor.java\nIncrementalVisitor.java\n\n\n使用到，调用 task 命令，传入参数：\n``` python\ncommand += ' -P freelineBuild=true' # 使用 gradle 方式，加入了freelineBuild 属性 ，在 FreelinePlugin.groovy 中有体现\n```\n","slug":"Android 增量编译方案总结","published":1,"updated":"2017-05-25T08:23:48.000Z","_id":"cj344z8bd0000t0qwiks9ewpk","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>自从去年10月份，使用Freeline 感觉非常不错，开发效率提升数倍。由于工作原因，一直将这篇总结拖到现在。ok，现在好好总结下。。。</p>\n</blockquote>\n<h2 id=\"前言：Android-开发者之痛\"><a href=\"#前言：Android-开发者之痛\" class=\"headerlink\" title=\"前言：Android 开发者之痛\"></a>前言：Android 开发者之痛</h2><p>普通的编译流程：<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/freeline1.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure><br>存在问题：</p>\n<ul>\n<li>存在问题：</li>\n<li>全量编译</li>\n<li>没有缓存机制</li>\n<li>单流程构建流程</li>\n<li>代码和资源越来越多，项目编译越来越慢</li>\n</ul>\n<p>现状：</p>\n<ul>\n<li>Windows: 3.5min</li>\n<li>Mac: 2.5min<br>  提高机器硬件已不能解决开发耗时严重的问题了…</li>\n</ul>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/freeline2.jpeg\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>如何解决？</p>\n<ol>\n<li>配置Gradle 参数、调整tasks间执行顺序、依赖</li>\n<li>可否实现增量编译</li>\n<li>组件化，独立module开发、维护</li>\n</ol>\n<h2 id=\"探索之路\"><a href=\"#探索之路\" class=\"headerlink\" title=\"探索之路\"></a>探索之路</h2><h3 id=\"Buck\"><a href=\"#Buck\" class=\"headerlink\" title=\"Buck\"></a>Buck</h3><p>—— Facebook</p>\n<ul>\n<li>并发编译，建立多个并发子任务依赖关系，有向拓扑图，通过多线程并发把各个子节点构建出来，充分利用多核优势</li>\n<li><p>BUCK建立了一套完善的依赖规则以及细化的缓存系统来缩减编译时间</p>\n<p>  增量构建的方式：以工程目录为单位进行增量构建，发生变更时候，变更的工程，以及该工程作为父节点或祖先节点的工程，均需要重新构建，构建完这些变更涉及的工程后，Buck需要重新走一次合并各工程DEX,对齐，签名，打包APK的过程,构建完毕后，继续走安装流程</p>\n</li>\n</ul>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/freeline3.gif\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>缺点：</p>\n<ul>\n<li>增量机制并不完善</li>\n<li>引入工程量大，入侵性强</li>\n<li>Windows平台不支持</li>\n</ul>\n<p>后传：<br><strong>OKBuck</strong><br>    OkBuck 的目标，是通过读取工程的 Gradle 配置，自动生成 BUCK 脚本，免去开发者下载依赖的 jar/aar 文件，编写、维护 BUCK 脚本、处理依赖之间的冲突等繁琐又容易出错的工作。</p>\n<h3 id=\"LayoutCast\"><a href=\"#LayoutCast\" class=\"headerlink\" title=\"LayoutCast\"></a>LayoutCast</h3><p>——屠毅敏（AndroidDynamicLoader ）</p>\n<p>资源文件更改：<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/freeline4.gif\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure></p>\n<p>代码变动：<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/freeline5.gif\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure></p>\n<p>编译速度对比：<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/freeline6.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure></p>\n<p><strong>原理实现</strong>：</p>\n<ul>\n<li>利用反射，将修改的patch dex 插入到 dex Elements[] 最前面 </li>\n<li>资源修改：通过运行时反射,拿到 R.class 字段，得出 ids.xml 和 pubilc.xml（ids: 我们定义的 view 的 id，public：包含ids的信息，及layout、drawable、color、string、dimen、style、attr）</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ArtUtils</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">overrideClassLoader</span><span class=\"params\">(ClassLoader cl, File dex, File opt)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            ClassLoader bootstrap = cl.getParent();</div><div class=\"line\">            Field fPathList = BaseDexClassLoader.class.getDeclaredField(<span class=\"string\">\"pathList\"</span>);</div><div class=\"line\">            fPathList.setAccessible(<span class=\"keyword\">true</span>);</div><div class=\"line\">            Object pathList = fPathList.get(cl);</div><div class=\"line\">            Class cDexPathList = bootstrap.loadClass(<span class=\"string\">\"dalvik.system.DexPathList\"</span>);</div><div class=\"line\">            Field fDexElements = cDexPathList.getDeclaredField(<span class=\"string\">\"dexElements\"</span>);</div><div class=\"line\">            fDexElements.setAccessible(<span class=\"keyword\">true</span>);</div><div class=\"line\">            Object dexElements = fDexElements.get(pathList);</div><div class=\"line\">            DexClassLoader cl2 = <span class=\"keyword\">new</span> DexClassLoader(dex.getAbsolutePath(), opt.getAbsolutePath(), <span class=\"keyword\">null</span>, bootstrap);</div><div class=\"line\">            Object pathList2 = fPathList.get(cl2);</div><div class=\"line\">            Object dexElements2 = fDexElements.get(pathList2);</div><div class=\"line\">            Object element2 = Array.get(dexElements2, <span class=\"number\">0</span>);</div><div class=\"line\">            <span class=\"keyword\">int</span> n = Array.getLength(dexElements) + <span class=\"number\">1</span>;</div><div class=\"line\">            Object newDexElements = Array.newInstance(fDexElements.getType().getComponentType(), n);</div><div class=\"line\">            Array.set(newDexElements, <span class=\"number\">0</span>, element2); <span class=\"comment\">// 插入到数组最前面</span></div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n - <span class=\"number\">1</span>; i++) &#123;</div><div class=\"line\">                Object element = Array.get(dexElements, i);</div><div class=\"line\">                Array.set(newDexElements, i + <span class=\"number\">1</span>, element);</div><div class=\"line\">                <span class=\"comment\">// 其余 dex 元素依次后移</span></div><div class=\"line\">            &#125;</div><div class=\"line\">            fDexElements.set(pathList, newDexElements);</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">            Log.e(<span class=\"string\">\"lcast\"</span>, <span class=\"string\">\"fail to override classloader \"</span> + cl + <span class=\"string\">\" with \"</span> + dex, e);</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>缺点：</p>\n<ul>\n<li>当前的修改，会把之前的修改一起带进来，一起增量，修改次数多时，速度也会越来越慢（只是针对第一次build后的基线包做的增量修改，修改多次会带上很多的增量文件）</li>\n<li>资源修改是利用反射，项目中资源越来越多时，速度提升并不明显</li>\n<li>不支持Android 5.0以下的设备</li>\n</ul>\n<h3 id=\"Instant-Run\"><a href=\"#Instant-Run\" class=\"headerlink\" title=\"Instant-Run\"></a>Instant-Run</h3><p>原理实现</p>\n<ul>\n<li>第一次编译时，在transform 时通过ASM对每一个方法加入 局部变量 change，更改代码后，会将 更改的类 加上 $override ，将最新类 push 到 手机上。就是通过 hack method 的方式来实现动态代码替换的</li>\n<li>资源的修改更新，通过反射的方式，生成一个 AssetManager，调用 相关外界加载 资源的方法，将最新的资源包加载进来（全量的包），然后修剪删除缓存，刷新UI使之生效</li>\n</ul>\n<p>缺点：</p>\n<ul>\n<li>资源文件仍然是一个全量的过程，资源文件越大，速度并没有明显提升</li>\n<li>无法debug，因为是 方法的hack，无法追到 堆栈信息</li>\n<li>只支持Android5.0以上</li>\n</ul>\n<h3 id=\"JRebel-for-Android\"><a href=\"#JRebel-for-Android\" class=\"headerlink\" title=\"JRebel for Android\"></a>JRebel for Android</h3><p><a href=\"https://zeroturnaround.com/software/jrebel-for-android/features/\" target=\"_blank\" rel=\"external\">https://zeroturnaround.com/software/jrebel-for-android/features/</a></p>\n<p>缺点</p>\n<ul>\n<li>收费</li>\n<li>Crash 后需要重新全量编译，第一次编译很慢，亲测结果</li>\n</ul>\n<h2 id=\"神器Freeline——集百家之长\"><a href=\"#神器Freeline——集百家之长\" class=\"headerlink\" title=\"神器Freeline——集百家之长\"></a>神器Freeline——集百家之长</h2><h3 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h3><ul>\n<li>Freeline是蚂蚁金服旗下一站式理财平台蚂蚁聚宝团队在Android平台上的量身定做的一个基于动态替换的编译方案</li>\n<li>Freeline 借鉴了layoutCast、buck, instant run 的思想和方法，在其他增量编译方案上做了各种优化和性能的提升</li>\n</ul>\n<h3 id=\"Freeline-整体工作流程\"><a href=\"#Freeline-整体工作流程\" class=\"headerlink\" title=\"Freeline 整体工作流程\"></a>Freeline 整体工作流程</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/freeline7.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p><br></p>\n<ul>\n<li>PC端与手机建立TCP长连接</li>\n<li>扫描各个子工程文件变化</li>\n<li>各个子工程的增量dex构建、增量资源包构建</li>\n<li>合并所有工程dex</li>\n<li>传输增量包</li>\n<li>App 更新代码或资源，刷新或重启</li>\n</ul>\n<h3 id=\"单个工程流程\"><a href=\"#单个工程流程\" class=\"headerlink\" title=\"单个工程流程\"></a>单个工程流程</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/freeline8.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<h4 id=\"几个重要的模块\"><a href=\"#几个重要的模块\" class=\"headerlink\" title=\"几个重要的模块\"></a>几个重要的模块</h4><h5 id=\"Python-实现任务调度（调度中心、发号施令）\"><a href=\"#Python-实现任务调度（调度中心、发号施令）\" class=\"headerlink\" title=\"Python 实现任务调度（调度中心、发号施令）\"></a>Python 实现任务调度（调度中心、发号施令）</h5><p>build_commands.py   builder.py<br>各种命令, 各种构建</p>\n<p>freeline_build.py  gradle_clean_build.py  gradle_inc_build.py<br>task拓扑序列构建,</p>\n<p>task_engine.py<br>任务并发执行，依赖的模块在进行构建时，当前task.wait()，当其依赖执行结束，再执行此task</p>\n<p>android_tools.py<br>建立连接、安装apk、一些辅助类</p>\n<p>gradle_tools.py<br>Gradle执行的辅助类，扫描各个文件(GradleScanChangedFilesCommand)、资源，是否有变化、存储信息</p>\n<p>sync_client.py<br>将代码、资源同步到手机</p>\n<h5 id=\"Gradle-Plugin-负责构建任务、代码注入等\"><a href=\"#Gradle-Plugin-负责构建任务、代码注入等\" class=\"headerlink\" title=\"Gradle-Plugin 负责构建任务、代码注入等\"></a>Gradle-Plugin 负责构建任务、代码注入等</h5><p>注意：对于低版本的gradle插件，则不能使用 transform 时来进行字节码修改，要通过 preDex 这个 task 进行字节码的修改</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> (!it.moduleVersion.startsWith(<span class=\"string\">\"1.5\"</span>)</div><div class=\"line\">        &amp;&amp; !it.moduleVersion.startsWith(<span class=\"string\">\"2\"</span>)) &#123;</div><div class=\"line\">    isLowerVersion = <span class=\"literal\">true</span></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><br></p>\n<h5 id=\"Freeline-runtime-主要处理-设备连接，增量代码、资源的更新\"><a href=\"#Freeline-runtime-主要处理-设备连接，增量代码、资源的更新\" class=\"headerlink\" title=\"Freeline-runtime  主要处理 设备连接，增量代码、资源的更新\"></a>Freeline-runtime  主要处理 设备连接，增量代码、资源的更新</h5><p>具体参考源码查看，此处不再贴</p>\n<h4 id=\"代码增量实现\"><a href=\"#代码增量实现\" class=\"headerlink\" title=\"代码增量实现\"></a>代码增量实现</h4><p>使用 Qzone 的思路进行实现：<br>DexUtils:<br>    分别对 4.0 以上和以下的做兼容，具体看代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">try</span> &#123;</div><div class=\"line\">   Object newDexElements;</div><div class=\"line\">   <span class=\"keyword\">int</span> dexLength;</div><div class=\"line\">   <span class=\"keyword\">if</span> (VERSION.SDK_INT &gt;= <span class=\"number\">14</span>) &#123;</div><div class=\"line\">       pathListField = ReflectUtil.fieldGetOrg(classLoader, Class.forName(<span class=\"string\">\"dalvik.system.BaseDexClassLoader\"</span>), <span class=\"string\">\"pathList\"</span>);</div><div class=\"line\">       fDexElements = ReflectUtil.fieldGetOrg(pathListField.get(classLoader), <span class=\"string\">\"dexElements\"</span>);</div><div class=\"line\">       Object e = fDexElements.get(pathListField.get(classLoader));</div><div class=\"line\">       dstObject = e;</div><div class=\"line\">       dexFiles = <span class=\"keyword\">new</span> DexFile[Array.getLength(e)];</div><div class=\"line\">       <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; Array.getLength(e); ++i) &#123;</div><div class=\"line\">           newDexElements = Array.get(e, i);</div><div class=\"line\">           dexFiles[i] = (DexFile) ReflectUtil.fieldGet(newDexElements, <span class=\"string\">\"dexFile\"</span>);</div><div class=\"line\">       &#125;</div><div class=\"line\">   &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">       pathListField = ReflectUtil.fieldGetOrg(classLoader, <span class=\"string\">\"mDexs\"</span>);</div><div class=\"line\">       dstObject = pathListField.get(classLoader);</div><div class=\"line\">       dexFiles = <span class=\"keyword\">new</span> DexFile[Array.getLength(dstObject)];</div><div class=\"line\">       <span class=\"keyword\">for</span> (dexLength = <span class=\"number\">0</span>; dexLength &lt; Array.getLength(dstObject); ++dexLength) &#123;</div><div class=\"line\">           dexFiles[dexLength] = (DexFile) Array.get(dstObject, dexLength);</div><div class=\"line\">       &#125;</div><div class=\"line\">   &#125;</div><div class=\"line\">   dexLength = Array.getLength(dstObject) + <span class=\"number\">1</span>;</div><div class=\"line\">   newDexElements = Array.newInstance(fDexElements.getType().getComponentType(), dexLength);</div><div class=\"line\"></div><div class=\"line\">   DexClassLoader dynamicDex = <span class=\"keyword\">new</span> DexClassLoader(dex.getAbsolutePath(), opt.getAbsolutePath(), <span class=\"keyword\">null</span>, classLoader.getParent());</div><div class=\"line\">   Log.i(TAG, <span class=\"string\">\"after opt, dex len:\"</span> + dex.length() + <span class=\"string\">\"; opt len:\"</span> + opt.length());</div><div class=\"line\">   Object pathList = pathListField.get(dynamicDex);</div><div class=\"line\">   Object dexElements = fDexElements.get(pathList);</div><div class=\"line\">   Object firstDexElement = Array.get(dexElements, <span class=\"number\">0</span>);</div><div class=\"line\">   Array.set(newDexElements, <span class=\"number\">0</span>, firstDexElement);</div><div class=\"line\"></div><div class=\"line\">   <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; dexLength - <span class=\"number\">1</span>; ++i) &#123;</div><div class=\"line\">       Object element = Array.get(dstObject, i);</div><div class=\"line\">       Array.set(newDexElements, i + <span class=\"number\">1</span>, element);</div><div class=\"line\">   &#125;</div><div class=\"line\"></div><div class=\"line\">   <span class=\"keyword\">if</span> (VERSION.SDK_INT &gt;= <span class=\"number\">14</span>) &#123;</div><div class=\"line\">       fDexElements.set(pathListField.get(classLoader), newDexElements);</div><div class=\"line\">   &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">       pathListField.set(classLoader, newDexElements);</div><div class=\"line\">   &#125;</div><div class=\"line\">   <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">   Log.e(TAG, <span class=\"string\">\"fail to override classloader \"</span> + classLoader + <span class=\"string\">\" with \"</span> + dex.getAbsolutePath(), e);</div><div class=\"line\">   <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>Preverify 过程：</strong><br>dex2opt过程中，若发现当前类中，存在一个直接引用类也和当前类在同一个dex中，则当前类会被打上 verified=true 的标记。下次加载时，则会判断这个类所在的dex是否是同一个dex</p>\n<p><strong>如何避免 preverify 异常？</strong><br>在 dexopt 过程中，Class_isPreverfied 问题：<br>通过在每个类的构造方式，加入一个 另一个dex的 类，让其preverify 失效，这样就可以让增量的class被加载了<br>这也是Google的一个安全策略</p>\n<p>相关知识可参考：<br>直接引用类的定义：<br><a href=\"https://zhuanlan.zhihu.com/p/20308548\" target=\"_blank\" rel=\"external\">https://zhuanlan.zhihu.com/p/20308548</a><br>dex分包过程，dexopt介绍：<br><a href=\"https://segmentfault.com/a/1190000004053072\" target=\"_blank\" rel=\"external\">https://segmentfault.com/a/1190000004053072</a></p>\n<h4 id=\"资源的更新逻辑\"><a href=\"#资源的更新逻辑\" class=\"headerlink\" title=\"资源的更新逻辑\"></a>资源的更新逻辑</h4><p>根据最新的 R.java 文件 拿到 各个资源id  生成 public.xml 和 ids.xml，用于解决资源id 冲突    id-gen-tool 工具<br> <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/freeline9.png\" alt=\"\"></p>\n<p>对于增量的 资源进行 Freelineaapt 编译，未做过更改的资源，直接使用 backup 中的资源，再打成一个 增量包：inc.pack</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/freeline10.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>增量包中，只包含 增量的资源，全量的arsc 和 AndroidManifest.xml</p>\n<p>Resources.arsc 并不一定会打进 pack 中，只有 资源的更改引起 arsc 变化时，才打入包中，arsc 的体积也是占一定比例的</p>\n<p>手机端，资源更新生效：<br>    通过借鉴 instant run的方式，找到 resDir 的路径，将pack解压覆盖至该目录，然后 pruneResourceCaches,刷新UI</p>\n<h2 id=\"Freeline-使用及相关问题\"><a href=\"#Freeline-使用及相关问题\" class=\"headerlink\" title=\"Freeline 使用及相关问题\"></a>Freeline 使用及相关问题</h2><p>不再浪费篇幅，直接贴出我总结的内容：</p>\n<p><a href=\"https://github.com/fenglincanyi/Study/blob/master/Freeline%E7%9B%B8%E5%85%B3/Freeline_use.md\" target=\"_blank\" rel=\"external\">https://github.com/fenglincanyi/Study/blob/master/Freeline%E7%9B%B8%E5%85%B3/Freeline_use.md</a></p>\n<h2 id=\"实例分析\"><a href=\"#实例分析\" class=\"headerlink\" title=\"实例分析\"></a>实例分析</h2><blockquote>\n<p>我们重点关注 项目目录下的 <strong>app/build/freeline</strong></p>\n</blockquote>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/freeline11.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>更改代码后，再执行增量编译后，观察此目录：<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/freeline12.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure></p>\n<p>只生成了最新的更改过的文件<br>反编译 dex 目录下的 classes.dex 得出, 此文件里全是更改过的类文件：<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/freeline13.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure></p>\n<p>换个目录看看：<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/freeline14.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure></p>\n<p>对 hackload.dex 反编译：<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/freeline15.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure></p>\n<p>发现这个 hackload.dex 就是插桩时候，使用的单独的dex，里面是用来避免 preverify 问题的类<br>随后，我们看看编译后的apk 文件，解压缩，反编译看看任意一个classes.dex:<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/freeline16.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure><br>发现，确实是在构造方法里插入一个其他dex中的类，来避免打上 verified 的标识，验证了上面的做法。<br><br><br>好，松一口气，代码更新算是说完了…</p>\n<hr>\n\n\n<p>下面，我们看看资源是怎么更新的…</p>\n<p>前面说过：<br>是通过反向对 R.java 文件摘出 资源 id信息，放在 ids.xml 和 public.xml 中，那我们来看看这两个文件：<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/freeline17.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure></p>\n<p><strong>ids.xml:</strong><br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/freeline18.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure></p>\n<p>里面是压缩过的id信息，就是我们在写布局文件的那些内容</p>\n<p><strong>public.xml:</strong><br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/freeline19.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure></p>\n<p>此处只是部分，public.xml 文件记录了 name 和 id 之间的映射</p>\n<p>一个普通的 R.java 文件，包含了以下资源信息<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/freeline20.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure><br>所以，这里的 ids.xml 只存储了 我们自己写的 id 信息，而 public.xml 存储了 R.java 完整信息。<br>ids.xml 是为了处理资源id冲突问题，预先准备的文件</p>\n<p><strong>再来看看 增量资源相关的：</strong></p>\n<p>app.pack 文件压缩了所有的资源文件，包括assets 和 res 目录下的资源文件，和清单文件，资源索引表</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/freeline21.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>解压 app.pack 文件后：</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/freeline22.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>扩展一下，看看 resource.arsc 文件：<br>此文件的并不是APP一下子解析加载的，是按需加载，<br>它是一种二进制索引表,对应了app里所有资源name,及id<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/freeline23.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ul>\n<li>整个 Freeline 项目的源码很值得研究，里面有好多的实现思路和解决方法都是精益求精的。把增量和优化做到极致。</li>\n<li>充分的借鉴了 layoucast 的代码更新思路，Buck 的并发构建、有向拓扑的规则、instant run的字节码修改、monkeyPatcher的实现方法，另外借助 gradle transform 插件及 preDex task时机进行字节码修改，真的是集百家之长。<br><strong>工作启示：</strong></li>\n<li>解决方法永远会有更优的，只是你暂时没找到</li>\n<li>复杂的工程都是一点一点做出来的</li>\n</ul>\n<h2 id=\"部分源码注释\"><a href=\"#部分源码注释\" class=\"headerlink\" title=\"部分源码注释\"></a>部分源码注释</h2><p>阅读 freeline 的 python模块代码的注释：<br><a href=\"https://github.com/fenglincanyi/Study/tree/master/Freeline%E7%9B%B8%E5%85%B3/freeline%E7%9B%B8%E5%85%B3%E6%BA%90%E7%A0%81%E6%B3%A8%E9%87%8A/freeline/freeline/freeline\" target=\"_blank\" rel=\"external\">https://github.com/fenglincanyi/Study/tree/master/Freeline%E7%9B%B8%E5%85%B3/freeline%E7%9B%B8%E5%85%B3%E6%BA%90%E7%A0%81%E6%B3%A8%E9%87%8A/freeline/freeline/freeline</a></p>\n<h2 id=\"补充点\"><a href=\"#补充点\" class=\"headerlink\" title=\"补充点\"></a>补充点</h2><p>想说的太多了，自己写个配注。。。</p>\n<ul>\n<li><p>Gradle plugin 模块：<br>负责构建时，做的一些逻辑<br>如：项目描述文件（FreelineInitializer.groovy 执行初始化时，生成项目描述文件）</p>\n</li>\n<li><p>reelineInjector.groovy 里的  hackClass  -&gt; new FreelineClassVisitor -&gt; 进行字节码的注入<br>这个思路借鉴了instant run的做法</p>\n</li>\n<li><p>Freeline-runtime/DexUtils<br>处理dex增量包的逻辑</p>\n</li>\n<li><p>Instant-run-serve 项目下的 monkeyPatcher 被Freeline直接复用了</p>\n</li>\n<li><p>Gradle transform plugin<br>transform 是在java文件编译成class之后，合成dex之前，此期间执行的，来修改class内容</p>\n</li>\n</ul>\n<p>transform 解释：<br><a href=\"http://blog.csdn.net/sbsujjbcy/article/details/50839263\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/sbsujjbcy/article/details/50839263</a><br>源码位置：<br><a href=\"https://android.googlesource.com/platform/tools/base/+/gradle_2.0.0/build-system/gradle-core/\" target=\"_blank\" rel=\"external\">https://android.googlesource.com/platform/tools/base/+/gradle_2.0.0/build-system/gradle-core/</a></p>\n<p>instant run 中涉及到的类：用到了ASM<br>IncrementalChangeVisitor.java<br>IncrementalSupportVisitor.java<br>IncrementalVisitor.java</p>\n<p>使用到，调用 task 命令，传入参数：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">command += <span class=\"string\">' -P freelineBuild=true'</span> <span class=\"comment\"># 使用 gradle 方式，加入了freelineBuild 属性 ，在 FreelinePlugin.groovy 中有体现</span></div></pre></td></tr></table></figure></p>\n","excerpt":"","more":"<blockquote>\n<p>自从去年10月份，使用Freeline 感觉非常不错，开发效率提升数倍。由于工作原因，一直将这篇总结拖到现在。ok，现在好好总结下。。。</p>\n</blockquote>\n<h2 id=\"前言：Android-开发者之痛\"><a href=\"#前言：Android-开发者之痛\" class=\"headerlink\" title=\"前言：Android 开发者之痛\"></a>前言：Android 开发者之痛</h2><p>普通的编译流程：<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/freeline1.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure><br>存在问题：</p>\n<ul>\n<li>存在问题：</li>\n<li>全量编译</li>\n<li>没有缓存机制</li>\n<li>单流程构建流程</li>\n<li>代码和资源越来越多，项目编译越来越慢</li>\n</ul>\n<p>现状：</p>\n<ul>\n<li>Windows: 3.5min</li>\n<li>Mac: 2.5min<br>  提高机器硬件已不能解决开发耗时严重的问题了…</li>\n</ul>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/freeline2.jpeg\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>如何解决？</p>\n<ol>\n<li>配置Gradle 参数、调整tasks间执行顺序、依赖</li>\n<li>可否实现增量编译</li>\n<li>组件化，独立module开发、维护</li>\n</ol>\n<h2 id=\"探索之路\"><a href=\"#探索之路\" class=\"headerlink\" title=\"探索之路\"></a>探索之路</h2><h3 id=\"Buck\"><a href=\"#Buck\" class=\"headerlink\" title=\"Buck\"></a>Buck</h3><p>—— Facebook</p>\n<ul>\n<li>并发编译，建立多个并发子任务依赖关系，有向拓扑图，通过多线程并发把各个子节点构建出来，充分利用多核优势</li>\n<li><p>BUCK建立了一套完善的依赖规则以及细化的缓存系统来缩减编译时间</p>\n<p>  增量构建的方式：以工程目录为单位进行增量构建，发生变更时候，变更的工程，以及该工程作为父节点或祖先节点的工程，均需要重新构建，构建完这些变更涉及的工程后，Buck需要重新走一次合并各工程DEX,对齐，签名，打包APK的过程,构建完毕后，继续走安装流程</p>\n</li>\n</ul>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/freeline3.gif\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>缺点：</p>\n<ul>\n<li>增量机制并不完善</li>\n<li>引入工程量大，入侵性强</li>\n<li>Windows平台不支持</li>\n</ul>\n<p>后传：<br><strong>OKBuck</strong><br>    OkBuck 的目标，是通过读取工程的 Gradle 配置，自动生成 BUCK 脚本，免去开发者下载依赖的 jar/aar 文件，编写、维护 BUCK 脚本、处理依赖之间的冲突等繁琐又容易出错的工作。</p>\n<h3 id=\"LayoutCast\"><a href=\"#LayoutCast\" class=\"headerlink\" title=\"LayoutCast\"></a>LayoutCast</h3><p>——屠毅敏（AndroidDynamicLoader ）</p>\n<p>资源文件更改：<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/freeline4.gif\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure></p>\n<p>代码变动：<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/freeline5.gif\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure></p>\n<p>编译速度对比：<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/freeline6.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure></p>\n<p><strong>原理实现</strong>：</p>\n<ul>\n<li>利用反射，将修改的patch dex 插入到 dex Elements[] 最前面 </li>\n<li>资源修改：通过运行时反射,拿到 R.class 字段，得出 ids.xml 和 pubilc.xml（ids: 我们定义的 view 的 id，public：包含ids的信息，及layout、drawable、color、string、dimen、style、attr）</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ArtUtils</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">overrideClassLoader</span><span class=\"params\">(ClassLoader cl, File dex, File opt)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            ClassLoader bootstrap = cl.getParent();</div><div class=\"line\">            Field fPathList = BaseDexClassLoader.class.getDeclaredField(<span class=\"string\">\"pathList\"</span>);</div><div class=\"line\">            fPathList.setAccessible(<span class=\"keyword\">true</span>);</div><div class=\"line\">            Object pathList = fPathList.get(cl);</div><div class=\"line\">            Class cDexPathList = bootstrap.loadClass(<span class=\"string\">\"dalvik.system.DexPathList\"</span>);</div><div class=\"line\">            Field fDexElements = cDexPathList.getDeclaredField(<span class=\"string\">\"dexElements\"</span>);</div><div class=\"line\">            fDexElements.setAccessible(<span class=\"keyword\">true</span>);</div><div class=\"line\">            Object dexElements = fDexElements.get(pathList);</div><div class=\"line\">            DexClassLoader cl2 = <span class=\"keyword\">new</span> DexClassLoader(dex.getAbsolutePath(), opt.getAbsolutePath(), <span class=\"keyword\">null</span>, bootstrap);</div><div class=\"line\">            Object pathList2 = fPathList.get(cl2);</div><div class=\"line\">            Object dexElements2 = fDexElements.get(pathList2);</div><div class=\"line\">            Object element2 = Array.get(dexElements2, <span class=\"number\">0</span>);</div><div class=\"line\">            <span class=\"keyword\">int</span> n = Array.getLength(dexElements) + <span class=\"number\">1</span>;</div><div class=\"line\">            Object newDexElements = Array.newInstance(fDexElements.getType().getComponentType(), n);</div><div class=\"line\">            Array.set(newDexElements, <span class=\"number\">0</span>, element2); <span class=\"comment\">// 插入到数组最前面</span></div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n - <span class=\"number\">1</span>; i++) &#123;</div><div class=\"line\">                Object element = Array.get(dexElements, i);</div><div class=\"line\">                Array.set(newDexElements, i + <span class=\"number\">1</span>, element);</div><div class=\"line\">                <span class=\"comment\">// 其余 dex 元素依次后移</span></div><div class=\"line\">            &#125;</div><div class=\"line\">            fDexElements.set(pathList, newDexElements);</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">            Log.e(<span class=\"string\">\"lcast\"</span>, <span class=\"string\">\"fail to override classloader \"</span> + cl + <span class=\"string\">\" with \"</span> + dex, e);</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>缺点：</p>\n<ul>\n<li>当前的修改，会把之前的修改一起带进来，一起增量，修改次数多时，速度也会越来越慢（只是针对第一次build后的基线包做的增量修改，修改多次会带上很多的增量文件）</li>\n<li>资源修改是利用反射，项目中资源越来越多时，速度提升并不明显</li>\n<li>不支持Android 5.0以下的设备</li>\n</ul>\n<h3 id=\"Instant-Run\"><a href=\"#Instant-Run\" class=\"headerlink\" title=\"Instant-Run\"></a>Instant-Run</h3><p>原理实现</p>\n<ul>\n<li>第一次编译时，在transform 时通过ASM对每一个方法加入 局部变量 change，更改代码后，会将 更改的类 加上 $override ，将最新类 push 到 手机上。就是通过 hack method 的方式来实现动态代码替换的</li>\n<li>资源的修改更新，通过反射的方式，生成一个 AssetManager，调用 相关外界加载 资源的方法，将最新的资源包加载进来（全量的包），然后修剪删除缓存，刷新UI使之生效</li>\n</ul>\n<p>缺点：</p>\n<ul>\n<li>资源文件仍然是一个全量的过程，资源文件越大，速度并没有明显提升</li>\n<li>无法debug，因为是 方法的hack，无法追到 堆栈信息</li>\n<li>只支持Android5.0以上</li>\n</ul>\n<h3 id=\"JRebel-for-Android\"><a href=\"#JRebel-for-Android\" class=\"headerlink\" title=\"JRebel for Android\"></a>JRebel for Android</h3><p><a href=\"https://zeroturnaround.com/software/jrebel-for-android/features/\">https://zeroturnaround.com/software/jrebel-for-android/features/</a></p>\n<p>缺点</p>\n<ul>\n<li>收费</li>\n<li>Crash 后需要重新全量编译，第一次编译很慢，亲测结果</li>\n</ul>\n<h2 id=\"神器Freeline——集百家之长\"><a href=\"#神器Freeline——集百家之长\" class=\"headerlink\" title=\"神器Freeline——集百家之长\"></a>神器Freeline——集百家之长</h2><h3 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h3><ul>\n<li>Freeline是蚂蚁金服旗下一站式理财平台蚂蚁聚宝团队在Android平台上的量身定做的一个基于动态替换的编译方案</li>\n<li>Freeline 借鉴了layoutCast、buck, instant run 的思想和方法，在其他增量编译方案上做了各种优化和性能的提升</li>\n</ul>\n<h3 id=\"Freeline-整体工作流程\"><a href=\"#Freeline-整体工作流程\" class=\"headerlink\" title=\"Freeline 整体工作流程\"></a>Freeline 整体工作流程</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/freeline7.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p><br></p>\n<ul>\n<li>PC端与手机建立TCP长连接</li>\n<li>扫描各个子工程文件变化</li>\n<li>各个子工程的增量dex构建、增量资源包构建</li>\n<li>合并所有工程dex</li>\n<li>传输增量包</li>\n<li>App 更新代码或资源，刷新或重启</li>\n</ul>\n<h3 id=\"单个工程流程\"><a href=\"#单个工程流程\" class=\"headerlink\" title=\"单个工程流程\"></a>单个工程流程</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/freeline8.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<h4 id=\"几个重要的模块\"><a href=\"#几个重要的模块\" class=\"headerlink\" title=\"几个重要的模块\"></a>几个重要的模块</h4><h5 id=\"Python-实现任务调度（调度中心、发号施令）\"><a href=\"#Python-实现任务调度（调度中心、发号施令）\" class=\"headerlink\" title=\"Python 实现任务调度（调度中心、发号施令）\"></a>Python 实现任务调度（调度中心、发号施令）</h5><p>build_commands.py   builder.py<br>各种命令, 各种构建</p>\n<p>freeline_build.py  gradle_clean_build.py  gradle_inc_build.py<br>task拓扑序列构建,</p>\n<p>task_engine.py<br>任务并发执行，依赖的模块在进行构建时，当前task.wait()，当其依赖执行结束，再执行此task</p>\n<p>android_tools.py<br>建立连接、安装apk、一些辅助类</p>\n<p>gradle_tools.py<br>Gradle执行的辅助类，扫描各个文件(GradleScanChangedFilesCommand)、资源，是否有变化、存储信息</p>\n<p>sync_client.py<br>将代码、资源同步到手机</p>\n<h5 id=\"Gradle-Plugin-负责构建任务、代码注入等\"><a href=\"#Gradle-Plugin-负责构建任务、代码注入等\" class=\"headerlink\" title=\"Gradle-Plugin 负责构建任务、代码注入等\"></a>Gradle-Plugin 负责构建任务、代码注入等</h5><p>注意：对于低版本的gradle插件，则不能使用 transform 时来进行字节码修改，要通过 preDex 这个 task 进行字节码的修改</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> (!it.moduleVersion.startsWith(<span class=\"string\">\"1.5\"</span>)</div><div class=\"line\">        &amp;&amp; !it.moduleVersion.startsWith(<span class=\"string\">\"2\"</span>)) &#123;</div><div class=\"line\">    isLowerVersion = <span class=\"literal\">true</span></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><br></p>\n<h5 id=\"Freeline-runtime-主要处理-设备连接，增量代码、资源的更新\"><a href=\"#Freeline-runtime-主要处理-设备连接，增量代码、资源的更新\" class=\"headerlink\" title=\"Freeline-runtime  主要处理 设备连接，增量代码、资源的更新\"></a>Freeline-runtime  主要处理 设备连接，增量代码、资源的更新</h5><p>具体参考源码查看，此处不再贴</p>\n<h4 id=\"代码增量实现\"><a href=\"#代码增量实现\" class=\"headerlink\" title=\"代码增量实现\"></a>代码增量实现</h4><p>使用 Qzone 的思路进行实现：<br>DexUtils:<br>    分别对 4.0 以上和以下的做兼容，具体看代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">try</span> &#123;</div><div class=\"line\">   Object newDexElements;</div><div class=\"line\">   <span class=\"keyword\">int</span> dexLength;</div><div class=\"line\">   <span class=\"keyword\">if</span> (VERSION.SDK_INT &gt;= <span class=\"number\">14</span>) &#123;</div><div class=\"line\">       pathListField = ReflectUtil.fieldGetOrg(classLoader, Class.forName(<span class=\"string\">\"dalvik.system.BaseDexClassLoader\"</span>), <span class=\"string\">\"pathList\"</span>);</div><div class=\"line\">       fDexElements = ReflectUtil.fieldGetOrg(pathListField.get(classLoader), <span class=\"string\">\"dexElements\"</span>);</div><div class=\"line\">       Object e = fDexElements.get(pathListField.get(classLoader));</div><div class=\"line\">       dstObject = e;</div><div class=\"line\">       dexFiles = <span class=\"keyword\">new</span> DexFile[Array.getLength(e)];</div><div class=\"line\">       <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; Array.getLength(e); ++i) &#123;</div><div class=\"line\">           newDexElements = Array.get(e, i);</div><div class=\"line\">           dexFiles[i] = (DexFile) ReflectUtil.fieldGet(newDexElements, <span class=\"string\">\"dexFile\"</span>);</div><div class=\"line\">       &#125;</div><div class=\"line\">   &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">       pathListField = ReflectUtil.fieldGetOrg(classLoader, <span class=\"string\">\"mDexs\"</span>);</div><div class=\"line\">       dstObject = pathListField.get(classLoader);</div><div class=\"line\">       dexFiles = <span class=\"keyword\">new</span> DexFile[Array.getLength(dstObject)];</div><div class=\"line\">       <span class=\"keyword\">for</span> (dexLength = <span class=\"number\">0</span>; dexLength &lt; Array.getLength(dstObject); ++dexLength) &#123;</div><div class=\"line\">           dexFiles[dexLength] = (DexFile) Array.get(dstObject, dexLength);</div><div class=\"line\">       &#125;</div><div class=\"line\">   &#125;</div><div class=\"line\">   dexLength = Array.getLength(dstObject) + <span class=\"number\">1</span>;</div><div class=\"line\">   newDexElements = Array.newInstance(fDexElements.getType().getComponentType(), dexLength);</div><div class=\"line\"></div><div class=\"line\">   DexClassLoader dynamicDex = <span class=\"keyword\">new</span> DexClassLoader(dex.getAbsolutePath(), opt.getAbsolutePath(), <span class=\"keyword\">null</span>, classLoader.getParent());</div><div class=\"line\">   Log.i(TAG, <span class=\"string\">\"after opt, dex len:\"</span> + dex.length() + <span class=\"string\">\"; opt len:\"</span> + opt.length());</div><div class=\"line\">   Object pathList = pathListField.get(dynamicDex);</div><div class=\"line\">   Object dexElements = fDexElements.get(pathList);</div><div class=\"line\">   Object firstDexElement = Array.get(dexElements, <span class=\"number\">0</span>);</div><div class=\"line\">   Array.set(newDexElements, <span class=\"number\">0</span>, firstDexElement);</div><div class=\"line\"></div><div class=\"line\">   <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; dexLength - <span class=\"number\">1</span>; ++i) &#123;</div><div class=\"line\">       Object element = Array.get(dstObject, i);</div><div class=\"line\">       Array.set(newDexElements, i + <span class=\"number\">1</span>, element);</div><div class=\"line\">   &#125;</div><div class=\"line\"></div><div class=\"line\">   <span class=\"keyword\">if</span> (VERSION.SDK_INT &gt;= <span class=\"number\">14</span>) &#123;</div><div class=\"line\">       fDexElements.set(pathListField.get(classLoader), newDexElements);</div><div class=\"line\">   &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">       pathListField.set(classLoader, newDexElements);</div><div class=\"line\">   &#125;</div><div class=\"line\">   <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">   Log.e(TAG, <span class=\"string\">\"fail to override classloader \"</span> + classLoader + <span class=\"string\">\" with \"</span> + dex.getAbsolutePath(), e);</div><div class=\"line\">   <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>Preverify 过程：</strong><br>dex2opt过程中，若发现当前类中，存在一个直接引用类也和当前类在同一个dex中，则当前类会被打上 verified=true 的标记。下次加载时，则会判断这个类所在的dex是否是同一个dex</p>\n<p><strong>如何避免 preverify 异常？</strong><br>在 dexopt 过程中，Class_isPreverfied 问题：<br>通过在每个类的构造方式，加入一个 另一个dex的 类，让其preverify 失效，这样就可以让增量的class被加载了<br>这也是Google的一个安全策略</p>\n<p>相关知识可参考：<br>直接引用类的定义：<br><a href=\"https://zhuanlan.zhihu.com/p/20308548\">https://zhuanlan.zhihu.com/p/20308548</a><br>dex分包过程，dexopt介绍：<br><a href=\"https://segmentfault.com/a/1190000004053072\">https://segmentfault.com/a/1190000004053072</a></p>\n<h4 id=\"资源的更新逻辑\"><a href=\"#资源的更新逻辑\" class=\"headerlink\" title=\"资源的更新逻辑\"></a>资源的更新逻辑</h4><p>根据最新的 R.java 文件 拿到 各个资源id  生成 public.xml 和 ids.xml，用于解决资源id 冲突    id-gen-tool 工具<br> <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/freeline9.png\" alt=\"\"></p>\n<p>对于增量的 资源进行 Freelineaapt 编译，未做过更改的资源，直接使用 backup 中的资源，再打成一个 增量包：inc.pack</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/freeline10.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>增量包中，只包含 增量的资源，全量的arsc 和 AndroidManifest.xml</p>\n<p>Resources.arsc 并不一定会打进 pack 中，只有 资源的更改引起 arsc 变化时，才打入包中，arsc 的体积也是占一定比例的</p>\n<p>手机端，资源更新生效：<br>    通过借鉴 instant run的方式，找到 resDir 的路径，将pack解压覆盖至该目录，然后 pruneResourceCaches,刷新UI</p>\n<h2 id=\"Freeline-使用及相关问题\"><a href=\"#Freeline-使用及相关问题\" class=\"headerlink\" title=\"Freeline 使用及相关问题\"></a>Freeline 使用及相关问题</h2><p>不再浪费篇幅，直接贴出我总结的内容：</p>\n<p><a href=\"https://github.com/fenglincanyi/Study/blob/master/Freeline%E7%9B%B8%E5%85%B3/Freeline_use.md\">https://github.com/fenglincanyi/Study/blob/master/Freeline%E7%9B%B8%E5%85%B3/Freeline_use.md</a></p>\n<h2 id=\"实例分析\"><a href=\"#实例分析\" class=\"headerlink\" title=\"实例分析\"></a>实例分析</h2><blockquote>\n<p>我们重点关注 项目目录下的 <strong>app/build/freeline</strong></p>\n</blockquote>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/freeline11.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>更改代码后，再执行增量编译后，观察此目录：<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/freeline12.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure></p>\n<p>只生成了最新的更改过的文件<br>反编译 dex 目录下的 classes.dex 得出, 此文件里全是更改过的类文件：<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/freeline13.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure></p>\n<p>换个目录看看：<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/freeline14.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure></p>\n<p>对 hackload.dex 反编译：<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/freeline15.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure></p>\n<p>发现这个 hackload.dex 就是插桩时候，使用的单独的dex，里面是用来避免 preverify 问题的类<br>随后，我们看看编译后的apk 文件，解压缩，反编译看看任意一个classes.dex:<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/freeline16.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure><br>发现，确实是在构造方法里插入一个其他dex中的类，来避免打上 verified 的标识，验证了上面的做法。<br><br><br>好，松一口气，代码更新算是说完了…</p>\n<hr/>\n\n\n<p>下面，我们看看资源是怎么更新的…</p>\n<p>前面说过：<br>是通过反向对 R.java 文件摘出 资源 id信息，放在 ids.xml 和 public.xml 中，那我们来看看这两个文件：<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/freeline17.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure></p>\n<p><strong>ids.xml:</strong><br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/freeline18.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure></p>\n<p>里面是压缩过的id信息，就是我们在写布局文件的那些内容</p>\n<p><strong>public.xml:</strong><br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/freeline19.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure></p>\n<p>此处只是部分，public.xml 文件记录了 name 和 id 之间的映射</p>\n<p>一个普通的 R.java 文件，包含了以下资源信息<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/freeline20.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure><br>所以，这里的 ids.xml 只存储了 我们自己写的 id 信息，而 public.xml 存储了 R.java 完整信息。<br>ids.xml 是为了处理资源id冲突问题，预先准备的文件</p>\n<p><strong>再来看看 增量资源相关的：</strong></p>\n<p>app.pack 文件压缩了所有的资源文件，包括assets 和 res 目录下的资源文件，和清单文件，资源索引表</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/freeline21.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>解压 app.pack 文件后：</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/freeline22.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>扩展一下，看看 resource.arsc 文件：<br>此文件的并不是APP一下子解析加载的，是按需加载，<br>它是一种二进制索引表,对应了app里所有资源name,及id<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/freeline23.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ul>\n<li>整个 Freeline 项目的源码很值得研究，里面有好多的实现思路和解决方法都是精益求精的。把增量和优化做到极致。</li>\n<li>充分的借鉴了 layoucast 的代码更新思路，Buck 的并发构建、有向拓扑的规则、instant run的字节码修改、monkeyPatcher的实现方法，另外借助 gradle transform 插件及 preDex task时机进行字节码修改，真的是集百家之长。<br><strong>工作启示：</strong></li>\n<li>解决方法永远会有更优的，只是你暂时没找到</li>\n<li>复杂的工程都是一点一点做出来的</li>\n</ul>\n<h2 id=\"部分源码注释\"><a href=\"#部分源码注释\" class=\"headerlink\" title=\"部分源码注释\"></a>部分源码注释</h2><p>阅读 freeline 的 python模块代码的注释：<br><a href=\"https://github.com/fenglincanyi/Study/tree/master/Freeline%E7%9B%B8%E5%85%B3/freeline%E7%9B%B8%E5%85%B3%E6%BA%90%E7%A0%81%E6%B3%A8%E9%87%8A/freeline/freeline/freeline\">https://github.com/fenglincanyi/Study/tree/master/Freeline%E7%9B%B8%E5%85%B3/freeline%E7%9B%B8%E5%85%B3%E6%BA%90%E7%A0%81%E6%B3%A8%E9%87%8A/freeline/freeline/freeline</a></p>\n<h2 id=\"补充点\"><a href=\"#补充点\" class=\"headerlink\" title=\"补充点\"></a>补充点</h2><p>想说的太多了，自己写个配注。。。</p>\n<ul>\n<li><p>Gradle plugin 模块：<br>负责构建时，做的一些逻辑<br>如：项目描述文件（FreelineInitializer.groovy 执行初始化时，生成项目描述文件）</p>\n</li>\n<li><p>reelineInjector.groovy 里的  hackClass  -&gt; new FreelineClassVisitor -&gt; 进行字节码的注入<br>这个思路借鉴了instant run的做法</p>\n</li>\n<li><p>Freeline-runtime/DexUtils<br>处理dex增量包的逻辑</p>\n</li>\n<li><p>Instant-run-serve 项目下的 monkeyPatcher 被Freeline直接复用了</p>\n</li>\n<li><p>Gradle transform plugin<br>transform 是在java文件编译成class之后，合成dex之前，此期间执行的，来修改class内容</p>\n</li>\n</ul>\n<p>transform 解释：<br><a href=\"http://blog.csdn.net/sbsujjbcy/article/details/50839263\">http://blog.csdn.net/sbsujjbcy/article/details/50839263</a><br>源码位置：<br><a href=\"https://android.googlesource.com/platform/tools/base/+/gradle_2.0.0/build-system/gradle-core/\">https://android.googlesource.com/platform/tools/base/+/gradle_2.0.0/build-system/gradle-core/</a></p>\n<p>instant run 中涉及到的类：用到了ASM<br>IncrementalChangeVisitor.java<br>IncrementalSupportVisitor.java<br>IncrementalVisitor.java</p>\n<p>使用到，调用 task 命令，传入参数：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">command += <span class=\"string\">' -P freelineBuild=true'</span> <span class=\"comment\"># 使用 gradle 方式，加入了freelineBuild 属性 ，在 FreelinePlugin.groovy 中有体现</span></div></pre></td></tr></table></figure></p>\n"},{"title":"Android 6.0适配","date":"2017-04-12T04:40:00.000Z","_content":"\n## Android 权限变更\n在 Android 6.0 之前，APP 的授权是通过在 manifest.xml 文件中，去注册相关权限，安装时就可以获得所有声明了的权限。而在 6.0 及以后的版本，这种在 manifest.xml 声明权限的做法，已经在一些权限上不适用了。\n在Android 6.0 及以后的系统中，用户可以自动打开或关闭任何应用的权限（设置 -> 应用权限）\n\n### 权限的划分\nAndroid 是基于 Linux 系统的，所以，对于每个文件都有个权限的概念。\n这次变化，主要将 Android 系统中的权限分为：\n* 正常权限：如很常见的 访问网络；\n* 危险权限：如访问手机状态、位置信息；\n* 特殊权限：如写设置、悬浮窗\n\n另外，还有一个 **权限组** 的概念：\n\n  任何权限都可属于一个权限组，包括正常权限和应用定义的权限\n所以，每个危险权限都属于不同的权限组中，Google已经定义好了这些归属。\n\n我们主要关注的危险权限和权限组如下：\n\n| 权限组      |     权限 |\n| :-------- | --------:|\n| CALENDAR    |   READ_CALENDAR<br/>WRITE_CALENDAR |\n| CAMERA    |   CAMERA |\n| CONTACTS    |   READ_CONTACTS<br/>WRITE_CONTACTS<br/>GET_ACCOUNTS |\n| LOCATION    |   ACCESS_FINE_LOCATION<br/>ACCESS_COARSE_LOCATION|\n| MICROPHONE    |   RECORD_AUDIO|\n| PHONE    |   READ_PHONE_STATE<br/>CALL_PHONE<br/>READ_CALL_LOG<br/>WRITE_CALL_LOG<br/>ADD_VOICEMAIL<br/>USE_SIP<br/>PROCESS_OUTGOING_CALLS|\n| SENSORS    |   BODY_SENSORS|\n| SMS    |   SEND_SMS<br/>RECEIVE_SMS<br/>READ_SMS<br/>RECEIVE_WAP_PUSH<br/>RECEIVE_MMS|\n| STORAGE    |   READ_EXTERNAL_STORAGE<br/>WRITE_EXTERNAL_STORAGE|\n\n> 如果已经申请到了某个组的某一个权限时，那么也同时拥有了该组的其他权限；只要拥有了同类中的一个，那么就拥有了该组的其他权限\n\n大部分的适配工作就是对以上的权限进行预处理，就OK了。\n\n### 不同版本运行，区别对待\n* 如果你的 targetSdkVersion <= 22，那么安装在 6.0 以上的手机的话，还是以老的授权方式（安装时期）对所有声明了的权限一次性授权。\n* 如果你的 targetSdkVersion > 22，那么安装在 6.0 以上的手机上，不光要在 manifest.xml 中声明，而且有一部分比较危险或者特殊的权限， 需要在 app 运行时期，来提前申请权限。一旦未申请而直接进行操作的话，会直接崩溃SecurityException。\n\n\n## 权限处理原则\nGoogle 对权限做了进一步要求之后，作为我们开发者，该如何作何权限的适配呢?\n官方也给出了几个建议：\n### 考虑使用 Intent\n我们一般可以使用以下 2 种方法，来执行某个任务：\n* 要求提供权限才能执行操作\n* 使用 intent，让其他应用来执行任务\n\n比如：\n我们要使用拍照的功能，那么我们可以请求 CAMERA 权限，然后可以直接访问相机，控制相机进行拍照；也可以不用申请 CAMERA 权限，我们通过 ACTION_IMAGE_CAPTURE intent 来请求，系统会提示用户选择相机，拍照后返回 onActivityResult()。\n\n类似的：打电话、访问用户的联系人 也是同样的做法\n\n这两种方式各有优缺点：\n使用权限：\n* 应用可在您执行操作时完全控制用户体验；不过，如此广泛的控制会增加任务的复杂性，因为您需要设计适当的 UI。\n* 系统会在运行或安装应用时各提示用户提供一次权限，应用即可执行操作，不再需要用户进行其他交互。不过，如果用户不授予权限（或稍后撤销权限），应用将根本无法执行操作。\n\n使用 intent:\n* 无需为操作设计 UI。处理 intent 的应用将提供 UI。不过，这意味着您无法控制用户体验。用户可能从未见过的应用交互。\n* 如果用户没有适用于操作的默认应用，则系统会提示用户选择一款应用。如果用户未指定默认处理程序，则他们每次执行此操作时都必须处理一个额外对话框。\n\n### 仅要求APP所需的权限\n每次您要求权限时，实际上是在强迫用户作出决定。\n您应尽量减少提出这些请求的次数。\n\n### 不要让用户感到无所适从\n某些情况下，一项或多项权限可能是应用所必需的。在这种情况下，合理的做法是，在应用启动之后立即要求提供这些权限。\n在这种情况下，合理的做法是，在应用启动之后立即要求提供这些权限。例如，如果您运行摄影应用，应用需要访问设备的相机。在用户首次启动应用时，他们不会对提供相机使用权限的要求感到惊讶。\n\n### 解释需要权限的原因\n系统在您调用 requestPermissions() 时显示的权限对话框将说明应用需要的权限，但不会解释为何需要这些权限。某些情况下，用户可能会感到困惑。因此，最好在调用 requestPermissions() 之前向用户解释应用需要相应权限的原因。\n例如，摄影应用可能需要使用位置服务，以便能够为照片添加地理标签。通常，用户可能不了解照片能够包含位置信息，并且对摄影应用想要了解具体位置感到不解。因此在这种情况下，应用最好在调用 requestPermissions() 之前告知用户此功能的相关信息。\n<br/>\n以上的准则，我们可以参考 **微信** 或者 **头条** 进行分析，他们是如何处理好与用户的交互的\n\n## 6.0 权限适配\n适配工作我们要对市面上常用的手机进行适配，大部分的手机还是遵守这些规则的。但是对部分小米或魅族系统的权限，厂商还是做了自己的定制的，我们需要花点心思来处理。\n\n### 普通手机适配\n一般流程我们分为 3步：\n* checkPermission\n* requestPermission\n* handleResult\n\n如果我们自己实现，就使用 ContextCompat.checkSelfPermission 检查需要的权限；\n如果不是被授权，则我们需要请求这个权限 ActivityCompat.requestPermissions，可以同时请求一个或多个权限；\n然后我们重写 Activity 的 onRequestPermissionsResult() 方法，根据用户授权结果，进行相应的结果处理。\n\n不再造轮子了，我项目中了 RxPermission 开源库，并借鉴了EasyPermission，AndPermission 的思路。\n代码层面不再展开，实现比较容易。。。\n\n**处理流程：**\n![](http://7xr1vo.com1.z0.glb.clouddn.com/%E9%80%82%E9%85%8D.png)\n\n我们再来看看 微信 的流程，在第一次安装，启动后，就会要求3个比较重要的权限，一个一个来请求获取，如果一旦有未同意的，就不让进入。\n这种做法也是比较合理的，这些权限都没同意，后续的操作没法正常进行。\n\n\n### 小米、魅族适配\n\n适配最头痛的就是 这种 爱搞特殊的手机了，没办法，手机碎片化的问题只能盼着慢慢消磨了。\n\n小米、魅族手机的话，会出现 checkPermission 时，返回true，但是我们使用的时候实际是 关闭权限的；\n这时候，我们就不能只 check了，还要 使用 AppOpsManager 来获取相关的操作，看这个操作是否有执行的权限。\n通过这样双重的检查权限，都通过了，才可以执行操作。\n\n``` java\npublic static boolean hasPermission(@NonNull Context context, @NonNull List<String> permissions) {\n        if(Build.VERSION.SDK_INT < Build.VERSION_CODES.M) {\n            return true;\n        } else {\n\n            for (Object permission : permissions) {\n                // 获取app中 权限关联的操作\n                String op = AppOpsManagerCompat.permissionToOp(permission.toString());\n                if (!TextUtils.isEmpty(op)) {\n                    // 查看 操作 是否被允许\n                    int result = AppOpsManagerCompat.noteProxyOp(context, op, context.getPackageName());\n                    if (result == MODE_IGNORED) {\n                        return false;\n                    }\n\n                    // 再次检查，确保有权限\n                    result = ContextCompat.checkSelfPermission(context, permission.toString());\n                    if (result != PERMISSION_GRANTED) {\n                        return false;\n                    }\n                }\n            }\n\n            return true;\n        }\n    }\n```\n\n在小米论坛上，已经有人提到这个问题，解决方法就是再次使用 AppOpsManager 来检查。\nhttp://www.miui.com/thread-4498742-1-1.html\n\n\n## 总结\n* Android 安全架构的中心设计点是：**在默认情况下任何应用都没有权限执行对其他应用、操作系统或用户有不利影响的任何操作**\n* 可以使用 intent 启动的操作，尽量还是使用intent吧，申请权限毕竟是要弹框阻碍用户操作的，而且如果没同意，还要做相应的操作来配合。\n\n--------\n\n参考：\n\nhttps://developer.android.com/guide/topics/permissions/normal-permissions.html?hl=zh-cn\nhttps://developer.android.com/training/permissions/best-practices.html?hl=zh-cn#perms-vs-intents\nhttps://mp.weixin.qq.com/s?__biz=MzIxNzEyMzIzOA==&mid=2652313851&idx=1&sn=a15519b65e7bedefbb566fe6d01935cb&scene=4#wechat_redirect\n","source":"_posts/Android 6.0适配.md","raw":"---\ntitle: Android 6.0适配\ndate: 2017-04-12 12:40\ncategories: Android\ntags: [6.0适配, 运行时权限]\n---\n\n## Android 权限变更\n在 Android 6.0 之前，APP 的授权是通过在 manifest.xml 文件中，去注册相关权限，安装时就可以获得所有声明了的权限。而在 6.0 及以后的版本，这种在 manifest.xml 声明权限的做法，已经在一些权限上不适用了。\n在Android 6.0 及以后的系统中，用户可以自动打开或关闭任何应用的权限（设置 -> 应用权限）\n\n### 权限的划分\nAndroid 是基于 Linux 系统的，所以，对于每个文件都有个权限的概念。\n这次变化，主要将 Android 系统中的权限分为：\n* 正常权限：如很常见的 访问网络；\n* 危险权限：如访问手机状态、位置信息；\n* 特殊权限：如写设置、悬浮窗\n\n另外，还有一个 **权限组** 的概念：\n\n  任何权限都可属于一个权限组，包括正常权限和应用定义的权限\n所以，每个危险权限都属于不同的权限组中，Google已经定义好了这些归属。\n\n我们主要关注的危险权限和权限组如下：\n\n| 权限组      |     权限 |\n| :-------- | --------:|\n| CALENDAR    |   READ_CALENDAR<br/>WRITE_CALENDAR |\n| CAMERA    |   CAMERA |\n| CONTACTS    |   READ_CONTACTS<br/>WRITE_CONTACTS<br/>GET_ACCOUNTS |\n| LOCATION    |   ACCESS_FINE_LOCATION<br/>ACCESS_COARSE_LOCATION|\n| MICROPHONE    |   RECORD_AUDIO|\n| PHONE    |   READ_PHONE_STATE<br/>CALL_PHONE<br/>READ_CALL_LOG<br/>WRITE_CALL_LOG<br/>ADD_VOICEMAIL<br/>USE_SIP<br/>PROCESS_OUTGOING_CALLS|\n| SENSORS    |   BODY_SENSORS|\n| SMS    |   SEND_SMS<br/>RECEIVE_SMS<br/>READ_SMS<br/>RECEIVE_WAP_PUSH<br/>RECEIVE_MMS|\n| STORAGE    |   READ_EXTERNAL_STORAGE<br/>WRITE_EXTERNAL_STORAGE|\n\n> 如果已经申请到了某个组的某一个权限时，那么也同时拥有了该组的其他权限；只要拥有了同类中的一个，那么就拥有了该组的其他权限\n\n大部分的适配工作就是对以上的权限进行预处理，就OK了。\n\n### 不同版本运行，区别对待\n* 如果你的 targetSdkVersion <= 22，那么安装在 6.0 以上的手机的话，还是以老的授权方式（安装时期）对所有声明了的权限一次性授权。\n* 如果你的 targetSdkVersion > 22，那么安装在 6.0 以上的手机上，不光要在 manifest.xml 中声明，而且有一部分比较危险或者特殊的权限， 需要在 app 运行时期，来提前申请权限。一旦未申请而直接进行操作的话，会直接崩溃SecurityException。\n\n\n## 权限处理原则\nGoogle 对权限做了进一步要求之后，作为我们开发者，该如何作何权限的适配呢?\n官方也给出了几个建议：\n### 考虑使用 Intent\n我们一般可以使用以下 2 种方法，来执行某个任务：\n* 要求提供权限才能执行操作\n* 使用 intent，让其他应用来执行任务\n\n比如：\n我们要使用拍照的功能，那么我们可以请求 CAMERA 权限，然后可以直接访问相机，控制相机进行拍照；也可以不用申请 CAMERA 权限，我们通过 ACTION_IMAGE_CAPTURE intent 来请求，系统会提示用户选择相机，拍照后返回 onActivityResult()。\n\n类似的：打电话、访问用户的联系人 也是同样的做法\n\n这两种方式各有优缺点：\n使用权限：\n* 应用可在您执行操作时完全控制用户体验；不过，如此广泛的控制会增加任务的复杂性，因为您需要设计适当的 UI。\n* 系统会在运行或安装应用时各提示用户提供一次权限，应用即可执行操作，不再需要用户进行其他交互。不过，如果用户不授予权限（或稍后撤销权限），应用将根本无法执行操作。\n\n使用 intent:\n* 无需为操作设计 UI。处理 intent 的应用将提供 UI。不过，这意味着您无法控制用户体验。用户可能从未见过的应用交互。\n* 如果用户没有适用于操作的默认应用，则系统会提示用户选择一款应用。如果用户未指定默认处理程序，则他们每次执行此操作时都必须处理一个额外对话框。\n\n### 仅要求APP所需的权限\n每次您要求权限时，实际上是在强迫用户作出决定。\n您应尽量减少提出这些请求的次数。\n\n### 不要让用户感到无所适从\n某些情况下，一项或多项权限可能是应用所必需的。在这种情况下，合理的做法是，在应用启动之后立即要求提供这些权限。\n在这种情况下，合理的做法是，在应用启动之后立即要求提供这些权限。例如，如果您运行摄影应用，应用需要访问设备的相机。在用户首次启动应用时，他们不会对提供相机使用权限的要求感到惊讶。\n\n### 解释需要权限的原因\n系统在您调用 requestPermissions() 时显示的权限对话框将说明应用需要的权限，但不会解释为何需要这些权限。某些情况下，用户可能会感到困惑。因此，最好在调用 requestPermissions() 之前向用户解释应用需要相应权限的原因。\n例如，摄影应用可能需要使用位置服务，以便能够为照片添加地理标签。通常，用户可能不了解照片能够包含位置信息，并且对摄影应用想要了解具体位置感到不解。因此在这种情况下，应用最好在调用 requestPermissions() 之前告知用户此功能的相关信息。\n<br/>\n以上的准则，我们可以参考 **微信** 或者 **头条** 进行分析，他们是如何处理好与用户的交互的\n\n## 6.0 权限适配\n适配工作我们要对市面上常用的手机进行适配，大部分的手机还是遵守这些规则的。但是对部分小米或魅族系统的权限，厂商还是做了自己的定制的，我们需要花点心思来处理。\n\n### 普通手机适配\n一般流程我们分为 3步：\n* checkPermission\n* requestPermission\n* handleResult\n\n如果我们自己实现，就使用 ContextCompat.checkSelfPermission 检查需要的权限；\n如果不是被授权，则我们需要请求这个权限 ActivityCompat.requestPermissions，可以同时请求一个或多个权限；\n然后我们重写 Activity 的 onRequestPermissionsResult() 方法，根据用户授权结果，进行相应的结果处理。\n\n不再造轮子了，我项目中了 RxPermission 开源库，并借鉴了EasyPermission，AndPermission 的思路。\n代码层面不再展开，实现比较容易。。。\n\n**处理流程：**\n![](http://7xr1vo.com1.z0.glb.clouddn.com/%E9%80%82%E9%85%8D.png)\n\n我们再来看看 微信 的流程，在第一次安装，启动后，就会要求3个比较重要的权限，一个一个来请求获取，如果一旦有未同意的，就不让进入。\n这种做法也是比较合理的，这些权限都没同意，后续的操作没法正常进行。\n\n\n### 小米、魅族适配\n\n适配最头痛的就是 这种 爱搞特殊的手机了，没办法，手机碎片化的问题只能盼着慢慢消磨了。\n\n小米、魅族手机的话，会出现 checkPermission 时，返回true，但是我们使用的时候实际是 关闭权限的；\n这时候，我们就不能只 check了，还要 使用 AppOpsManager 来获取相关的操作，看这个操作是否有执行的权限。\n通过这样双重的检查权限，都通过了，才可以执行操作。\n\n``` java\npublic static boolean hasPermission(@NonNull Context context, @NonNull List<String> permissions) {\n        if(Build.VERSION.SDK_INT < Build.VERSION_CODES.M) {\n            return true;\n        } else {\n\n            for (Object permission : permissions) {\n                // 获取app中 权限关联的操作\n                String op = AppOpsManagerCompat.permissionToOp(permission.toString());\n                if (!TextUtils.isEmpty(op)) {\n                    // 查看 操作 是否被允许\n                    int result = AppOpsManagerCompat.noteProxyOp(context, op, context.getPackageName());\n                    if (result == MODE_IGNORED) {\n                        return false;\n                    }\n\n                    // 再次检查，确保有权限\n                    result = ContextCompat.checkSelfPermission(context, permission.toString());\n                    if (result != PERMISSION_GRANTED) {\n                        return false;\n                    }\n                }\n            }\n\n            return true;\n        }\n    }\n```\n\n在小米论坛上，已经有人提到这个问题，解决方法就是再次使用 AppOpsManager 来检查。\nhttp://www.miui.com/thread-4498742-1-1.html\n\n\n## 总结\n* Android 安全架构的中心设计点是：**在默认情况下任何应用都没有权限执行对其他应用、操作系统或用户有不利影响的任何操作**\n* 可以使用 intent 启动的操作，尽量还是使用intent吧，申请权限毕竟是要弹框阻碍用户操作的，而且如果没同意，还要做相应的操作来配合。\n\n--------\n\n参考：\n\nhttps://developer.android.com/guide/topics/permissions/normal-permissions.html?hl=zh-cn\nhttps://developer.android.com/training/permissions/best-practices.html?hl=zh-cn#perms-vs-intents\nhttps://mp.weixin.qq.com/s?__biz=MzIxNzEyMzIzOA==&mid=2652313851&idx=1&sn=a15519b65e7bedefbb566fe6d01935cb&scene=4#wechat_redirect\n","slug":"Android 6.0适配","published":1,"updated":"2017-06-09T05:36:36.000Z","_id":"cj3perzfs0000gsqwuemozrbw","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"Android-权限变更\"><a href=\"#Android-权限变更\" class=\"headerlink\" title=\"Android 权限变更\"></a>Android 权限变更</h2><p>在 Android 6.0 之前，APP 的授权是通过在 manifest.xml 文件中，去注册相关权限，安装时就可以获得所有声明了的权限。而在 6.0 及以后的版本，这种在 manifest.xml 声明权限的做法，已经在一些权限上不适用了。<br>在Android 6.0 及以后的系统中，用户可以自动打开或关闭任何应用的权限（设置 -&gt; 应用权限）</p>\n<h3 id=\"权限的划分\"><a href=\"#权限的划分\" class=\"headerlink\" title=\"权限的划分\"></a>权限的划分</h3><p>Android 是基于 Linux 系统的，所以，对于每个文件都有个权限的概念。<br>这次变化，主要将 Android 系统中的权限分为：</p>\n<ul>\n<li>正常权限：如很常见的 访问网络；</li>\n<li>危险权限：如访问手机状态、位置信息；</li>\n<li>特殊权限：如写设置、悬浮窗</li>\n</ul>\n<p>另外，还有一个 <strong>权限组</strong> 的概念：</p>\n<p>  任何权限都可属于一个权限组，包括正常权限和应用定义的权限<br>所以，每个危险权限都属于不同的权限组中，Google已经定义好了这些归属。</p>\n<p>我们主要关注的危险权限和权限组如下：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">权限组</th>\n<th style=\"text-align:right\">权限</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">CALENDAR</td>\n<td style=\"text-align:right\">READ_CALENDAR<br>WRITE_CALENDAR</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">CAMERA</td>\n<td style=\"text-align:right\">CAMERA</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">CONTACTS</td>\n<td style=\"text-align:right\">READ_CONTACTS<br>WRITE_CONTACTS<br>GET_ACCOUNTS</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">LOCATION</td>\n<td style=\"text-align:right\">ACCESS_FINE_LOCATION<br>ACCESS_COARSE_LOCATION</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">MICROPHONE</td>\n<td style=\"text-align:right\">RECORD_AUDIO</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">PHONE</td>\n<td style=\"text-align:right\">READ_PHONE_STATE<br>CALL_PHONE<br>READ_CALL_LOG<br>WRITE_CALL_LOG<br>ADD_VOICEMAIL<br>USE_SIP<br>PROCESS_OUTGOING_CALLS</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">SENSORS</td>\n<td style=\"text-align:right\">BODY_SENSORS</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">SMS</td>\n<td style=\"text-align:right\">SEND_SMS<br>RECEIVE_SMS<br>READ_SMS<br>RECEIVE_WAP_PUSH<br>RECEIVE_MMS</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">STORAGE</td>\n<td style=\"text-align:right\">READ_EXTERNAL_STORAGE<br>WRITE_EXTERNAL_STORAGE</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>如果已经申请到了某个组的某一个权限时，那么也同时拥有了该组的其他权限；只要拥有了同类中的一个，那么就拥有了该组的其他权限</p>\n</blockquote>\n<p>大部分的适配工作就是对以上的权限进行预处理，就OK了。</p>\n<h3 id=\"不同版本运行，区别对待\"><a href=\"#不同版本运行，区别对待\" class=\"headerlink\" title=\"不同版本运行，区别对待\"></a>不同版本运行，区别对待</h3><ul>\n<li>如果你的 targetSdkVersion &lt;= 22，那么安装在 6.0 以上的手机的话，还是以老的授权方式（安装时期）对所有声明了的权限一次性授权。</li>\n<li>如果你的 targetSdkVersion &gt; 22，那么安装在 6.0 以上的手机上，不光要在 manifest.xml 中声明，而且有一部分比较危险或者特殊的权限， 需要在 app 运行时期，来提前申请权限。一旦未申请而直接进行操作的话，会直接崩溃SecurityException。</li>\n</ul>\n<h2 id=\"权限处理原则\"><a href=\"#权限处理原则\" class=\"headerlink\" title=\"权限处理原则\"></a>权限处理原则</h2><p>Google 对权限做了进一步要求之后，作为我们开发者，该如何作何权限的适配呢?<br>官方也给出了几个建议：</p>\n<h3 id=\"考虑使用-Intent\"><a href=\"#考虑使用-Intent\" class=\"headerlink\" title=\"考虑使用 Intent\"></a>考虑使用 Intent</h3><p>我们一般可以使用以下 2 种方法，来执行某个任务：</p>\n<ul>\n<li>要求提供权限才能执行操作</li>\n<li>使用 intent，让其他应用来执行任务</li>\n</ul>\n<p>比如：<br>我们要使用拍照的功能，那么我们可以请求 CAMERA 权限，然后可以直接访问相机，控制相机进行拍照；也可以不用申请 CAMERA 权限，我们通过 ACTION_IMAGE_CAPTURE intent 来请求，系统会提示用户选择相机，拍照后返回 onActivityResult()。</p>\n<p>类似的：打电话、访问用户的联系人 也是同样的做法</p>\n<p>这两种方式各有优缺点：<br>使用权限：</p>\n<ul>\n<li>应用可在您执行操作时完全控制用户体验；不过，如此广泛的控制会增加任务的复杂性，因为您需要设计适当的 UI。</li>\n<li>系统会在运行或安装应用时各提示用户提供一次权限，应用即可执行操作，不再需要用户进行其他交互。不过，如果用户不授予权限（或稍后撤销权限），应用将根本无法执行操作。</li>\n</ul>\n<p>使用 intent:</p>\n<ul>\n<li>无需为操作设计 UI。处理 intent 的应用将提供 UI。不过，这意味着您无法控制用户体验。用户可能从未见过的应用交互。</li>\n<li>如果用户没有适用于操作的默认应用，则系统会提示用户选择一款应用。如果用户未指定默认处理程序，则他们每次执行此操作时都必须处理一个额外对话框。</li>\n</ul>\n<h3 id=\"仅要求APP所需的权限\"><a href=\"#仅要求APP所需的权限\" class=\"headerlink\" title=\"仅要求APP所需的权限\"></a>仅要求APP所需的权限</h3><p>每次您要求权限时，实际上是在强迫用户作出决定。<br>您应尽量减少提出这些请求的次数。</p>\n<h3 id=\"不要让用户感到无所适从\"><a href=\"#不要让用户感到无所适从\" class=\"headerlink\" title=\"不要让用户感到无所适从\"></a>不要让用户感到无所适从</h3><p>某些情况下，一项或多项权限可能是应用所必需的。在这种情况下，合理的做法是，在应用启动之后立即要求提供这些权限。<br>在这种情况下，合理的做法是，在应用启动之后立即要求提供这些权限。例如，如果您运行摄影应用，应用需要访问设备的相机。在用户首次启动应用时，他们不会对提供相机使用权限的要求感到惊讶。</p>\n<h3 id=\"解释需要权限的原因\"><a href=\"#解释需要权限的原因\" class=\"headerlink\" title=\"解释需要权限的原因\"></a>解释需要权限的原因</h3><p>系统在您调用 requestPermissions() 时显示的权限对话框将说明应用需要的权限，但不会解释为何需要这些权限。某些情况下，用户可能会感到困惑。因此，最好在调用 requestPermissions() 之前向用户解释应用需要相应权限的原因。<br>例如，摄影应用可能需要使用位置服务，以便能够为照片添加地理标签。通常，用户可能不了解照片能够包含位置信息，并且对摄影应用想要了解具体位置感到不解。因此在这种情况下，应用最好在调用 requestPermissions() 之前告知用户此功能的相关信息。<br><br><br>以上的准则，我们可以参考 <strong>微信</strong> 或者 <strong>头条</strong> 进行分析，他们是如何处理好与用户的交互的</p>\n<h2 id=\"6-0-权限适配\"><a href=\"#6-0-权限适配\" class=\"headerlink\" title=\"6.0 权限适配\"></a>6.0 权限适配</h2><p>适配工作我们要对市面上常用的手机进行适配，大部分的手机还是遵守这些规则的。但是对部分小米或魅族系统的权限，厂商还是做了自己的定制的，我们需要花点心思来处理。</p>\n<h3 id=\"普通手机适配\"><a href=\"#普通手机适配\" class=\"headerlink\" title=\"普通手机适配\"></a>普通手机适配</h3><p>一般流程我们分为 3步：</p>\n<ul>\n<li>checkPermission</li>\n<li>requestPermission</li>\n<li>handleResult</li>\n</ul>\n<p>如果我们自己实现，就使用 ContextCompat.checkSelfPermission 检查需要的权限；<br>如果不是被授权，则我们需要请求这个权限 ActivityCompat.requestPermissions，可以同时请求一个或多个权限；<br>然后我们重写 Activity 的 onRequestPermissionsResult() 方法，根据用户授权结果，进行相应的结果处理。</p>\n<p>不再造轮子了，我项目中了 RxPermission 开源库，并借鉴了EasyPermission，AndPermission 的思路。<br>代码层面不再展开，实现比较容易。。。</p>\n<p><strong>处理流程：</strong><br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/%E9%80%82%E9%85%8D.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure></p>\n<p>我们再来看看 微信 的流程，在第一次安装，启动后，就会要求3个比较重要的权限，一个一个来请求获取，如果一旦有未同意的，就不让进入。<br>这种做法也是比较合理的，这些权限都没同意，后续的操作没法正常进行。</p>\n<h3 id=\"小米、魅族适配\"><a href=\"#小米、魅族适配\" class=\"headerlink\" title=\"小米、魅族适配\"></a>小米、魅族适配</h3><p>适配最头痛的就是 这种 爱搞特殊的手机了，没办法，手机碎片化的问题只能盼着慢慢消磨了。</p>\n<p>小米、魅族手机的话，会出现 checkPermission 时，返回true，但是我们使用的时候实际是 关闭权限的；<br>这时候，我们就不能只 check了，还要 使用 AppOpsManager 来获取相关的操作，看这个操作是否有执行的权限。<br>通过这样双重的检查权限，都通过了，才可以执行操作。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">hasPermission</span><span class=\"params\">(@NonNull Context context, @NonNull List&lt;String&gt; permissions)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(Build.VERSION.SDK_INT &lt; Build.VERSION_CODES.M) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">for</span> (Object permission : permissions) &#123;</div><div class=\"line\">                <span class=\"comment\">// 获取app中 权限关联的操作</span></div><div class=\"line\">                String op = AppOpsManagerCompat.permissionToOp(permission.toString());</div><div class=\"line\">                <span class=\"keyword\">if</span> (!TextUtils.isEmpty(op)) &#123;</div><div class=\"line\">                    <span class=\"comment\">// 查看 操作 是否被允许</span></div><div class=\"line\">                    <span class=\"keyword\">int</span> result = AppOpsManagerCompat.noteProxyOp(context, op, context.getPackageName());</div><div class=\"line\">                    <span class=\"keyword\">if</span> (result == MODE_IGNORED) &#123;</div><div class=\"line\">                        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">                    &#125;</div><div class=\"line\"></div><div class=\"line\">                    <span class=\"comment\">// 再次检查，确保有权限</span></div><div class=\"line\">                    result = ContextCompat.checkSelfPermission(context, permission.toString());</div><div class=\"line\">                    <span class=\"keyword\">if</span> (result != PERMISSION_GRANTED) &#123;</div><div class=\"line\">                        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p>在小米论坛上，已经有人提到这个问题，解决方法就是再次使用 AppOpsManager 来检查。<br><a href=\"http://www.miui.com/thread-4498742-1-1.html\" target=\"_blank\" rel=\"external\">http://www.miui.com/thread-4498742-1-1.html</a></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ul>\n<li>Android 安全架构的中心设计点是：<strong>在默认情况下任何应用都没有权限执行对其他应用、操作系统或用户有不利影响的任何操作</strong></li>\n<li>可以使用 intent 启动的操作，尽量还是使用intent吧，申请权限毕竟是要弹框阻碍用户操作的，而且如果没同意，还要做相应的操作来配合。</li>\n</ul>\n<hr>\n<p>参考：</p>\n<p><a href=\"https://developer.android.com/guide/topics/permissions/normal-permissions.html?hl=zh-cn\" target=\"_blank\" rel=\"external\">https://developer.android.com/guide/topics/permissions/normal-permissions.html?hl=zh-cn</a><br><a href=\"https://developer.android.com/training/permissions/best-practices.html?hl=zh-cn#perms-vs-intents\" target=\"_blank\" rel=\"external\">https://developer.android.com/training/permissions/best-practices.html?hl=zh-cn#perms-vs-intents</a><br><a href=\"https://mp.weixin.qq.com/s?__biz=MzIxNzEyMzIzOA==&amp;mid=2652313851&amp;idx=1&amp;sn=a15519b65e7bedefbb566fe6d01935cb&amp;scene=4#wechat_redirect\" target=\"_blank\" rel=\"external\">https://mp.weixin.qq.com/s?__biz=MzIxNzEyMzIzOA==&amp;mid=2652313851&amp;idx=1&amp;sn=a15519b65e7bedefbb566fe6d01935cb&amp;scene=4#wechat_redirect</a></p>\n","excerpt":"","more":"<h2 id=\"Android-权限变更\"><a href=\"#Android-权限变更\" class=\"headerlink\" title=\"Android 权限变更\"></a>Android 权限变更</h2><p>在 Android 6.0 之前，APP 的授权是通过在 manifest.xml 文件中，去注册相关权限，安装时就可以获得所有声明了的权限。而在 6.0 及以后的版本，这种在 manifest.xml 声明权限的做法，已经在一些权限上不适用了。<br>在Android 6.0 及以后的系统中，用户可以自动打开或关闭任何应用的权限（设置 -&gt; 应用权限）</p>\n<h3 id=\"权限的划分\"><a href=\"#权限的划分\" class=\"headerlink\" title=\"权限的划分\"></a>权限的划分</h3><p>Android 是基于 Linux 系统的，所以，对于每个文件都有个权限的概念。<br>这次变化，主要将 Android 系统中的权限分为：</p>\n<ul>\n<li>正常权限：如很常见的 访问网络；</li>\n<li>危险权限：如访问手机状态、位置信息；</li>\n<li>特殊权限：如写设置、悬浮窗</li>\n</ul>\n<p>另外，还有一个 <strong>权限组</strong> 的概念：</p>\n<p>  任何权限都可属于一个权限组，包括正常权限和应用定义的权限<br>所以，每个危险权限都属于不同的权限组中，Google已经定义好了这些归属。</p>\n<p>我们主要关注的危险权限和权限组如下：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">权限组</th>\n<th style=\"text-align:right\">权限</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">CALENDAR</td>\n<td style=\"text-align:right\">READ_CALENDAR<br/>WRITE_CALENDAR</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">CAMERA</td>\n<td style=\"text-align:right\">CAMERA</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">CONTACTS</td>\n<td style=\"text-align:right\">READ_CONTACTS<br/>WRITE_CONTACTS<br/>GET_ACCOUNTS</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">LOCATION</td>\n<td style=\"text-align:right\">ACCESS_FINE_LOCATION<br/>ACCESS_COARSE_LOCATION</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">MICROPHONE</td>\n<td style=\"text-align:right\">RECORD_AUDIO</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">PHONE</td>\n<td style=\"text-align:right\">READ_PHONE_STATE<br/>CALL_PHONE<br/>READ_CALL_LOG<br/>WRITE_CALL_LOG<br/>ADD_VOICEMAIL<br/>USE_SIP<br/>PROCESS_OUTGOING_CALLS</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">SENSORS</td>\n<td style=\"text-align:right\">BODY_SENSORS</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">SMS</td>\n<td style=\"text-align:right\">SEND_SMS<br/>RECEIVE_SMS<br/>READ_SMS<br/>RECEIVE_WAP_PUSH<br/>RECEIVE_MMS</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">STORAGE</td>\n<td style=\"text-align:right\">READ_EXTERNAL_STORAGE<br/>WRITE_EXTERNAL_STORAGE</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>如果已经申请到了某个组的某一个权限时，那么也同时拥有了该组的其他权限；只要拥有了同类中的一个，那么就拥有了该组的其他权限</p>\n</blockquote>\n<p>大部分的适配工作就是对以上的权限进行预处理，就OK了。</p>\n<h3 id=\"不同版本运行，区别对待\"><a href=\"#不同版本运行，区别对待\" class=\"headerlink\" title=\"不同版本运行，区别对待\"></a>不同版本运行，区别对待</h3><ul>\n<li>如果你的 targetSdkVersion &lt;= 22，那么安装在 6.0 以上的手机的话，还是以老的授权方式（安装时期）对所有声明了的权限一次性授权。</li>\n<li>如果你的 targetSdkVersion &gt; 22，那么安装在 6.0 以上的手机上，不光要在 manifest.xml 中声明，而且有一部分比较危险或者特殊的权限， 需要在 app 运行时期，来提前申请权限。一旦未申请而直接进行操作的话，会直接崩溃SecurityException。</li>\n</ul>\n<h2 id=\"权限处理原则\"><a href=\"#权限处理原则\" class=\"headerlink\" title=\"权限处理原则\"></a>权限处理原则</h2><p>Google 对权限做了进一步要求之后，作为我们开发者，该如何作何权限的适配呢?<br>官方也给出了几个建议：</p>\n<h3 id=\"考虑使用-Intent\"><a href=\"#考虑使用-Intent\" class=\"headerlink\" title=\"考虑使用 Intent\"></a>考虑使用 Intent</h3><p>我们一般可以使用以下 2 种方法，来执行某个任务：</p>\n<ul>\n<li>要求提供权限才能执行操作</li>\n<li>使用 intent，让其他应用来执行任务</li>\n</ul>\n<p>比如：<br>我们要使用拍照的功能，那么我们可以请求 CAMERA 权限，然后可以直接访问相机，控制相机进行拍照；也可以不用申请 CAMERA 权限，我们通过 ACTION_IMAGE_CAPTURE intent 来请求，系统会提示用户选择相机，拍照后返回 onActivityResult()。</p>\n<p>类似的：打电话、访问用户的联系人 也是同样的做法</p>\n<p>这两种方式各有优缺点：<br>使用权限：</p>\n<ul>\n<li>应用可在您执行操作时完全控制用户体验；不过，如此广泛的控制会增加任务的复杂性，因为您需要设计适当的 UI。</li>\n<li>系统会在运行或安装应用时各提示用户提供一次权限，应用即可执行操作，不再需要用户进行其他交互。不过，如果用户不授予权限（或稍后撤销权限），应用将根本无法执行操作。</li>\n</ul>\n<p>使用 intent:</p>\n<ul>\n<li>无需为操作设计 UI。处理 intent 的应用将提供 UI。不过，这意味着您无法控制用户体验。用户可能从未见过的应用交互。</li>\n<li>如果用户没有适用于操作的默认应用，则系统会提示用户选择一款应用。如果用户未指定默认处理程序，则他们每次执行此操作时都必须处理一个额外对话框。</li>\n</ul>\n<h3 id=\"仅要求APP所需的权限\"><a href=\"#仅要求APP所需的权限\" class=\"headerlink\" title=\"仅要求APP所需的权限\"></a>仅要求APP所需的权限</h3><p>每次您要求权限时，实际上是在强迫用户作出决定。<br>您应尽量减少提出这些请求的次数。</p>\n<h3 id=\"不要让用户感到无所适从\"><a href=\"#不要让用户感到无所适从\" class=\"headerlink\" title=\"不要让用户感到无所适从\"></a>不要让用户感到无所适从</h3><p>某些情况下，一项或多项权限可能是应用所必需的。在这种情况下，合理的做法是，在应用启动之后立即要求提供这些权限。<br>在这种情况下，合理的做法是，在应用启动之后立即要求提供这些权限。例如，如果您运行摄影应用，应用需要访问设备的相机。在用户首次启动应用时，他们不会对提供相机使用权限的要求感到惊讶。</p>\n<h3 id=\"解释需要权限的原因\"><a href=\"#解释需要权限的原因\" class=\"headerlink\" title=\"解释需要权限的原因\"></a>解释需要权限的原因</h3><p>系统在您调用 requestPermissions() 时显示的权限对话框将说明应用需要的权限，但不会解释为何需要这些权限。某些情况下，用户可能会感到困惑。因此，最好在调用 requestPermissions() 之前向用户解释应用需要相应权限的原因。<br>例如，摄影应用可能需要使用位置服务，以便能够为照片添加地理标签。通常，用户可能不了解照片能够包含位置信息，并且对摄影应用想要了解具体位置感到不解。因此在这种情况下，应用最好在调用 requestPermissions() 之前告知用户此功能的相关信息。<br><br/><br>以上的准则，我们可以参考 <strong>微信</strong> 或者 <strong>头条</strong> 进行分析，他们是如何处理好与用户的交互的</p>\n<h2 id=\"6-0-权限适配\"><a href=\"#6-0-权限适配\" class=\"headerlink\" title=\"6.0 权限适配\"></a>6.0 权限适配</h2><p>适配工作我们要对市面上常用的手机进行适配，大部分的手机还是遵守这些规则的。但是对部分小米或魅族系统的权限，厂商还是做了自己的定制的，我们需要花点心思来处理。</p>\n<h3 id=\"普通手机适配\"><a href=\"#普通手机适配\" class=\"headerlink\" title=\"普通手机适配\"></a>普通手机适配</h3><p>一般流程我们分为 3步：</p>\n<ul>\n<li>checkPermission</li>\n<li>requestPermission</li>\n<li>handleResult</li>\n</ul>\n<p>如果我们自己实现，就使用 ContextCompat.checkSelfPermission 检查需要的权限；<br>如果不是被授权，则我们需要请求这个权限 ActivityCompat.requestPermissions，可以同时请求一个或多个权限；<br>然后我们重写 Activity 的 onRequestPermissionsResult() 方法，根据用户授权结果，进行相应的结果处理。</p>\n<p>不再造轮子了，我项目中了 RxPermission 开源库，并借鉴了EasyPermission，AndPermission 的思路。<br>代码层面不再展开，实现比较容易。。。</p>\n<p><strong>处理流程：</strong><br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/%E9%80%82%E9%85%8D.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure></p>\n<p>我们再来看看 微信 的流程，在第一次安装，启动后，就会要求3个比较重要的权限，一个一个来请求获取，如果一旦有未同意的，就不让进入。<br>这种做法也是比较合理的，这些权限都没同意，后续的操作没法正常进行。</p>\n<h3 id=\"小米、魅族适配\"><a href=\"#小米、魅族适配\" class=\"headerlink\" title=\"小米、魅族适配\"></a>小米、魅族适配</h3><p>适配最头痛的就是 这种 爱搞特殊的手机了，没办法，手机碎片化的问题只能盼着慢慢消磨了。</p>\n<p>小米、魅族手机的话，会出现 checkPermission 时，返回true，但是我们使用的时候实际是 关闭权限的；<br>这时候，我们就不能只 check了，还要 使用 AppOpsManager 来获取相关的操作，看这个操作是否有执行的权限。<br>通过这样双重的检查权限，都通过了，才可以执行操作。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">hasPermission</span><span class=\"params\">(@NonNull Context context, @NonNull List&lt;String&gt; permissions)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(Build.VERSION.SDK_INT &lt; Build.VERSION_CODES.M) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">for</span> (Object permission : permissions) &#123;</div><div class=\"line\">                <span class=\"comment\">// 获取app中 权限关联的操作</span></div><div class=\"line\">                String op = AppOpsManagerCompat.permissionToOp(permission.toString());</div><div class=\"line\">                <span class=\"keyword\">if</span> (!TextUtils.isEmpty(op)) &#123;</div><div class=\"line\">                    <span class=\"comment\">// 查看 操作 是否被允许</span></div><div class=\"line\">                    <span class=\"keyword\">int</span> result = AppOpsManagerCompat.noteProxyOp(context, op, context.getPackageName());</div><div class=\"line\">                    <span class=\"keyword\">if</span> (result == MODE_IGNORED) &#123;</div><div class=\"line\">                        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">                    &#125;</div><div class=\"line\"></div><div class=\"line\">                    <span class=\"comment\">// 再次检查，确保有权限</span></div><div class=\"line\">                    result = ContextCompat.checkSelfPermission(context, permission.toString());</div><div class=\"line\">                    <span class=\"keyword\">if</span> (result != PERMISSION_GRANTED) &#123;</div><div class=\"line\">                        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p>在小米论坛上，已经有人提到这个问题，解决方法就是再次使用 AppOpsManager 来检查。<br><a href=\"http://www.miui.com/thread-4498742-1-1.html\">http://www.miui.com/thread-4498742-1-1.html</a></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ul>\n<li>Android 安全架构的中心设计点是：<strong>在默认情况下任何应用都没有权限执行对其他应用、操作系统或用户有不利影响的任何操作</strong></li>\n<li>可以使用 intent 启动的操作，尽量还是使用intent吧，申请权限毕竟是要弹框阻碍用户操作的，而且如果没同意，还要做相应的操作来配合。</li>\n</ul>\n<hr>\n<p>参考：</p>\n<p><a href=\"https://developer.android.com/guide/topics/permissions/normal-permissions.html?hl=zh-cn\">https://developer.android.com/guide/topics/permissions/normal-permissions.html?hl=zh-cn</a><br><a href=\"https://developer.android.com/training/permissions/best-practices.html?hl=zh-cn#perms-vs-intents\">https://developer.android.com/training/permissions/best-practices.html?hl=zh-cn#perms-vs-intents</a><br><a href=\"https://mp.weixin.qq.com/s?__biz=MzIxNzEyMzIzOA==&amp;mid=2652313851&amp;idx=1&amp;sn=a15519b65e7bedefbb566fe6d01935cb&amp;scene=4#wechat_redirect\">https://mp.weixin.qq.com/s?__biz=MzIxNzEyMzIzOA==&amp;mid=2652313851&amp;idx=1&amp;sn=a15519b65e7bedefbb566fe6d01935cb&amp;scene=4#wechat_redirect</a></p>\n"},{"title":"Android 7.0适配","date":"2017-06-09T12:10:00.000Z","_content":"\nAndroid 7.0 行为变更，涉及：电池和内存、后台优化、权限更改、NDK 应用链接至平台库。\n\n作为开发者，我们要关注 权限更改、NDK私有库的问题，适配工作也是围绕这2者展开。\n\n## 分享私有文件的方式\n传递软件包网域外的 file:// URI 可能给接收器留下无法访问的路径。因此，尝试传递 file:// URI 会触发 FileUriExposedException。分享私有文件内容的推荐方法是使用 FileProvider\n\n此类问题，我们要看 关注 拍照、覆盖安装。\n原先的拍照，我们一般这样写：\n\n``` java\npublic static void startCamera(Activity tag, String fileName) {\n        if (!FileUtil.isSDMounted()) {\n            ToastUtil.showShortToast(tag, \"未挂载SD卡....\");\n            return;\n        }\n        Intent intent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);\n        intent.putExtra(MediaStore.EXTRA_OUTPUT, Uri.fromFile(new File(\n                getExternalStorageDirectory(), fileName)));\n        tag.startActivityForResult(intent, PHOTO_REQUEST_TAKEPHOTO);\n    }\n```\n如果 适配到 7.0以上（targetSdkVersion >= 24），上面就会出错：**FileUriExposedException**\nGoogle 也是越来越注重安全的升级了，不让使用这种方式。现在要通过 provider 来进行访问，由 FileProvider 统一去访问相关的目录、文件。\n那具体，我们就看看怎么做：\n\n### 定义FileProvider\n在清单文件中，添加 provider：\n\n``` xml\n<provider\n            android:name=\"android.support.v4.content.FileProvider\"\n            android:authorities=\"com.chinahr.android.m.fileprovider\"\n            android:exported=\"false\"\n            android:grantUriPermissions=\"true\">\n            <!-- name：一般是固定的，如果你不需要定义自己的 provider; \n            如果需要别的特殊逻辑，你需要自定义 provider 去继承 v4 包下的 FileProvider并添加自己的逻辑代码，\n            那么这时候，name 就是你自定义的 provider的全路径了\n            authorities: packageName.fileprovider -->\n\n            <meta-data\n                android:name=\"android.support.FILE_PROVIDER_PATHS\"\n                android:resource=\"@xml/fileprovider\" /><!-- file path 配置文件的路径 -->\n        </provider>\n```\n\n### 配置路径文件\n在固定的目录下，res/xml 目录下，新建自己的 xml。\n\n然后我们开始配置，如何配置呢，我们来看看官方文档的要求：\n\n``` xml\n<paths xmlns:android=\"http://schemas.android.com/apk/res/android\">\n    <!-- 可以配置多个 -->\n    <files-path name=\"my_images\" path=\"images/\"/>\n    ...\n</paths>\n```\n主要有4种路径：\n\n| path      |     dir |\n| :-------- | --------:|\n|files-path   |   Context.getFilesDir() |\n|cache-path  |   Context.getCacheDir) |\n|external-path name=\"name\" path=\"path\"     |   Environment.getExternalStorageDirectory() |\n|external-cache-path name=\"name\" path=\"path\"    |  Context.getExternalCacheDir()|\n\n那我们来个demo：\n在 xml 文件中配置：\n\n``` xml\n<paths>\n    <external-path name=\"takephoto\" path=\"tmp\" />\n    <external-path name=\"apk\" path=\"Download\" />\n    <cache-path name=\"images\" path=\"/\" />\n</paths>\n```\n代表的含义就是：\n在 sd 下的 tmp目录，Download目录下对应 拍照后存储目录、apk下载的目录\n在 packageName/cache 目录下存放app里的图片\n\n配置工作，就ok了，现在解决拍照、覆盖安装崩溃的问题：\n\n``` java\npublic static void startCameraN(Activity tag, String fileName) {\n        if (!FileUtil.isSDMounted()) {\n            ToastUtil.showShortToast(tag, \"未挂载SD卡....\");\n            return;\n        }\n        // 必须和 xml 配置的 path 一致\n        File file = new File(getExternalStorageDirectory(), \"tmp/\"+fileName);\n        Intent intent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);\n        Uri pictureUri;\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {\n            pictureUri = FileProvider.getUriForFile(tag, tag.getPackageName()+\".fileprovider\", file);\n            intent.addFlags(Intent.FLAG_GRANT_WRITE_URI_PERMISSION);// 加上权限，否则也是要出错的\n        } else {\n            pictureUri = Uri.fromFile(file);\n        }\n\n        intent.putExtra(MediaStore.EXTRA_OUTPUT, pictureUri);\n        tag.startActivityForResult(intent, PHOTO_REQUEST_TAKEPHOTO);\n    }\n```\n这样，我们就适配结束了\n\n对于覆盖安装，同样的方式：\n\n``` java\nIntent installIntent = new Intent(Intent.ACTION_VIEW);\n                Uri apkUri;\n                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {\n                    installIntent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);\n                    apkUri = FileProvider.getUriForFile(BaseAppUpdateActivity.this, getPackageName()+\".fileprovider\", apkFile);\n                } else {\n                    apkUri = Uri.parse(\"file://\" + apkFile.toString());\n                }\n                installIntent.setDataAndType(apkUri, \"application/vnd.android.package-archive\");\n                startActivity(installIntent);\n                //退出整个app\n                finishAllActivity();\n```\n\n具体可以看看文档：\nhttps://developer.android.com/reference/android/support/v4/content/FileProvider.html?hl=zh-cn\n\n\n## 使用 NDK 私有链接库的问题\n从 Android 7.0 开始，系统将阻止应用动态链接非公开 NDK 库，这种库可能会导致您的应用崩溃。此行为变更旨在为跨平台更新和不同设备提供统一的应用体验。即使您的代码可能不会链接私有库，但您的应用中的第三方静态库可能会这么做。因此，所有开发者都应进行相应检查，确保他们的应用不会在运行 Android 7.0 的设备上崩溃。如果应用使用原生代码，则只能使用公开 NDK API。\n\n应用可通过以下三种方式尝试访问私有平台 API：\n\n* 应用直接访问私有平台库。应更新应用以添加该应用的库副本，或使用公开 NDK API。\n* 应用使用一个可访问私有平台库的第三方库。即使您确定应用不会直接访问私有库，您仍应针对此情景测试应用。\n* 应用引用一个其 APK 中未包含的库。例如，如果尝试使用自己的 OpenSSL 副本，但忘记将它与应用的 APK 进行捆绑，则可能会出现此情况。正常情况下，此应用可在包含 libcrypto.so 的 Android 平台版本上运行。不过，此应用在不包含此库的新版 Android（例如，Android 6.0 和更高的版本）上会崩溃。为修复此问题，请确保 APK 捆绑您的所有非 NDK 库。\n\n这个问题呢，我们就得依靠别人来解决了，当然，如果有自己的 ndk 使用到了私有库，也是要解决的。\n\n首先，我先检查下，有哪些库中使用了私有库，我们把 targetSdkVersion 改成 23，运行在 7.0的手机上，APP启动后，我们观察日志：\n\n```\nas a workaround for http://b/26394120, note that the access will be removed in future releases of Android.\n06-05 16:10:28.556 4284-4284/com.chinahr.android.m W/linker: library \"libcrypto.so\" (\"/vendor/lib/libcrypto.so\") needed or dlopened by \"/data/app/com.chinahr.android.m-1/lib/arm/libgmacs.so\" is not accessible for the namespace \"classloader-namespace\" - the access is temporarily granted as a workaround for http://b/26394120, note that the access will be removed in future releases of Android.\n```\n发现有两处警告，都是来源于 libgmacs.so 中。联系别的部门做适配...\n\n还有，此问题，如果项目 targetSdkVersion < 24，则会在 7.0手机上每次启动app时，弹出警告框：\n![](http://7xr1vo.com1.z0.glb.clouddn.com/%E7%A7%81%E6%9C%89%E5%BA%93.png)\n但也可以继续正常运行，但是这个很不友好，需要尽快联系提供者解决\n\n\n## 其他 7.0 适配的小问题\n### 加密方式\n\n```\n我们在 logcat 中看到：\n06-05 16:10:28.564 4284-4284/com.chinahr.android.m E/System:  ********** PLEASE READ ************\n06-05 16:10:28.564 4284-4284/com.chinahr.android.m E/System:  *\n06-05 16:10:28.564 4284-4284/com.chinahr.android.m E/System:  * New versions of the Android SDK no longer support the Crypto provider.\n06-05 16:10:28.564 4284-4284/com.chinahr.android.m E/System:  * If your app was relying on setSeed() to derive keys from strings, you\n06-05 16:10:28.564 4284-4284/com.chinahr.android.m E/System:  * should switch to using SecretKeySpec to load raw key bytes directly OR\n06-05 16:10:28.564 4284-4284/com.chinahr.android.m E/System:  * use a real key derivation function (KDF). See advice here :\n06-05 16:10:28.564 4284-4284/com.chinahr.android.m E/System:  * http://android-developers.blogspot.com/2016/06/security-crypto-provider-deprecated-in.html\n06-05 16:10:28.564 4284-4284/com.chinahr.android.m E/System:  ***********************************\n06-05 16:10:28.564 4284-4284/com.chinahr.android.m E/System:  Returning an instance of SecureRandom from the Crypto provider\n06-05 16:10:28.564 4284-4284/com.chinahr.android.m E/System:  as a temporary measure so that the apps targeting earlier SDKs\n06-05 16:10:28.564 4284-4284/com.chinahr.android.m E/System:  keep working. Please do not rely on the presence of the Crypto\n06-05 16:10:28.564 4284-4284/com.chinahr.android.m E/System:  provider in the codebase, as our plan is to delete it\n06-05 16:10:28.564 4284-4284/com.chinahr.android.m E/System:  completely in the future.\n06-05 16:10:28.566 4284-4284/com.chinahr.android.m E/System:  ********** PLEASE READ ************\n06-05 16:10:28.566 4284-4284/com.chinahr.android.m E/System:  *\n06-05 16:10:28.566 4284-4284/com.chinahr.android.m E/System:  * New versions of the Android SDK no longer support the Crypto provider.\n06-05 16:10:28.566 4284-4284/com.chinahr.android.m E/System:  * If your app was relying on setSeed() to derive keys from strings, you\n06-05 16:10:28.566 4284-4284/com.chinahr.android.m E/System:  * should switch to using SecretKeySpec to load raw key bytes directly OR\n06-05 16:10:28.566 4284-4284/com.chinahr.android.m E/System:  * use a real key derivation function (KDF). See advice here :\n06-05 16:10:28.566 4284-4284/com.chinahr.android.m E/System:  * http://android-developers.blogspot.com/2016/06/security-crypto-provider-deprecated-in.html\n06-05 16:10:28.566 4284-4284/com.chinahr.android.m E/System:  ***********************************\n```\n发现 google 对加密方式也有了要求。\n名为 Crypto 的 JCA 提供程序已弃用，因为它仅有的 SHA1PRNG 算法为弱加密。应用无法再使用 SHA1PRNG（不安全地）派生密钥，因为不再提供此提供程序。\n而且在未来的版本中，如果继续使用Crypto，将会出错。我们以后需要专注。\n### 通知栏\nAndroid 各个版本中，貌似对通知栏都有一定的更改，而且现在也变得很丰富\n7.0 的通知栏，改变了样式，增加了小图标，还可以显示通知数量。\n\n自己在玩原生7.0 系统时，发现小图标变成灰色的方块了：\n![](http://7xr1vo.com1.z0.glb.clouddn.com/device-2017-06-08-142841.png)\n\n然后，发现在 华为 7.0 手机上，小图标显示又是正常的，应该是华为对通知栏显示做了处理\n![](http://7xr1vo.com1.z0.glb.clouddn.com/device-2017-06-08-195515.png)\n\n这时候就比较蹩脚了，暂且这么干吧，我们项目中，使用了小米推送（通知消息），查阅了小米推送的文档：\n\n    * 如果app中同时存在名为mipush_notification和mipush_small_notification的drawable文件，则使用mipush_notification的drawable作为通知的大图标，mipush_small_notification的drawable作为通知的小图标。\n    * 如果app中只存在其中一个drawable文件，则使用该drawable作为通知的图标。\n    * 如果app中不存在这两个drawable文件，则使用app的icon作为通知的图标。在MIUI中，通知栏图标统一显示为app的icon，不可以定制。\n\n可以添加个小图标，在推送到达时候显示，透明背景的图片，术语叫：带有alpha 通道的图片。\n\n本来也可以通过 自己控制 NotificationManager 来创建显示，如：\n\n``` java\nNotificationManager manager = (NotificationManager) getSystemService(NOTIFICATION_SERVICE);\n        NotificationCompat.Builder builder = new NotificationCompat.Builder(this);\n        Notification notification = builder\n                .setContentTitle(\"这是通知标题\")\n                .setContentText(\"这是通知内容这是通知内容这是通知内容这是通知内容这是通知内容这是通知内容这是通知内容这是通知内容\")\n                .setWhen(System.currentTimeMillis())\n                .setSmallIcon(R.mipmap.ic_launcher)\n//                .setColor(Color.parseColor(\"#ff0000”))// 设置小图标背景颜色\n                .setLargeIcon(BitmapFactory.decodeResource(getResources(), R.mipmap.ic_launcher))\n                .build();\n        manager.notify(1, notification);\n```\n\n![](http://7xr1vo.com1.z0.glb.clouddn.com/device-2017-06-09-162941.png)\n这是我们可以定制的\n但是现在的项目比较死，暂时不适用自定义的了\n暂时使用小米推送的改动小图标的方式，替换上一个透明背景的logo吧，总比灰色的方块强吧。而且其他app也是同样的显示效果，如上面的图标中的百度淘宝和头条。\n有精力的话，使用透传消息，可以自己控制通知栏的样式和显示。\n\n\n-------\n\n参考：\n\nhttp://iluhcm.com/2017/03/12/experience-of-adapting-to-android-notifications/\nhttp://yifeng.studio/2017/05/03/android-7-0-compat-fileprovider/\n","source":"_posts/Android 7.0适配.md","raw":"---\ntitle: Android 7.0适配\ndate: 2017-06-09 20:10\ncategories: Android\ntags: [7.0适配, FileProvider]\n---\n\nAndroid 7.0 行为变更，涉及：电池和内存、后台优化、权限更改、NDK 应用链接至平台库。\n\n作为开发者，我们要关注 权限更改、NDK私有库的问题，适配工作也是围绕这2者展开。\n\n## 分享私有文件的方式\n传递软件包网域外的 file:// URI 可能给接收器留下无法访问的路径。因此，尝试传递 file:// URI 会触发 FileUriExposedException。分享私有文件内容的推荐方法是使用 FileProvider\n\n此类问题，我们要看 关注 拍照、覆盖安装。\n原先的拍照，我们一般这样写：\n\n``` java\npublic static void startCamera(Activity tag, String fileName) {\n        if (!FileUtil.isSDMounted()) {\n            ToastUtil.showShortToast(tag, \"未挂载SD卡....\");\n            return;\n        }\n        Intent intent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);\n        intent.putExtra(MediaStore.EXTRA_OUTPUT, Uri.fromFile(new File(\n                getExternalStorageDirectory(), fileName)));\n        tag.startActivityForResult(intent, PHOTO_REQUEST_TAKEPHOTO);\n    }\n```\n如果 适配到 7.0以上（targetSdkVersion >= 24），上面就会出错：**FileUriExposedException**\nGoogle 也是越来越注重安全的升级了，不让使用这种方式。现在要通过 provider 来进行访问，由 FileProvider 统一去访问相关的目录、文件。\n那具体，我们就看看怎么做：\n\n### 定义FileProvider\n在清单文件中，添加 provider：\n\n``` xml\n<provider\n            android:name=\"android.support.v4.content.FileProvider\"\n            android:authorities=\"com.chinahr.android.m.fileprovider\"\n            android:exported=\"false\"\n            android:grantUriPermissions=\"true\">\n            <!-- name：一般是固定的，如果你不需要定义自己的 provider; \n            如果需要别的特殊逻辑，你需要自定义 provider 去继承 v4 包下的 FileProvider并添加自己的逻辑代码，\n            那么这时候，name 就是你自定义的 provider的全路径了\n            authorities: packageName.fileprovider -->\n\n            <meta-data\n                android:name=\"android.support.FILE_PROVIDER_PATHS\"\n                android:resource=\"@xml/fileprovider\" /><!-- file path 配置文件的路径 -->\n        </provider>\n```\n\n### 配置路径文件\n在固定的目录下，res/xml 目录下，新建自己的 xml。\n\n然后我们开始配置，如何配置呢，我们来看看官方文档的要求：\n\n``` xml\n<paths xmlns:android=\"http://schemas.android.com/apk/res/android\">\n    <!-- 可以配置多个 -->\n    <files-path name=\"my_images\" path=\"images/\"/>\n    ...\n</paths>\n```\n主要有4种路径：\n\n| path      |     dir |\n| :-------- | --------:|\n|files-path   |   Context.getFilesDir() |\n|cache-path  |   Context.getCacheDir) |\n|external-path name=\"name\" path=\"path\"     |   Environment.getExternalStorageDirectory() |\n|external-cache-path name=\"name\" path=\"path\"    |  Context.getExternalCacheDir()|\n\n那我们来个demo：\n在 xml 文件中配置：\n\n``` xml\n<paths>\n    <external-path name=\"takephoto\" path=\"tmp\" />\n    <external-path name=\"apk\" path=\"Download\" />\n    <cache-path name=\"images\" path=\"/\" />\n</paths>\n```\n代表的含义就是：\n在 sd 下的 tmp目录，Download目录下对应 拍照后存储目录、apk下载的目录\n在 packageName/cache 目录下存放app里的图片\n\n配置工作，就ok了，现在解决拍照、覆盖安装崩溃的问题：\n\n``` java\npublic static void startCameraN(Activity tag, String fileName) {\n        if (!FileUtil.isSDMounted()) {\n            ToastUtil.showShortToast(tag, \"未挂载SD卡....\");\n            return;\n        }\n        // 必须和 xml 配置的 path 一致\n        File file = new File(getExternalStorageDirectory(), \"tmp/\"+fileName);\n        Intent intent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);\n        Uri pictureUri;\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {\n            pictureUri = FileProvider.getUriForFile(tag, tag.getPackageName()+\".fileprovider\", file);\n            intent.addFlags(Intent.FLAG_GRANT_WRITE_URI_PERMISSION);// 加上权限，否则也是要出错的\n        } else {\n            pictureUri = Uri.fromFile(file);\n        }\n\n        intent.putExtra(MediaStore.EXTRA_OUTPUT, pictureUri);\n        tag.startActivityForResult(intent, PHOTO_REQUEST_TAKEPHOTO);\n    }\n```\n这样，我们就适配结束了\n\n对于覆盖安装，同样的方式：\n\n``` java\nIntent installIntent = new Intent(Intent.ACTION_VIEW);\n                Uri apkUri;\n                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {\n                    installIntent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);\n                    apkUri = FileProvider.getUriForFile(BaseAppUpdateActivity.this, getPackageName()+\".fileprovider\", apkFile);\n                } else {\n                    apkUri = Uri.parse(\"file://\" + apkFile.toString());\n                }\n                installIntent.setDataAndType(apkUri, \"application/vnd.android.package-archive\");\n                startActivity(installIntent);\n                //退出整个app\n                finishAllActivity();\n```\n\n具体可以看看文档：\nhttps://developer.android.com/reference/android/support/v4/content/FileProvider.html?hl=zh-cn\n\n\n## 使用 NDK 私有链接库的问题\n从 Android 7.0 开始，系统将阻止应用动态链接非公开 NDK 库，这种库可能会导致您的应用崩溃。此行为变更旨在为跨平台更新和不同设备提供统一的应用体验。即使您的代码可能不会链接私有库，但您的应用中的第三方静态库可能会这么做。因此，所有开发者都应进行相应检查，确保他们的应用不会在运行 Android 7.0 的设备上崩溃。如果应用使用原生代码，则只能使用公开 NDK API。\n\n应用可通过以下三种方式尝试访问私有平台 API：\n\n* 应用直接访问私有平台库。应更新应用以添加该应用的库副本，或使用公开 NDK API。\n* 应用使用一个可访问私有平台库的第三方库。即使您确定应用不会直接访问私有库，您仍应针对此情景测试应用。\n* 应用引用一个其 APK 中未包含的库。例如，如果尝试使用自己的 OpenSSL 副本，但忘记将它与应用的 APK 进行捆绑，则可能会出现此情况。正常情况下，此应用可在包含 libcrypto.so 的 Android 平台版本上运行。不过，此应用在不包含此库的新版 Android（例如，Android 6.0 和更高的版本）上会崩溃。为修复此问题，请确保 APK 捆绑您的所有非 NDK 库。\n\n这个问题呢，我们就得依靠别人来解决了，当然，如果有自己的 ndk 使用到了私有库，也是要解决的。\n\n首先，我先检查下，有哪些库中使用了私有库，我们把 targetSdkVersion 改成 23，运行在 7.0的手机上，APP启动后，我们观察日志：\n\n```\nas a workaround for http://b/26394120, note that the access will be removed in future releases of Android.\n06-05 16:10:28.556 4284-4284/com.chinahr.android.m W/linker: library \"libcrypto.so\" (\"/vendor/lib/libcrypto.so\") needed or dlopened by \"/data/app/com.chinahr.android.m-1/lib/arm/libgmacs.so\" is not accessible for the namespace \"classloader-namespace\" - the access is temporarily granted as a workaround for http://b/26394120, note that the access will be removed in future releases of Android.\n```\n发现有两处警告，都是来源于 libgmacs.so 中。联系别的部门做适配...\n\n还有，此问题，如果项目 targetSdkVersion < 24，则会在 7.0手机上每次启动app时，弹出警告框：\n![](http://7xr1vo.com1.z0.glb.clouddn.com/%E7%A7%81%E6%9C%89%E5%BA%93.png)\n但也可以继续正常运行，但是这个很不友好，需要尽快联系提供者解决\n\n\n## 其他 7.0 适配的小问题\n### 加密方式\n\n```\n我们在 logcat 中看到：\n06-05 16:10:28.564 4284-4284/com.chinahr.android.m E/System:  ********** PLEASE READ ************\n06-05 16:10:28.564 4284-4284/com.chinahr.android.m E/System:  *\n06-05 16:10:28.564 4284-4284/com.chinahr.android.m E/System:  * New versions of the Android SDK no longer support the Crypto provider.\n06-05 16:10:28.564 4284-4284/com.chinahr.android.m E/System:  * If your app was relying on setSeed() to derive keys from strings, you\n06-05 16:10:28.564 4284-4284/com.chinahr.android.m E/System:  * should switch to using SecretKeySpec to load raw key bytes directly OR\n06-05 16:10:28.564 4284-4284/com.chinahr.android.m E/System:  * use a real key derivation function (KDF). See advice here :\n06-05 16:10:28.564 4284-4284/com.chinahr.android.m E/System:  * http://android-developers.blogspot.com/2016/06/security-crypto-provider-deprecated-in.html\n06-05 16:10:28.564 4284-4284/com.chinahr.android.m E/System:  ***********************************\n06-05 16:10:28.564 4284-4284/com.chinahr.android.m E/System:  Returning an instance of SecureRandom from the Crypto provider\n06-05 16:10:28.564 4284-4284/com.chinahr.android.m E/System:  as a temporary measure so that the apps targeting earlier SDKs\n06-05 16:10:28.564 4284-4284/com.chinahr.android.m E/System:  keep working. Please do not rely on the presence of the Crypto\n06-05 16:10:28.564 4284-4284/com.chinahr.android.m E/System:  provider in the codebase, as our plan is to delete it\n06-05 16:10:28.564 4284-4284/com.chinahr.android.m E/System:  completely in the future.\n06-05 16:10:28.566 4284-4284/com.chinahr.android.m E/System:  ********** PLEASE READ ************\n06-05 16:10:28.566 4284-4284/com.chinahr.android.m E/System:  *\n06-05 16:10:28.566 4284-4284/com.chinahr.android.m E/System:  * New versions of the Android SDK no longer support the Crypto provider.\n06-05 16:10:28.566 4284-4284/com.chinahr.android.m E/System:  * If your app was relying on setSeed() to derive keys from strings, you\n06-05 16:10:28.566 4284-4284/com.chinahr.android.m E/System:  * should switch to using SecretKeySpec to load raw key bytes directly OR\n06-05 16:10:28.566 4284-4284/com.chinahr.android.m E/System:  * use a real key derivation function (KDF). See advice here :\n06-05 16:10:28.566 4284-4284/com.chinahr.android.m E/System:  * http://android-developers.blogspot.com/2016/06/security-crypto-provider-deprecated-in.html\n06-05 16:10:28.566 4284-4284/com.chinahr.android.m E/System:  ***********************************\n```\n发现 google 对加密方式也有了要求。\n名为 Crypto 的 JCA 提供程序已弃用，因为它仅有的 SHA1PRNG 算法为弱加密。应用无法再使用 SHA1PRNG（不安全地）派生密钥，因为不再提供此提供程序。\n而且在未来的版本中，如果继续使用Crypto，将会出错。我们以后需要专注。\n### 通知栏\nAndroid 各个版本中，貌似对通知栏都有一定的更改，而且现在也变得很丰富\n7.0 的通知栏，改变了样式，增加了小图标，还可以显示通知数量。\n\n自己在玩原生7.0 系统时，发现小图标变成灰色的方块了：\n![](http://7xr1vo.com1.z0.glb.clouddn.com/device-2017-06-08-142841.png)\n\n然后，发现在 华为 7.0 手机上，小图标显示又是正常的，应该是华为对通知栏显示做了处理\n![](http://7xr1vo.com1.z0.glb.clouddn.com/device-2017-06-08-195515.png)\n\n这时候就比较蹩脚了，暂且这么干吧，我们项目中，使用了小米推送（通知消息），查阅了小米推送的文档：\n\n    * 如果app中同时存在名为mipush_notification和mipush_small_notification的drawable文件，则使用mipush_notification的drawable作为通知的大图标，mipush_small_notification的drawable作为通知的小图标。\n    * 如果app中只存在其中一个drawable文件，则使用该drawable作为通知的图标。\n    * 如果app中不存在这两个drawable文件，则使用app的icon作为通知的图标。在MIUI中，通知栏图标统一显示为app的icon，不可以定制。\n\n可以添加个小图标，在推送到达时候显示，透明背景的图片，术语叫：带有alpha 通道的图片。\n\n本来也可以通过 自己控制 NotificationManager 来创建显示，如：\n\n``` java\nNotificationManager manager = (NotificationManager) getSystemService(NOTIFICATION_SERVICE);\n        NotificationCompat.Builder builder = new NotificationCompat.Builder(this);\n        Notification notification = builder\n                .setContentTitle(\"这是通知标题\")\n                .setContentText(\"这是通知内容这是通知内容这是通知内容这是通知内容这是通知内容这是通知内容这是通知内容这是通知内容\")\n                .setWhen(System.currentTimeMillis())\n                .setSmallIcon(R.mipmap.ic_launcher)\n//                .setColor(Color.parseColor(\"#ff0000”))// 设置小图标背景颜色\n                .setLargeIcon(BitmapFactory.decodeResource(getResources(), R.mipmap.ic_launcher))\n                .build();\n        manager.notify(1, notification);\n```\n\n![](http://7xr1vo.com1.z0.glb.clouddn.com/device-2017-06-09-162941.png)\n这是我们可以定制的\n但是现在的项目比较死，暂时不适用自定义的了\n暂时使用小米推送的改动小图标的方式，替换上一个透明背景的logo吧，总比灰色的方块强吧。而且其他app也是同样的显示效果，如上面的图标中的百度淘宝和头条。\n有精力的话，使用透传消息，可以自己控制通知栏的样式和显示。\n\n\n-------\n\n参考：\n\nhttp://iluhcm.com/2017/03/12/experience-of-adapting-to-android-notifications/\nhttp://yifeng.studio/2017/05/03/android-7-0-compat-fileprovider/\n","slug":"Android 7.0适配","published":1,"updated":"2017-06-09T08:57:24.000Z","_id":"cj3pljt1i00049yqwgyhs166u","comments":1,"layout":"post","photos":[],"link":"","content":"<p>Android 7.0 行为变更，涉及：电池和内存、后台优化、权限更改、NDK 应用链接至平台库。</p>\n<p>作为开发者，我们要关注 权限更改、NDK私有库的问题，适配工作也是围绕这2者展开。</p>\n<h2 id=\"分享私有文件的方式\"><a href=\"#分享私有文件的方式\" class=\"headerlink\" title=\"分享私有文件的方式\"></a>分享私有文件的方式</h2><p>传递软件包网域外的 file:// URI 可能给接收器留下无法访问的路径。因此，尝试传递 file:// URI 会触发 FileUriExposedException。分享私有文件内容的推荐方法是使用 FileProvider</p>\n<p>此类问题，我们要看 关注 拍照、覆盖安装。<br>原先的拍照，我们一般这样写：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">startCamera</span><span class=\"params\">(Activity tag, String fileName)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (!FileUtil.isSDMounted()) &#123;</div><div class=\"line\">            ToastUtil.showShortToast(tag, <span class=\"string\">\"未挂载SD卡....\"</span>);</div><div class=\"line\">            <span class=\"keyword\">return</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        Intent intent = <span class=\"keyword\">new</span> Intent(MediaStore.ACTION_IMAGE_CAPTURE);</div><div class=\"line\">        intent.putExtra(MediaStore.EXTRA_OUTPUT, Uri.fromFile(<span class=\"keyword\">new</span> File(</div><div class=\"line\">                getExternalStorageDirectory(), fileName)));</div><div class=\"line\">        tag.startActivityForResult(intent, PHOTO_REQUEST_TAKEPHOTO);</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p>如果 适配到 7.0以上（targetSdkVersion &gt;= 24），上面就会出错：<strong>FileUriExposedException</strong><br>Google 也是越来越注重安全的升级了，不让使用这种方式。现在要通过 provider 来进行访问，由 FileProvider 统一去访问相关的目录、文件。<br>那具体，我们就看看怎么做：</p>\n<h3 id=\"定义FileProvider\"><a href=\"#定义FileProvider\" class=\"headerlink\" title=\"定义FileProvider\"></a>定义FileProvider</h3><p>在清单文件中，添加 provider：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">provider</span></span></div><div class=\"line\">            <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.support.v4.content.FileProvider\"</span></div><div class=\"line\">            <span class=\"attr\">android:authorities</span>=<span class=\"string\">\"com.chinahr.android.m.fileprovider\"</span></div><div class=\"line\">            <span class=\"attr\">android:exported</span>=<span class=\"string\">\"false\"</span></div><div class=\"line\">            <span class=\"attr\">android:grantUriPermissions</span>=<span class=\"string\">\"true\"</span>&gt;</div><div class=\"line\">            <span class=\"comment\">&lt;!-- name：一般是固定的，如果你不需要定义自己的 provider; </span></div><div class=\"line\">            如果需要别的特殊逻辑，你需要自定义 provider 去继承 v4 包下的 FileProvider并添加自己的逻辑代码，</div><div class=\"line\">            那么这时候，name 就是你自定义的 provider的全路径了</div><div class=\"line\">            authorities: packageName.fileprovider --&gt;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">meta-data</span></span></div><div class=\"line\">                <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.support.FILE_PROVIDER_PATHS\"</span></div><div class=\"line\">                <span class=\"attr\">android:resource</span>=<span class=\"string\">\"@xml/fileprovider\"</span> /&gt;<span class=\"comment\">&lt;!-- file path 配置文件的路径 --&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">provider</span>&gt;</span></div></pre></td></tr></table></figure>\n<h3 id=\"配置路径文件\"><a href=\"#配置路径文件\" class=\"headerlink\" title=\"配置路径文件\"></a>配置路径文件</h3><p>在固定的目录下，res/xml 目录下，新建自己的 xml。</p>\n<p>然后我们开始配置，如何配置呢，我们来看看官方文档的要求：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">paths</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- 可以配置多个 --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">files-path</span> <span class=\"attr\">name</span>=<span class=\"string\">\"my_images\"</span> <span class=\"attr\">path</span>=<span class=\"string\">\"images/\"</span>/&gt;</span></div><div class=\"line\">    ...</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">paths</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>主要有4种路径：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">path</th>\n<th style=\"text-align:right\">dir</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">files-path</td>\n<td style=\"text-align:right\">Context.getFilesDir()</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">cache-path</td>\n<td style=\"text-align:right\">Context.getCacheDir)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">external-path name=”name” path=”path”</td>\n<td style=\"text-align:right\">Environment.getExternalStorageDirectory()</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">external-cache-path name=”name” path=”path”</td>\n<td style=\"text-align:right\">Context.getExternalCacheDir()</td>\n</tr>\n</tbody>\n</table>\n<p>那我们来个demo：<br>在 xml 文件中配置：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">paths</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">external-path</span> <span class=\"attr\">name</span>=<span class=\"string\">\"takephoto\"</span> <span class=\"attr\">path</span>=<span class=\"string\">\"tmp\"</span> /&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">external-path</span> <span class=\"attr\">name</span>=<span class=\"string\">\"apk\"</span> <span class=\"attr\">path</span>=<span class=\"string\">\"Download\"</span> /&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">cache-path</span> <span class=\"attr\">name</span>=<span class=\"string\">\"images\"</span> <span class=\"attr\">path</span>=<span class=\"string\">\"/\"</span> /&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">paths</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>代表的含义就是：<br>在 sd 下的 tmp目录，Download目录下对应 拍照后存储目录、apk下载的目录<br>在 packageName/cache 目录下存放app里的图片</p>\n<p>配置工作，就ok了，现在解决拍照、覆盖安装崩溃的问题：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">startCameraN</span><span class=\"params\">(Activity tag, String fileName)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (!FileUtil.isSDMounted()) &#123;</div><div class=\"line\">            ToastUtil.showShortToast(tag, <span class=\"string\">\"未挂载SD卡....\"</span>);</div><div class=\"line\">            <span class=\"keyword\">return</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"comment\">// 必须和 xml 配置的 path 一致</span></div><div class=\"line\">        File file = <span class=\"keyword\">new</span> File(getExternalStorageDirectory(), <span class=\"string\">\"tmp/\"</span>+fileName);</div><div class=\"line\">        Intent intent = <span class=\"keyword\">new</span> Intent(MediaStore.ACTION_IMAGE_CAPTURE);</div><div class=\"line\">        Uri pictureUri;</div><div class=\"line\">        <span class=\"keyword\">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.N) &#123;</div><div class=\"line\">            pictureUri = FileProvider.getUriForFile(tag, tag.getPackageName()+<span class=\"string\">\".fileprovider\"</span>, file);</div><div class=\"line\">            intent.addFlags(Intent.FLAG_GRANT_WRITE_URI_PERMISSION);<span class=\"comment\">// 加上权限，否则也是要出错的</span></div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            pictureUri = Uri.fromFile(file);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        intent.putExtra(MediaStore.EXTRA_OUTPUT, pictureUri);</div><div class=\"line\">        tag.startActivityForResult(intent, PHOTO_REQUEST_TAKEPHOTO);</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p>这样，我们就适配结束了</p>\n<p>对于覆盖安装，同样的方式：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">Intent installIntent = <span class=\"keyword\">new</span> Intent(Intent.ACTION_VIEW);</div><div class=\"line\">                Uri apkUri;</div><div class=\"line\">                <span class=\"keyword\">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.N) &#123;</div><div class=\"line\">                    installIntent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);</div><div class=\"line\">                    apkUri = FileProvider.getUriForFile(BaseAppUpdateActivity.<span class=\"keyword\">this</span>, getPackageName()+<span class=\"string\">\".fileprovider\"</span>, apkFile);</div><div class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                    apkUri = Uri.parse(<span class=\"string\">\"file://\"</span> + apkFile.toString());</div><div class=\"line\">                &#125;</div><div class=\"line\">                installIntent.setDataAndType(apkUri, <span class=\"string\">\"application/vnd.android.package-archive\"</span>);</div><div class=\"line\">                startActivity(installIntent);</div><div class=\"line\">                <span class=\"comment\">//退出整个app</span></div><div class=\"line\">                finishAllActivity();</div></pre></td></tr></table></figure>\n<p>具体可以看看文档：<br><a href=\"https://developer.android.com/reference/android/support/v4/content/FileProvider.html?hl=zh-cn\" target=\"_blank\" rel=\"external\">https://developer.android.com/reference/android/support/v4/content/FileProvider.html?hl=zh-cn</a></p>\n<h2 id=\"使用-NDK-私有链接库的问题\"><a href=\"#使用-NDK-私有链接库的问题\" class=\"headerlink\" title=\"使用 NDK 私有链接库的问题\"></a>使用 NDK 私有链接库的问题</h2><p>从 Android 7.0 开始，系统将阻止应用动态链接非公开 NDK 库，这种库可能会导致您的应用崩溃。此行为变更旨在为跨平台更新和不同设备提供统一的应用体验。即使您的代码可能不会链接私有库，但您的应用中的第三方静态库可能会这么做。因此，所有开发者都应进行相应检查，确保他们的应用不会在运行 Android 7.0 的设备上崩溃。如果应用使用原生代码，则只能使用公开 NDK API。</p>\n<p>应用可通过以下三种方式尝试访问私有平台 API：</p>\n<ul>\n<li>应用直接访问私有平台库。应更新应用以添加该应用的库副本，或使用公开 NDK API。</li>\n<li>应用使用一个可访问私有平台库的第三方库。即使您确定应用不会直接访问私有库，您仍应针对此情景测试应用。</li>\n<li>应用引用一个其 APK 中未包含的库。例如，如果尝试使用自己的 OpenSSL 副本，但忘记将它与应用的 APK 进行捆绑，则可能会出现此情况。正常情况下，此应用可在包含 libcrypto.so 的 Android 平台版本上运行。不过，此应用在不包含此库的新版 Android（例如，Android 6.0 和更高的版本）上会崩溃。为修复此问题，请确保 APK 捆绑您的所有非 NDK 库。</li>\n</ul>\n<p>这个问题呢，我们就得依靠别人来解决了，当然，如果有自己的 ndk 使用到了私有库，也是要解决的。</p>\n<p>首先，我先检查下，有哪些库中使用了私有库，我们把 targetSdkVersion 改成 23，运行在 7.0的手机上，APP启动后，我们观察日志：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">as a workaround for http://b/26394120, note that the access will be removed in future releases of Android.</div><div class=\"line\">06-05 16:10:28.556 4284-4284/com.chinahr.android.m W/linker: library &quot;libcrypto.so&quot; (&quot;/vendor/lib/libcrypto.so&quot;) needed or dlopened by &quot;/data/app/com.chinahr.android.m-1/lib/arm/libgmacs.so&quot; is not accessible for the namespace &quot;classloader-namespace&quot; - the access is temporarily granted as a workaround for http://b/26394120, note that the access will be removed in future releases of Android.</div></pre></td></tr></table></figure>\n<p>发现有两处警告，都是来源于 libgmacs.so 中。联系别的部门做适配…</p>\n<p>还有，此问题，如果项目 targetSdkVersion &lt; 24，则会在 7.0手机上每次启动app时，弹出警告框：<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/%E7%A7%81%E6%9C%89%E5%BA%93.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure><br>但也可以继续正常运行，但是这个很不友好，需要尽快联系提供者解决</p>\n<h2 id=\"其他-7-0-适配的小问题\"><a href=\"#其他-7-0-适配的小问题\" class=\"headerlink\" title=\"其他 7.0 适配的小问题\"></a>其他 7.0 适配的小问题</h2><h3 id=\"加密方式\"><a href=\"#加密方式\" class=\"headerlink\" title=\"加密方式\"></a>加密方式</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">我们在 logcat 中看到：</div><div class=\"line\">06-05 16:10:28.564 4284-4284/com.chinahr.android.m E/System:  ********** PLEASE READ ************</div><div class=\"line\">06-05 16:10:28.564 4284-4284/com.chinahr.android.m E/System:  *</div><div class=\"line\">06-05 16:10:28.564 4284-4284/com.chinahr.android.m E/System:  * New versions of the Android SDK no longer support the Crypto provider.</div><div class=\"line\">06-05 16:10:28.564 4284-4284/com.chinahr.android.m E/System:  * If your app was relying on setSeed() to derive keys from strings, you</div><div class=\"line\">06-05 16:10:28.564 4284-4284/com.chinahr.android.m E/System:  * should switch to using SecretKeySpec to load raw key bytes directly OR</div><div class=\"line\">06-05 16:10:28.564 4284-4284/com.chinahr.android.m E/System:  * use a real key derivation function (KDF). See advice here :</div><div class=\"line\">06-05 16:10:28.564 4284-4284/com.chinahr.android.m E/System:  * http://android-developers.blogspot.com/2016/06/security-crypto-provider-deprecated-in.html</div><div class=\"line\">06-05 16:10:28.564 4284-4284/com.chinahr.android.m E/System:  ***********************************</div><div class=\"line\">06-05 16:10:28.564 4284-4284/com.chinahr.android.m E/System:  Returning an instance of SecureRandom from the Crypto provider</div><div class=\"line\">06-05 16:10:28.564 4284-4284/com.chinahr.android.m E/System:  as a temporary measure so that the apps targeting earlier SDKs</div><div class=\"line\">06-05 16:10:28.564 4284-4284/com.chinahr.android.m E/System:  keep working. Please do not rely on the presence of the Crypto</div><div class=\"line\">06-05 16:10:28.564 4284-4284/com.chinahr.android.m E/System:  provider in the codebase, as our plan is to delete it</div><div class=\"line\">06-05 16:10:28.564 4284-4284/com.chinahr.android.m E/System:  completely in the future.</div><div class=\"line\">06-05 16:10:28.566 4284-4284/com.chinahr.android.m E/System:  ********** PLEASE READ ************</div><div class=\"line\">06-05 16:10:28.566 4284-4284/com.chinahr.android.m E/System:  *</div><div class=\"line\">06-05 16:10:28.566 4284-4284/com.chinahr.android.m E/System:  * New versions of the Android SDK no longer support the Crypto provider.</div><div class=\"line\">06-05 16:10:28.566 4284-4284/com.chinahr.android.m E/System:  * If your app was relying on setSeed() to derive keys from strings, you</div><div class=\"line\">06-05 16:10:28.566 4284-4284/com.chinahr.android.m E/System:  * should switch to using SecretKeySpec to load raw key bytes directly OR</div><div class=\"line\">06-05 16:10:28.566 4284-4284/com.chinahr.android.m E/System:  * use a real key derivation function (KDF). See advice here :</div><div class=\"line\">06-05 16:10:28.566 4284-4284/com.chinahr.android.m E/System:  * http://android-developers.blogspot.com/2016/06/security-crypto-provider-deprecated-in.html</div><div class=\"line\">06-05 16:10:28.566 4284-4284/com.chinahr.android.m E/System:  ***********************************</div></pre></td></tr></table></figure>\n<p>发现 google 对加密方式也有了要求。<br>名为 Crypto 的 JCA 提供程序已弃用，因为它仅有的 SHA1PRNG 算法为弱加密。应用无法再使用 SHA1PRNG（不安全地）派生密钥，因为不再提供此提供程序。<br>而且在未来的版本中，如果继续使用Crypto，将会出错。我们以后需要专注。</p>\n<h3 id=\"通知栏\"><a href=\"#通知栏\" class=\"headerlink\" title=\"通知栏\"></a>通知栏</h3><p>Android 各个版本中，貌似对通知栏都有一定的更改，而且现在也变得很丰富<br>7.0 的通知栏，改变了样式，增加了小图标，还可以显示通知数量。</p>\n<p>自己在玩原生7.0 系统时，发现小图标变成灰色的方块了：<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/device-2017-06-08-142841.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure></p>\n<p>然后，发现在 华为 7.0 手机上，小图标显示又是正常的，应该是华为对通知栏显示做了处理<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/device-2017-06-08-195515.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure></p>\n<p>这时候就比较蹩脚了，暂且这么干吧，我们项目中，使用了小米推送（通知消息），查阅了小米推送的文档：</p>\n<pre><code>* 如果app中同时存在名为mipush_notification和mipush_small_notification的drawable文件，则使用mipush_notification的drawable作为通知的大图标，mipush_small_notification的drawable作为通知的小图标。\n* 如果app中只存在其中一个drawable文件，则使用该drawable作为通知的图标。\n* 如果app中不存在这两个drawable文件，则使用app的icon作为通知的图标。在MIUI中，通知栏图标统一显示为app的icon，不可以定制。\n</code></pre><p>可以添加个小图标，在推送到达时候显示，透明背景的图片，术语叫：带有alpha 通道的图片。</p>\n<p>本来也可以通过 自己控制 NotificationManager 来创建显示，如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">NotificationManager manager = (NotificationManager) getSystemService(NOTIFICATION_SERVICE);</div><div class=\"line\">        NotificationCompat.Builder builder = <span class=\"keyword\">new</span> NotificationCompat.Builder(<span class=\"keyword\">this</span>);</div><div class=\"line\">        Notification notification = builder</div><div class=\"line\">                .setContentTitle(<span class=\"string\">\"这是通知标题\"</span>)</div><div class=\"line\">                .setContentText(<span class=\"string\">\"这是通知内容这是通知内容这是通知内容这是通知内容这是通知内容这是通知内容这是通知内容这是通知内容\"</span>)</div><div class=\"line\">                .setWhen(System.currentTimeMillis())</div><div class=\"line\">                .setSmallIcon(R.mipmap.ic_launcher)</div><div class=\"line\"><span class=\"comment\">//                .setColor(Color.parseColor(\"#ff0000”))// 设置小图标背景颜色</span></div><div class=\"line\">                .setLargeIcon(BitmapFactory.decodeResource(getResources(), R.mipmap.ic_launcher))</div><div class=\"line\">                .build();</div><div class=\"line\">        manager.notify(<span class=\"number\">1</span>, notification);</div></pre></td></tr></table></figure>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/device-2017-06-09-162941.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>这是我们可以定制的<br>但是现在的项目比较死，暂时不适用自定义的了<br>暂时使用小米推送的改动小图标的方式，替换上一个透明背景的logo吧，总比灰色的方块强吧。而且其他app也是同样的显示效果，如上面的图标中的百度淘宝和头条。<br>有精力的话，使用透传消息，可以自己控制通知栏的样式和显示。</p>\n<hr>\n<p>参考：</p>\n<p><a href=\"http://iluhcm.com/2017/03/12/experience-of-adapting-to-android-notifications/\" target=\"_blank\" rel=\"external\">http://iluhcm.com/2017/03/12/experience-of-adapting-to-android-notifications/</a><br><a href=\"http://yifeng.studio/2017/05/03/android-7-0-compat-fileprovider/\" target=\"_blank\" rel=\"external\">http://yifeng.studio/2017/05/03/android-7-0-compat-fileprovider/</a></p>\n","excerpt":"","more":"<p>Android 7.0 行为变更，涉及：电池和内存、后台优化、权限更改、NDK 应用链接至平台库。</p>\n<p>作为开发者，我们要关注 权限更改、NDK私有库的问题，适配工作也是围绕这2者展开。</p>\n<h2 id=\"分享私有文件的方式\"><a href=\"#分享私有文件的方式\" class=\"headerlink\" title=\"分享私有文件的方式\"></a>分享私有文件的方式</h2><p>传递软件包网域外的 file:// URI 可能给接收器留下无法访问的路径。因此，尝试传递 file:// URI 会触发 FileUriExposedException。分享私有文件内容的推荐方法是使用 FileProvider</p>\n<p>此类问题，我们要看 关注 拍照、覆盖安装。<br>原先的拍照，我们一般这样写：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">startCamera</span><span class=\"params\">(Activity tag, String fileName)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (!FileUtil.isSDMounted()) &#123;</div><div class=\"line\">            ToastUtil.showShortToast(tag, <span class=\"string\">\"未挂载SD卡....\"</span>);</div><div class=\"line\">            <span class=\"keyword\">return</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        Intent intent = <span class=\"keyword\">new</span> Intent(MediaStore.ACTION_IMAGE_CAPTURE);</div><div class=\"line\">        intent.putExtra(MediaStore.EXTRA_OUTPUT, Uri.fromFile(<span class=\"keyword\">new</span> File(</div><div class=\"line\">                getExternalStorageDirectory(), fileName)));</div><div class=\"line\">        tag.startActivityForResult(intent, PHOTO_REQUEST_TAKEPHOTO);</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p>如果 适配到 7.0以上（targetSdkVersion &gt;= 24），上面就会出错：<strong>FileUriExposedException</strong><br>Google 也是越来越注重安全的升级了，不让使用这种方式。现在要通过 provider 来进行访问，由 FileProvider 统一去访问相关的目录、文件。<br>那具体，我们就看看怎么做：</p>\n<h3 id=\"定义FileProvider\"><a href=\"#定义FileProvider\" class=\"headerlink\" title=\"定义FileProvider\"></a>定义FileProvider</h3><p>在清单文件中，添加 provider：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">provider</span></div><div class=\"line\">            <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.support.v4.content.FileProvider\"</span></div><div class=\"line\">            <span class=\"attr\">android:authorities</span>=<span class=\"string\">\"com.chinahr.android.m.fileprovider\"</span></div><div class=\"line\">            <span class=\"attr\">android:exported</span>=<span class=\"string\">\"false\"</span></div><div class=\"line\">            <span class=\"attr\">android:grantUriPermissions</span>=<span class=\"string\">\"true\"</span>&gt;</span></div><div class=\"line\">            <span class=\"comment\">&lt;!-- name：一般是固定的，如果你不需要定义自己的 provider; </div><div class=\"line\">            如果需要别的特殊逻辑，你需要自定义 provider 去继承 v4 包下的 FileProvider并添加自己的逻辑代码，</div><div class=\"line\">            那么这时候，name 就是你自定义的 provider的全路径了</div><div class=\"line\">            authorities: packageName.fileprovider --&gt;</span></div><div class=\"line\"></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">meta-data</span></div><div class=\"line\">                <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.support.FILE_PROVIDER_PATHS\"</span></div><div class=\"line\">                <span class=\"attr\">android:resource</span>=<span class=\"string\">\"@xml/fileprovider\"</span> /&gt;</span><span class=\"comment\">&lt;!-- file path 配置文件的路径 --&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">provider</span>&gt;</span></div></pre></td></tr></table></figure>\n<h3 id=\"配置路径文件\"><a href=\"#配置路径文件\" class=\"headerlink\" title=\"配置路径文件\"></a>配置路径文件</h3><p>在固定的目录下，res/xml 目录下，新建自己的 xml。</p>\n<p>然后我们开始配置，如何配置呢，我们来看看官方文档的要求：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">paths</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- 可以配置多个 --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">files-path</span> <span class=\"attr\">name</span>=<span class=\"string\">\"my_images\"</span> <span class=\"attr\">path</span>=<span class=\"string\">\"images/\"</span>/&gt;</span></div><div class=\"line\">    ...</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">paths</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>主要有4种路径：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">path</th>\n<th style=\"text-align:right\">dir</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">files-path</td>\n<td style=\"text-align:right\">Context.getFilesDir()</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">cache-path</td>\n<td style=\"text-align:right\">Context.getCacheDir)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">external-path name=”name” path=”path”</td>\n<td style=\"text-align:right\">Environment.getExternalStorageDirectory()</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">external-cache-path name=”name” path=”path”</td>\n<td style=\"text-align:right\">Context.getExternalCacheDir()</td>\n</tr>\n</tbody>\n</table>\n<p>那我们来个demo：<br>在 xml 文件中配置：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">paths</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">external-path</span> <span class=\"attr\">name</span>=<span class=\"string\">\"takephoto\"</span> <span class=\"attr\">path</span>=<span class=\"string\">\"tmp\"</span> /&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">external-path</span> <span class=\"attr\">name</span>=<span class=\"string\">\"apk\"</span> <span class=\"attr\">path</span>=<span class=\"string\">\"Download\"</span> /&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">cache-path</span> <span class=\"attr\">name</span>=<span class=\"string\">\"images\"</span> <span class=\"attr\">path</span>=<span class=\"string\">\"/\"</span> /&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">paths</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>代表的含义就是：<br>在 sd 下的 tmp目录，Download目录下对应 拍照后存储目录、apk下载的目录<br>在 packageName/cache 目录下存放app里的图片</p>\n<p>配置工作，就ok了，现在解决拍照、覆盖安装崩溃的问题：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">startCameraN</span><span class=\"params\">(Activity tag, String fileName)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (!FileUtil.isSDMounted()) &#123;</div><div class=\"line\">            ToastUtil.showShortToast(tag, <span class=\"string\">\"未挂载SD卡....\"</span>);</div><div class=\"line\">            <span class=\"keyword\">return</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"comment\">// 必须和 xml 配置的 path 一致</span></div><div class=\"line\">        File file = <span class=\"keyword\">new</span> File(getExternalStorageDirectory(), <span class=\"string\">\"tmp/\"</span>+fileName);</div><div class=\"line\">        Intent intent = <span class=\"keyword\">new</span> Intent(MediaStore.ACTION_IMAGE_CAPTURE);</div><div class=\"line\">        Uri pictureUri;</div><div class=\"line\">        <span class=\"keyword\">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.N) &#123;</div><div class=\"line\">            pictureUri = FileProvider.getUriForFile(tag, tag.getPackageName()+<span class=\"string\">\".fileprovider\"</span>, file);</div><div class=\"line\">            intent.addFlags(Intent.FLAG_GRANT_WRITE_URI_PERMISSION);<span class=\"comment\">// 加上权限，否则也是要出错的</span></div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            pictureUri = Uri.fromFile(file);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        intent.putExtra(MediaStore.EXTRA_OUTPUT, pictureUri);</div><div class=\"line\">        tag.startActivityForResult(intent, PHOTO_REQUEST_TAKEPHOTO);</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p>这样，我们就适配结束了</p>\n<p>对于覆盖安装，同样的方式：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">Intent installIntent = <span class=\"keyword\">new</span> Intent(Intent.ACTION_VIEW);</div><div class=\"line\">                Uri apkUri;</div><div class=\"line\">                <span class=\"keyword\">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.N) &#123;</div><div class=\"line\">                    installIntent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);</div><div class=\"line\">                    apkUri = FileProvider.getUriForFile(BaseAppUpdateActivity.<span class=\"keyword\">this</span>, getPackageName()+<span class=\"string\">\".fileprovider\"</span>, apkFile);</div><div class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                    apkUri = Uri.parse(<span class=\"string\">\"file://\"</span> + apkFile.toString());</div><div class=\"line\">                &#125;</div><div class=\"line\">                installIntent.setDataAndType(apkUri, <span class=\"string\">\"application/vnd.android.package-archive\"</span>);</div><div class=\"line\">                startActivity(installIntent);</div><div class=\"line\">                <span class=\"comment\">//退出整个app</span></div><div class=\"line\">                finishAllActivity();</div></pre></td></tr></table></figure>\n<p>具体可以看看文档：<br><a href=\"https://developer.android.com/reference/android/support/v4/content/FileProvider.html?hl=zh-cn\">https://developer.android.com/reference/android/support/v4/content/FileProvider.html?hl=zh-cn</a></p>\n<h2 id=\"使用-NDK-私有链接库的问题\"><a href=\"#使用-NDK-私有链接库的问题\" class=\"headerlink\" title=\"使用 NDK 私有链接库的问题\"></a>使用 NDK 私有链接库的问题</h2><p>从 Android 7.0 开始，系统将阻止应用动态链接非公开 NDK 库，这种库可能会导致您的应用崩溃。此行为变更旨在为跨平台更新和不同设备提供统一的应用体验。即使您的代码可能不会链接私有库，但您的应用中的第三方静态库可能会这么做。因此，所有开发者都应进行相应检查，确保他们的应用不会在运行 Android 7.0 的设备上崩溃。如果应用使用原生代码，则只能使用公开 NDK API。</p>\n<p>应用可通过以下三种方式尝试访问私有平台 API：</p>\n<ul>\n<li>应用直接访问私有平台库。应更新应用以添加该应用的库副本，或使用公开 NDK API。</li>\n<li>应用使用一个可访问私有平台库的第三方库。即使您确定应用不会直接访问私有库，您仍应针对此情景测试应用。</li>\n<li>应用引用一个其 APK 中未包含的库。例如，如果尝试使用自己的 OpenSSL 副本，但忘记将它与应用的 APK 进行捆绑，则可能会出现此情况。正常情况下，此应用可在包含 libcrypto.so 的 Android 平台版本上运行。不过，此应用在不包含此库的新版 Android（例如，Android 6.0 和更高的版本）上会崩溃。为修复此问题，请确保 APK 捆绑您的所有非 NDK 库。</li>\n</ul>\n<p>这个问题呢，我们就得依靠别人来解决了，当然，如果有自己的 ndk 使用到了私有库，也是要解决的。</p>\n<p>首先，我先检查下，有哪些库中使用了私有库，我们把 targetSdkVersion 改成 23，运行在 7.0的手机上，APP启动后，我们观察日志：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">as a workaround for http://b/26394120, note that the access will be removed in future releases of Android.</div><div class=\"line\">06-05 16:10:28.556 4284-4284/com.chinahr.android.m W/linker: library &quot;libcrypto.so&quot; (&quot;/vendor/lib/libcrypto.so&quot;) needed or dlopened by &quot;/data/app/com.chinahr.android.m-1/lib/arm/libgmacs.so&quot; is not accessible for the namespace &quot;classloader-namespace&quot; - the access is temporarily granted as a workaround for http://b/26394120, note that the access will be removed in future releases of Android.</div></pre></td></tr></table></figure>\n<p>发现有两处警告，都是来源于 libgmacs.so 中。联系别的部门做适配…</p>\n<p>还有，此问题，如果项目 targetSdkVersion &lt; 24，则会在 7.0手机上每次启动app时，弹出警告框：<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/%E7%A7%81%E6%9C%89%E5%BA%93.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure><br>但也可以继续正常运行，但是这个很不友好，需要尽快联系提供者解决</p>\n<h2 id=\"其他-7-0-适配的小问题\"><a href=\"#其他-7-0-适配的小问题\" class=\"headerlink\" title=\"其他 7.0 适配的小问题\"></a>其他 7.0 适配的小问题</h2><h3 id=\"加密方式\"><a href=\"#加密方式\" class=\"headerlink\" title=\"加密方式\"></a>加密方式</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">我们在 logcat 中看到：</div><div class=\"line\">06-05 16:10:28.564 4284-4284/com.chinahr.android.m E/System:  ********** PLEASE READ ************</div><div class=\"line\">06-05 16:10:28.564 4284-4284/com.chinahr.android.m E/System:  *</div><div class=\"line\">06-05 16:10:28.564 4284-4284/com.chinahr.android.m E/System:  * New versions of the Android SDK no longer support the Crypto provider.</div><div class=\"line\">06-05 16:10:28.564 4284-4284/com.chinahr.android.m E/System:  * If your app was relying on setSeed() to derive keys from strings, you</div><div class=\"line\">06-05 16:10:28.564 4284-4284/com.chinahr.android.m E/System:  * should switch to using SecretKeySpec to load raw key bytes directly OR</div><div class=\"line\">06-05 16:10:28.564 4284-4284/com.chinahr.android.m E/System:  * use a real key derivation function (KDF). See advice here :</div><div class=\"line\">06-05 16:10:28.564 4284-4284/com.chinahr.android.m E/System:  * http://android-developers.blogspot.com/2016/06/security-crypto-provider-deprecated-in.html</div><div class=\"line\">06-05 16:10:28.564 4284-4284/com.chinahr.android.m E/System:  ***********************************</div><div class=\"line\">06-05 16:10:28.564 4284-4284/com.chinahr.android.m E/System:  Returning an instance of SecureRandom from the Crypto provider</div><div class=\"line\">06-05 16:10:28.564 4284-4284/com.chinahr.android.m E/System:  as a temporary measure so that the apps targeting earlier SDKs</div><div class=\"line\">06-05 16:10:28.564 4284-4284/com.chinahr.android.m E/System:  keep working. Please do not rely on the presence of the Crypto</div><div class=\"line\">06-05 16:10:28.564 4284-4284/com.chinahr.android.m E/System:  provider in the codebase, as our plan is to delete it</div><div class=\"line\">06-05 16:10:28.564 4284-4284/com.chinahr.android.m E/System:  completely in the future.</div><div class=\"line\">06-05 16:10:28.566 4284-4284/com.chinahr.android.m E/System:  ********** PLEASE READ ************</div><div class=\"line\">06-05 16:10:28.566 4284-4284/com.chinahr.android.m E/System:  *</div><div class=\"line\">06-05 16:10:28.566 4284-4284/com.chinahr.android.m E/System:  * New versions of the Android SDK no longer support the Crypto provider.</div><div class=\"line\">06-05 16:10:28.566 4284-4284/com.chinahr.android.m E/System:  * If your app was relying on setSeed() to derive keys from strings, you</div><div class=\"line\">06-05 16:10:28.566 4284-4284/com.chinahr.android.m E/System:  * should switch to using SecretKeySpec to load raw key bytes directly OR</div><div class=\"line\">06-05 16:10:28.566 4284-4284/com.chinahr.android.m E/System:  * use a real key derivation function (KDF). See advice here :</div><div class=\"line\">06-05 16:10:28.566 4284-4284/com.chinahr.android.m E/System:  * http://android-developers.blogspot.com/2016/06/security-crypto-provider-deprecated-in.html</div><div class=\"line\">06-05 16:10:28.566 4284-4284/com.chinahr.android.m E/System:  ***********************************</div></pre></td></tr></table></figure>\n<p>发现 google 对加密方式也有了要求。<br>名为 Crypto 的 JCA 提供程序已弃用，因为它仅有的 SHA1PRNG 算法为弱加密。应用无法再使用 SHA1PRNG（不安全地）派生密钥，因为不再提供此提供程序。<br>而且在未来的版本中，如果继续使用Crypto，将会出错。我们以后需要专注。</p>\n<h3 id=\"通知栏\"><a href=\"#通知栏\" class=\"headerlink\" title=\"通知栏\"></a>通知栏</h3><p>Android 各个版本中，貌似对通知栏都有一定的更改，而且现在也变得很丰富<br>7.0 的通知栏，改变了样式，增加了小图标，还可以显示通知数量。</p>\n<p>自己在玩原生7.0 系统时，发现小图标变成灰色的方块了：<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/device-2017-06-08-142841.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure></p>\n<p>然后，发现在 华为 7.0 手机上，小图标显示又是正常的，应该是华为对通知栏显示做了处理<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/device-2017-06-08-195515.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure></p>\n<p>这时候就比较蹩脚了，暂且这么干吧，我们项目中，使用了小米推送（通知消息），查阅了小米推送的文档：</p>\n<pre><code>* 如果app中同时存在名为mipush_notification和mipush_small_notification的drawable文件，则使用mipush_notification的drawable作为通知的大图标，mipush_small_notification的drawable作为通知的小图标。\n* 如果app中只存在其中一个drawable文件，则使用该drawable作为通知的图标。\n* 如果app中不存在这两个drawable文件，则使用app的icon作为通知的图标。在MIUI中，通知栏图标统一显示为app的icon，不可以定制。\n</code></pre><p>可以添加个小图标，在推送到达时候显示，透明背景的图片，术语叫：带有alpha 通道的图片。</p>\n<p>本来也可以通过 自己控制 NotificationManager 来创建显示，如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">NotificationManager manager = (NotificationManager) getSystemService(NOTIFICATION_SERVICE);</div><div class=\"line\">        NotificationCompat.Builder builder = <span class=\"keyword\">new</span> NotificationCompat.Builder(<span class=\"keyword\">this</span>);</div><div class=\"line\">        Notification notification = builder</div><div class=\"line\">                .setContentTitle(<span class=\"string\">\"这是通知标题\"</span>)</div><div class=\"line\">                .setContentText(<span class=\"string\">\"这是通知内容这是通知内容这是通知内容这是通知内容这是通知内容这是通知内容这是通知内容这是通知内容\"</span>)</div><div class=\"line\">                .setWhen(System.currentTimeMillis())</div><div class=\"line\">                .setSmallIcon(R.mipmap.ic_launcher)</div><div class=\"line\"><span class=\"comment\">//                .setColor(Color.parseColor(\"#ff0000”))// 设置小图标背景颜色</span></div><div class=\"line\">                .setLargeIcon(BitmapFactory.decodeResource(getResources(), R.mipmap.ic_launcher))</div><div class=\"line\">                .build();</div><div class=\"line\">        manager.notify(<span class=\"number\">1</span>, notification);</div></pre></td></tr></table></figure>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/device-2017-06-09-162941.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>这是我们可以定制的<br>但是现在的项目比较死，暂时不适用自定义的了<br>暂时使用小米推送的改动小图标的方式，替换上一个透明背景的logo吧，总比灰色的方块强吧。而且其他app也是同样的显示效果，如上面的图标中的百度淘宝和头条。<br>有精力的话，使用透传消息，可以自己控制通知栏的样式和显示。</p>\n<hr>\n<p>参考：</p>\n<p><a href=\"http://iluhcm.com/2017/03/12/experience-of-adapting-to-android-notifications/\">http://iluhcm.com/2017/03/12/experience-of-adapting-to-android-notifications/</a><br><a href=\"http://yifeng.studio/2017/05/03/android-7-0-compat-fileprovider/\">http://yifeng.studio/2017/05/03/android-7-0-compat-fileprovider/</a></p>\n"},{"title":"Vue 从入门到搬砖","date":"2017-07-19T05:10:00.000Z","_content":"\n## 前言\n前段时间，捣鼓weex，就想到对vue有所了解。毕竟weex是从vue的基础上扩展而来，诸多特性也是vue的。作为目前前端比较火的框架之一，有所了解，也是有一定好处的，所谓\"多不压身\"。\nVue涵盖的不仅是一种前端框架，而且是前端生态的一系列设计思想、工具、规范。\n本文直奔主题，什么装环境、hello world 之类的琐事就略过...... \n\n## 几个重要概念\n### 构造器\n每个 Vue.js 应用都是通过构造函数 Vue 创建一个 Vue 的根实例 启动的：\n``` javascript\nvar vm = new Vue({\n  // 属性\n  // 方法\n  // 各种选项对象...\n})\n```\n在 vue 实例的基础上，提供了一些扩展的接口：\n\n``` javascript\nVue.extend({\n})\n```\n定义自己的组件，复用到不同的页面中，自底向上地构建页面应用。\n### Virtual DOM\nDOM：文档对象模型\nVirtual DOM 是个什么鬼？\n初学前端时，我们会直接用 js 去获取 dom 节点，拿到节点的属性和方法进行操作。但是这种操作性能比较差。\n虚拟DOM：就是在 JS 和 DOM 之间做了一个缓存。可以类比 CPU 和硬盘，既然硬盘这么慢，我们就在它们之间加个缓存：既然 DOM 这么慢，我们就在它们 JS 和 DOM 之间加个缓存。CPU（JS）只操作内存（Virtual DOM），最后的时候再把变更写入硬盘（DOM）。\n\n**大致过程**：\n1. 用 JavaScript 对象结构表示 DOM 树的结构；然后用这个树构建一个真正的 DOM 树，插到文档当中\n2. 当状态变更的时候，重新构造一棵新的对象树。然后用新的树和旧的树进行比较，记录两棵树差异\n3. 把2所记录的差异应用到步骤1所构建的真正的DOM树上，视图就更新了\n\n### 数据绑定\nVue 几乎屏蔽了直接通过操作 dom 更新的方式，更是趋向于 “数据的更新” 来达到 “视图的更新”。\nVue 实例的 data 的相关字段更新后，与之使用到的视图中也随之更新，重新渲染。\nVue 在不同组件间强制使用单向数据流。父组件通过 prop 向子组件赋值数据，子组件反过来向父组件 emit 发送事件\n\n## 生命周期钩子\n\n``` javascript\nvar LIFECYCLE_HOOKS = [\n  'beforeCreate',//el 和 data 并未初始化 \n  'created',// data 初始化\n  'beforeMount',// el 初始化 \n  'mounted',// 完成挂载\n  'beforeUpdate',// 数据完成更新\n  'updated',// virtual dom 更新并重新渲染\n  'beforeDestroy',// vue 实例调用 desotry\n  'destroyed',// 移除组件、事件、监听\n  'activated',// 完成激活子组件\n  'deactivated'// 停用释放子组件\n];\n```\n<div style=\"text-align:center\">\n<img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/vue_lifecycle.png\" width=\"400\" height=\"720\"/>\n</div>\n\n## 语法概览\n### 文本\n数据绑定，使用 mustache 语法：\n\n``` xml\n<span>Message: {{ msg }}</span>\n```\njs 表达式：\n\n``` xml\n{{ number + 1 }}\n{{ ok ? 'YES' : 'NO' }}\n```\n### 指令\n\n``` xml\n<p v-if=\"seen\">现在你看到我了</p>\n<a v-on:click=\"doSomething\">\n<a v-bind:href=\"url\"></a>\n```\n### 过滤器\n``` xml\n{{ message | capitalize }}\n```\n``` javascript\nfilters: {\n    capitalize: function (value) {\n      if (!value) return ''\n      value = value.toString()\n      return value.charAt(0).toUpperCase() + value.slice(1)\n    }\n  }\n```\n### 计算属性\n\n``` xml\n<div id=\"example\">\n  {{ message.split('').reverse().join('') }}\n</div>\n```\n``` xml\n<div id=\"example\">\n  {{ reversedMessage }}\n</div>\n```\n```javascript\nvar vm = new Vue({\n  el: '#example',\n  data: {\n    message: 'Hello'\n  },\n  computed: {\n    reversedMessage: function () {\n      return this.message.split('').reverse().join('')\n    }\n  }\n})\n```\n计算属性是基于它们的依赖进行缓存的。计算属性只有在它的相关依赖发生改变时才会重新求值。这就意味着只要 message 还没有发生改变，多次访问 reversedMessage 计算属性会立即返回之前的计算结果，而不必再次执行函数。\n### 样式绑定\n``` xml\n<div v-bind:class=\"{ active: isActive }\"></div>\n<div v-bind:style=\"{ color: activeColor, fontSize: fontSize + 'px' }\"></div>\n```\n多个样式之间的切换，可以在 data 中定义：\n\n``` javascript\ndata: {\n  activeClass: 'active',\n  errorClass: 'text-danger'\n}\n```\n### 条件渲染\n``` xml\n<v-if>\n<v-else>\n<v-else-if>\n<v-show>\n```\nv-if 是“真正的”条件渲染，因为它会确保在切换过程中条件块内的事件监听器和子组件适当地被销毁和重建。\nv-if 也是惰性的：如果在初始渲染时条件为假，则什么也不做——直到条件第一次变为真时，才会开始渲染条件块。\nv-show 不管初始条件是什么，元素总是会被渲染，并且只是简单地基于 CSS 进行切换。\n### 列表渲染\n``` xml\n<v-for>\n```\n* key使用\n当 Vue.js 用 v-for 正在更新已渲染过的元素列表时，它默认用 “就地复用” 策略\n如果数据项的顺序被改变，Vue将不是移动 DOM 元素来匹配数据项的顺序， 而是简单复用此处每个元素，并且确保它在特定索引下显示已被渲染过的每个元素\n建议尽可能使用 v-for 来提供 key ，除非迭代 DOM 内容足够简单，或者你是故意要依赖于默认行为来获得性能提升。\n* 数组更新检测\n由于 JavaScript 的限制， Vue 不能检测以下变动的数组：\n1. 当你利用索引直接设置一个项时，例如： vm.items[indexOfItem] = newValue\n2. 当你修改数组的长度时，例如： vm.items.length = newLength\n解决：\nVue.set(example1.items, indexOfItem, newValue) 或 example1.items.splice(indexOfItem, 1, newValue)\nexample1.items.splice(newLength)\n### 组件\n\n``` javascript\n// 注册\nVue.component('my-component', {\n  template: '<div>A custom component!</div>'\n})\n// 创建根实例\nnew Vue({\n  el: '#example'\n})\n```\n\n``` xml\n<!--使用-->\n<div id=\"example\">\n  <my-component></my-component>\n</div>\n```\n组件通信\n\n<div style=\"text-align:center\">\n<img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/props-events.png\" width=\"210\" height=\"200\"/>\n</div>\n\n**单项数据流**\nprop 是单向绑定的：当父组件的属性变化时，将传导给子组件，但是不会反过来\n\n\n## 过渡效果\n配合 css 实现动画效果，元素的出现和消息过渡动画也是非常有意思的\n\n    v-enter\n    v-enter-active\n    v-enter-to\n    v-leave\n    v-leave-active\n    v-leave-to\n\n``` xml\n用 包裹 view 动画元素\n<transition name=\"xxx\"></transition>\n```\n\n## 路由：vue-router\nhttps://router.vuejs.org/zh-cn/\n\n```xml\n<div id=\"app\">\n  <!--将来被替换的区域-->\n  <router-view></router-view>\n</div>\n\n<!--点击跳转配置，可传参数-->\n<router-link :to=\"{ name: 'user', params: { userId: 123 }}\">User</router-link>\n```\n## 其他推荐\n饿了么组件库：\nhttp://element.eleme.io/#/zh-CN\nvue 网络库：\naxios：https://github.com/mzabriskie/axios\n\n<hr/>\n\n附录\nDemo:\nhttps://github.com/fenglincanyi/VueDemo1\nhttps://github.com/fenglincanyi/VueDemo2\n\n参考：\nhttps://www.zhihu.com/question/29504639\nhttps://segmentfault.com/a/1190000008010666","source":"_posts/Vue 从入门到搬砖.md","raw":"---\ntitle: Vue 从入门到搬砖\ndate: 2017-07-19 13:10\ncategories: 前端\ntags: [vue]\n---\n\n## 前言\n前段时间，捣鼓weex，就想到对vue有所了解。毕竟weex是从vue的基础上扩展而来，诸多特性也是vue的。作为目前前端比较火的框架之一，有所了解，也是有一定好处的，所谓\"多不压身\"。\nVue涵盖的不仅是一种前端框架，而且是前端生态的一系列设计思想、工具、规范。\n本文直奔主题，什么装环境、hello world 之类的琐事就略过...... \n\n## 几个重要概念\n### 构造器\n每个 Vue.js 应用都是通过构造函数 Vue 创建一个 Vue 的根实例 启动的：\n``` javascript\nvar vm = new Vue({\n  // 属性\n  // 方法\n  // 各种选项对象...\n})\n```\n在 vue 实例的基础上，提供了一些扩展的接口：\n\n``` javascript\nVue.extend({\n})\n```\n定义自己的组件，复用到不同的页面中，自底向上地构建页面应用。\n### Virtual DOM\nDOM：文档对象模型\nVirtual DOM 是个什么鬼？\n初学前端时，我们会直接用 js 去获取 dom 节点，拿到节点的属性和方法进行操作。但是这种操作性能比较差。\n虚拟DOM：就是在 JS 和 DOM 之间做了一个缓存。可以类比 CPU 和硬盘，既然硬盘这么慢，我们就在它们之间加个缓存：既然 DOM 这么慢，我们就在它们 JS 和 DOM 之间加个缓存。CPU（JS）只操作内存（Virtual DOM），最后的时候再把变更写入硬盘（DOM）。\n\n**大致过程**：\n1. 用 JavaScript 对象结构表示 DOM 树的结构；然后用这个树构建一个真正的 DOM 树，插到文档当中\n2. 当状态变更的时候，重新构造一棵新的对象树。然后用新的树和旧的树进行比较，记录两棵树差异\n3. 把2所记录的差异应用到步骤1所构建的真正的DOM树上，视图就更新了\n\n### 数据绑定\nVue 几乎屏蔽了直接通过操作 dom 更新的方式，更是趋向于 “数据的更新” 来达到 “视图的更新”。\nVue 实例的 data 的相关字段更新后，与之使用到的视图中也随之更新，重新渲染。\nVue 在不同组件间强制使用单向数据流。父组件通过 prop 向子组件赋值数据，子组件反过来向父组件 emit 发送事件\n\n## 生命周期钩子\n\n``` javascript\nvar LIFECYCLE_HOOKS = [\n  'beforeCreate',//el 和 data 并未初始化 \n  'created',// data 初始化\n  'beforeMount',// el 初始化 \n  'mounted',// 完成挂载\n  'beforeUpdate',// 数据完成更新\n  'updated',// virtual dom 更新并重新渲染\n  'beforeDestroy',// vue 实例调用 desotry\n  'destroyed',// 移除组件、事件、监听\n  'activated',// 完成激活子组件\n  'deactivated'// 停用释放子组件\n];\n```\n<div style=\"text-align:center\">\n<img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/vue_lifecycle.png\" width=\"400\" height=\"720\"/>\n</div>\n\n## 语法概览\n### 文本\n数据绑定，使用 mustache 语法：\n\n``` xml\n<span>Message: {{ msg }}</span>\n```\njs 表达式：\n\n``` xml\n{{ number + 1 }}\n{{ ok ? 'YES' : 'NO' }}\n```\n### 指令\n\n``` xml\n<p v-if=\"seen\">现在你看到我了</p>\n<a v-on:click=\"doSomething\">\n<a v-bind:href=\"url\"></a>\n```\n### 过滤器\n``` xml\n{{ message | capitalize }}\n```\n``` javascript\nfilters: {\n    capitalize: function (value) {\n      if (!value) return ''\n      value = value.toString()\n      return value.charAt(0).toUpperCase() + value.slice(1)\n    }\n  }\n```\n### 计算属性\n\n``` xml\n<div id=\"example\">\n  {{ message.split('').reverse().join('') }}\n</div>\n```\n``` xml\n<div id=\"example\">\n  {{ reversedMessage }}\n</div>\n```\n```javascript\nvar vm = new Vue({\n  el: '#example',\n  data: {\n    message: 'Hello'\n  },\n  computed: {\n    reversedMessage: function () {\n      return this.message.split('').reverse().join('')\n    }\n  }\n})\n```\n计算属性是基于它们的依赖进行缓存的。计算属性只有在它的相关依赖发生改变时才会重新求值。这就意味着只要 message 还没有发生改变，多次访问 reversedMessage 计算属性会立即返回之前的计算结果，而不必再次执行函数。\n### 样式绑定\n``` xml\n<div v-bind:class=\"{ active: isActive }\"></div>\n<div v-bind:style=\"{ color: activeColor, fontSize: fontSize + 'px' }\"></div>\n```\n多个样式之间的切换，可以在 data 中定义：\n\n``` javascript\ndata: {\n  activeClass: 'active',\n  errorClass: 'text-danger'\n}\n```\n### 条件渲染\n``` xml\n<v-if>\n<v-else>\n<v-else-if>\n<v-show>\n```\nv-if 是“真正的”条件渲染，因为它会确保在切换过程中条件块内的事件监听器和子组件适当地被销毁和重建。\nv-if 也是惰性的：如果在初始渲染时条件为假，则什么也不做——直到条件第一次变为真时，才会开始渲染条件块。\nv-show 不管初始条件是什么，元素总是会被渲染，并且只是简单地基于 CSS 进行切换。\n### 列表渲染\n``` xml\n<v-for>\n```\n* key使用\n当 Vue.js 用 v-for 正在更新已渲染过的元素列表时，它默认用 “就地复用” 策略\n如果数据项的顺序被改变，Vue将不是移动 DOM 元素来匹配数据项的顺序， 而是简单复用此处每个元素，并且确保它在特定索引下显示已被渲染过的每个元素\n建议尽可能使用 v-for 来提供 key ，除非迭代 DOM 内容足够简单，或者你是故意要依赖于默认行为来获得性能提升。\n* 数组更新检测\n由于 JavaScript 的限制， Vue 不能检测以下变动的数组：\n1. 当你利用索引直接设置一个项时，例如： vm.items[indexOfItem] = newValue\n2. 当你修改数组的长度时，例如： vm.items.length = newLength\n解决：\nVue.set(example1.items, indexOfItem, newValue) 或 example1.items.splice(indexOfItem, 1, newValue)\nexample1.items.splice(newLength)\n### 组件\n\n``` javascript\n// 注册\nVue.component('my-component', {\n  template: '<div>A custom component!</div>'\n})\n// 创建根实例\nnew Vue({\n  el: '#example'\n})\n```\n\n``` xml\n<!--使用-->\n<div id=\"example\">\n  <my-component></my-component>\n</div>\n```\n组件通信\n\n<div style=\"text-align:center\">\n<img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/props-events.png\" width=\"210\" height=\"200\"/>\n</div>\n\n**单项数据流**\nprop 是单向绑定的：当父组件的属性变化时，将传导给子组件，但是不会反过来\n\n\n## 过渡效果\n配合 css 实现动画效果，元素的出现和消息过渡动画也是非常有意思的\n\n    v-enter\n    v-enter-active\n    v-enter-to\n    v-leave\n    v-leave-active\n    v-leave-to\n\n``` xml\n用 包裹 view 动画元素\n<transition name=\"xxx\"></transition>\n```\n\n## 路由：vue-router\nhttps://router.vuejs.org/zh-cn/\n\n```xml\n<div id=\"app\">\n  <!--将来被替换的区域-->\n  <router-view></router-view>\n</div>\n\n<!--点击跳转配置，可传参数-->\n<router-link :to=\"{ name: 'user', params: { userId: 123 }}\">User</router-link>\n```\n## 其他推荐\n饿了么组件库：\nhttp://element.eleme.io/#/zh-CN\nvue 网络库：\naxios：https://github.com/mzabriskie/axios\n\n<hr/>\n\n附录\nDemo:\nhttps://github.com/fenglincanyi/VueDemo1\nhttps://github.com/fenglincanyi/VueDemo2\n\n参考：\nhttps://www.zhihu.com/question/29504639\nhttps://segmentfault.com/a/1190000008010666","slug":"Vue 从入门到搬砖","published":1,"updated":"2017-08-27T10:21:53.000Z","_id":"cj6ul19ug00009jqw3jknvag3","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>前段时间，捣鼓weex，就想到对vue有所了解。毕竟weex是从vue的基础上扩展而来，诸多特性也是vue的。作为目前前端比较火的框架之一，有所了解，也是有一定好处的，所谓”多不压身”。<br>Vue涵盖的不仅是一种前端框架，而且是前端生态的一系列设计思想、工具、规范。<br>本文直奔主题，什么装环境、hello world 之类的琐事就略过…… </p>\n<h2 id=\"几个重要概念\"><a href=\"#几个重要概念\" class=\"headerlink\" title=\"几个重要概念\"></a>几个重要概念</h2><h3 id=\"构造器\"><a href=\"#构造器\" class=\"headerlink\" title=\"构造器\"></a>构造器</h3><p>每个 Vue.js 应用都是通过构造函数 Vue 创建一个 Vue 的根实例 启动的：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  <span class=\"comment\">// 属性</span></div><div class=\"line\">  <span class=\"comment\">// 方法</span></div><div class=\"line\">  <span class=\"comment\">// 各种选项对象...</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p>在 vue 实例的基础上，提供了一些扩展的接口：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">Vue.extend(&#123;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>定义自己的组件，复用到不同的页面中，自底向上地构建页面应用。</p>\n<h3 id=\"Virtual-DOM\"><a href=\"#Virtual-DOM\" class=\"headerlink\" title=\"Virtual DOM\"></a>Virtual DOM</h3><p>DOM：文档对象模型<br>Virtual DOM 是个什么鬼？<br>初学前端时，我们会直接用 js 去获取 dom 节点，拿到节点的属性和方法进行操作。但是这种操作性能比较差。<br>虚拟DOM：就是在 JS 和 DOM 之间做了一个缓存。可以类比 CPU 和硬盘，既然硬盘这么慢，我们就在它们之间加个缓存：既然 DOM 这么慢，我们就在它们 JS 和 DOM 之间加个缓存。CPU（JS）只操作内存（Virtual DOM），最后的时候再把变更写入硬盘（DOM）。</p>\n<p><strong>大致过程</strong>：</p>\n<ol>\n<li>用 JavaScript 对象结构表示 DOM 树的结构；然后用这个树构建一个真正的 DOM 树，插到文档当中</li>\n<li>当状态变更的时候，重新构造一棵新的对象树。然后用新的树和旧的树进行比较，记录两棵树差异</li>\n<li>把2所记录的差异应用到步骤1所构建的真正的DOM树上，视图就更新了</li>\n</ol>\n<h3 id=\"数据绑定\"><a href=\"#数据绑定\" class=\"headerlink\" title=\"数据绑定\"></a>数据绑定</h3><p>Vue 几乎屏蔽了直接通过操作 dom 更新的方式，更是趋向于 “数据的更新” 来达到 “视图的更新”。<br>Vue 实例的 data 的相关字段更新后，与之使用到的视图中也随之更新，重新渲染。<br>Vue 在不同组件间强制使用单向数据流。父组件通过 prop 向子组件赋值数据，子组件反过来向父组件 emit 发送事件</p>\n<h2 id=\"生命周期钩子\"><a href=\"#生命周期钩子\" class=\"headerlink\" title=\"生命周期钩子\"></a>生命周期钩子</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> LIFECYCLE_HOOKS = [</div><div class=\"line\">  <span class=\"string\">'beforeCreate'</span>,<span class=\"comment\">//el 和 data 并未初始化 </span></div><div class=\"line\">  <span class=\"string\">'created'</span>,<span class=\"comment\">// data 初始化</span></div><div class=\"line\">  <span class=\"string\">'beforeMount'</span>,<span class=\"comment\">// el 初始化 </span></div><div class=\"line\">  <span class=\"string\">'mounted'</span>,<span class=\"comment\">// 完成挂载</span></div><div class=\"line\">  <span class=\"string\">'beforeUpdate'</span>,<span class=\"comment\">// 数据完成更新</span></div><div class=\"line\">  <span class=\"string\">'updated'</span>,<span class=\"comment\">// virtual dom 更新并重新渲染</span></div><div class=\"line\">  <span class=\"string\">'beforeDestroy'</span>,<span class=\"comment\">// vue 实例调用 desotry</span></div><div class=\"line\">  <span class=\"string\">'destroyed'</span>,<span class=\"comment\">// 移除组件、事件、监听</span></div><div class=\"line\">  <span class=\"string\">'activated'</span>,<span class=\"comment\">// 完成激活子组件</span></div><div class=\"line\">  <span class=\"string\">'deactivated'</span><span class=\"comment\">// 停用释放子组件</span></div><div class=\"line\">];</div></pre></td></tr></table></figure>\n<div style=\"text-align:center\"><br><img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/vue_lifecycle.png\" width=\"400\" height=\"720\"><br></div>\n\n<h2 id=\"语法概览\"><a href=\"#语法概览\" class=\"headerlink\" title=\"语法概览\"></a>语法概览</h2><h3 id=\"文本\"><a href=\"#文本\" class=\"headerlink\" title=\"文本\"></a>文本</h3><p>数据绑定，使用 mustache 语法：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>Message: &#123;&#123; msg &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>js 表达式：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;&#123; number + 1 &#125;&#125;</div><div class=\"line\">&#123;&#123; ok ? 'YES' : 'NO' &#125;&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"指令\"><a href=\"#指令\" class=\"headerlink\" title=\"指令\"></a>指令</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"seen\"</span>&gt;</span>现在你看到我了<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">v-on:click</span>=<span class=\"string\">\"doSomething\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">v-bind:href</span>=<span class=\"string\">\"url\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div></pre></td></tr></table></figure>\n<h3 id=\"过滤器\"><a href=\"#过滤器\" class=\"headerlink\" title=\"过滤器\"></a>过滤器</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;&#123; message | capitalize &#125;&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">filters: &#123;</div><div class=\"line\">    <span class=\"attr\">capitalize</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value</span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">if</span> (!value) <span class=\"keyword\">return</span> <span class=\"string\">''</span></div><div class=\"line\">      value = value.toString()</div><div class=\"line\">      <span class=\"keyword\">return</span> value.charAt(<span class=\"number\">0</span>).toUpperCase() + value.slice(<span class=\"number\">1</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure>\n<h3 id=\"计算属性\"><a href=\"#计算属性\" class=\"headerlink\" title=\"计算属性\"></a>计算属性</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"example\"</span>&gt;</span></div><div class=\"line\">  &#123;&#123; message.split('').reverse().join('') &#125;&#125;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"example\"</span>&gt;</span></div><div class=\"line\">  &#123;&#123; reversedMessage &#125;&#125;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  <span class=\"attr\">el</span>: <span class=\"string\">'#example'</span>,</div><div class=\"line\">  <span class=\"attr\">data</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">message</span>: <span class=\"string\">'Hello'</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">computed</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">reversedMessage</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.message.split(<span class=\"string\">''</span>).reverse().join(<span class=\"string\">''</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>计算属性是基于它们的依赖进行缓存的。计算属性只有在它的相关依赖发生改变时才会重新求值。这就意味着只要 message 还没有发生改变，多次访问 reversedMessage 计算属性会立即返回之前的计算结果，而不必再次执行函数。</p>\n<h3 id=\"样式绑定\"><a href=\"#样式绑定\" class=\"headerlink\" title=\"样式绑定\"></a>样式绑定</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-bind:class</span>=<span class=\"string\">\"&#123; active: isActive &#125;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-bind:style</span>=<span class=\"string\">\"&#123; color: activeColor, fontSize: fontSize + 'px' &#125;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>多个样式之间的切换，可以在 data 中定义：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">data: &#123;</div><div class=\"line\">  <span class=\"attr\">activeClass</span>: <span class=\"string\">'active'</span>,</div><div class=\"line\">  <span class=\"attr\">errorClass</span>: <span class=\"string\">'text-danger'</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"条件渲染\"><a href=\"#条件渲染\" class=\"headerlink\" title=\"条件渲染\"></a>条件渲染</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">v-if</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">v-else</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">v-else-if</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">v-show</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>v-if 是“真正的”条件渲染，因为它会确保在切换过程中条件块内的事件监听器和子组件适当地被销毁和重建。<br>v-if 也是惰性的：如果在初始渲染时条件为假，则什么也不做——直到条件第一次变为真时，才会开始渲染条件块。<br>v-show 不管初始条件是什么，元素总是会被渲染，并且只是简单地基于 CSS 进行切换。</p>\n<h3 id=\"列表渲染\"><a href=\"#列表渲染\" class=\"headerlink\" title=\"列表渲染\"></a>列表渲染</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">v-for</span>&gt;</span></div></pre></td></tr></table></figure>\n<ul>\n<li>key使用<br>当 Vue.js 用 v-for 正在更新已渲染过的元素列表时，它默认用 “就地复用” 策略<br>如果数据项的顺序被改变，Vue将不是移动 DOM 元素来匹配数据项的顺序， 而是简单复用此处每个元素，并且确保它在特定索引下显示已被渲染过的每个元素<br>建议尽可能使用 v-for 来提供 key ，除非迭代 DOM 内容足够简单，或者你是故意要依赖于默认行为来获得性能提升。</li>\n<li>数组更新检测<br>由于 JavaScript 的限制， Vue 不能检测以下变动的数组：</li>\n</ul>\n<ol>\n<li>当你利用索引直接设置一个项时，例如： vm.items[indexOfItem] = newValue</li>\n<li>当你修改数组的长度时，例如： vm.items.length = newLength<br>解决：<br>Vue.set(example1.items, indexOfItem, newValue) 或 example1.items.splice(indexOfItem, 1, newValue)<br>example1.items.splice(newLength)<h3 id=\"组件\"><a href=\"#组件\" class=\"headerlink\" title=\"组件\"></a>组件</h3></li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 注册</span></div><div class=\"line\">Vue.component(<span class=\"string\">'my-component'</span>, &#123;</div><div class=\"line\">  <span class=\"attr\">template</span>: <span class=\"string\">'&lt;div&gt;A custom component!&lt;/div&gt;'</span></div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"comment\">// 创建根实例</span></div><div class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  <span class=\"attr\">el</span>: <span class=\"string\">'#example'</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!--使用--&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"example\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">my-component</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">my-component</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>组件通信</p>\n<div style=\"text-align:center\"><br><img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/props-events.png\" width=\"210\" height=\"200\"><br></div>\n\n<p><strong>单项数据流</strong><br>prop 是单向绑定的：当父组件的属性变化时，将传导给子组件，但是不会反过来</p>\n<h2 id=\"过渡效果\"><a href=\"#过渡效果\" class=\"headerlink\" title=\"过渡效果\"></a>过渡效果</h2><p>配合 css 实现动画效果，元素的出现和消息过渡动画也是非常有意思的</p>\n<pre><code>v-enter\nv-enter-active\nv-enter-to\nv-leave\nv-leave-active\nv-leave-to\n</code></pre><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">用 包裹 view 动画元素</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">transition</span> <span class=\"attr\">name</span>=<span class=\"string\">\"xxx\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">transition</span>&gt;</span></div></pre></td></tr></table></figure>\n<h2 id=\"路由：vue-router\"><a href=\"#路由：vue-router\" class=\"headerlink\" title=\"路由：vue-router\"></a>路由：vue-router</h2><p><a href=\"https://router.vuejs.org/zh-cn/\" target=\"_blank\" rel=\"external\">https://router.vuejs.org/zh-cn/</a></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span>&gt;</span></div><div class=\"line\">  <span class=\"comment\">&lt;!--将来被替换的区域--&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">router-view</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">router-view</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!--点击跳转配置，可传参数--&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">router-link</span> <span class=\"attr\">:to</span>=<span class=\"string\">\"&#123; name: 'user', params: &#123; userId: 123 &#125;&#125;\"</span>&gt;</span>User<span class=\"tag\">&lt;/<span class=\"name\">router-link</span>&gt;</span></div></pre></td></tr></table></figure>\n<h2 id=\"其他推荐\"><a href=\"#其他推荐\" class=\"headerlink\" title=\"其他推荐\"></a>其他推荐</h2><p>饿了么组件库：<br><a href=\"http://element.eleme.io/#/zh-CN\" target=\"_blank\" rel=\"external\">http://element.eleme.io/#/zh-CN</a><br>vue 网络库：<br>axios：<a href=\"https://github.com/mzabriskie/axios\" target=\"_blank\" rel=\"external\">https://github.com/mzabriskie/axios</a></p>\n<hr>\n\n<p>附录<br>Demo:<br><a href=\"https://github.com/fenglincanyi/VueDemo1\" target=\"_blank\" rel=\"external\">https://github.com/fenglincanyi/VueDemo1</a><br><a href=\"https://github.com/fenglincanyi/VueDemo2\" target=\"_blank\" rel=\"external\">https://github.com/fenglincanyi/VueDemo2</a></p>\n<p>参考：<br><a href=\"https://www.zhihu.com/question/29504639\" target=\"_blank\" rel=\"external\">https://www.zhihu.com/question/29504639</a><br><a href=\"https://segmentfault.com/a/1190000008010666\" target=\"_blank\" rel=\"external\">https://segmentfault.com/a/1190000008010666</a></p>\n","excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>前段时间，捣鼓weex，就想到对vue有所了解。毕竟weex是从vue的基础上扩展而来，诸多特性也是vue的。作为目前前端比较火的框架之一，有所了解，也是有一定好处的，所谓”多不压身”。<br>Vue涵盖的不仅是一种前端框架，而且是前端生态的一系列设计思想、工具、规范。<br>本文直奔主题，什么装环境、hello world 之类的琐事就略过…… </p>\n<h2 id=\"几个重要概念\"><a href=\"#几个重要概念\" class=\"headerlink\" title=\"几个重要概念\"></a>几个重要概念</h2><h3 id=\"构造器\"><a href=\"#构造器\" class=\"headerlink\" title=\"构造器\"></a>构造器</h3><p>每个 Vue.js 应用都是通过构造函数 Vue 创建一个 Vue 的根实例 启动的：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  <span class=\"comment\">// 属性</span></div><div class=\"line\">  <span class=\"comment\">// 方法</span></div><div class=\"line\">  <span class=\"comment\">// 各种选项对象...</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p>在 vue 实例的基础上，提供了一些扩展的接口：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">Vue.extend(&#123;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>定义自己的组件，复用到不同的页面中，自底向上地构建页面应用。</p>\n<h3 id=\"Virtual-DOM\"><a href=\"#Virtual-DOM\" class=\"headerlink\" title=\"Virtual DOM\"></a>Virtual DOM</h3><p>DOM：文档对象模型<br>Virtual DOM 是个什么鬼？<br>初学前端时，我们会直接用 js 去获取 dom 节点，拿到节点的属性和方法进行操作。但是这种操作性能比较差。<br>虚拟DOM：就是在 JS 和 DOM 之间做了一个缓存。可以类比 CPU 和硬盘，既然硬盘这么慢，我们就在它们之间加个缓存：既然 DOM 这么慢，我们就在它们 JS 和 DOM 之间加个缓存。CPU（JS）只操作内存（Virtual DOM），最后的时候再把变更写入硬盘（DOM）。</p>\n<p><strong>大致过程</strong>：</p>\n<ol>\n<li>用 JavaScript 对象结构表示 DOM 树的结构；然后用这个树构建一个真正的 DOM 树，插到文档当中</li>\n<li>当状态变更的时候，重新构造一棵新的对象树。然后用新的树和旧的树进行比较，记录两棵树差异</li>\n<li>把2所记录的差异应用到步骤1所构建的真正的DOM树上，视图就更新了</li>\n</ol>\n<h3 id=\"数据绑定\"><a href=\"#数据绑定\" class=\"headerlink\" title=\"数据绑定\"></a>数据绑定</h3><p>Vue 几乎屏蔽了直接通过操作 dom 更新的方式，更是趋向于 “数据的更新” 来达到 “视图的更新”。<br>Vue 实例的 data 的相关字段更新后，与之使用到的视图中也随之更新，重新渲染。<br>Vue 在不同组件间强制使用单向数据流。父组件通过 prop 向子组件赋值数据，子组件反过来向父组件 emit 发送事件</p>\n<h2 id=\"生命周期钩子\"><a href=\"#生命周期钩子\" class=\"headerlink\" title=\"生命周期钩子\"></a>生命周期钩子</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> LIFECYCLE_HOOKS = [</div><div class=\"line\">  <span class=\"string\">'beforeCreate'</span>,<span class=\"comment\">//el 和 data 并未初始化 </span></div><div class=\"line\">  <span class=\"string\">'created'</span>,<span class=\"comment\">// data 初始化</span></div><div class=\"line\">  <span class=\"string\">'beforeMount'</span>,<span class=\"comment\">// el 初始化 </span></div><div class=\"line\">  <span class=\"string\">'mounted'</span>,<span class=\"comment\">// 完成挂载</span></div><div class=\"line\">  <span class=\"string\">'beforeUpdate'</span>,<span class=\"comment\">// 数据完成更新</span></div><div class=\"line\">  <span class=\"string\">'updated'</span>,<span class=\"comment\">// virtual dom 更新并重新渲染</span></div><div class=\"line\">  <span class=\"string\">'beforeDestroy'</span>,<span class=\"comment\">// vue 实例调用 desotry</span></div><div class=\"line\">  <span class=\"string\">'destroyed'</span>,<span class=\"comment\">// 移除组件、事件、监听</span></div><div class=\"line\">  <span class=\"string\">'activated'</span>,<span class=\"comment\">// 完成激活子组件</span></div><div class=\"line\">  <span class=\"string\">'deactivated'</span><span class=\"comment\">// 停用释放子组件</span></div><div class=\"line\">];</div></pre></td></tr></table></figure>\n<div style=\"text-align:center\"><br><img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/vue_lifecycle.png\" width=\"400\" height=\"720\"/><br></div>\n\n<h2 id=\"语法概览\"><a href=\"#语法概览\" class=\"headerlink\" title=\"语法概览\"></a>语法概览</h2><h3 id=\"文本\"><a href=\"#文本\" class=\"headerlink\" title=\"文本\"></a>文本</h3><p>数据绑定，使用 mustache 语法：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>Message: &#123;&#123; msg &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>js 表达式：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;&#123; number + 1 &#125;&#125;</div><div class=\"line\">&#123;&#123; ok ? 'YES' : 'NO' &#125;&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"指令\"><a href=\"#指令\" class=\"headerlink\" title=\"指令\"></a>指令</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"seen\"</span>&gt;</span>现在你看到我了<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">v-on:click</span>=<span class=\"string\">\"doSomething\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">v-bind:href</span>=<span class=\"string\">\"url\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div></pre></td></tr></table></figure>\n<h3 id=\"过滤器\"><a href=\"#过滤器\" class=\"headerlink\" title=\"过滤器\"></a>过滤器</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;&#123; message | capitalize &#125;&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">filters: &#123;</div><div class=\"line\">    <span class=\"attr\">capitalize</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value</span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">if</span> (!value) <span class=\"keyword\">return</span> <span class=\"string\">''</span></div><div class=\"line\">      value = value.toString()</div><div class=\"line\">      <span class=\"keyword\">return</span> value.charAt(<span class=\"number\">0</span>).toUpperCase() + value.slice(<span class=\"number\">1</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure>\n<h3 id=\"计算属性\"><a href=\"#计算属性\" class=\"headerlink\" title=\"计算属性\"></a>计算属性</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"example\"</span>&gt;</span></div><div class=\"line\">  &#123;&#123; message.split('').reverse().join('') &#125;&#125;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"example\"</span>&gt;</span></div><div class=\"line\">  &#123;&#123; reversedMessage &#125;&#125;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  <span class=\"attr\">el</span>: <span class=\"string\">'#example'</span>,</div><div class=\"line\">  <span class=\"attr\">data</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">message</span>: <span class=\"string\">'Hello'</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">computed</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">reversedMessage</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.message.split(<span class=\"string\">''</span>).reverse().join(<span class=\"string\">''</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>计算属性是基于它们的依赖进行缓存的。计算属性只有在它的相关依赖发生改变时才会重新求值。这就意味着只要 message 还没有发生改变，多次访问 reversedMessage 计算属性会立即返回之前的计算结果，而不必再次执行函数。</p>\n<h3 id=\"样式绑定\"><a href=\"#样式绑定\" class=\"headerlink\" title=\"样式绑定\"></a>样式绑定</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-bind:class</span>=<span class=\"string\">\"&#123; active: isActive &#125;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-bind:style</span>=<span class=\"string\">\"&#123; color: activeColor, fontSize: fontSize + 'px' &#125;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>多个样式之间的切换，可以在 data 中定义：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">data: &#123;</div><div class=\"line\">  <span class=\"attr\">activeClass</span>: <span class=\"string\">'active'</span>,</div><div class=\"line\">  <span class=\"attr\">errorClass</span>: <span class=\"string\">'text-danger'</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"条件渲染\"><a href=\"#条件渲染\" class=\"headerlink\" title=\"条件渲染\"></a>条件渲染</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">v-if</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">v-else</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">v-else-if</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">v-show</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>v-if 是“真正的”条件渲染，因为它会确保在切换过程中条件块内的事件监听器和子组件适当地被销毁和重建。<br>v-if 也是惰性的：如果在初始渲染时条件为假，则什么也不做——直到条件第一次变为真时，才会开始渲染条件块。<br>v-show 不管初始条件是什么，元素总是会被渲染，并且只是简单地基于 CSS 进行切换。</p>\n<h3 id=\"列表渲染\"><a href=\"#列表渲染\" class=\"headerlink\" title=\"列表渲染\"></a>列表渲染</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">v-for</span>&gt;</span></div></pre></td></tr></table></figure>\n<ul>\n<li>key使用<br>当 Vue.js 用 v-for 正在更新已渲染过的元素列表时，它默认用 “就地复用” 策略<br>如果数据项的顺序被改变，Vue将不是移动 DOM 元素来匹配数据项的顺序， 而是简单复用此处每个元素，并且确保它在特定索引下显示已被渲染过的每个元素<br>建议尽可能使用 v-for 来提供 key ，除非迭代 DOM 内容足够简单，或者你是故意要依赖于默认行为来获得性能提升。</li>\n<li>数组更新检测<br>由于 JavaScript 的限制， Vue 不能检测以下变动的数组：</li>\n</ul>\n<ol>\n<li>当你利用索引直接设置一个项时，例如： vm.items[indexOfItem] = newValue</li>\n<li>当你修改数组的长度时，例如： vm.items.length = newLength<br>解决：<br>Vue.set(example1.items, indexOfItem, newValue) 或 example1.items.splice(indexOfItem, 1, newValue)<br>example1.items.splice(newLength)<h3 id=\"组件\"><a href=\"#组件\" class=\"headerlink\" title=\"组件\"></a>组件</h3></li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 注册</span></div><div class=\"line\">Vue.component(<span class=\"string\">'my-component'</span>, &#123;</div><div class=\"line\">  <span class=\"attr\">template</span>: <span class=\"string\">'&lt;div&gt;A custom component!&lt;/div&gt;'</span></div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"comment\">// 创建根实例</span></div><div class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  <span class=\"attr\">el</span>: <span class=\"string\">'#example'</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!--使用--&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"example\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">my-component</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">my-component</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>组件通信</p>\n<div style=\"text-align:center\"><br><img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/props-events.png\" width=\"210\" height=\"200\"/><br></div>\n\n<p><strong>单项数据流</strong><br>prop 是单向绑定的：当父组件的属性变化时，将传导给子组件，但是不会反过来</p>\n<h2 id=\"过渡效果\"><a href=\"#过渡效果\" class=\"headerlink\" title=\"过渡效果\"></a>过渡效果</h2><p>配合 css 实现动画效果，元素的出现和消息过渡动画也是非常有意思的</p>\n<pre><code>v-enter\nv-enter-active\nv-enter-to\nv-leave\nv-leave-active\nv-leave-to\n</code></pre><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">用 包裹 view 动画元素</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">transition</span> <span class=\"attr\">name</span>=<span class=\"string\">\"xxx\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">transition</span>&gt;</span></div></pre></td></tr></table></figure>\n<h2 id=\"路由：vue-router\"><a href=\"#路由：vue-router\" class=\"headerlink\" title=\"路由：vue-router\"></a>路由：vue-router</h2><p><a href=\"https://router.vuejs.org/zh-cn/\">https://router.vuejs.org/zh-cn/</a></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span>&gt;</span></div><div class=\"line\">  <span class=\"comment\">&lt;!--将来被替换的区域--&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">router-view</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">router-view</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!--点击跳转配置，可传参数--&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">router-link</span> <span class=\"attr\">:to</span>=<span class=\"string\">\"&#123; name: 'user', params: &#123; userId: 123 &#125;&#125;\"</span>&gt;</span>User<span class=\"tag\">&lt;/<span class=\"name\">router-link</span>&gt;</span></div></pre></td></tr></table></figure>\n<h2 id=\"其他推荐\"><a href=\"#其他推荐\" class=\"headerlink\" title=\"其他推荐\"></a>其他推荐</h2><p>饿了么组件库：<br><a href=\"http://element.eleme.io/#/zh-CN\">http://element.eleme.io/#/zh-CN</a><br>vue 网络库：<br>axios：<a href=\"https://github.com/mzabriskie/axios\">https://github.com/mzabriskie/axios</a></p>\n<hr/>\n\n<p>附录<br>Demo:<br><a href=\"https://github.com/fenglincanyi/VueDemo1\">https://github.com/fenglincanyi/VueDemo1</a><br><a href=\"https://github.com/fenglincanyi/VueDemo2\">https://github.com/fenglincanyi/VueDemo2</a></p>\n<p>参考：<br><a href=\"https://www.zhihu.com/question/29504639\">https://www.zhihu.com/question/29504639</a><br><a href=\"https://segmentfault.com/a/1190000008010666\">https://segmentfault.com/a/1190000008010666</a></p>\n"},{"title":"滑动相关 ScrollView & ListView","date":"2016-09-04T03:13:00.000Z","_content":"\n## ScrollView 嵌套 ListView 问题分析\n**滑动冲突的问题**\nScrollView 中嵌套 ListView，ListView 在测量时，高度不论写活还是写死，Listiew 的测量模式都是 不确定模式：unspecified\n\n![](http://7xr1vo.com1.z0.glb.clouddn.com/ScrollViewListView1.png)\n\nScrollView 换成 LinearLayout后：\n\n![](http://7xr1vo.com1.z0.glb.clouddn.com/ScrollViewListView2.png)\n\n经过上面的实验，什么原因造成的 heightMeasureSpec的值是 680 呢？\n\n\n**追踪过程**\n\n在ScrollView 测量时：\n\n![](http://7xr1vo.com1.z0.glb.clouddn.com/ScrollViewListView3.png)\n\nListview 测量时：heightMeasureSpec = 680\n\n![](http://7xr1vo.com1.z0.glb.clouddn.com/ScrollViewListView4.png)\n\n再继续向前追溯：\nScrollView的 onMeasure() 调用了父类的  onMeasure() 即 FrameLayout 的：\n\n![](http://7xr1vo.com1.z0.glb.clouddn.com/ScrollViewListView5.png)\n\n![](http://7xr1vo.com1.z0.glb.clouddn.com/ScrollViewListView6.png)\n\n再仔细观察：\n\n![](http://7xr1vo.com1.z0.glb.clouddn.com/ScrollViewListView7.png)\n\n\n可以再查看ScrollView 的 measureChild() 方法，也是通过 设置 高度的测量模式：unspecified\n\n\n我们对比 未覆盖的  ViewGroup的代码：\n```java\nprotected void measureChildWithMargins(View child,\n        int parentWidthMeasureSpec, int widthUsed,\n        int parentHeightMeasureSpec, int heightUsed) {\n    final MarginLayoutParams lp = (MarginLayoutParams) child.getLayoutParams();\n\n    final int childWidthMeasureSpec = getChildMeasureSpec(parentWidthMeasureSpec,\n            mPaddingLeft + mPaddingRight + lp.leftMargin + lp.rightMargin\n                    + widthUsed, lp.width);\n    final int childHeightMeasureSpec = getChildMeasureSpec(parentHeightMeasureSpec,\n            mPaddingTop + mPaddingBottom + lp.topMargin + lp.bottomMargin\n                    + heightUsed, lp.height);\n\n    child.measure(childWidthMeasureSpec, childHeightMeasureSpec);\n}\n```\n\n\n到最后，传到listview的 onMeasure 中后，我们来分析：\n```java\n@Override\nprotected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {\n    // Sets up mListPadding\n    super.onMeasure(widthMeasureSpec, heightMeasureSpec);\n\n    final int widthMode = MeasureSpec.getMode(widthMeasureSpec);\n    final int heightMode = MeasureSpec.getMode(heightMeasureSpec);// heightMeasureSpec：680  计算结果： heightMode：0\n    int widthSize = MeasureSpec.getSize(widthMeasureSpec);\n    int heightSize = MeasureSpec.getSize(heightMeasureSpec);\n\n    int childWidth = 0;\n    int childHeight = 0;\n    int childState = 0;\n\n    mItemCount = mAdapter == null ? 0 : mAdapter.getCount();\n    if (mItemCount > 0 && (widthMode == MeasureSpec.UNSPECIFIED\n            || heightMode == MeasureSpec.UNSPECIFIED)) {\n        final View child = obtainView(0, mIsScrap);\n\n        // Lay out child directly against the parent measure spec so that\n        // we can obtain exected minimum width and height.\n        measureScrapChild(child, 0, widthMeasureSpec, heightSize);\n\n        childWidth = child.getMeasuredWidth();\n        childHeight = child.getMeasuredHeight();// listview 的 item 高度\n        childState = combineMeasuredStates(childState, child.getMeasuredState());\n\n        if (recycleOnMeasure() && mRecycler.shouldRecycleViewType(\n                ((LayoutParams) child.getLayoutParams()).viewType)) {\n            mRecycler.addScrapView(child, 0);\n        }\n    }\n\n    if (widthMode == MeasureSpec.UNSPECIFIED) {\n        widthSize = mListPadding.left + mListPadding.right + childWidth +\n                getVerticalScrollbarWidth();\n    } else {\n        widthSize |= (childState & MEASURED_STATE_MASK);\n    }\n\n    if (heightMode == MeasureSpec.UNSPECIFIED) {// 符合条件\n        heightSize = mListPadding.top + mListPadding.bottom + childHeight +\n                getVerticalFadingEdgeLength() * 2;// 所以 listview 的高度为 item 的高度\n    }\n    // 此种布局下，不管如何调整高度属性， listview 的 高度 测量规格始终都是 unspecified，\n\n    if (heightMode == MeasureSpec.AT_MOST) {\n        // TODO: after first layout we should maybe start at the first visible position, not 0\n        heightSize = measureHeightOfChildren(widthMeasureSpec, 0, NO_POSITION, heightSize, -1);\n    }\n\n    setMeasuredDimension(widthSize, heightSize);\n\n    mWidthMeasureSpec = widthMeasureSpec;\n}\n```\n\n**解决高度显示的问题**\n\n方法挺多的，这里给出一种：重写listview的onMesasure\nhttps://stackoverflow.com/questions/18367522/android-list-view-inside-a-scroll-view\n<br>\n对于 ScrollView 的子View ，也不能配置高度属性为 match_parent, 即使设置了，也是按照 wrap_content 的效果走的\n而且 Android Studio 在lint 检查的时候，已经建议你这样做了\n\n![](http://7xr1vo.com1.z0.glb.clouddn.com/ScrollViewListView8.png)\n\n\n\n## ScrollView 的滑动相关\n\nonTouchEvent 中，move 时：\n```java\nif (mIsBeingDragged) {\n    // Scroll to follow the motion event\n    mLastMotionY = y - mScrollOffset[1];\n\n    final int oldY = mScrollY;\n    final int range = getScrollRange();\n    final int overscrollMode = getOverScrollMode();\n    boolean canOverscroll = overscrollMode == OVER_SCROLL_ALWAYS ||\n            (overscrollMode == OVER_SCROLL_IF_CONTENT_SCROLLS && range > 0);\n\n    // Calling overScrollBy will call onOverScrolled, which\n    // calls onScrollChanged if applicable.\n    if (overScrollBy(0, deltaY, 0, mScrollY, 0, range, 0, mOverscrollDistance, true)\n            && !hasNestedScrollingParent()) {\n        // Break our velocity if we hit a scroll barrier.\n        mVelocityTracker.clear();\n    }\n    ... ...\n}\n\n\nprivate int getScrollRange() {\n    int scrollRange = 0;\n    if (getChildCount() > 0) {\n        View child = getChildAt(0);\n        scrollRange = Math.max(0,\n                child.getHeight() - (getHeight() - mPaddingBottom - mPaddingTop));\n    // 可滑动的范围： 子view的高度 - ScrollView 的高度（去掉上下内边距的）\n    }\n    return scrollRange;\n}\n```\n\n这里，曾经遇到过的问题：\n\n想在 ScrollView 中滑到底部后，多滑动一部分距离来显示上面的距离，因为上层盖有view, 想做出透明的效果，如主页 tab + 列表的呈现方式；\n这时候可以这样处理：重写 addView() , 并把唯一的子View 添加一个 bottomPadding，就是增大 child.Hegiht.  所以增大了 ScrollRange；\n\n类比：listview ，可以增加 一个有高度 的footer ,实现这种功能\n\n**滑动冲突的问题**\n\n解决办法\n```java\nlistView.setOnTouchListener(object : View.OnTouchListener {\n    override fun onTouch(v: View, event: MotionEvent): Boolean {\n        v.parent.parent.requestDisallowInterceptTouchEvent(true)\n        return false;\n    }\n})\n// 请求 父view 不允许拦截，则交给 listview 来处理 move 事件\n```\n<img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/ScrollViewListView9.gif\" width=\"320\" height=\"560\"/>\n\n另外，ScrollView嵌套RecyclerView也会存在显示不全的问题\n\n---\n\n**翻开历史新篇章**：\n\nV4包 中提供了 可支持嵌套滑动的 ScrollView：\nNestedScrollView\n\n\n我们再试试 NestedScrollView + ListView\n\n1. Listview 高度：wrap_content  ，和上面的情况一样，listview的高度就是一条 item的gaoud\n2. Listview 高度：200dp , 则能全部显示出来\n\n如图：\n\n<img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/ScrollViewListView10.png\" width=\"320\" height=\"560\"/>  <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/ScrollViewListView11.png\" width=\"320\" height=\"560\"/>\n\n我们再换用\nNestedScrollView嵌套RecyclerView不会存在显示不全的问题; google 已经帮我们处理好了\n\n继续测试：\n1. recyclerView  高度：wrap_content\n2. recyclerView 高度：200dp\n\n分别如图：\nwrap_content 时，RecycleView 会全部显示出来\n\n<img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/ScrollViewListView12.png\" width=\"320\" height=\"560\"/>  <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/ScrollViewListView13.png\" width=\"320\" height=\"560\"/>\n\n\n实现细节，可以看看 NestedScrollView 和 RecyclerView 的 measure 的处理方式\n\n## 总结\n\nScrollView 嵌套 Listview 存在以下问题：\n\n1. Listview 高度显示不全，就是因为 ScrollView 测量子View 的高度时，是 不确定 模式，导致Listview 绘制时候，不能确定高度，所以显示 item 的高度\n2. 滑动冲突，Listview滑动并不能响应，会被ScrollView拦截响应。\n3. Listview 复用失效，由于Listview的高度不能确定，则会使屏幕内能够显示的 view 数量不能确定，然后就会不停的 getView()，导致所有的 item 都被创建出来了； RecyclerView 也会出现这类问题\n\n**ListView 在使用 父布局的时候，尽量避免使用RelatvieLayout，因为它的测量、布局过程比 LinearLayout 要多进行几次，就是因为，依赖关系的复杂过程的处理**\n\nNestedScrollView 的特性：\n\n1. 改变了事件传递的性质；原来的事件传递，都是由单个 View 去处理、消费的，而 增加了 嵌套滑动的事件处理机制后，父View和子View就可以同时处理一个事件\n2. 借助于 NestedScrollingParentHelper，NestedScrollingChildHelper 来进行事件的传递调用、信息分发和接收，使得父子view 的滑动信息都能获取到，并做相应的节点处理，控制更加自如\n\n\n----\n参考\n\nhttps://github.com/android-cn/android-open-project-analysis/tree/master/tech/viewdrawflow\nhttp://blog.csdn.net/hanhailong726188/article/details/46136569\nhttps://stackoverflow.com/questions/18367522/android-list-view-inside-a-scroll-view\nhttps://www.zhihu.com/question/34015543\nhttp://www.chenglong.ren/2016/11/14/android%E4%B8%ADnestedscrollview%E7%9A%84%E4%BD%BF%E7%94%A8/\n\n\n","source":"_posts/滑动相关 ScrollView & ListView.md","raw":"---\ntitle: 滑动相关 ScrollView & ListView\ndate: 2016-09-04 11:13\ncategories: Android\ntags: [滑动, ScrollView, ListView]\n---\n\n## ScrollView 嵌套 ListView 问题分析\n**滑动冲突的问题**\nScrollView 中嵌套 ListView，ListView 在测量时，高度不论写活还是写死，Listiew 的测量模式都是 不确定模式：unspecified\n\n![](http://7xr1vo.com1.z0.glb.clouddn.com/ScrollViewListView1.png)\n\nScrollView 换成 LinearLayout后：\n\n![](http://7xr1vo.com1.z0.glb.clouddn.com/ScrollViewListView2.png)\n\n经过上面的实验，什么原因造成的 heightMeasureSpec的值是 680 呢？\n\n\n**追踪过程**\n\n在ScrollView 测量时：\n\n![](http://7xr1vo.com1.z0.glb.clouddn.com/ScrollViewListView3.png)\n\nListview 测量时：heightMeasureSpec = 680\n\n![](http://7xr1vo.com1.z0.glb.clouddn.com/ScrollViewListView4.png)\n\n再继续向前追溯：\nScrollView的 onMeasure() 调用了父类的  onMeasure() 即 FrameLayout 的：\n\n![](http://7xr1vo.com1.z0.glb.clouddn.com/ScrollViewListView5.png)\n\n![](http://7xr1vo.com1.z0.glb.clouddn.com/ScrollViewListView6.png)\n\n再仔细观察：\n\n![](http://7xr1vo.com1.z0.glb.clouddn.com/ScrollViewListView7.png)\n\n\n可以再查看ScrollView 的 measureChild() 方法，也是通过 设置 高度的测量模式：unspecified\n\n\n我们对比 未覆盖的  ViewGroup的代码：\n```java\nprotected void measureChildWithMargins(View child,\n        int parentWidthMeasureSpec, int widthUsed,\n        int parentHeightMeasureSpec, int heightUsed) {\n    final MarginLayoutParams lp = (MarginLayoutParams) child.getLayoutParams();\n\n    final int childWidthMeasureSpec = getChildMeasureSpec(parentWidthMeasureSpec,\n            mPaddingLeft + mPaddingRight + lp.leftMargin + lp.rightMargin\n                    + widthUsed, lp.width);\n    final int childHeightMeasureSpec = getChildMeasureSpec(parentHeightMeasureSpec,\n            mPaddingTop + mPaddingBottom + lp.topMargin + lp.bottomMargin\n                    + heightUsed, lp.height);\n\n    child.measure(childWidthMeasureSpec, childHeightMeasureSpec);\n}\n```\n\n\n到最后，传到listview的 onMeasure 中后，我们来分析：\n```java\n@Override\nprotected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {\n    // Sets up mListPadding\n    super.onMeasure(widthMeasureSpec, heightMeasureSpec);\n\n    final int widthMode = MeasureSpec.getMode(widthMeasureSpec);\n    final int heightMode = MeasureSpec.getMode(heightMeasureSpec);// heightMeasureSpec：680  计算结果： heightMode：0\n    int widthSize = MeasureSpec.getSize(widthMeasureSpec);\n    int heightSize = MeasureSpec.getSize(heightMeasureSpec);\n\n    int childWidth = 0;\n    int childHeight = 0;\n    int childState = 0;\n\n    mItemCount = mAdapter == null ? 0 : mAdapter.getCount();\n    if (mItemCount > 0 && (widthMode == MeasureSpec.UNSPECIFIED\n            || heightMode == MeasureSpec.UNSPECIFIED)) {\n        final View child = obtainView(0, mIsScrap);\n\n        // Lay out child directly against the parent measure spec so that\n        // we can obtain exected minimum width and height.\n        measureScrapChild(child, 0, widthMeasureSpec, heightSize);\n\n        childWidth = child.getMeasuredWidth();\n        childHeight = child.getMeasuredHeight();// listview 的 item 高度\n        childState = combineMeasuredStates(childState, child.getMeasuredState());\n\n        if (recycleOnMeasure() && mRecycler.shouldRecycleViewType(\n                ((LayoutParams) child.getLayoutParams()).viewType)) {\n            mRecycler.addScrapView(child, 0);\n        }\n    }\n\n    if (widthMode == MeasureSpec.UNSPECIFIED) {\n        widthSize = mListPadding.left + mListPadding.right + childWidth +\n                getVerticalScrollbarWidth();\n    } else {\n        widthSize |= (childState & MEASURED_STATE_MASK);\n    }\n\n    if (heightMode == MeasureSpec.UNSPECIFIED) {// 符合条件\n        heightSize = mListPadding.top + mListPadding.bottom + childHeight +\n                getVerticalFadingEdgeLength() * 2;// 所以 listview 的高度为 item 的高度\n    }\n    // 此种布局下，不管如何调整高度属性， listview 的 高度 测量规格始终都是 unspecified，\n\n    if (heightMode == MeasureSpec.AT_MOST) {\n        // TODO: after first layout we should maybe start at the first visible position, not 0\n        heightSize = measureHeightOfChildren(widthMeasureSpec, 0, NO_POSITION, heightSize, -1);\n    }\n\n    setMeasuredDimension(widthSize, heightSize);\n\n    mWidthMeasureSpec = widthMeasureSpec;\n}\n```\n\n**解决高度显示的问题**\n\n方法挺多的，这里给出一种：重写listview的onMesasure\nhttps://stackoverflow.com/questions/18367522/android-list-view-inside-a-scroll-view\n<br>\n对于 ScrollView 的子View ，也不能配置高度属性为 match_parent, 即使设置了，也是按照 wrap_content 的效果走的\n而且 Android Studio 在lint 检查的时候，已经建议你这样做了\n\n![](http://7xr1vo.com1.z0.glb.clouddn.com/ScrollViewListView8.png)\n\n\n\n## ScrollView 的滑动相关\n\nonTouchEvent 中，move 时：\n```java\nif (mIsBeingDragged) {\n    // Scroll to follow the motion event\n    mLastMotionY = y - mScrollOffset[1];\n\n    final int oldY = mScrollY;\n    final int range = getScrollRange();\n    final int overscrollMode = getOverScrollMode();\n    boolean canOverscroll = overscrollMode == OVER_SCROLL_ALWAYS ||\n            (overscrollMode == OVER_SCROLL_IF_CONTENT_SCROLLS && range > 0);\n\n    // Calling overScrollBy will call onOverScrolled, which\n    // calls onScrollChanged if applicable.\n    if (overScrollBy(0, deltaY, 0, mScrollY, 0, range, 0, mOverscrollDistance, true)\n            && !hasNestedScrollingParent()) {\n        // Break our velocity if we hit a scroll barrier.\n        mVelocityTracker.clear();\n    }\n    ... ...\n}\n\n\nprivate int getScrollRange() {\n    int scrollRange = 0;\n    if (getChildCount() > 0) {\n        View child = getChildAt(0);\n        scrollRange = Math.max(0,\n                child.getHeight() - (getHeight() - mPaddingBottom - mPaddingTop));\n    // 可滑动的范围： 子view的高度 - ScrollView 的高度（去掉上下内边距的）\n    }\n    return scrollRange;\n}\n```\n\n这里，曾经遇到过的问题：\n\n想在 ScrollView 中滑到底部后，多滑动一部分距离来显示上面的距离，因为上层盖有view, 想做出透明的效果，如主页 tab + 列表的呈现方式；\n这时候可以这样处理：重写 addView() , 并把唯一的子View 添加一个 bottomPadding，就是增大 child.Hegiht.  所以增大了 ScrollRange；\n\n类比：listview ，可以增加 一个有高度 的footer ,实现这种功能\n\n**滑动冲突的问题**\n\n解决办法\n```java\nlistView.setOnTouchListener(object : View.OnTouchListener {\n    override fun onTouch(v: View, event: MotionEvent): Boolean {\n        v.parent.parent.requestDisallowInterceptTouchEvent(true)\n        return false;\n    }\n})\n// 请求 父view 不允许拦截，则交给 listview 来处理 move 事件\n```\n<img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/ScrollViewListView9.gif\" width=\"320\" height=\"560\"/>\n\n另外，ScrollView嵌套RecyclerView也会存在显示不全的问题\n\n---\n\n**翻开历史新篇章**：\n\nV4包 中提供了 可支持嵌套滑动的 ScrollView：\nNestedScrollView\n\n\n我们再试试 NestedScrollView + ListView\n\n1. Listview 高度：wrap_content  ，和上面的情况一样，listview的高度就是一条 item的gaoud\n2. Listview 高度：200dp , 则能全部显示出来\n\n如图：\n\n<img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/ScrollViewListView10.png\" width=\"320\" height=\"560\"/>  <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/ScrollViewListView11.png\" width=\"320\" height=\"560\"/>\n\n我们再换用\nNestedScrollView嵌套RecyclerView不会存在显示不全的问题; google 已经帮我们处理好了\n\n继续测试：\n1. recyclerView  高度：wrap_content\n2. recyclerView 高度：200dp\n\n分别如图：\nwrap_content 时，RecycleView 会全部显示出来\n\n<img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/ScrollViewListView12.png\" width=\"320\" height=\"560\"/>  <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/ScrollViewListView13.png\" width=\"320\" height=\"560\"/>\n\n\n实现细节，可以看看 NestedScrollView 和 RecyclerView 的 measure 的处理方式\n\n## 总结\n\nScrollView 嵌套 Listview 存在以下问题：\n\n1. Listview 高度显示不全，就是因为 ScrollView 测量子View 的高度时，是 不确定 模式，导致Listview 绘制时候，不能确定高度，所以显示 item 的高度\n2. 滑动冲突，Listview滑动并不能响应，会被ScrollView拦截响应。\n3. Listview 复用失效，由于Listview的高度不能确定，则会使屏幕内能够显示的 view 数量不能确定，然后就会不停的 getView()，导致所有的 item 都被创建出来了； RecyclerView 也会出现这类问题\n\n**ListView 在使用 父布局的时候，尽量避免使用RelatvieLayout，因为它的测量、布局过程比 LinearLayout 要多进行几次，就是因为，依赖关系的复杂过程的处理**\n\nNestedScrollView 的特性：\n\n1. 改变了事件传递的性质；原来的事件传递，都是由单个 View 去处理、消费的，而 增加了 嵌套滑动的事件处理机制后，父View和子View就可以同时处理一个事件\n2. 借助于 NestedScrollingParentHelper，NestedScrollingChildHelper 来进行事件的传递调用、信息分发和接收，使得父子view 的滑动信息都能获取到，并做相应的节点处理，控制更加自如\n\n\n----\n参考\n\nhttps://github.com/android-cn/android-open-project-analysis/tree/master/tech/viewdrawflow\nhttp://blog.csdn.net/hanhailong726188/article/details/46136569\nhttps://stackoverflow.com/questions/18367522/android-list-view-inside-a-scroll-view\nhttps://www.zhihu.com/question/34015543\nhttp://www.chenglong.ren/2016/11/14/android%E4%B8%ADnestedscrollview%E7%9A%84%E4%BD%BF%E7%94%A8/\n\n\n","slug":"滑动相关 ScrollView & ListView","published":1,"updated":"2017-09-09T10:41:32.000Z","_id":"cj74l8riw0000xhqwt5awjp25","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"ScrollView-嵌套-ListView-问题分析\"><a href=\"#ScrollView-嵌套-ListView-问题分析\" class=\"headerlink\" title=\"ScrollView 嵌套 ListView 问题分析\"></a>ScrollView 嵌套 ListView 问题分析</h2><p><strong>滑动冲突的问题</strong><br>ScrollView 中嵌套 ListView，ListView 在测量时，高度不论写活还是写死，Listiew 的测量模式都是 不确定模式：unspecified</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/ScrollViewListView1.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>ScrollView 换成 LinearLayout后：</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/ScrollViewListView2.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>经过上面的实验，什么原因造成的 heightMeasureSpec的值是 680 呢？</p>\n<p><strong>追踪过程</strong></p>\n<p>在ScrollView 测量时：</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/ScrollViewListView3.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>Listview 测量时：heightMeasureSpec = 680</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/ScrollViewListView4.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>再继续向前追溯：<br>ScrollView的 onMeasure() 调用了父类的  onMeasure() 即 FrameLayout 的：</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/ScrollViewListView5.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/ScrollViewListView6.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>再仔细观察：</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/ScrollViewListView7.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>可以再查看ScrollView 的 measureChild() 方法，也是通过 设置 高度的测量模式：unspecified</p>\n<p>我们对比 未覆盖的  ViewGroup的代码：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">measureChildWithMargins</span><span class=\"params\">(View child,</span></span></div><div class=\"line\">        <span class=\"keyword\">int</span> parentWidthMeasureSpec, <span class=\"keyword\">int</span> widthUsed,</div><div class=\"line\">        <span class=\"keyword\">int</span> parentHeightMeasureSpec, <span class=\"keyword\">int</span> heightUsed) &#123;</div><div class=\"line\">    <span class=\"keyword\">final</span> MarginLayoutParams lp = (MarginLayoutParams) child.getLayoutParams();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> childWidthMeasureSpec = getChildMeasureSpec(parentWidthMeasureSpec,</div><div class=\"line\">            mPaddingLeft + mPaddingRight + lp.leftMargin + lp.rightMargin</div><div class=\"line\">                    + widthUsed, lp.width);</div><div class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> childHeightMeasureSpec = getChildMeasureSpec(parentHeightMeasureSpec,</div><div class=\"line\">            mPaddingTop + mPaddingBottom + lp.topMargin + lp.bottomMargin</div><div class=\"line\">                    + heightUsed, lp.height);</div><div class=\"line\"></div><div class=\"line\">    child.measure(childWidthMeasureSpec, childHeightMeasureSpec);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>到最后，传到listview的 onMeasure 中后，我们来分析：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onMeasure</span><span class=\"params\">(<span class=\"keyword\">int</span> widthMeasureSpec, <span class=\"keyword\">int</span> heightMeasureSpec)</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// Sets up mListPadding</span></div><div class=\"line\">    <span class=\"keyword\">super</span>.onMeasure(widthMeasureSpec, heightMeasureSpec);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> widthMode = MeasureSpec.getMode(widthMeasureSpec);</div><div class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> heightMode = MeasureSpec.getMode(heightMeasureSpec);<span class=\"comment\">// heightMeasureSpec：680  计算结果： heightMode：0</span></div><div class=\"line\">    <span class=\"keyword\">int</span> widthSize = MeasureSpec.getSize(widthMeasureSpec);</div><div class=\"line\">    <span class=\"keyword\">int</span> heightSize = MeasureSpec.getSize(heightMeasureSpec);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">int</span> childWidth = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">int</span> childHeight = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">int</span> childState = <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">    mItemCount = mAdapter == <span class=\"keyword\">null</span> ? <span class=\"number\">0</span> : mAdapter.getCount();</div><div class=\"line\">    <span class=\"keyword\">if</span> (mItemCount &gt; <span class=\"number\">0</span> &amp;&amp; (widthMode == MeasureSpec.UNSPECIFIED</div><div class=\"line\">            || heightMode == MeasureSpec.UNSPECIFIED)) &#123;</div><div class=\"line\">        <span class=\"keyword\">final</span> View child = obtainView(<span class=\"number\">0</span>, mIsScrap);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// Lay out child directly against the parent measure spec so that</span></div><div class=\"line\">        <span class=\"comment\">// we can obtain exected minimum width and height.</span></div><div class=\"line\">        measureScrapChild(child, <span class=\"number\">0</span>, widthMeasureSpec, heightSize);</div><div class=\"line\"></div><div class=\"line\">        childWidth = child.getMeasuredWidth();</div><div class=\"line\">        childHeight = child.getMeasuredHeight();<span class=\"comment\">// listview 的 item 高度</span></div><div class=\"line\">        childState = combineMeasuredStates(childState, child.getMeasuredState());</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (recycleOnMeasure() &amp;&amp; mRecycler.shouldRecycleViewType(</div><div class=\"line\">                ((LayoutParams) child.getLayoutParams()).viewType)) &#123;</div><div class=\"line\">            mRecycler.addScrapView(child, <span class=\"number\">0</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (widthMode == MeasureSpec.UNSPECIFIED) &#123;</div><div class=\"line\">        widthSize = mListPadding.left + mListPadding.right + childWidth +</div><div class=\"line\">                getVerticalScrollbarWidth();</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        widthSize |= (childState &amp; MEASURED_STATE_MASK);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (heightMode == MeasureSpec.UNSPECIFIED) &#123;<span class=\"comment\">// 符合条件</span></div><div class=\"line\">        heightSize = mListPadding.top + mListPadding.bottom + childHeight +</div><div class=\"line\">                getVerticalFadingEdgeLength() * <span class=\"number\">2</span>;<span class=\"comment\">// 所以 listview 的高度为 item 的高度</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// 此种布局下，不管如何调整高度属性， listview 的 高度 测量规格始终都是 unspecified，</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (heightMode == MeasureSpec.AT_MOST) &#123;</div><div class=\"line\">        <span class=\"comment\">// <span class=\"doctag\">TODO:</span> after first layout we should maybe start at the first visible position, not 0</span></div><div class=\"line\">        heightSize = measureHeightOfChildren(widthMeasureSpec, <span class=\"number\">0</span>, NO_POSITION, heightSize, -<span class=\"number\">1</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    setMeasuredDimension(widthSize, heightSize);</div><div class=\"line\"></div><div class=\"line\">    mWidthMeasureSpec = widthMeasureSpec;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><strong>解决高度显示的问题</strong></p>\n<p>方法挺多的，这里给出一种：重写listview的onMesasure<br><a href=\"https://stackoverflow.com/questions/18367522/android-list-view-inside-a-scroll-view\" target=\"_blank\" rel=\"external\">https://stackoverflow.com/questions/18367522/android-list-view-inside-a-scroll-view</a><br><br><br>对于 ScrollView 的子View ，也不能配置高度属性为 match_parent, 即使设置了，也是按照 wrap_content 的效果走的<br>而且 Android Studio 在lint 检查的时候，已经建议你这样做了</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/ScrollViewListView8.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<h2 id=\"ScrollView-的滑动相关\"><a href=\"#ScrollView-的滑动相关\" class=\"headerlink\" title=\"ScrollView 的滑动相关\"></a>ScrollView 的滑动相关</h2><p>onTouchEvent 中，move 时：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> (mIsBeingDragged) &#123;</div><div class=\"line\">    <span class=\"comment\">// Scroll to follow the motion event</span></div><div class=\"line\">    mLastMotionY = y - mScrollOffset[<span class=\"number\">1</span>];</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> oldY = mScrollY;</div><div class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> range = getScrollRange();</div><div class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> overscrollMode = getOverScrollMode();</div><div class=\"line\">    <span class=\"keyword\">boolean</span> canOverscroll = overscrollMode == OVER_SCROLL_ALWAYS ||</div><div class=\"line\">            (overscrollMode == OVER_SCROLL_IF_CONTENT_SCROLLS &amp;&amp; range &gt; <span class=\"number\">0</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Calling overScrollBy will call onOverScrolled, which</span></div><div class=\"line\">    <span class=\"comment\">// calls onScrollChanged if applicable.</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (overScrollBy(<span class=\"number\">0</span>, deltaY, <span class=\"number\">0</span>, mScrollY, <span class=\"number\">0</span>, range, <span class=\"number\">0</span>, mOverscrollDistance, <span class=\"keyword\">true</span>)</div><div class=\"line\">            &amp;&amp; !hasNestedScrollingParent()) &#123;</div><div class=\"line\">        <span class=\"comment\">// Break our velocity if we hit a scroll barrier.</span></div><div class=\"line\">        mVelocityTracker.clear();</div><div class=\"line\">    &#125;</div><div class=\"line\">    ... ...</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">getScrollRange</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> scrollRange = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span> (getChildCount() &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">        View child = getChildAt(<span class=\"number\">0</span>);</div><div class=\"line\">        scrollRange = Math.max(<span class=\"number\">0</span>,</div><div class=\"line\">                child.getHeight() - (getHeight() - mPaddingBottom - mPaddingTop));</div><div class=\"line\">    <span class=\"comment\">// 可滑动的范围： 子view的高度 - ScrollView 的高度（去掉上下内边距的）</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> scrollRange;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>这里，曾经遇到过的问题：</p>\n<p>想在 ScrollView 中滑到底部后，多滑动一部分距离来显示上面的距离，因为上层盖有view, 想做出透明的效果，如主页 tab + 列表的呈现方式；<br>这时候可以这样处理：重写 addView() , 并把唯一的子View 添加一个 bottomPadding，就是增大 child.Hegiht.  所以增大了 ScrollRange；</p>\n<p>类比：listview ，可以增加 一个有高度 的footer ,实现这种功能</p>\n<p><strong>滑动冲突的问题</strong></p>\n<p>解决办法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">listView.setOnTouchListener(object : View.OnTouchListener &#123;</div><div class=\"line\">    <span class=\"function\">override fun <span class=\"title\">onTouch</span><span class=\"params\">(v: View, event: MotionEvent)</span>: Boolean </span>&#123;</div><div class=\"line\">        v.parent.parent.requestDisallowInterceptTouchEvent(<span class=\"keyword\">true</span>)</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"comment\">// 请求 父view 不允许拦截，则交给 listview 来处理 move 事件</span></div></pre></td></tr></table></figure></p>\n<p><img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/ScrollViewListView9.gif\" width=\"320\" height=\"560\"></p>\n<p>另外，ScrollView嵌套RecyclerView也会存在显示不全的问题</p>\n<hr>\n<p><strong>翻开历史新篇章</strong>：</p>\n<p>V4包 中提供了 可支持嵌套滑动的 ScrollView：<br>NestedScrollView</p>\n<p>我们再试试 NestedScrollView + ListView</p>\n<ol>\n<li>Listview 高度：wrap_content  ，和上面的情况一样，listview的高度就是一条 item的gaoud</li>\n<li>Listview 高度：200dp , 则能全部显示出来</li>\n</ol>\n<p>如图：</p>\n<p><img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/ScrollViewListView10.png\" width=\"320\" height=\"560\">  <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/ScrollViewListView11.png\" width=\"320\" height=\"560\"></p>\n<p>我们再换用<br>NestedScrollView嵌套RecyclerView不会存在显示不全的问题; google 已经帮我们处理好了</p>\n<p>继续测试：</p>\n<ol>\n<li>recyclerView  高度：wrap_content</li>\n<li>recyclerView 高度：200dp</li>\n</ol>\n<p>分别如图：<br>wrap_content 时，RecycleView 会全部显示出来</p>\n<p><img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/ScrollViewListView12.png\" width=\"320\" height=\"560\">  <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/ScrollViewListView13.png\" width=\"320\" height=\"560\"></p>\n<p>实现细节，可以看看 NestedScrollView 和 RecyclerView 的 measure 的处理方式</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>ScrollView 嵌套 Listview 存在以下问题：</p>\n<ol>\n<li>Listview 高度显示不全，就是因为 ScrollView 测量子View 的高度时，是 不确定 模式，导致Listview 绘制时候，不能确定高度，所以显示 item 的高度</li>\n<li>滑动冲突，Listview滑动并不能响应，会被ScrollView拦截响应。</li>\n<li>Listview 复用失效，由于Listview的高度不能确定，则会使屏幕内能够显示的 view 数量不能确定，然后就会不停的 getView()，导致所有的 item 都被创建出来了； RecyclerView 也会出现这类问题</li>\n</ol>\n<p><strong>ListView 在使用 父布局的时候，尽量避免使用RelatvieLayout，因为它的测量、布局过程比 LinearLayout 要多进行几次，就是因为，依赖关系的复杂过程的处理</strong></p>\n<p>NestedScrollView 的特性：</p>\n<ol>\n<li>改变了事件传递的性质；原来的事件传递，都是由单个 View 去处理、消费的，而 增加了 嵌套滑动的事件处理机制后，父View和子View就可以同时处理一个事件</li>\n<li>借助于 NestedScrollingParentHelper，NestedScrollingChildHelper 来进行事件的传递调用、信息分发和接收，使得父子view 的滑动信息都能获取到，并做相应的节点处理，控制更加自如</li>\n</ol>\n<hr>\n<p>参考</p>\n<p><a href=\"https://github.com/android-cn/android-open-project-analysis/tree/master/tech/viewdrawflow\" target=\"_blank\" rel=\"external\">https://github.com/android-cn/android-open-project-analysis/tree/master/tech/viewdrawflow</a><br><a href=\"http://blog.csdn.net/hanhailong726188/article/details/46136569\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/hanhailong726188/article/details/46136569</a><br><a href=\"https://stackoverflow.com/questions/18367522/android-list-view-inside-a-scroll-view\" target=\"_blank\" rel=\"external\">https://stackoverflow.com/questions/18367522/android-list-view-inside-a-scroll-view</a><br><a href=\"https://www.zhihu.com/question/34015543\" target=\"_blank\" rel=\"external\">https://www.zhihu.com/question/34015543</a><br><a href=\"http://www.chenglong.ren/2016/11/14/android%E4%B8%ADnestedscrollview%E7%9A%84%E4%BD%BF%E7%94%A8/\" target=\"_blank\" rel=\"external\">http://www.chenglong.ren/2016/11/14/android%E4%B8%ADnestedscrollview%E7%9A%84%E4%BD%BF%E7%94%A8/</a></p>\n","excerpt":"","more":"<h2 id=\"ScrollView-嵌套-ListView-问题分析\"><a href=\"#ScrollView-嵌套-ListView-问题分析\" class=\"headerlink\" title=\"ScrollView 嵌套 ListView 问题分析\"></a>ScrollView 嵌套 ListView 问题分析</h2><p><strong>滑动冲突的问题</strong><br>ScrollView 中嵌套 ListView，ListView 在测量时，高度不论写活还是写死，Listiew 的测量模式都是 不确定模式：unspecified</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/ScrollViewListView1.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>ScrollView 换成 LinearLayout后：</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/ScrollViewListView2.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>经过上面的实验，什么原因造成的 heightMeasureSpec的值是 680 呢？</p>\n<p><strong>追踪过程</strong></p>\n<p>在ScrollView 测量时：</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/ScrollViewListView3.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>Listview 测量时：heightMeasureSpec = 680</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/ScrollViewListView4.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>再继续向前追溯：<br>ScrollView的 onMeasure() 调用了父类的  onMeasure() 即 FrameLayout 的：</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/ScrollViewListView5.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/ScrollViewListView6.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>再仔细观察：</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/ScrollViewListView7.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>可以再查看ScrollView 的 measureChild() 方法，也是通过 设置 高度的测量模式：unspecified</p>\n<p>我们对比 未覆盖的  ViewGroup的代码：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">measureChildWithMargins</span><span class=\"params\">(View child,</div><div class=\"line\">        <span class=\"keyword\">int</span> parentWidthMeasureSpec, <span class=\"keyword\">int</span> widthUsed,</div><div class=\"line\">        <span class=\"keyword\">int</span> parentHeightMeasureSpec, <span class=\"keyword\">int</span> heightUsed)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">final</span> MarginLayoutParams lp = (MarginLayoutParams) child.getLayoutParams();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> childWidthMeasureSpec = getChildMeasureSpec(parentWidthMeasureSpec,</div><div class=\"line\">            mPaddingLeft + mPaddingRight + lp.leftMargin + lp.rightMargin</div><div class=\"line\">                    + widthUsed, lp.width);</div><div class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> childHeightMeasureSpec = getChildMeasureSpec(parentHeightMeasureSpec,</div><div class=\"line\">            mPaddingTop + mPaddingBottom + lp.topMargin + lp.bottomMargin</div><div class=\"line\">                    + heightUsed, lp.height);</div><div class=\"line\"></div><div class=\"line\">    child.measure(childWidthMeasureSpec, childHeightMeasureSpec);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>到最后，传到listview的 onMeasure 中后，我们来分析：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onMeasure</span><span class=\"params\">(<span class=\"keyword\">int</span> widthMeasureSpec, <span class=\"keyword\">int</span> heightMeasureSpec)</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// Sets up mListPadding</span></div><div class=\"line\">    <span class=\"keyword\">super</span>.onMeasure(widthMeasureSpec, heightMeasureSpec);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> widthMode = MeasureSpec.getMode(widthMeasureSpec);</div><div class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> heightMode = MeasureSpec.getMode(heightMeasureSpec);<span class=\"comment\">// heightMeasureSpec：680  计算结果： heightMode：0</span></div><div class=\"line\">    <span class=\"keyword\">int</span> widthSize = MeasureSpec.getSize(widthMeasureSpec);</div><div class=\"line\">    <span class=\"keyword\">int</span> heightSize = MeasureSpec.getSize(heightMeasureSpec);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">int</span> childWidth = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">int</span> childHeight = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">int</span> childState = <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">    mItemCount = mAdapter == <span class=\"keyword\">null</span> ? <span class=\"number\">0</span> : mAdapter.getCount();</div><div class=\"line\">    <span class=\"keyword\">if</span> (mItemCount &gt; <span class=\"number\">0</span> &amp;&amp; (widthMode == MeasureSpec.UNSPECIFIED</div><div class=\"line\">            || heightMode == MeasureSpec.UNSPECIFIED)) &#123;</div><div class=\"line\">        <span class=\"keyword\">final</span> View child = obtainView(<span class=\"number\">0</span>, mIsScrap);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// Lay out child directly against the parent measure spec so that</span></div><div class=\"line\">        <span class=\"comment\">// we can obtain exected minimum width and height.</span></div><div class=\"line\">        measureScrapChild(child, <span class=\"number\">0</span>, widthMeasureSpec, heightSize);</div><div class=\"line\"></div><div class=\"line\">        childWidth = child.getMeasuredWidth();</div><div class=\"line\">        childHeight = child.getMeasuredHeight();<span class=\"comment\">// listview 的 item 高度</span></div><div class=\"line\">        childState = combineMeasuredStates(childState, child.getMeasuredState());</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (recycleOnMeasure() &amp;&amp; mRecycler.shouldRecycleViewType(</div><div class=\"line\">                ((LayoutParams) child.getLayoutParams()).viewType)) &#123;</div><div class=\"line\">            mRecycler.addScrapView(child, <span class=\"number\">0</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (widthMode == MeasureSpec.UNSPECIFIED) &#123;</div><div class=\"line\">        widthSize = mListPadding.left + mListPadding.right + childWidth +</div><div class=\"line\">                getVerticalScrollbarWidth();</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        widthSize |= (childState &amp; MEASURED_STATE_MASK);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (heightMode == MeasureSpec.UNSPECIFIED) &#123;<span class=\"comment\">// 符合条件</span></div><div class=\"line\">        heightSize = mListPadding.top + mListPadding.bottom + childHeight +</div><div class=\"line\">                getVerticalFadingEdgeLength() * <span class=\"number\">2</span>;<span class=\"comment\">// 所以 listview 的高度为 item 的高度</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// 此种布局下，不管如何调整高度属性， listview 的 高度 测量规格始终都是 unspecified，</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (heightMode == MeasureSpec.AT_MOST) &#123;</div><div class=\"line\">        <span class=\"comment\">// <span class=\"doctag\">TODO:</span> after first layout we should maybe start at the first visible position, not 0</span></div><div class=\"line\">        heightSize = measureHeightOfChildren(widthMeasureSpec, <span class=\"number\">0</span>, NO_POSITION, heightSize, -<span class=\"number\">1</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    setMeasuredDimension(widthSize, heightSize);</div><div class=\"line\"></div><div class=\"line\">    mWidthMeasureSpec = widthMeasureSpec;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><strong>解决高度显示的问题</strong></p>\n<p>方法挺多的，这里给出一种：重写listview的onMesasure<br><a href=\"https://stackoverflow.com/questions/18367522/android-list-view-inside-a-scroll-view\">https://stackoverflow.com/questions/18367522/android-list-view-inside-a-scroll-view</a><br><br><br>对于 ScrollView 的子View ，也不能配置高度属性为 match_parent, 即使设置了，也是按照 wrap_content 的效果走的<br>而且 Android Studio 在lint 检查的时候，已经建议你这样做了</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/ScrollViewListView8.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<h2 id=\"ScrollView-的滑动相关\"><a href=\"#ScrollView-的滑动相关\" class=\"headerlink\" title=\"ScrollView 的滑动相关\"></a>ScrollView 的滑动相关</h2><p>onTouchEvent 中，move 时：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> (mIsBeingDragged) &#123;</div><div class=\"line\">    <span class=\"comment\">// Scroll to follow the motion event</span></div><div class=\"line\">    mLastMotionY = y - mScrollOffset[<span class=\"number\">1</span>];</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> oldY = mScrollY;</div><div class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> range = getScrollRange();</div><div class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> overscrollMode = getOverScrollMode();</div><div class=\"line\">    <span class=\"keyword\">boolean</span> canOverscroll = overscrollMode == OVER_SCROLL_ALWAYS ||</div><div class=\"line\">            (overscrollMode == OVER_SCROLL_IF_CONTENT_SCROLLS &amp;&amp; range &gt; <span class=\"number\">0</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Calling overScrollBy will call onOverScrolled, which</span></div><div class=\"line\">    <span class=\"comment\">// calls onScrollChanged if applicable.</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (overScrollBy(<span class=\"number\">0</span>, deltaY, <span class=\"number\">0</span>, mScrollY, <span class=\"number\">0</span>, range, <span class=\"number\">0</span>, mOverscrollDistance, <span class=\"keyword\">true</span>)</div><div class=\"line\">            &amp;&amp; !hasNestedScrollingParent()) &#123;</div><div class=\"line\">        <span class=\"comment\">// Break our velocity if we hit a scroll barrier.</span></div><div class=\"line\">        mVelocityTracker.clear();</div><div class=\"line\">    &#125;</div><div class=\"line\">    ... ...</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">getScrollRange</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> scrollRange = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span> (getChildCount() &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">        View child = getChildAt(<span class=\"number\">0</span>);</div><div class=\"line\">        scrollRange = Math.max(<span class=\"number\">0</span>,</div><div class=\"line\">                child.getHeight() - (getHeight() - mPaddingBottom - mPaddingTop));</div><div class=\"line\">    <span class=\"comment\">// 可滑动的范围： 子view的高度 - ScrollView 的高度（去掉上下内边距的）</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> scrollRange;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>这里，曾经遇到过的问题：</p>\n<p>想在 ScrollView 中滑到底部后，多滑动一部分距离来显示上面的距离，因为上层盖有view, 想做出透明的效果，如主页 tab + 列表的呈现方式；<br>这时候可以这样处理：重写 addView() , 并把唯一的子View 添加一个 bottomPadding，就是增大 child.Hegiht.  所以增大了 ScrollRange；</p>\n<p>类比：listview ，可以增加 一个有高度 的footer ,实现这种功能</p>\n<p><strong>滑动冲突的问题</strong></p>\n<p>解决办法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">listView.setOnTouchListener(object : View.OnTouchListener &#123;</div><div class=\"line\">    <span class=\"function\">override fun <span class=\"title\">onTouch</span><span class=\"params\">(v: View, event: MotionEvent)</span>: Boolean </span>&#123;</div><div class=\"line\">        v.parent.parent.requestDisallowInterceptTouchEvent(<span class=\"keyword\">true</span>)</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"comment\">// 请求 父view 不允许拦截，则交给 listview 来处理 move 事件</span></div></pre></td></tr></table></figure></p>\n<p><img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/ScrollViewListView9.gif\" width=\"320\" height=\"560\"/></p>\n<p>另外，ScrollView嵌套RecyclerView也会存在显示不全的问题</p>\n<hr>\n<p><strong>翻开历史新篇章</strong>：</p>\n<p>V4包 中提供了 可支持嵌套滑动的 ScrollView：<br>NestedScrollView</p>\n<p>我们再试试 NestedScrollView + ListView</p>\n<ol>\n<li>Listview 高度：wrap_content  ，和上面的情况一样，listview的高度就是一条 item的gaoud</li>\n<li>Listview 高度：200dp , 则能全部显示出来</li>\n</ol>\n<p>如图：</p>\n<p><img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/ScrollViewListView10.png\" width=\"320\" height=\"560\"/>  <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/ScrollViewListView11.png\" width=\"320\" height=\"560\"/></p>\n<p>我们再换用<br>NestedScrollView嵌套RecyclerView不会存在显示不全的问题; google 已经帮我们处理好了</p>\n<p>继续测试：</p>\n<ol>\n<li>recyclerView  高度：wrap_content</li>\n<li>recyclerView 高度：200dp</li>\n</ol>\n<p>分别如图：<br>wrap_content 时，RecycleView 会全部显示出来</p>\n<p><img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/ScrollViewListView12.png\" width=\"320\" height=\"560\"/>  <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/ScrollViewListView13.png\" width=\"320\" height=\"560\"/></p>\n<p>实现细节，可以看看 NestedScrollView 和 RecyclerView 的 measure 的处理方式</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>ScrollView 嵌套 Listview 存在以下问题：</p>\n<ol>\n<li>Listview 高度显示不全，就是因为 ScrollView 测量子View 的高度时，是 不确定 模式，导致Listview 绘制时候，不能确定高度，所以显示 item 的高度</li>\n<li>滑动冲突，Listview滑动并不能响应，会被ScrollView拦截响应。</li>\n<li>Listview 复用失效，由于Listview的高度不能确定，则会使屏幕内能够显示的 view 数量不能确定，然后就会不停的 getView()，导致所有的 item 都被创建出来了； RecyclerView 也会出现这类问题</li>\n</ol>\n<p><strong>ListView 在使用 父布局的时候，尽量避免使用RelatvieLayout，因为它的测量、布局过程比 LinearLayout 要多进行几次，就是因为，依赖关系的复杂过程的处理</strong></p>\n<p>NestedScrollView 的特性：</p>\n<ol>\n<li>改变了事件传递的性质；原来的事件传递，都是由单个 View 去处理、消费的，而 增加了 嵌套滑动的事件处理机制后，父View和子View就可以同时处理一个事件</li>\n<li>借助于 NestedScrollingParentHelper，NestedScrollingChildHelper 来进行事件的传递调用、信息分发和接收，使得父子view 的滑动信息都能获取到，并做相应的节点处理，控制更加自如</li>\n</ol>\n<hr>\n<p>参考</p>\n<p><a href=\"https://github.com/android-cn/android-open-project-analysis/tree/master/tech/viewdrawflow\">https://github.com/android-cn/android-open-project-analysis/tree/master/tech/viewdrawflow</a><br><a href=\"http://blog.csdn.net/hanhailong726188/article/details/46136569\">http://blog.csdn.net/hanhailong726188/article/details/46136569</a><br><a href=\"https://stackoverflow.com/questions/18367522/android-list-view-inside-a-scroll-view\">https://stackoverflow.com/questions/18367522/android-list-view-inside-a-scroll-view</a><br><a href=\"https://www.zhihu.com/question/34015543\">https://www.zhihu.com/question/34015543</a><br><a href=\"http://www.chenglong.ren/2016/11/14/android%E4%B8%ADnestedscrollview%E7%9A%84%E4%BD%BF%E7%94%A8/\">http://www.chenglong.ren/2016/11/14/android%E4%B8%ADnestedscrollview%E7%9A%84%E4%BD%BF%E7%94%A8/</a></p>\n"},{"title":"View 测量相关总结","date":"2016-09-22T05:18:00.000Z","_content":"\n## ViewGroup的测量过程\n**ViewGroup 没有重写 View 的 measure()  和 onMeasure()  方法，沿用的还是View的**\n\n然后在 View 的源码中，我们找到 measure()，它内部调用到 onMeasure()。\n\n```java\n/**\n * This is called to find out how big a view should be. The parent\n * supplies constraint information in the width and height parameters.\n * The actual measurement work of a view is performed in\n * {@link #onMeasure(int, int)}, called by this method. Therefore, only\n * {@link #onMeasure(int, int)} can and must be overridden by subclasses.\n *\n * @param widthMeasureSpec Horizontal space requirements as imposed by the\n *        parent\n * @param heightMeasureSpec Vertical space requirements as imposed by the\n *        parent\n */\npublic final void measure(int widthMeasureSpec, int heightMeasureSpec) {\n\n    ......\n\n    long key = (long) widthMeasureSpec << 32 | (long) heightMeasureSpec & 0xffffffffL;\n    if (mMeasureCache == null) mMeasureCache = new LongSparseLongArray(2);\n\n    if ((mPrivateFlags & PFLAG_FORCE_LAYOUT) == PFLAG_FORCE_LAYOUT ||\n            widthMeasureSpec != mOldWidthMeasureSpec ||\n            heightMeasureSpec != mOldHeightMeasureSpec) {\n\n        // first clears the measured dimension flag\n        mPrivateFlags &= ~PFLAG_MEASURED_DIMENSION_SET;\n\n        // 解析 layout、padding、drawable 相关参数\n        resolveRtlPropertiesIfNeeded();\n\n        int cacheIndex = (mPrivateFlags & PFLAG_FORCE_LAYOUT) == PFLAG_FORCE_LAYOUT ? -1 :\n                mMeasureCache.indexOfKey(key);\n        if (cacheIndex < 0 || sIgnoreMeasureCache) {\n            // measure ourselves, this should set the measured dimension flag back\n            onMeasure(widthMeasureSpec, heightMeasureSpec);\n            mPrivateFlags3 &= ~PFLAG3_MEASURE_NEEDED_BEFORE_LAYOUT;\n        } else {\n            long value = mMeasureCache.valueAt(cacheIndex);\n            // Casting a long to int drops the high 32 bits, no mask needed\n            setMeasuredDimensionRaw((int) (value >> 32), (int) value);\n            mPrivateFlags3 |= PFLAG3_MEASURE_NEEDED_BEFORE_LAYOUT;\n        }\n\n        // flag not set, setMeasuredDimension() was not invoked, we raise\n        // an exception to warn the developer\n        if ((mPrivateFlags & PFLAG_MEASURED_DIMENSION_SET) != PFLAG_MEASURED_DIMENSION_SET) {\n            throw new IllegalStateException(\"View with id \" + getId() + \": \"\n                    + getClass().getName() + \"#onMeasure() did not set the\"\n                    + \" measured dimension by calling\"\n                    + \" setMeasuredDimension()\");\n        }\n\n        mPrivateFlags |= PFLAG_LAYOUT_REQUIRED;\n    }\n\n    mOldWidthMeasureSpec = widthMeasureSpec;\n    mOldHeightMeasureSpec = heightMeasureSpec;\n\n    mMeasureCache.put(key, ((long) mMeasuredWidth) << 32 |\n            (long) mMeasuredHeight & 0xffffffffL); // suppress sign extension\n}\n```\n其中，方法内传入的2个参数：widthMeasureSpec、heightMeasureSpec 也原封不动的传给 onMeasure() 方法中。 那 widthMeasureSpec，heightMeasureSpec 又是什么东西呢，我们从注释中看到：是 父View提供给子View(当前的view)宽高的约束信息，即：*父View根据自己的宽高、内边距信息计算合成的值，提供给子View自己测量时候使用，作为一个建议值*，**不是父View的宽高信息**\n从哪里能看出呢？我们找到ViewGroup的源码：\n```java\nprotected void measureChild(View child, int parentWidthMeasureSpec,\n            int parentHeightMeasureSpec) {\n    final LayoutParams lp = child.getLayoutParams();\n\n    final int childWidthMeasureSpec = getChildMeasureSpec(parentWidthMeasureSpec,\n            mPaddingLeft + mPaddingRight, lp.width);\n    final int childHeightMeasureSpec = getChildMeasureSpec(parentHeightMeasureSpec,\n            mPaddingTop + mPaddingBottom, lp.height);\n\n    child.measure(childWidthMeasureSpec, childHeightMeasureSpec);\n}\n```\n那么，widthMeasureSpec 和 heightMeasureSpec 具体又代表测量信息的什么呢？我们再看看 MeasureSpec(View 中的静态类)，发现，里面有 mode 和 size，mode 是测量模式（3中，不再细说，大家都知道），size 是测量大小，并且提供了 makeMeasureSpec() 和 getMode() ，getSize() 方法。 \n**measureSpec** 这个东西是由 mode 和 size 合成的一个值，合成方法就是依靠 makeMeasureSpec() 来做位运算生成的。然后View和ViewGroup 会拿着它作为参数传递的。\n\n\tmeasureSpec 是携带了测量模式和测量大小信息的一个值\n\ngetChildMeasureSpec() 是个具有Android View 测量方法论的一个方法，必须要知道。\n```java\npublic static int getChildMeasureSpec(int spec, int padding, int childDimension) {\n    int specMode = MeasureSpec.getMode(spec);// 父View的测量信息\n    int specSize = MeasureSpec.getSize(spec);\n\n    int size = Math.max(0, specSize - padding);\n\n    int resultSize = 0;\n    int resultMode = 0;\n\n    switch (specMode) {\n    // Parent has imposed an exact size on us\n    case MeasureSpec.EXACTLY:\n        if (childDimension >= 0) {\n            resultSize = childDimension;\n            resultMode = MeasureSpec.EXACTLY;\n        } else if (childDimension == LayoutParams.MATCH_PARENT) {\n            // Child wants to be our size. So be it.\n            resultSize = size;\n            resultMode = MeasureSpec.EXACTLY;\n        } else if (childDimension == LayoutParams.WRAP_CONTENT) {\n            // Child wants to determine its own size. It can't be\n            // bigger than us.\n            resultSize = size;\n            resultMode = MeasureSpec.AT_MOST;\n        }\n        break;\n\n    // Parent has imposed a maximum size on us\n    case MeasureSpec.AT_MOST:\n        if (childDimension >= 0) {\n            // Child wants a specific size... so be it\n            resultSize = childDimension;\n            resultMode = MeasureSpec.EXACTLY;\n        } else if (childDimension == LayoutParams.MATCH_PARENT) {\n            // Child wants to be our size, but our size is not fixed.\n            // Constrain child to not be bigger than us.\n            resultSize = size;\n            resultMode = MeasureSpec.AT_MOST;\n        } else if (childDimension == LayoutParams.WRAP_CONTENT) {\n            // Child wants to determine its own size. It can't be\n            // bigger than us.\n            resultSize = size;\n            resultMode = MeasureSpec.AT_MOST;\n        }\n        break;\n\n    // Parent asked to see how big we want to be\n    case MeasureSpec.UNSPECIFIED:\n        if (childDimension >= 0) {\n            // Child wants a specific size... let him have it\n            resultSize = childDimension;\n            resultMode = MeasureSpec.EXACTLY;\n        } else if (childDimension == LayoutParams.MATCH_PARENT) {\n            // Child wants to be our size... find out how big it should\n            // be\n            resultSize = View.sUseZeroUnspecifiedMeasureSpec ? 0 : size;\n            resultMode = MeasureSpec.UNSPECIFIED;\n        } else if (childDimension == LayoutParams.WRAP_CONTENT) {\n            // Child wants to determine its own size.... find out how\n            // big it should be\n            resultSize = View.sUseZeroUnspecifiedMeasureSpec ? 0 : size;\n            resultMode = MeasureSpec.UNSPECIFIED;\n        }\n        break;\n    }\n    return MeasureSpec.makeMeasureSpec(resultSize, resultMode);\n}\n```\n\n然后这个方法内，最后一步，也是将 mode 和 size 合成 measureSpec，并返回给 childWidthMeasureSpec。\n所以，我们在自定义View中可能会重写onMeasure方法时，要想知道 测量模式 mode 和大小，则必须通过getMode()、getSize()来获取。\n我们再看看View的 onMeasure() ：\n\n```java\nprotected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {\n    setMeasuredDimension(getDefaultSize(getSuggestedMinimumWidth(), widthMeasureSpec),\n        getDefaultSize(getSuggestedMinimumHeight(), heightMeasureSpec));\n}\n```\n这里的 getDefaultSize() 方法，他也是这么做的:\n```java\npublic static int getDefaultSize(int size, int measureSpec) {\n    int result = size;\n    int specMode = MeasureSpec.getMode(measureSpec);\n    int specSize = MeasureSpec.getSize(measureSpec);\n\n    switch (specMode) {\n    case MeasureSpec.UNSPECIFIED:\n        result = size;\n        break;\n    case MeasureSpec.AT_MOST:\n    case MeasureSpec.EXACTLY:\n        result = specSize;\n        break;\n    }\n    return result;\n\n    // 数值：AT_MOST(-2147483648)  EXACTLY(1073741824)  UNSPECIFIED(0)\n}\n```\n## onMeasure() 被重写时，一定要调用 setMeasuredDimension() 方法\n为什么一定要这么做呢，我们先来看看 这个方法干了什么？\n```java\nprivate void setMeasuredDimensionRaw(int measuredWidth, int measuredHeight) {\n    // 赋值给测量宽高变量，并设置标志位的值\n    mMeasuredWidth = measuredWidth;\n    mMeasuredHeight = measuredHeight;\n\n    mPrivateFlags |= PFLAG_MEASURED_DIMENSION_SET;\n}\n```\n再回到View的measure()方法，发现：如果mPrivateFlags没有被设置的话，会抛出异常。\n那么，后面的mMeasureCache的put操作也就更新不了里面的值。这个缓存是个比较关键的东西，间接存储了测量的宽高信息。我们知道，一个View的测量操作是需要进行多次的(正常情况下3次measure，2次layout，1次draw)，所以这个存储就记录了当前测量结果的信息，下一次进行测量的时候，也是需要读取上次的信息，再判断如何进行下次测量操作的。\n从measure()方法中能看到，需要读取到缓存中的值。在重新请求测量View时，也会清空缓存，到测量时自己再创建新的缓存对象。如：requestLayout()方法\n这个LongSparseLongArray数据结构，使用形式上和map类似，但是它更省内存，也避免了装箱拆箱的操作，也不需要额外的entry。\nGoogle 也提倡使用此类的 array 来代替 HashMap 在Android中的使用，其他类似的array大家也都知道\n\n```java\n/**\n * LongSparseLongArray:\n *\n * Map of {@code long} to {@code long}. Unlike a normal array of longs, there\n * can be gaps in the indices. It is intended to be more memory efficient than using a\n * {@code HashMap}, both because it avoids\n * auto-boxing keys and values and its data structure doesn't rely on an extra entry object\n * for each mapping.\n */\n```\n## onMeasure()被重写时，wrap_content 的功能需要自己实现\n如果不单独对 AT_MOST 做处理，在使用的时候设置 wrap_content,效果也就是和 match_parent 等价的。\n为什么呢? 还是分析 getChildMeasureSpec() 方法:\n此时 childDimension 为 wrap_content，其测量结果 resultSize = size(specSize - padding, 父View的测量尺寸大小 或 父View剩余可用空间)\n所以，我们可能按需求要对自定义的View，测量时，AT_MOST情况做处理了，我们可以对其设置一个默认的宽高值。这样写：\n```java\nprivate int defaultWidth, defaultHeight;\n\n@Override\nprotected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {\n    int widthSpec = MeasureSpec.getMode(widthMeasureSpec);\n    int heightSpec = MeasureSpec.getMode(heightMeasureSpec);\n    int widthSize = MeasureSpec.getSize(widthMeasureSpec);\n    int heightSize = MeasureSpec.getSize(heightMeasureSpec);\n\n    if (widthSpec == MeasureSpec.AT_MOST && heightSpec == MeasureSpec.AT_MOST) {\n        setMeasuredDimension(defaultWidth, defaultHeight);\n    } else if (widthSpec == MeasureSpec.AT_MOST) {\n        setMeasuredDimension(defaultWidth, widthSize);\n    } else if (heightSpec == MeasureSpec.AT_MOST) {\n        setMeasuredDimension(widthSize, defaultHeight);\n    }\n}\n```\n\n\n## View 的测量方法是由它的父View发起的\nView 自己并不能主动发起测量，都是由父View或外界调用requestLayout()来调View的测量。\nViewGroup会对自己所有的子View调起来测量的过程，父View对所有的子View 测量完毕后，再测量自己\n\n\n## Android 测量起始由ViewRoot执行开始\n从 ViewRootImpl 的performTraversals 开始，首先调用测量相关方法，ViewRootImpl的performMeasure方法，方法中会调用 ViewGroup measure方法，ViewGroup再对子View进行测量，如此递归下去，知道完成测量\n\n\n附：\nhttps://developer.android.com/reference/android/view/ViewGroup.html\nhttp://blog.csdn.net/u012422440/article/details/52972825","source":"_posts/View 测量相关总结.md","raw":"---\ntitle: View 测量相关总结\ndate: 2016-09-22 13:18\ncategories: Android\ntags: [View, Measure]\n---\n\n## ViewGroup的测量过程\n**ViewGroup 没有重写 View 的 measure()  和 onMeasure()  方法，沿用的还是View的**\n\n然后在 View 的源码中，我们找到 measure()，它内部调用到 onMeasure()。\n\n```java\n/**\n * This is called to find out how big a view should be. The parent\n * supplies constraint information in the width and height parameters.\n * The actual measurement work of a view is performed in\n * {@link #onMeasure(int, int)}, called by this method. Therefore, only\n * {@link #onMeasure(int, int)} can and must be overridden by subclasses.\n *\n * @param widthMeasureSpec Horizontal space requirements as imposed by the\n *        parent\n * @param heightMeasureSpec Vertical space requirements as imposed by the\n *        parent\n */\npublic final void measure(int widthMeasureSpec, int heightMeasureSpec) {\n\n    ......\n\n    long key = (long) widthMeasureSpec << 32 | (long) heightMeasureSpec & 0xffffffffL;\n    if (mMeasureCache == null) mMeasureCache = new LongSparseLongArray(2);\n\n    if ((mPrivateFlags & PFLAG_FORCE_LAYOUT) == PFLAG_FORCE_LAYOUT ||\n            widthMeasureSpec != mOldWidthMeasureSpec ||\n            heightMeasureSpec != mOldHeightMeasureSpec) {\n\n        // first clears the measured dimension flag\n        mPrivateFlags &= ~PFLAG_MEASURED_DIMENSION_SET;\n\n        // 解析 layout、padding、drawable 相关参数\n        resolveRtlPropertiesIfNeeded();\n\n        int cacheIndex = (mPrivateFlags & PFLAG_FORCE_LAYOUT) == PFLAG_FORCE_LAYOUT ? -1 :\n                mMeasureCache.indexOfKey(key);\n        if (cacheIndex < 0 || sIgnoreMeasureCache) {\n            // measure ourselves, this should set the measured dimension flag back\n            onMeasure(widthMeasureSpec, heightMeasureSpec);\n            mPrivateFlags3 &= ~PFLAG3_MEASURE_NEEDED_BEFORE_LAYOUT;\n        } else {\n            long value = mMeasureCache.valueAt(cacheIndex);\n            // Casting a long to int drops the high 32 bits, no mask needed\n            setMeasuredDimensionRaw((int) (value >> 32), (int) value);\n            mPrivateFlags3 |= PFLAG3_MEASURE_NEEDED_BEFORE_LAYOUT;\n        }\n\n        // flag not set, setMeasuredDimension() was not invoked, we raise\n        // an exception to warn the developer\n        if ((mPrivateFlags & PFLAG_MEASURED_DIMENSION_SET) != PFLAG_MEASURED_DIMENSION_SET) {\n            throw new IllegalStateException(\"View with id \" + getId() + \": \"\n                    + getClass().getName() + \"#onMeasure() did not set the\"\n                    + \" measured dimension by calling\"\n                    + \" setMeasuredDimension()\");\n        }\n\n        mPrivateFlags |= PFLAG_LAYOUT_REQUIRED;\n    }\n\n    mOldWidthMeasureSpec = widthMeasureSpec;\n    mOldHeightMeasureSpec = heightMeasureSpec;\n\n    mMeasureCache.put(key, ((long) mMeasuredWidth) << 32 |\n            (long) mMeasuredHeight & 0xffffffffL); // suppress sign extension\n}\n```\n其中，方法内传入的2个参数：widthMeasureSpec、heightMeasureSpec 也原封不动的传给 onMeasure() 方法中。 那 widthMeasureSpec，heightMeasureSpec 又是什么东西呢，我们从注释中看到：是 父View提供给子View(当前的view)宽高的约束信息，即：*父View根据自己的宽高、内边距信息计算合成的值，提供给子View自己测量时候使用，作为一个建议值*，**不是父View的宽高信息**\n从哪里能看出呢？我们找到ViewGroup的源码：\n```java\nprotected void measureChild(View child, int parentWidthMeasureSpec,\n            int parentHeightMeasureSpec) {\n    final LayoutParams lp = child.getLayoutParams();\n\n    final int childWidthMeasureSpec = getChildMeasureSpec(parentWidthMeasureSpec,\n            mPaddingLeft + mPaddingRight, lp.width);\n    final int childHeightMeasureSpec = getChildMeasureSpec(parentHeightMeasureSpec,\n            mPaddingTop + mPaddingBottom, lp.height);\n\n    child.measure(childWidthMeasureSpec, childHeightMeasureSpec);\n}\n```\n那么，widthMeasureSpec 和 heightMeasureSpec 具体又代表测量信息的什么呢？我们再看看 MeasureSpec(View 中的静态类)，发现，里面有 mode 和 size，mode 是测量模式（3中，不再细说，大家都知道），size 是测量大小，并且提供了 makeMeasureSpec() 和 getMode() ，getSize() 方法。 \n**measureSpec** 这个东西是由 mode 和 size 合成的一个值，合成方法就是依靠 makeMeasureSpec() 来做位运算生成的。然后View和ViewGroup 会拿着它作为参数传递的。\n\n\tmeasureSpec 是携带了测量模式和测量大小信息的一个值\n\ngetChildMeasureSpec() 是个具有Android View 测量方法论的一个方法，必须要知道。\n```java\npublic static int getChildMeasureSpec(int spec, int padding, int childDimension) {\n    int specMode = MeasureSpec.getMode(spec);// 父View的测量信息\n    int specSize = MeasureSpec.getSize(spec);\n\n    int size = Math.max(0, specSize - padding);\n\n    int resultSize = 0;\n    int resultMode = 0;\n\n    switch (specMode) {\n    // Parent has imposed an exact size on us\n    case MeasureSpec.EXACTLY:\n        if (childDimension >= 0) {\n            resultSize = childDimension;\n            resultMode = MeasureSpec.EXACTLY;\n        } else if (childDimension == LayoutParams.MATCH_PARENT) {\n            // Child wants to be our size. So be it.\n            resultSize = size;\n            resultMode = MeasureSpec.EXACTLY;\n        } else if (childDimension == LayoutParams.WRAP_CONTENT) {\n            // Child wants to determine its own size. It can't be\n            // bigger than us.\n            resultSize = size;\n            resultMode = MeasureSpec.AT_MOST;\n        }\n        break;\n\n    // Parent has imposed a maximum size on us\n    case MeasureSpec.AT_MOST:\n        if (childDimension >= 0) {\n            // Child wants a specific size... so be it\n            resultSize = childDimension;\n            resultMode = MeasureSpec.EXACTLY;\n        } else if (childDimension == LayoutParams.MATCH_PARENT) {\n            // Child wants to be our size, but our size is not fixed.\n            // Constrain child to not be bigger than us.\n            resultSize = size;\n            resultMode = MeasureSpec.AT_MOST;\n        } else if (childDimension == LayoutParams.WRAP_CONTENT) {\n            // Child wants to determine its own size. It can't be\n            // bigger than us.\n            resultSize = size;\n            resultMode = MeasureSpec.AT_MOST;\n        }\n        break;\n\n    // Parent asked to see how big we want to be\n    case MeasureSpec.UNSPECIFIED:\n        if (childDimension >= 0) {\n            // Child wants a specific size... let him have it\n            resultSize = childDimension;\n            resultMode = MeasureSpec.EXACTLY;\n        } else if (childDimension == LayoutParams.MATCH_PARENT) {\n            // Child wants to be our size... find out how big it should\n            // be\n            resultSize = View.sUseZeroUnspecifiedMeasureSpec ? 0 : size;\n            resultMode = MeasureSpec.UNSPECIFIED;\n        } else if (childDimension == LayoutParams.WRAP_CONTENT) {\n            // Child wants to determine its own size.... find out how\n            // big it should be\n            resultSize = View.sUseZeroUnspecifiedMeasureSpec ? 0 : size;\n            resultMode = MeasureSpec.UNSPECIFIED;\n        }\n        break;\n    }\n    return MeasureSpec.makeMeasureSpec(resultSize, resultMode);\n}\n```\n\n然后这个方法内，最后一步，也是将 mode 和 size 合成 measureSpec，并返回给 childWidthMeasureSpec。\n所以，我们在自定义View中可能会重写onMeasure方法时，要想知道 测量模式 mode 和大小，则必须通过getMode()、getSize()来获取。\n我们再看看View的 onMeasure() ：\n\n```java\nprotected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {\n    setMeasuredDimension(getDefaultSize(getSuggestedMinimumWidth(), widthMeasureSpec),\n        getDefaultSize(getSuggestedMinimumHeight(), heightMeasureSpec));\n}\n```\n这里的 getDefaultSize() 方法，他也是这么做的:\n```java\npublic static int getDefaultSize(int size, int measureSpec) {\n    int result = size;\n    int specMode = MeasureSpec.getMode(measureSpec);\n    int specSize = MeasureSpec.getSize(measureSpec);\n\n    switch (specMode) {\n    case MeasureSpec.UNSPECIFIED:\n        result = size;\n        break;\n    case MeasureSpec.AT_MOST:\n    case MeasureSpec.EXACTLY:\n        result = specSize;\n        break;\n    }\n    return result;\n\n    // 数值：AT_MOST(-2147483648)  EXACTLY(1073741824)  UNSPECIFIED(0)\n}\n```\n## onMeasure() 被重写时，一定要调用 setMeasuredDimension() 方法\n为什么一定要这么做呢，我们先来看看 这个方法干了什么？\n```java\nprivate void setMeasuredDimensionRaw(int measuredWidth, int measuredHeight) {\n    // 赋值给测量宽高变量，并设置标志位的值\n    mMeasuredWidth = measuredWidth;\n    mMeasuredHeight = measuredHeight;\n\n    mPrivateFlags |= PFLAG_MEASURED_DIMENSION_SET;\n}\n```\n再回到View的measure()方法，发现：如果mPrivateFlags没有被设置的话，会抛出异常。\n那么，后面的mMeasureCache的put操作也就更新不了里面的值。这个缓存是个比较关键的东西，间接存储了测量的宽高信息。我们知道，一个View的测量操作是需要进行多次的(正常情况下3次measure，2次layout，1次draw)，所以这个存储就记录了当前测量结果的信息，下一次进行测量的时候，也是需要读取上次的信息，再判断如何进行下次测量操作的。\n从measure()方法中能看到，需要读取到缓存中的值。在重新请求测量View时，也会清空缓存，到测量时自己再创建新的缓存对象。如：requestLayout()方法\n这个LongSparseLongArray数据结构，使用形式上和map类似，但是它更省内存，也避免了装箱拆箱的操作，也不需要额外的entry。\nGoogle 也提倡使用此类的 array 来代替 HashMap 在Android中的使用，其他类似的array大家也都知道\n\n```java\n/**\n * LongSparseLongArray:\n *\n * Map of {@code long} to {@code long}. Unlike a normal array of longs, there\n * can be gaps in the indices. It is intended to be more memory efficient than using a\n * {@code HashMap}, both because it avoids\n * auto-boxing keys and values and its data structure doesn't rely on an extra entry object\n * for each mapping.\n */\n```\n## onMeasure()被重写时，wrap_content 的功能需要自己实现\n如果不单独对 AT_MOST 做处理，在使用的时候设置 wrap_content,效果也就是和 match_parent 等价的。\n为什么呢? 还是分析 getChildMeasureSpec() 方法:\n此时 childDimension 为 wrap_content，其测量结果 resultSize = size(specSize - padding, 父View的测量尺寸大小 或 父View剩余可用空间)\n所以，我们可能按需求要对自定义的View，测量时，AT_MOST情况做处理了，我们可以对其设置一个默认的宽高值。这样写：\n```java\nprivate int defaultWidth, defaultHeight;\n\n@Override\nprotected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {\n    int widthSpec = MeasureSpec.getMode(widthMeasureSpec);\n    int heightSpec = MeasureSpec.getMode(heightMeasureSpec);\n    int widthSize = MeasureSpec.getSize(widthMeasureSpec);\n    int heightSize = MeasureSpec.getSize(heightMeasureSpec);\n\n    if (widthSpec == MeasureSpec.AT_MOST && heightSpec == MeasureSpec.AT_MOST) {\n        setMeasuredDimension(defaultWidth, defaultHeight);\n    } else if (widthSpec == MeasureSpec.AT_MOST) {\n        setMeasuredDimension(defaultWidth, widthSize);\n    } else if (heightSpec == MeasureSpec.AT_MOST) {\n        setMeasuredDimension(widthSize, defaultHeight);\n    }\n}\n```\n\n\n## View 的测量方法是由它的父View发起的\nView 自己并不能主动发起测量，都是由父View或外界调用requestLayout()来调View的测量。\nViewGroup会对自己所有的子View调起来测量的过程，父View对所有的子View 测量完毕后，再测量自己\n\n\n## Android 测量起始由ViewRoot执行开始\n从 ViewRootImpl 的performTraversals 开始，首先调用测量相关方法，ViewRootImpl的performMeasure方法，方法中会调用 ViewGroup measure方法，ViewGroup再对子View进行测量，如此递归下去，知道完成测量\n\n\n附：\nhttps://developer.android.com/reference/android/view/ViewGroup.html\nhttp://blog.csdn.net/u012422440/article/details/52972825","slug":"View 测量相关总结","published":1,"updated":"2017-09-09T10:41:09.000Z","_id":"cj74litbb00059oqwpksxawv3","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"ViewGroup的测量过程\"><a href=\"#ViewGroup的测量过程\" class=\"headerlink\" title=\"ViewGroup的测量过程\"></a>ViewGroup的测量过程</h2><p><strong>ViewGroup 没有重写 View 的 measure()  和 onMeasure()  方法，沿用的还是View的</strong></p>\n<p>然后在 View 的源码中，我们找到 measure()，它内部调用到 onMeasure()。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * This is called to find out how big a view should be. The parent</div><div class=\"line\"> * supplies constraint information in the width and height parameters.</div><div class=\"line\"> * The actual measurement work of a view is performed in</div><div class=\"line\"> * &#123;<span class=\"doctag\">@link</span> #onMeasure(int, int)&#125;, called by this method. Therefore, only</div><div class=\"line\"> * &#123;<span class=\"doctag\">@link</span> #onMeasure(int, int)&#125; can and must be overridden by subclasses.</div><div class=\"line\"> *</div><div class=\"line\"> * <span class=\"doctag\">@param</span> widthMeasureSpec Horizontal space requirements as imposed by the</div><div class=\"line\"> *        parent</div><div class=\"line\"> * <span class=\"doctag\">@param</span> heightMeasureSpec Vertical space requirements as imposed by the</div><div class=\"line\"> *        parent</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">measure</span><span class=\"params\">(<span class=\"keyword\">int</span> widthMeasureSpec, <span class=\"keyword\">int</span> heightMeasureSpec)</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    ......</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">long</span> key = (<span class=\"keyword\">long</span>) widthMeasureSpec &lt;&lt; <span class=\"number\">32</span> | (<span class=\"keyword\">long</span>) heightMeasureSpec &amp; <span class=\"number\">0xffffffffL</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span> (mMeasureCache == <span class=\"keyword\">null</span>) mMeasureCache = <span class=\"keyword\">new</span> LongSparseLongArray(<span class=\"number\">2</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> ((mPrivateFlags &amp; PFLAG_FORCE_LAYOUT) == PFLAG_FORCE_LAYOUT ||</div><div class=\"line\">            widthMeasureSpec != mOldWidthMeasureSpec ||</div><div class=\"line\">            heightMeasureSpec != mOldHeightMeasureSpec) &#123;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// first clears the measured dimension flag</span></div><div class=\"line\">        mPrivateFlags &amp;= ~PFLAG_MEASURED_DIMENSION_SET;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// 解析 layout、padding、drawable 相关参数</span></div><div class=\"line\">        resolveRtlPropertiesIfNeeded();</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">int</span> cacheIndex = (mPrivateFlags &amp; PFLAG_FORCE_LAYOUT) == PFLAG_FORCE_LAYOUT ? -<span class=\"number\">1</span> :</div><div class=\"line\">                mMeasureCache.indexOfKey(key);</div><div class=\"line\">        <span class=\"keyword\">if</span> (cacheIndex &lt; <span class=\"number\">0</span> || sIgnoreMeasureCache) &#123;</div><div class=\"line\">            <span class=\"comment\">// measure ourselves, this should set the measured dimension flag back</span></div><div class=\"line\">            onMeasure(widthMeasureSpec, heightMeasureSpec);</div><div class=\"line\">            mPrivateFlags3 &amp;= ~PFLAG3_MEASURE_NEEDED_BEFORE_LAYOUT;</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">long</span> value = mMeasureCache.valueAt(cacheIndex);</div><div class=\"line\">            <span class=\"comment\">// Casting a long to int drops the high 32 bits, no mask needed</span></div><div class=\"line\">            setMeasuredDimensionRaw((<span class=\"keyword\">int</span>) (value &gt;&gt; <span class=\"number\">32</span>), (<span class=\"keyword\">int</span>) value);</div><div class=\"line\">            mPrivateFlags3 |= PFLAG3_MEASURE_NEEDED_BEFORE_LAYOUT;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// flag not set, setMeasuredDimension() was not invoked, we raise</span></div><div class=\"line\">        <span class=\"comment\">// an exception to warn the developer</span></div><div class=\"line\">        <span class=\"keyword\">if</span> ((mPrivateFlags &amp; PFLAG_MEASURED_DIMENSION_SET) != PFLAG_MEASURED_DIMENSION_SET) &#123;</div><div class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalStateException(<span class=\"string\">\"View with id \"</span> + getId() + <span class=\"string\">\": \"</span></div><div class=\"line\">                    + getClass().getName() + <span class=\"string\">\"#onMeasure() did not set the\"</span></div><div class=\"line\">                    + <span class=\"string\">\" measured dimension by calling\"</span></div><div class=\"line\">                    + <span class=\"string\">\" setMeasuredDimension()\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        mPrivateFlags |= PFLAG_LAYOUT_REQUIRED;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    mOldWidthMeasureSpec = widthMeasureSpec;</div><div class=\"line\">    mOldHeightMeasureSpec = heightMeasureSpec;</div><div class=\"line\"></div><div class=\"line\">    mMeasureCache.put(key, ((<span class=\"keyword\">long</span>) mMeasuredWidth) &lt;&lt; <span class=\"number\">32</span> |</div><div class=\"line\">            (<span class=\"keyword\">long</span>) mMeasuredHeight &amp; <span class=\"number\">0xffffffffL</span>); <span class=\"comment\">// suppress sign extension</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>其中，方法内传入的2个参数：widthMeasureSpec、heightMeasureSpec 也原封不动的传给 onMeasure() 方法中。 那 widthMeasureSpec，heightMeasureSpec 又是什么东西呢，我们从注释中看到：是 父View提供给子View(当前的view)宽高的约束信息，即：<em>父View根据自己的宽高、内边距信息计算合成的值，提供给子View自己测量时候使用，作为一个建议值</em>，<strong>不是父View的宽高信息</strong><br>从哪里能看出呢？我们找到ViewGroup的源码：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">measureChild</span><span class=\"params\">(View child, <span class=\"keyword\">int</span> parentWidthMeasureSpec,</span></span></div><div class=\"line\">            <span class=\"keyword\">int</span> parentHeightMeasureSpec) &#123;</div><div class=\"line\">    <span class=\"keyword\">final</span> LayoutParams lp = child.getLayoutParams();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> childWidthMeasureSpec = getChildMeasureSpec(parentWidthMeasureSpec,</div><div class=\"line\">            mPaddingLeft + mPaddingRight, lp.width);</div><div class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> childHeightMeasureSpec = getChildMeasureSpec(parentHeightMeasureSpec,</div><div class=\"line\">            mPaddingTop + mPaddingBottom, lp.height);</div><div class=\"line\"></div><div class=\"line\">    child.measure(childWidthMeasureSpec, childHeightMeasureSpec);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>那么，widthMeasureSpec 和 heightMeasureSpec 具体又代表测量信息的什么呢？我们再看看 MeasureSpec(View 中的静态类)，发现，里面有 mode 和 size，mode 是测量模式（3中，不再细说，大家都知道），size 是测量大小，并且提供了 makeMeasureSpec() 和 getMode() ，getSize() 方法。<br><strong>measureSpec</strong> 这个东西是由 mode 和 size 合成的一个值，合成方法就是依靠 makeMeasureSpec() 来做位运算生成的。然后View和ViewGroup 会拿着它作为参数传递的。</p>\n<pre><code>measureSpec 是携带了测量模式和测量大小信息的一个值\n</code></pre><p>getChildMeasureSpec() 是个具有Android View 测量方法论的一个方法，必须要知道。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">getChildMeasureSpec</span><span class=\"params\">(<span class=\"keyword\">int</span> spec, <span class=\"keyword\">int</span> padding, <span class=\"keyword\">int</span> childDimension)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> specMode = MeasureSpec.getMode(spec);<span class=\"comment\">// 父View的测量信息</span></div><div class=\"line\">    <span class=\"keyword\">int</span> specSize = MeasureSpec.getSize(spec);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">int</span> size = Math.max(<span class=\"number\">0</span>, specSize - padding);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">int</span> resultSize = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">int</span> resultMode = <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">switch</span> (specMode) &#123;</div><div class=\"line\">    <span class=\"comment\">// Parent has imposed an exact size on us</span></div><div class=\"line\">    <span class=\"keyword\">case</span> MeasureSpec.EXACTLY:</div><div class=\"line\">        <span class=\"keyword\">if</span> (childDimension &gt;= <span class=\"number\">0</span>) &#123;</div><div class=\"line\">            resultSize = childDimension;</div><div class=\"line\">            resultMode = MeasureSpec.EXACTLY;</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (childDimension == LayoutParams.MATCH_PARENT) &#123;</div><div class=\"line\">            <span class=\"comment\">// Child wants to be our size. So be it.</span></div><div class=\"line\">            resultSize = size;</div><div class=\"line\">            resultMode = MeasureSpec.EXACTLY;</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (childDimension == LayoutParams.WRAP_CONTENT) &#123;</div><div class=\"line\">            <span class=\"comment\">// Child wants to determine its own size. It can't be</span></div><div class=\"line\">            <span class=\"comment\">// bigger than us.</span></div><div class=\"line\">            resultSize = size;</div><div class=\"line\">            resultMode = MeasureSpec.AT_MOST;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">break</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Parent has imposed a maximum size on us</span></div><div class=\"line\">    <span class=\"keyword\">case</span> MeasureSpec.AT_MOST:</div><div class=\"line\">        <span class=\"keyword\">if</span> (childDimension &gt;= <span class=\"number\">0</span>) &#123;</div><div class=\"line\">            <span class=\"comment\">// Child wants a specific size... so be it</span></div><div class=\"line\">            resultSize = childDimension;</div><div class=\"line\">            resultMode = MeasureSpec.EXACTLY;</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (childDimension == LayoutParams.MATCH_PARENT) &#123;</div><div class=\"line\">            <span class=\"comment\">// Child wants to be our size, but our size is not fixed.</span></div><div class=\"line\">            <span class=\"comment\">// Constrain child to not be bigger than us.</span></div><div class=\"line\">            resultSize = size;</div><div class=\"line\">            resultMode = MeasureSpec.AT_MOST;</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (childDimension == LayoutParams.WRAP_CONTENT) &#123;</div><div class=\"line\">            <span class=\"comment\">// Child wants to determine its own size. It can't be</span></div><div class=\"line\">            <span class=\"comment\">// bigger than us.</span></div><div class=\"line\">            resultSize = size;</div><div class=\"line\">            resultMode = MeasureSpec.AT_MOST;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">break</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Parent asked to see how big we want to be</span></div><div class=\"line\">    <span class=\"keyword\">case</span> MeasureSpec.UNSPECIFIED:</div><div class=\"line\">        <span class=\"keyword\">if</span> (childDimension &gt;= <span class=\"number\">0</span>) &#123;</div><div class=\"line\">            <span class=\"comment\">// Child wants a specific size... let him have it</span></div><div class=\"line\">            resultSize = childDimension;</div><div class=\"line\">            resultMode = MeasureSpec.EXACTLY;</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (childDimension == LayoutParams.MATCH_PARENT) &#123;</div><div class=\"line\">            <span class=\"comment\">// Child wants to be our size... find out how big it should</span></div><div class=\"line\">            <span class=\"comment\">// be</span></div><div class=\"line\">            resultSize = View.sUseZeroUnspecifiedMeasureSpec ? <span class=\"number\">0</span> : size;</div><div class=\"line\">            resultMode = MeasureSpec.UNSPECIFIED;</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (childDimension == LayoutParams.WRAP_CONTENT) &#123;</div><div class=\"line\">            <span class=\"comment\">// Child wants to determine its own size.... find out how</span></div><div class=\"line\">            <span class=\"comment\">// big it should be</span></div><div class=\"line\">            resultSize = View.sUseZeroUnspecifiedMeasureSpec ? <span class=\"number\">0</span> : size;</div><div class=\"line\">            resultMode = MeasureSpec.UNSPECIFIED;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">break</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> MeasureSpec.makeMeasureSpec(resultSize, resultMode);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>然后这个方法内，最后一步，也是将 mode 和 size 合成 measureSpec，并返回给 childWidthMeasureSpec。<br>所以，我们在自定义View中可能会重写onMeasure方法时，要想知道 测量模式 mode 和大小，则必须通过getMode()、getSize()来获取。<br>我们再看看View的 onMeasure() ：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onMeasure</span><span class=\"params\">(<span class=\"keyword\">int</span> widthMeasureSpec, <span class=\"keyword\">int</span> heightMeasureSpec)</span> </span>&#123;</div><div class=\"line\">    setMeasuredDimension(getDefaultSize(getSuggestedMinimumWidth(), widthMeasureSpec),</div><div class=\"line\">        getDefaultSize(getSuggestedMinimumHeight(), heightMeasureSpec));</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这里的 getDefaultSize() 方法，他也是这么做的:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">getDefaultSize</span><span class=\"params\">(<span class=\"keyword\">int</span> size, <span class=\"keyword\">int</span> measureSpec)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> result = size;</div><div class=\"line\">    <span class=\"keyword\">int</span> specMode = MeasureSpec.getMode(measureSpec);</div><div class=\"line\">    <span class=\"keyword\">int</span> specSize = MeasureSpec.getSize(measureSpec);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">switch</span> (specMode) &#123;</div><div class=\"line\">    <span class=\"keyword\">case</span> MeasureSpec.UNSPECIFIED:</div><div class=\"line\">        result = size;</div><div class=\"line\">        <span class=\"keyword\">break</span>;</div><div class=\"line\">    <span class=\"keyword\">case</span> MeasureSpec.AT_MOST:</div><div class=\"line\">    <span class=\"keyword\">case</span> MeasureSpec.EXACTLY:</div><div class=\"line\">        result = specSize;</div><div class=\"line\">        <span class=\"keyword\">break</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> result;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 数值：AT_MOST(-2147483648)  EXACTLY(1073741824)  UNSPECIFIED(0)</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"onMeasure-被重写时，一定要调用-setMeasuredDimension-方法\"><a href=\"#onMeasure-被重写时，一定要调用-setMeasuredDimension-方法\" class=\"headerlink\" title=\"onMeasure() 被重写时，一定要调用 setMeasuredDimension() 方法\"></a>onMeasure() 被重写时，一定要调用 setMeasuredDimension() 方法</h2><p>为什么一定要这么做呢，我们先来看看 这个方法干了什么？<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">setMeasuredDimensionRaw</span><span class=\"params\">(<span class=\"keyword\">int</span> measuredWidth, <span class=\"keyword\">int</span> measuredHeight)</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 赋值给测量宽高变量，并设置标志位的值</span></div><div class=\"line\">    mMeasuredWidth = measuredWidth;</div><div class=\"line\">    mMeasuredHeight = measuredHeight;</div><div class=\"line\"></div><div class=\"line\">    mPrivateFlags |= PFLAG_MEASURED_DIMENSION_SET;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>再回到View的measure()方法，发现：如果mPrivateFlags没有被设置的话，会抛出异常。<br>那么，后面的mMeasureCache的put操作也就更新不了里面的值。这个缓存是个比较关键的东西，间接存储了测量的宽高信息。我们知道，一个View的测量操作是需要进行多次的(正常情况下3次measure，2次layout，1次draw)，所以这个存储就记录了当前测量结果的信息，下一次进行测量的时候，也是需要读取上次的信息，再判断如何进行下次测量操作的。<br>从measure()方法中能看到，需要读取到缓存中的值。在重新请求测量View时，也会清空缓存，到测量时自己再创建新的缓存对象。如：requestLayout()方法<br>这个LongSparseLongArray数据结构，使用形式上和map类似，但是它更省内存，也避免了装箱拆箱的操作，也不需要额外的entry。<br>Google 也提倡使用此类的 array 来代替 HashMap 在Android中的使用，其他类似的array大家也都知道</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * LongSparseLongArray:</div><div class=\"line\"> *</div><div class=\"line\"> * Map of &#123;<span class=\"doctag\">@code</span> long&#125; to &#123;<span class=\"doctag\">@code</span> long&#125;. Unlike a normal array of longs, there</div><div class=\"line\"> * can be gaps in the indices. It is intended to be more memory efficient than using a</div><div class=\"line\"> * &#123;<span class=\"doctag\">@code</span> HashMap&#125;, both because it avoids</div><div class=\"line\"> * auto-boxing keys and values and its data structure doesn't rely on an extra entry object</div><div class=\"line\"> * for each mapping.</div><div class=\"line\"> */</div></pre></td></tr></table></figure>\n<h2 id=\"onMeasure-被重写时，wrap-content-的功能需要自己实现\"><a href=\"#onMeasure-被重写时，wrap-content-的功能需要自己实现\" class=\"headerlink\" title=\"onMeasure()被重写时，wrap_content 的功能需要自己实现\"></a>onMeasure()被重写时，wrap_content 的功能需要自己实现</h2><p>如果不单独对 AT_MOST 做处理，在使用的时候设置 wrap_content,效果也就是和 match_parent 等价的。<br>为什么呢? 还是分析 getChildMeasureSpec() 方法:<br>此时 childDimension 为 wrap_content，其测量结果 resultSize = size(specSize - padding, 父View的测量尺寸大小 或 父View剩余可用空间)<br>所以，我们可能按需求要对自定义的View，测量时，AT_MOST情况做处理了，我们可以对其设置一个默认的宽高值。这样写：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> defaultWidth, defaultHeight;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onMeasure</span><span class=\"params\">(<span class=\"keyword\">int</span> widthMeasureSpec, <span class=\"keyword\">int</span> heightMeasureSpec)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> widthSpec = MeasureSpec.getMode(widthMeasureSpec);</div><div class=\"line\">    <span class=\"keyword\">int</span> heightSpec = MeasureSpec.getMode(heightMeasureSpec);</div><div class=\"line\">    <span class=\"keyword\">int</span> widthSize = MeasureSpec.getSize(widthMeasureSpec);</div><div class=\"line\">    <span class=\"keyword\">int</span> heightSize = MeasureSpec.getSize(heightMeasureSpec);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (widthSpec == MeasureSpec.AT_MOST &amp;&amp; heightSpec == MeasureSpec.AT_MOST) &#123;</div><div class=\"line\">        setMeasuredDimension(defaultWidth, defaultHeight);</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (widthSpec == MeasureSpec.AT_MOST) &#123;</div><div class=\"line\">        setMeasuredDimension(defaultWidth, widthSize);</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (heightSpec == MeasureSpec.AT_MOST) &#123;</div><div class=\"line\">        setMeasuredDimension(widthSize, defaultHeight);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"View-的测量方法是由它的父View发起的\"><a href=\"#View-的测量方法是由它的父View发起的\" class=\"headerlink\" title=\"View 的测量方法是由它的父View发起的\"></a>View 的测量方法是由它的父View发起的</h2><p>View 自己并不能主动发起测量，都是由父View或外界调用requestLayout()来调View的测量。<br>ViewGroup会对自己所有的子View调起来测量的过程，父View对所有的子View 测量完毕后，再测量自己</p>\n<h2 id=\"Android-测量起始由ViewRoot执行开始\"><a href=\"#Android-测量起始由ViewRoot执行开始\" class=\"headerlink\" title=\"Android 测量起始由ViewRoot执行开始\"></a>Android 测量起始由ViewRoot执行开始</h2><p>从 ViewRootImpl 的performTraversals 开始，首先调用测量相关方法，ViewRootImpl的performMeasure方法，方法中会调用 ViewGroup measure方法，ViewGroup再对子View进行测量，如此递归下去，知道完成测量</p>\n<p>附：<br><a href=\"https://developer.android.com/reference/android/view/ViewGroup.html\" target=\"_blank\" rel=\"external\">https://developer.android.com/reference/android/view/ViewGroup.html</a><br><a href=\"http://blog.csdn.net/u012422440/article/details/52972825\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/u012422440/article/details/52972825</a></p>\n","excerpt":"","more":"<h2 id=\"ViewGroup的测量过程\"><a href=\"#ViewGroup的测量过程\" class=\"headerlink\" title=\"ViewGroup的测量过程\"></a>ViewGroup的测量过程</h2><p><strong>ViewGroup 没有重写 View 的 measure()  和 onMeasure()  方法，沿用的还是View的</strong></p>\n<p>然后在 View 的源码中，我们找到 measure()，它内部调用到 onMeasure()。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * This is called to find out how big a view should be. The parent</div><div class=\"line\"> * supplies constraint information in the width and height parameters.</div><div class=\"line\"> * The actual measurement work of a view is performed in</div><div class=\"line\"> * &#123;<span class=\"doctag\">@link</span> #onMeasure(int, int)&#125;, called by this method. Therefore, only</div><div class=\"line\"> * &#123;<span class=\"doctag\">@link</span> #onMeasure(int, int)&#125; can and must be overridden by subclasses.</div><div class=\"line\"> *</div><div class=\"line\"> * <span class=\"doctag\">@param</span> widthMeasureSpec Horizontal space requirements as imposed by the</div><div class=\"line\"> *        parent</div><div class=\"line\"> * <span class=\"doctag\">@param</span> heightMeasureSpec Vertical space requirements as imposed by the</div><div class=\"line\"> *        parent</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">measure</span><span class=\"params\">(<span class=\"keyword\">int</span> widthMeasureSpec, <span class=\"keyword\">int</span> heightMeasureSpec)</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    ......</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">long</span> key = (<span class=\"keyword\">long</span>) widthMeasureSpec &lt;&lt; <span class=\"number\">32</span> | (<span class=\"keyword\">long</span>) heightMeasureSpec &amp; <span class=\"number\">0xffffffffL</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span> (mMeasureCache == <span class=\"keyword\">null</span>) mMeasureCache = <span class=\"keyword\">new</span> LongSparseLongArray(<span class=\"number\">2</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> ((mPrivateFlags &amp; PFLAG_FORCE_LAYOUT) == PFLAG_FORCE_LAYOUT ||</div><div class=\"line\">            widthMeasureSpec != mOldWidthMeasureSpec ||</div><div class=\"line\">            heightMeasureSpec != mOldHeightMeasureSpec) &#123;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// first clears the measured dimension flag</span></div><div class=\"line\">        mPrivateFlags &amp;= ~PFLAG_MEASURED_DIMENSION_SET;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// 解析 layout、padding、drawable 相关参数</span></div><div class=\"line\">        resolveRtlPropertiesIfNeeded();</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">int</span> cacheIndex = (mPrivateFlags &amp; PFLAG_FORCE_LAYOUT) == PFLAG_FORCE_LAYOUT ? -<span class=\"number\">1</span> :</div><div class=\"line\">                mMeasureCache.indexOfKey(key);</div><div class=\"line\">        <span class=\"keyword\">if</span> (cacheIndex &lt; <span class=\"number\">0</span> || sIgnoreMeasureCache) &#123;</div><div class=\"line\">            <span class=\"comment\">// measure ourselves, this should set the measured dimension flag back</span></div><div class=\"line\">            onMeasure(widthMeasureSpec, heightMeasureSpec);</div><div class=\"line\">            mPrivateFlags3 &amp;= ~PFLAG3_MEASURE_NEEDED_BEFORE_LAYOUT;</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">long</span> value = mMeasureCache.valueAt(cacheIndex);</div><div class=\"line\">            <span class=\"comment\">// Casting a long to int drops the high 32 bits, no mask needed</span></div><div class=\"line\">            setMeasuredDimensionRaw((<span class=\"keyword\">int</span>) (value &gt;&gt; <span class=\"number\">32</span>), (<span class=\"keyword\">int</span>) value);</div><div class=\"line\">            mPrivateFlags3 |= PFLAG3_MEASURE_NEEDED_BEFORE_LAYOUT;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// flag not set, setMeasuredDimension() was not invoked, we raise</span></div><div class=\"line\">        <span class=\"comment\">// an exception to warn the developer</span></div><div class=\"line\">        <span class=\"keyword\">if</span> ((mPrivateFlags &amp; PFLAG_MEASURED_DIMENSION_SET) != PFLAG_MEASURED_DIMENSION_SET) &#123;</div><div class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalStateException(<span class=\"string\">\"View with id \"</span> + getId() + <span class=\"string\">\": \"</span></div><div class=\"line\">                    + getClass().getName() + <span class=\"string\">\"#onMeasure() did not set the\"</span></div><div class=\"line\">                    + <span class=\"string\">\" measured dimension by calling\"</span></div><div class=\"line\">                    + <span class=\"string\">\" setMeasuredDimension()\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        mPrivateFlags |= PFLAG_LAYOUT_REQUIRED;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    mOldWidthMeasureSpec = widthMeasureSpec;</div><div class=\"line\">    mOldHeightMeasureSpec = heightMeasureSpec;</div><div class=\"line\"></div><div class=\"line\">    mMeasureCache.put(key, ((<span class=\"keyword\">long</span>) mMeasuredWidth) &lt;&lt; <span class=\"number\">32</span> |</div><div class=\"line\">            (<span class=\"keyword\">long</span>) mMeasuredHeight &amp; <span class=\"number\">0xffffffffL</span>); <span class=\"comment\">// suppress sign extension</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>其中，方法内传入的2个参数：widthMeasureSpec、heightMeasureSpec 也原封不动的传给 onMeasure() 方法中。 那 widthMeasureSpec，heightMeasureSpec 又是什么东西呢，我们从注释中看到：是 父View提供给子View(当前的view)宽高的约束信息，即：<em>父View根据自己的宽高、内边距信息计算合成的值，提供给子View自己测量时候使用，作为一个建议值</em>，<strong>不是父View的宽高信息</strong><br>从哪里能看出呢？我们找到ViewGroup的源码：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">measureChild</span><span class=\"params\">(View child, <span class=\"keyword\">int</span> parentWidthMeasureSpec,</div><div class=\"line\">            <span class=\"keyword\">int</span> parentHeightMeasureSpec)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">final</span> LayoutParams lp = child.getLayoutParams();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> childWidthMeasureSpec = getChildMeasureSpec(parentWidthMeasureSpec,</div><div class=\"line\">            mPaddingLeft + mPaddingRight, lp.width);</div><div class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> childHeightMeasureSpec = getChildMeasureSpec(parentHeightMeasureSpec,</div><div class=\"line\">            mPaddingTop + mPaddingBottom, lp.height);</div><div class=\"line\"></div><div class=\"line\">    child.measure(childWidthMeasureSpec, childHeightMeasureSpec);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>那么，widthMeasureSpec 和 heightMeasureSpec 具体又代表测量信息的什么呢？我们再看看 MeasureSpec(View 中的静态类)，发现，里面有 mode 和 size，mode 是测量模式（3中，不再细说，大家都知道），size 是测量大小，并且提供了 makeMeasureSpec() 和 getMode() ，getSize() 方法。<br><strong>measureSpec</strong> 这个东西是由 mode 和 size 合成的一个值，合成方法就是依靠 makeMeasureSpec() 来做位运算生成的。然后View和ViewGroup 会拿着它作为参数传递的。</p>\n<pre><code>measureSpec 是携带了测量模式和测量大小信息的一个值\n</code></pre><p>getChildMeasureSpec() 是个具有Android View 测量方法论的一个方法，必须要知道。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">getChildMeasureSpec</span><span class=\"params\">(<span class=\"keyword\">int</span> spec, <span class=\"keyword\">int</span> padding, <span class=\"keyword\">int</span> childDimension)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> specMode = MeasureSpec.getMode(spec);<span class=\"comment\">// 父View的测量信息</span></div><div class=\"line\">    <span class=\"keyword\">int</span> specSize = MeasureSpec.getSize(spec);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">int</span> size = Math.max(<span class=\"number\">0</span>, specSize - padding);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">int</span> resultSize = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">int</span> resultMode = <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">switch</span> (specMode) &#123;</div><div class=\"line\">    <span class=\"comment\">// Parent has imposed an exact size on us</span></div><div class=\"line\">    <span class=\"keyword\">case</span> MeasureSpec.EXACTLY:</div><div class=\"line\">        <span class=\"keyword\">if</span> (childDimension &gt;= <span class=\"number\">0</span>) &#123;</div><div class=\"line\">            resultSize = childDimension;</div><div class=\"line\">            resultMode = MeasureSpec.EXACTLY;</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (childDimension == LayoutParams.MATCH_PARENT) &#123;</div><div class=\"line\">            <span class=\"comment\">// Child wants to be our size. So be it.</span></div><div class=\"line\">            resultSize = size;</div><div class=\"line\">            resultMode = MeasureSpec.EXACTLY;</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (childDimension == LayoutParams.WRAP_CONTENT) &#123;</div><div class=\"line\">            <span class=\"comment\">// Child wants to determine its own size. It can't be</span></div><div class=\"line\">            <span class=\"comment\">// bigger than us.</span></div><div class=\"line\">            resultSize = size;</div><div class=\"line\">            resultMode = MeasureSpec.AT_MOST;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">break</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Parent has imposed a maximum size on us</span></div><div class=\"line\">    <span class=\"keyword\">case</span> MeasureSpec.AT_MOST:</div><div class=\"line\">        <span class=\"keyword\">if</span> (childDimension &gt;= <span class=\"number\">0</span>) &#123;</div><div class=\"line\">            <span class=\"comment\">// Child wants a specific size... so be it</span></div><div class=\"line\">            resultSize = childDimension;</div><div class=\"line\">            resultMode = MeasureSpec.EXACTLY;</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (childDimension == LayoutParams.MATCH_PARENT) &#123;</div><div class=\"line\">            <span class=\"comment\">// Child wants to be our size, but our size is not fixed.</span></div><div class=\"line\">            <span class=\"comment\">// Constrain child to not be bigger than us.</span></div><div class=\"line\">            resultSize = size;</div><div class=\"line\">            resultMode = MeasureSpec.AT_MOST;</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (childDimension == LayoutParams.WRAP_CONTENT) &#123;</div><div class=\"line\">            <span class=\"comment\">// Child wants to determine its own size. It can't be</span></div><div class=\"line\">            <span class=\"comment\">// bigger than us.</span></div><div class=\"line\">            resultSize = size;</div><div class=\"line\">            resultMode = MeasureSpec.AT_MOST;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">break</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Parent asked to see how big we want to be</span></div><div class=\"line\">    <span class=\"keyword\">case</span> MeasureSpec.UNSPECIFIED:</div><div class=\"line\">        <span class=\"keyword\">if</span> (childDimension &gt;= <span class=\"number\">0</span>) &#123;</div><div class=\"line\">            <span class=\"comment\">// Child wants a specific size... let him have it</span></div><div class=\"line\">            resultSize = childDimension;</div><div class=\"line\">            resultMode = MeasureSpec.EXACTLY;</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (childDimension == LayoutParams.MATCH_PARENT) &#123;</div><div class=\"line\">            <span class=\"comment\">// Child wants to be our size... find out how big it should</span></div><div class=\"line\">            <span class=\"comment\">// be</span></div><div class=\"line\">            resultSize = View.sUseZeroUnspecifiedMeasureSpec ? <span class=\"number\">0</span> : size;</div><div class=\"line\">            resultMode = MeasureSpec.UNSPECIFIED;</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (childDimension == LayoutParams.WRAP_CONTENT) &#123;</div><div class=\"line\">            <span class=\"comment\">// Child wants to determine its own size.... find out how</span></div><div class=\"line\">            <span class=\"comment\">// big it should be</span></div><div class=\"line\">            resultSize = View.sUseZeroUnspecifiedMeasureSpec ? <span class=\"number\">0</span> : size;</div><div class=\"line\">            resultMode = MeasureSpec.UNSPECIFIED;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">break</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> MeasureSpec.makeMeasureSpec(resultSize, resultMode);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>然后这个方法内，最后一步，也是将 mode 和 size 合成 measureSpec，并返回给 childWidthMeasureSpec。<br>所以，我们在自定义View中可能会重写onMeasure方法时，要想知道 测量模式 mode 和大小，则必须通过getMode()、getSize()来获取。<br>我们再看看View的 onMeasure() ：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onMeasure</span><span class=\"params\">(<span class=\"keyword\">int</span> widthMeasureSpec, <span class=\"keyword\">int</span> heightMeasureSpec)</span> </span>&#123;</div><div class=\"line\">    setMeasuredDimension(getDefaultSize(getSuggestedMinimumWidth(), widthMeasureSpec),</div><div class=\"line\">        getDefaultSize(getSuggestedMinimumHeight(), heightMeasureSpec));</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这里的 getDefaultSize() 方法，他也是这么做的:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">getDefaultSize</span><span class=\"params\">(<span class=\"keyword\">int</span> size, <span class=\"keyword\">int</span> measureSpec)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> result = size;</div><div class=\"line\">    <span class=\"keyword\">int</span> specMode = MeasureSpec.getMode(measureSpec);</div><div class=\"line\">    <span class=\"keyword\">int</span> specSize = MeasureSpec.getSize(measureSpec);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">switch</span> (specMode) &#123;</div><div class=\"line\">    <span class=\"keyword\">case</span> MeasureSpec.UNSPECIFIED:</div><div class=\"line\">        result = size;</div><div class=\"line\">        <span class=\"keyword\">break</span>;</div><div class=\"line\">    <span class=\"keyword\">case</span> MeasureSpec.AT_MOST:</div><div class=\"line\">    <span class=\"keyword\">case</span> MeasureSpec.EXACTLY:</div><div class=\"line\">        result = specSize;</div><div class=\"line\">        <span class=\"keyword\">break</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> result;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 数值：AT_MOST(-2147483648)  EXACTLY(1073741824)  UNSPECIFIED(0)</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"onMeasure-被重写时，一定要调用-setMeasuredDimension-方法\"><a href=\"#onMeasure-被重写时，一定要调用-setMeasuredDimension-方法\" class=\"headerlink\" title=\"onMeasure() 被重写时，一定要调用 setMeasuredDimension() 方法\"></a>onMeasure() 被重写时，一定要调用 setMeasuredDimension() 方法</h2><p>为什么一定要这么做呢，我们先来看看 这个方法干了什么？<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">setMeasuredDimensionRaw</span><span class=\"params\">(<span class=\"keyword\">int</span> measuredWidth, <span class=\"keyword\">int</span> measuredHeight)</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 赋值给测量宽高变量，并设置标志位的值</span></div><div class=\"line\">    mMeasuredWidth = measuredWidth;</div><div class=\"line\">    mMeasuredHeight = measuredHeight;</div><div class=\"line\"></div><div class=\"line\">    mPrivateFlags |= PFLAG_MEASURED_DIMENSION_SET;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>再回到View的measure()方法，发现：如果mPrivateFlags没有被设置的话，会抛出异常。<br>那么，后面的mMeasureCache的put操作也就更新不了里面的值。这个缓存是个比较关键的东西，间接存储了测量的宽高信息。我们知道，一个View的测量操作是需要进行多次的(正常情况下3次measure，2次layout，1次draw)，所以这个存储就记录了当前测量结果的信息，下一次进行测量的时候，也是需要读取上次的信息，再判断如何进行下次测量操作的。<br>从measure()方法中能看到，需要读取到缓存中的值。在重新请求测量View时，也会清空缓存，到测量时自己再创建新的缓存对象。如：requestLayout()方法<br>这个LongSparseLongArray数据结构，使用形式上和map类似，但是它更省内存，也避免了装箱拆箱的操作，也不需要额外的entry。<br>Google 也提倡使用此类的 array 来代替 HashMap 在Android中的使用，其他类似的array大家也都知道</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * LongSparseLongArray:</div><div class=\"line\"> *</div><div class=\"line\"> * Map of &#123;<span class=\"doctag\">@code</span> long&#125; to &#123;<span class=\"doctag\">@code</span> long&#125;. Unlike a normal array of longs, there</div><div class=\"line\"> * can be gaps in the indices. It is intended to be more memory efficient than using a</div><div class=\"line\"> * &#123;<span class=\"doctag\">@code</span> HashMap&#125;, both because it avoids</div><div class=\"line\"> * auto-boxing keys and values and its data structure doesn't rely on an extra entry object</div><div class=\"line\"> * for each mapping.</div><div class=\"line\"> */</span></div></pre></td></tr></table></figure>\n<h2 id=\"onMeasure-被重写时，wrap-content-的功能需要自己实现\"><a href=\"#onMeasure-被重写时，wrap-content-的功能需要自己实现\" class=\"headerlink\" title=\"onMeasure()被重写时，wrap_content 的功能需要自己实现\"></a>onMeasure()被重写时，wrap_content 的功能需要自己实现</h2><p>如果不单独对 AT_MOST 做处理，在使用的时候设置 wrap_content,效果也就是和 match_parent 等价的。<br>为什么呢? 还是分析 getChildMeasureSpec() 方法:<br>此时 childDimension 为 wrap_content，其测量结果 resultSize = size(specSize - padding, 父View的测量尺寸大小 或 父View剩余可用空间)<br>所以，我们可能按需求要对自定义的View，测量时，AT_MOST情况做处理了，我们可以对其设置一个默认的宽高值。这样写：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> defaultWidth, defaultHeight;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onMeasure</span><span class=\"params\">(<span class=\"keyword\">int</span> widthMeasureSpec, <span class=\"keyword\">int</span> heightMeasureSpec)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> widthSpec = MeasureSpec.getMode(widthMeasureSpec);</div><div class=\"line\">    <span class=\"keyword\">int</span> heightSpec = MeasureSpec.getMode(heightMeasureSpec);</div><div class=\"line\">    <span class=\"keyword\">int</span> widthSize = MeasureSpec.getSize(widthMeasureSpec);</div><div class=\"line\">    <span class=\"keyword\">int</span> heightSize = MeasureSpec.getSize(heightMeasureSpec);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (widthSpec == MeasureSpec.AT_MOST &amp;&amp; heightSpec == MeasureSpec.AT_MOST) &#123;</div><div class=\"line\">        setMeasuredDimension(defaultWidth, defaultHeight);</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (widthSpec == MeasureSpec.AT_MOST) &#123;</div><div class=\"line\">        setMeasuredDimension(defaultWidth, widthSize);</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (heightSpec == MeasureSpec.AT_MOST) &#123;</div><div class=\"line\">        setMeasuredDimension(widthSize, defaultHeight);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"View-的测量方法是由它的父View发起的\"><a href=\"#View-的测量方法是由它的父View发起的\" class=\"headerlink\" title=\"View 的测量方法是由它的父View发起的\"></a>View 的测量方法是由它的父View发起的</h2><p>View 自己并不能主动发起测量，都是由父View或外界调用requestLayout()来调View的测量。<br>ViewGroup会对自己所有的子View调起来测量的过程，父View对所有的子View 测量完毕后，再测量自己</p>\n<h2 id=\"Android-测量起始由ViewRoot执行开始\"><a href=\"#Android-测量起始由ViewRoot执行开始\" class=\"headerlink\" title=\"Android 测量起始由ViewRoot执行开始\"></a>Android 测量起始由ViewRoot执行开始</h2><p>从 ViewRootImpl 的performTraversals 开始，首先调用测量相关方法，ViewRootImpl的performMeasure方法，方法中会调用 ViewGroup measure方法，ViewGroup再对子View进行测量，如此递归下去，知道完成测量</p>\n<p>附：<br><a href=\"https://developer.android.com/reference/android/view/ViewGroup.html\">https://developer.android.com/reference/android/view/ViewGroup.html</a><br><a href=\"http://blog.csdn.net/u012422440/article/details/52972825\">http://blog.csdn.net/u012422440/article/details/52972825</a></p>\n"},{"title":"RePlugin插件化方案分析（一）","date":"2017-10-30T15:45:00.000Z","_content":"\n## 前言\n\n> RePlugin 是今年360技术团队GMTC大会公布的插件化方案。360对插件化的技术探索及优化，在近几年是相当有技术沉淀的。从 DroidPlugin 到 RePlugin, 确实有值得学习的地方。\n本文先来简单分析下 RePlugin 的基本原理。\n\n## 一、引子 \n普通的:  Application extends ContextWrapper, 其中 attachBaseContext() 是从 ContextWrapper 继承过来的，在 Application 的 attach()  中  attachBaseContext() 会被调用:\n\n```java\n/* package */ final void attach(Context context) {\n    attachBaseContext(context);\n    mLoadedApk = ContextImpl.getImpl(context).mPackageInfo;\n}\n```\nApplication 的 attachBaseContext() 方法 在 attach时被调用。那么 这个 attach() 方法是什么时机被调用呢？在 Instrumentation 类中，找到答案：\n\n```java\nstatic public Application newApplication(Class<?> clazz, Context context)  {\n    //实例化Application\n    Application app = (Application)clazz.newInstance();\n\n    app.attach(context); // 这个传进来的 context 是 makeApplication 时创建的 ContextImpl\n    return app;\n}\n```\n创建 Application 时，会将 Context attach 到 Application 上\n\n另外，后面对于 类加载 知识也是必要的，再做一次复习。\n\n可参考之前写的文章：\nhttps://fenglincanyi.github.io/2016/11/17/Android%20%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%88%9D%E6%8E%A2/\n\n\n## 二、Hook时机及Hook点\nRePlugin 从 Application 就开始下手了, RePlugin 的 hook 时机：\n在 application 的 attachBaseContext 方法中 初始化 Replugin 时（不管是哪种接入方式，都会调用）：\n```java\nRePlugin.App.attachBaseContext(this);\n```\n在 RePlugin.java 中：\n```java\npublic static void attachBaseContext(Application app, RePluginConfig config) {\n    if(sAttached) {\n        if(LogDebug.LOG) {\n            LogDebug.d(\"RePlugin\", \"attachBaseContext: Already called\");\n        }\n\n    } else {\n        RePluginInternal.init(app);\n        RePlugin.sConfig = config;\n        RePlugin.sConfig.initDefaults(app);\n        IPC.init(app);\n        if(LogDebug.LOG && RePlugin.sConfig.isPrintDetailLog()) {\n            LogDebug.printMemoryStatus(\"RePlugin\", \"act=, init, flag=, Start, pn=, framework, func=, attachBaseContext, lib=, RePlugin\");\n        }\n\n        HostConfigHelper.init();\n        AppVar.sAppContext = app;\n        PluginStatusController.setAppContext(app);\n        PMF.init(app);// 此处是 hook classloader 入口\n        PMF.callAttach();\n        sAttached = true;\n    }\n}\n```\nPMF.java 中：\n```java\npublic static final void init(Application application) {\n    setApplicationContext(application);\n    PluginManager.init(application);\n    sPluginMgr = new PmBase(application);\n    sPluginMgr.init();\n    Factory.sPluginManager = getLocal();\n    Factory2.sPLProxy = getInternal();\n    PatchClassLoaderUtils.patch(application);// 关键点\n}\n```\n在 PatchClassLoaderUtils.java 中，进行 hook 操作； 所以, 是在 attachBaseContext() 时 做的 classloader 的 hook。\n我们具体来看看：\n```java\npublic static boolean patch(Application application) {\n    try {\n        // 获取Application的BaseContext （来自ContextWrapper）\n        Context oBase = application.getBaseContext();\n        if (oBase == null) {\n            if (LOGR) {\n                LogRelease.e(PLUGIN_TAG, \"pclu.p: nf mb. ap cl=\" + application.getClass());\n            }\n            return false;\n        }\n\n        // 获取mBase.mPackageInfo\n        // 1. ApplicationContext - Android 2.1\n        // 2. ContextImpl - Android 2.2 and higher\n        // 3. AppContextImpl - Android 2.2 and higher\n        Object oPackageInfo = ReflectUtils.readField(oBase, \"mPackageInfo\");\n        if (oPackageInfo == null) {\n            if (LOGR) {\n                LogRelease.e(PLUGIN_TAG, \"pclu.p: nf mpi. mb cl=\" + oBase.getClass());\n            }\n            return false;\n        }\n\n        // mPackageInfo的类型主要有两种：\n        // 1. android.app.ActivityThread$PackageInfo - Android 2.1 - 2.3\n        // 2. android.app.LoadedApk - Android 2.3.3 and higher\n        if (LOG) {\n            Log.d(TAG, \"patch: mBase cl=\" + oBase.getClass() + \"; mPackageInfo cl=\" + oPackageInfo.getClass());\n        }\n\n        // 获取mPackageInfo.mClassLoader\n        ClassLoader oClassLoader = (ClassLoader) ReflectUtils.readField(oPackageInfo, \"mClassLoader\");\n        if (oClassLoader == null) {\n            if (LOGR) {\n                LogRelease.e(PLUGIN_TAG, \"pclu.p: nf mpi. mb cl=\" + oBase.getClass() + \"; mpi cl=\" + oPackageInfo.getClass());\n            }\n            return false;\n        }\n\n        // 外界可自定义ClassLoader的实现，但一定要基于RePluginClassLoader类\n        ClassLoader cl = RePlugin.getConfig().getCallbacks().createClassLoader(oClassLoader.getParent(), oClassLoader);\n\n        // 将新的ClassLoader写入mPackageInfo.mClassLoader\n        ReflectUtils.writeField(oPackageInfo, \"mClassLoader\", cl);\n\n        // 设置线程上下文中的ClassLoader为RePluginClassLoader\n        // 防止在个别Java库用到了Thread.currentThread().getContextClassLoader()时，“用了原来的PathClassLoader”，或为空指针\n        Thread.currentThread().setContextClassLoader(cl);\n\n        if (LOG) {\n            Log.d(TAG, \"patch: patch mClassLoader ok\");\n        }\n    } catch (Throwable e) {\n        e.printStackTrace();\n        return false;\n    }\n    return true;\n}\n```\n这里, 从 baseContext （makeApplication 时创建的 ContextImpl）获取到  mPackageInfo （是 LoadedApk 的实例）, 进而 再获取到 mPackageInfo的私有属性 mClassLoader.   拿到 classLoader 了，就可以进行 classLoader 的替换工作了.  \n\n## 三、Hook实现过程\n先不直接说怎么做的，我们先看看 这个 mClassLoader 是怎么来的？\n在 LoadedApk.Java 中，构造方法里：\n```java\nmClassLoader = ClassLoader.getSystemClassLoader();\n```\n继续跟进， \n```java\npublic static ClassLoader getSystemClassLoader() {\n    return SystemClassLoader.loader;\n}\n```\n其中：SystemClassLoader  是  抽象类ClassLoader 的一个静态类：\n```java\nstatic private class SystemClassLoader {\n    public static ClassLoader loader = ClassLoader.createSystemClassLoader();\n}\n```\n此时，就看到了熟悉的 PatchClassLoader：\n```java\nprivate static ClassLoader createSystemClassLoader() {\n    String classPath = System.getProperty(\"java.class.path\", \".\");\n    String librarySearchPath = System.getProperty(\"java.library.path\", \"\");\n\n    // String[] paths = classPath.split(\":\");\n    // URL[] urls = new URL[paths.length];\n    // for (int i = 0; i < paths.length; i++) {\n    // try {\n    // urls[i] = new URL(\"file://\" + paths[i]);\n    // }\n    // catch (Exception ex) {\n    // ex.printStackTrace();\n    // }\n    // }\n    //\n    // return new java.net.URLClassLoader(urls, null);\n\n    // TODO Make this a java.net.URLClassLoader once we have those?\n    return new PathClassLoader(classPath, librarySearchPath, BootClassLoader.getInstance());\n}\n```\n我们再次回到 上面的 classLoader 替换步骤中， 那么 RepluginClassLoader  就  替换了  PathClassLoader.  后面的 类加载 过程 就依赖于  RePluginClassLoader 来工作了。\n其中，oClassLoader 被赋值，就是 原始的 PathClassLoader\n\n下个阶段：RePluginClassLoader 的 loadClass 过程的更改：\n\n首先，原始的ClassLoader 的 loadClass 过程：（路径： Android/sdk/platforms/android-25/android.jar!/java/lang/ClassLoader.class）\n```java\nprotected Class<?> loadClass(String name, boolean resolve)\n    throws ClassNotFoundException\n{\n        // First, check if the class has already been loaded   检查class是否加载过, 加载过则直接 return\n        Class c = findLoadedClass(name);\n        if (c == null) {// 未加载过，则进行 下面的 加载过程：\n            long t0 = System.nanoTime();//  获取 纳秒\n            try {\n                // 双亲委托，机制进行 class 的 load 工作：\n                if (parent != null) {\n                    c = parent.loadClass(name, false);\n                } else {\n                    c = findBootstrapClassOrNull(name); // 此方法内部，直接返回 null\n                }\n            } catch (ClassNotFoundException e) {\n                // ClassNotFoundException thrown if class not found\n                // from the non-null parent class loader\n            }\n\n            if (c == null) {\n                // If still not found, then invoke findClass in order\n                // to find the class.    如果仍然找不到，就按顺序 查找 class\n                long t1 = System.nanoTime();\n                c = findClass(name);\n\n                // this is the defining class loader; record the stats\n            }\n        }\n        return c;\n}\n```\n下面是  RePluginClassLoader 的 实现：\n```java\n@Override\nprotected Class<?> loadClass(String className, boolean resolve) throws ClassNotFoundException {\n    //\n    Class<?> c = null;\n    c = PMF.loadClass(className, resolve);// 先去容器中查找并加载预埋的activity 或其他类\n    if (c != null) {\n        return c;// 在 插件中 查找成功，则直接返回\n    }\n    //\n    try {\n        // 如果没有在 插件 中找到，则使用  mOrig  这个 classLoader 去加载\n        //  mOrig 是谁呢？可以在 PatchClassLoaderUtils 中找到, 发现就是 原始的PathClassLoader，即 apk 刚被 加载的用的 classloader\n        //  mOrig 就是 宿主host 的 classLoader \n        c = mOrig.loadClass(className);\n        // 只有开启“详细日志”才会输出，防止“刷屏”现象\n        if (LogDebug.LOG && RePlugin.getConfig().isPrintDetailLog()) {\n            LogDebug.d(TAG, \"loadClass: load other class, cn=\" + className);\n        }\n        return c;\n    } catch (Throwable e) {\n        //\n    }\n    //\n    return super.loadClass(className, resolve);// 极端情况，上面的方式全都加载失败，默认使用 BaseDexClassLoader 去加载\n}\n```\n之后，PmBase 的 loadClass 过程：\n```java\nfinal Class<?> loadClass(String className, boolean resolve) {\n    // 加载Service中介坑位\n    if (className.startsWith(PluginPitService.class.getName())) {\n        if (LOG) {\n            LogDebug.i(TAG, \"loadClass: Loading PitService Class... clz=\" + className);\n        }\n        return PluginPitService.class;\n    }\n\n    //\n    if (mContainerActivities.contains(className)) {\n        Class<?> c = mClient.resolveActivityClass(className);\n        if (c != null) {\n            return c;\n        }\n        // 输出warn日志便于查看\n        // use DummyActivity orig=\n        if (LOGR) {\n            LogRelease.w(PLUGIN_TAG, \"p m hlc u d a o \" + className);\n        }\n        return DummyActivity.class;\n    }\n\n    //\n    if (mContainerServices.contains(className)) {\n        Class<?> c = loadServiceClass(className);\n        if (c != null) {\n            return c;\n        }\n        // 输出warn日志便于查看\n        // use DummyService orig=\n        if (LOGR) {\n            LogRelease.w(PLUGIN_TAG, \"p m hlc u d s o \" + className);\n        }\n        return DummyService.class;\n    }\n\n    //\n    if (mContainerProviders.contains(className)) {\n        Class<?> c = loadProviderClass(className);\n        if (c != null) {\n            return c;\n        }\n        // 输出warn日志便于查看\n        // use DummyProvider orig=\n        if (LOGR) {\n            LogRelease.w(PLUGIN_TAG, \"p m hlc u d p o \" + className);\n        }\n        return DummyProvider.class;\n    }\n\n    // 插件定制表\n    DynamicClass dc = mDynamicClasses.get(className);\n    if (dc != null) {\n        final Context context = RePluginInternal.getAppContext();\n        PluginDesc desc = PluginDesc.get(dc.plugin);\n\n        if (LOG) {\n            LogDebug.d(\"loadClass\", \"desc=\" + desc);\n            if (desc != null) {\n                LogDebug.d(\"loadClass\", \"desc.isLarge()=\" + desc.isLarge());\n            }\n            LogDebug.d(\"loadClass\", \"RePlugin.isPluginDexExtracted(\" + dc.plugin + \") = \" + RePlugin.isPluginDexExtracted(dc.plugin));\n        }\n\n        // 加载动态类时，如果其对应的插件未下载，则转到代理类\n        if (desc != null) {\n            String plugin = desc.getPluginName();\n            if (PluginTable.getPluginInfo(plugin) == null) {\n                if (LOG) {\n                    LogDebug.d(\"loadClass\", \"plugin=\" + plugin + \" not found, return DynamicClassProxyActivity.class\");\n                }\n                return DynamicClassProxyActivity.class;\n            }\n        }\n\n        /* 加载未安装的大插件时，启动一个过度 Activity */\n        // todo fixme 仅对 activity 类型才弹窗\n        boolean needStartLoadingActivity = (desc != null && desc.isLarge() && !RePlugin.isPluginDexExtracted(dc.plugin));\n        if (LOG) {\n            LogDebug.d(\"loadClass\", \"needStartLoadingActivity = \" + needStartLoadingActivity);\n        }\n        if (needStartLoadingActivity) {\n            Intent intent = new Intent();\n            intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\n            // fixme 将 PluginLoadingActivity2 移到 replugin 中来，不写死\n            intent.setComponent(new ComponentName(IPC.getPackageName(), \"com.qihoo360.loader2.updater.PluginLoadingActivity2\"));\n            context.startActivity(intent);\n        }\n\n        Plugin p = loadAppPlugin(dc.plugin);\n        if (LOG) {\n            LogDebug.d(\"loadClass\", \"p=\" + p);\n        }\n        if (p != null) {\n            try {\n                Class<?> cls = p.getClassLoader().loadClass(dc.className);\n                if (needStartLoadingActivity) {\n                    // 发广播给过度 Activity，让其关闭\n                    // fixme 发送给 UI 进程\n                    Tasks.postDelayed2Thread(new Runnable() {\n                        @Override\n                        public void run() {\n                            if (LOG) {\n                                LogDebug.d(\"loadClass\", \"发广播，让 PluginLoadingActivity2 消失\");\n                            }\n                            IPC.sendLocalBroadcast2All(context, new Intent(\"com.qihoo360.replugin.load_large_plugin.dismiss_dlg\"));\n                        }\n                    }, 300);\n                    // IPC.sendLocalBroadcast2Process(context, IPC.getPersistentProcessName(), new Intent(\"com.qihoo360.replugin.load_large_plugin.dismiss_dlg\"), )\n                }\n                return cls;\n            } catch (Throwable e) {\n                if (LOGR) {\n                    LogRelease.w(PLUGIN_TAG, \"p m hlc dc \" + className, e);\n                }\n            }\n        } else {\n            if (LOG) {\n                LogDebug.d(\"loadClass\", \"加载 \" + dc.plugin + \" 失败\");\n            }\n            Tasks.postDelayed2Thread(new Runnable() {\n                @Override\n                public void run() {\n                    IPC.sendLocalBroadcast2All(context, new Intent(\"com.qihoo360.replugin.load_large_plugin.dismiss_dlg\"));\n                }\n            }, 300);\n        }\n        if (LOGR) {\n            LogRelease.w(PLUGIN_TAG, \"p m hlc dc failed: \" + className + \" t=\" + dc.className + \" tp=\" + dc.classType + \" df=\" + dc.defClass);\n        }\n        // return dummy class\n        if (\"activity\".equals(dc.classType)) {\n            return DummyActivity.class;\n        } else if (\"service\".equals(dc.classType)) {\n            return DummyService.class;\n        } else if (\"provider\".equals(dc.classType)) {\n            return DummyProvider.class;\n        }\n        return dc.defClass;\n    }\n\n    //\n    return loadDefaultClass(className);\n}\n```\n\n\n## 附录\n相关资料：\n\nhttp://www.jcodecraeer.com/a/anzhuokaifa/androidkaifa/2014/1223/2205.html\nhttp://www.jianshu.com/p/9c96b68f5ee6\nhttps://github.com/Qihoo360/RePlugin/tree/dev/replugin-host-library\nhttps://fenglincanyi.github.io/2016/11/17/Android%20%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%88%9D%E6%8E%A2/\n","source":"_posts/RePlugin 插件化方案分析（一）.md","raw":"---\ntitle: RePlugin插件化方案分析（一）\ndate: 2017-10-30 23:45\ncategories: 插件化\ntags: 插件化\n---\n\n## 前言\n\n> RePlugin 是今年360技术团队GMTC大会公布的插件化方案。360对插件化的技术探索及优化，在近几年是相当有技术沉淀的。从 DroidPlugin 到 RePlugin, 确实有值得学习的地方。\n本文先来简单分析下 RePlugin 的基本原理。\n\n## 一、引子 \n普通的:  Application extends ContextWrapper, 其中 attachBaseContext() 是从 ContextWrapper 继承过来的，在 Application 的 attach()  中  attachBaseContext() 会被调用:\n\n```java\n/* package */ final void attach(Context context) {\n    attachBaseContext(context);\n    mLoadedApk = ContextImpl.getImpl(context).mPackageInfo;\n}\n```\nApplication 的 attachBaseContext() 方法 在 attach时被调用。那么 这个 attach() 方法是什么时机被调用呢？在 Instrumentation 类中，找到答案：\n\n```java\nstatic public Application newApplication(Class<?> clazz, Context context)  {\n    //实例化Application\n    Application app = (Application)clazz.newInstance();\n\n    app.attach(context); // 这个传进来的 context 是 makeApplication 时创建的 ContextImpl\n    return app;\n}\n```\n创建 Application 时，会将 Context attach 到 Application 上\n\n另外，后面对于 类加载 知识也是必要的，再做一次复习。\n\n可参考之前写的文章：\nhttps://fenglincanyi.github.io/2016/11/17/Android%20%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%88%9D%E6%8E%A2/\n\n\n## 二、Hook时机及Hook点\nRePlugin 从 Application 就开始下手了, RePlugin 的 hook 时机：\n在 application 的 attachBaseContext 方法中 初始化 Replugin 时（不管是哪种接入方式，都会调用）：\n```java\nRePlugin.App.attachBaseContext(this);\n```\n在 RePlugin.java 中：\n```java\npublic static void attachBaseContext(Application app, RePluginConfig config) {\n    if(sAttached) {\n        if(LogDebug.LOG) {\n            LogDebug.d(\"RePlugin\", \"attachBaseContext: Already called\");\n        }\n\n    } else {\n        RePluginInternal.init(app);\n        RePlugin.sConfig = config;\n        RePlugin.sConfig.initDefaults(app);\n        IPC.init(app);\n        if(LogDebug.LOG && RePlugin.sConfig.isPrintDetailLog()) {\n            LogDebug.printMemoryStatus(\"RePlugin\", \"act=, init, flag=, Start, pn=, framework, func=, attachBaseContext, lib=, RePlugin\");\n        }\n\n        HostConfigHelper.init();\n        AppVar.sAppContext = app;\n        PluginStatusController.setAppContext(app);\n        PMF.init(app);// 此处是 hook classloader 入口\n        PMF.callAttach();\n        sAttached = true;\n    }\n}\n```\nPMF.java 中：\n```java\npublic static final void init(Application application) {\n    setApplicationContext(application);\n    PluginManager.init(application);\n    sPluginMgr = new PmBase(application);\n    sPluginMgr.init();\n    Factory.sPluginManager = getLocal();\n    Factory2.sPLProxy = getInternal();\n    PatchClassLoaderUtils.patch(application);// 关键点\n}\n```\n在 PatchClassLoaderUtils.java 中，进行 hook 操作； 所以, 是在 attachBaseContext() 时 做的 classloader 的 hook。\n我们具体来看看：\n```java\npublic static boolean patch(Application application) {\n    try {\n        // 获取Application的BaseContext （来自ContextWrapper）\n        Context oBase = application.getBaseContext();\n        if (oBase == null) {\n            if (LOGR) {\n                LogRelease.e(PLUGIN_TAG, \"pclu.p: nf mb. ap cl=\" + application.getClass());\n            }\n            return false;\n        }\n\n        // 获取mBase.mPackageInfo\n        // 1. ApplicationContext - Android 2.1\n        // 2. ContextImpl - Android 2.2 and higher\n        // 3. AppContextImpl - Android 2.2 and higher\n        Object oPackageInfo = ReflectUtils.readField(oBase, \"mPackageInfo\");\n        if (oPackageInfo == null) {\n            if (LOGR) {\n                LogRelease.e(PLUGIN_TAG, \"pclu.p: nf mpi. mb cl=\" + oBase.getClass());\n            }\n            return false;\n        }\n\n        // mPackageInfo的类型主要有两种：\n        // 1. android.app.ActivityThread$PackageInfo - Android 2.1 - 2.3\n        // 2. android.app.LoadedApk - Android 2.3.3 and higher\n        if (LOG) {\n            Log.d(TAG, \"patch: mBase cl=\" + oBase.getClass() + \"; mPackageInfo cl=\" + oPackageInfo.getClass());\n        }\n\n        // 获取mPackageInfo.mClassLoader\n        ClassLoader oClassLoader = (ClassLoader) ReflectUtils.readField(oPackageInfo, \"mClassLoader\");\n        if (oClassLoader == null) {\n            if (LOGR) {\n                LogRelease.e(PLUGIN_TAG, \"pclu.p: nf mpi. mb cl=\" + oBase.getClass() + \"; mpi cl=\" + oPackageInfo.getClass());\n            }\n            return false;\n        }\n\n        // 外界可自定义ClassLoader的实现，但一定要基于RePluginClassLoader类\n        ClassLoader cl = RePlugin.getConfig().getCallbacks().createClassLoader(oClassLoader.getParent(), oClassLoader);\n\n        // 将新的ClassLoader写入mPackageInfo.mClassLoader\n        ReflectUtils.writeField(oPackageInfo, \"mClassLoader\", cl);\n\n        // 设置线程上下文中的ClassLoader为RePluginClassLoader\n        // 防止在个别Java库用到了Thread.currentThread().getContextClassLoader()时，“用了原来的PathClassLoader”，或为空指针\n        Thread.currentThread().setContextClassLoader(cl);\n\n        if (LOG) {\n            Log.d(TAG, \"patch: patch mClassLoader ok\");\n        }\n    } catch (Throwable e) {\n        e.printStackTrace();\n        return false;\n    }\n    return true;\n}\n```\n这里, 从 baseContext （makeApplication 时创建的 ContextImpl）获取到  mPackageInfo （是 LoadedApk 的实例）, 进而 再获取到 mPackageInfo的私有属性 mClassLoader.   拿到 classLoader 了，就可以进行 classLoader 的替换工作了.  \n\n## 三、Hook实现过程\n先不直接说怎么做的，我们先看看 这个 mClassLoader 是怎么来的？\n在 LoadedApk.Java 中，构造方法里：\n```java\nmClassLoader = ClassLoader.getSystemClassLoader();\n```\n继续跟进， \n```java\npublic static ClassLoader getSystemClassLoader() {\n    return SystemClassLoader.loader;\n}\n```\n其中：SystemClassLoader  是  抽象类ClassLoader 的一个静态类：\n```java\nstatic private class SystemClassLoader {\n    public static ClassLoader loader = ClassLoader.createSystemClassLoader();\n}\n```\n此时，就看到了熟悉的 PatchClassLoader：\n```java\nprivate static ClassLoader createSystemClassLoader() {\n    String classPath = System.getProperty(\"java.class.path\", \".\");\n    String librarySearchPath = System.getProperty(\"java.library.path\", \"\");\n\n    // String[] paths = classPath.split(\":\");\n    // URL[] urls = new URL[paths.length];\n    // for (int i = 0; i < paths.length; i++) {\n    // try {\n    // urls[i] = new URL(\"file://\" + paths[i]);\n    // }\n    // catch (Exception ex) {\n    // ex.printStackTrace();\n    // }\n    // }\n    //\n    // return new java.net.URLClassLoader(urls, null);\n\n    // TODO Make this a java.net.URLClassLoader once we have those?\n    return new PathClassLoader(classPath, librarySearchPath, BootClassLoader.getInstance());\n}\n```\n我们再次回到 上面的 classLoader 替换步骤中， 那么 RepluginClassLoader  就  替换了  PathClassLoader.  后面的 类加载 过程 就依赖于  RePluginClassLoader 来工作了。\n其中，oClassLoader 被赋值，就是 原始的 PathClassLoader\n\n下个阶段：RePluginClassLoader 的 loadClass 过程的更改：\n\n首先，原始的ClassLoader 的 loadClass 过程：（路径： Android/sdk/platforms/android-25/android.jar!/java/lang/ClassLoader.class）\n```java\nprotected Class<?> loadClass(String name, boolean resolve)\n    throws ClassNotFoundException\n{\n        // First, check if the class has already been loaded   检查class是否加载过, 加载过则直接 return\n        Class c = findLoadedClass(name);\n        if (c == null) {// 未加载过，则进行 下面的 加载过程：\n            long t0 = System.nanoTime();//  获取 纳秒\n            try {\n                // 双亲委托，机制进行 class 的 load 工作：\n                if (parent != null) {\n                    c = parent.loadClass(name, false);\n                } else {\n                    c = findBootstrapClassOrNull(name); // 此方法内部，直接返回 null\n                }\n            } catch (ClassNotFoundException e) {\n                // ClassNotFoundException thrown if class not found\n                // from the non-null parent class loader\n            }\n\n            if (c == null) {\n                // If still not found, then invoke findClass in order\n                // to find the class.    如果仍然找不到，就按顺序 查找 class\n                long t1 = System.nanoTime();\n                c = findClass(name);\n\n                // this is the defining class loader; record the stats\n            }\n        }\n        return c;\n}\n```\n下面是  RePluginClassLoader 的 实现：\n```java\n@Override\nprotected Class<?> loadClass(String className, boolean resolve) throws ClassNotFoundException {\n    //\n    Class<?> c = null;\n    c = PMF.loadClass(className, resolve);// 先去容器中查找并加载预埋的activity 或其他类\n    if (c != null) {\n        return c;// 在 插件中 查找成功，则直接返回\n    }\n    //\n    try {\n        // 如果没有在 插件 中找到，则使用  mOrig  这个 classLoader 去加载\n        //  mOrig 是谁呢？可以在 PatchClassLoaderUtils 中找到, 发现就是 原始的PathClassLoader，即 apk 刚被 加载的用的 classloader\n        //  mOrig 就是 宿主host 的 classLoader \n        c = mOrig.loadClass(className);\n        // 只有开启“详细日志”才会输出，防止“刷屏”现象\n        if (LogDebug.LOG && RePlugin.getConfig().isPrintDetailLog()) {\n            LogDebug.d(TAG, \"loadClass: load other class, cn=\" + className);\n        }\n        return c;\n    } catch (Throwable e) {\n        //\n    }\n    //\n    return super.loadClass(className, resolve);// 极端情况，上面的方式全都加载失败，默认使用 BaseDexClassLoader 去加载\n}\n```\n之后，PmBase 的 loadClass 过程：\n```java\nfinal Class<?> loadClass(String className, boolean resolve) {\n    // 加载Service中介坑位\n    if (className.startsWith(PluginPitService.class.getName())) {\n        if (LOG) {\n            LogDebug.i(TAG, \"loadClass: Loading PitService Class... clz=\" + className);\n        }\n        return PluginPitService.class;\n    }\n\n    //\n    if (mContainerActivities.contains(className)) {\n        Class<?> c = mClient.resolveActivityClass(className);\n        if (c != null) {\n            return c;\n        }\n        // 输出warn日志便于查看\n        // use DummyActivity orig=\n        if (LOGR) {\n            LogRelease.w(PLUGIN_TAG, \"p m hlc u d a o \" + className);\n        }\n        return DummyActivity.class;\n    }\n\n    //\n    if (mContainerServices.contains(className)) {\n        Class<?> c = loadServiceClass(className);\n        if (c != null) {\n            return c;\n        }\n        // 输出warn日志便于查看\n        // use DummyService orig=\n        if (LOGR) {\n            LogRelease.w(PLUGIN_TAG, \"p m hlc u d s o \" + className);\n        }\n        return DummyService.class;\n    }\n\n    //\n    if (mContainerProviders.contains(className)) {\n        Class<?> c = loadProviderClass(className);\n        if (c != null) {\n            return c;\n        }\n        // 输出warn日志便于查看\n        // use DummyProvider orig=\n        if (LOGR) {\n            LogRelease.w(PLUGIN_TAG, \"p m hlc u d p o \" + className);\n        }\n        return DummyProvider.class;\n    }\n\n    // 插件定制表\n    DynamicClass dc = mDynamicClasses.get(className);\n    if (dc != null) {\n        final Context context = RePluginInternal.getAppContext();\n        PluginDesc desc = PluginDesc.get(dc.plugin);\n\n        if (LOG) {\n            LogDebug.d(\"loadClass\", \"desc=\" + desc);\n            if (desc != null) {\n                LogDebug.d(\"loadClass\", \"desc.isLarge()=\" + desc.isLarge());\n            }\n            LogDebug.d(\"loadClass\", \"RePlugin.isPluginDexExtracted(\" + dc.plugin + \") = \" + RePlugin.isPluginDexExtracted(dc.plugin));\n        }\n\n        // 加载动态类时，如果其对应的插件未下载，则转到代理类\n        if (desc != null) {\n            String plugin = desc.getPluginName();\n            if (PluginTable.getPluginInfo(plugin) == null) {\n                if (LOG) {\n                    LogDebug.d(\"loadClass\", \"plugin=\" + plugin + \" not found, return DynamicClassProxyActivity.class\");\n                }\n                return DynamicClassProxyActivity.class;\n            }\n        }\n\n        /* 加载未安装的大插件时，启动一个过度 Activity */\n        // todo fixme 仅对 activity 类型才弹窗\n        boolean needStartLoadingActivity = (desc != null && desc.isLarge() && !RePlugin.isPluginDexExtracted(dc.plugin));\n        if (LOG) {\n            LogDebug.d(\"loadClass\", \"needStartLoadingActivity = \" + needStartLoadingActivity);\n        }\n        if (needStartLoadingActivity) {\n            Intent intent = new Intent();\n            intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\n            // fixme 将 PluginLoadingActivity2 移到 replugin 中来，不写死\n            intent.setComponent(new ComponentName(IPC.getPackageName(), \"com.qihoo360.loader2.updater.PluginLoadingActivity2\"));\n            context.startActivity(intent);\n        }\n\n        Plugin p = loadAppPlugin(dc.plugin);\n        if (LOG) {\n            LogDebug.d(\"loadClass\", \"p=\" + p);\n        }\n        if (p != null) {\n            try {\n                Class<?> cls = p.getClassLoader().loadClass(dc.className);\n                if (needStartLoadingActivity) {\n                    // 发广播给过度 Activity，让其关闭\n                    // fixme 发送给 UI 进程\n                    Tasks.postDelayed2Thread(new Runnable() {\n                        @Override\n                        public void run() {\n                            if (LOG) {\n                                LogDebug.d(\"loadClass\", \"发广播，让 PluginLoadingActivity2 消失\");\n                            }\n                            IPC.sendLocalBroadcast2All(context, new Intent(\"com.qihoo360.replugin.load_large_plugin.dismiss_dlg\"));\n                        }\n                    }, 300);\n                    // IPC.sendLocalBroadcast2Process(context, IPC.getPersistentProcessName(), new Intent(\"com.qihoo360.replugin.load_large_plugin.dismiss_dlg\"), )\n                }\n                return cls;\n            } catch (Throwable e) {\n                if (LOGR) {\n                    LogRelease.w(PLUGIN_TAG, \"p m hlc dc \" + className, e);\n                }\n            }\n        } else {\n            if (LOG) {\n                LogDebug.d(\"loadClass\", \"加载 \" + dc.plugin + \" 失败\");\n            }\n            Tasks.postDelayed2Thread(new Runnable() {\n                @Override\n                public void run() {\n                    IPC.sendLocalBroadcast2All(context, new Intent(\"com.qihoo360.replugin.load_large_plugin.dismiss_dlg\"));\n                }\n            }, 300);\n        }\n        if (LOGR) {\n            LogRelease.w(PLUGIN_TAG, \"p m hlc dc failed: \" + className + \" t=\" + dc.className + \" tp=\" + dc.classType + \" df=\" + dc.defClass);\n        }\n        // return dummy class\n        if (\"activity\".equals(dc.classType)) {\n            return DummyActivity.class;\n        } else if (\"service\".equals(dc.classType)) {\n            return DummyService.class;\n        } else if (\"provider\".equals(dc.classType)) {\n            return DummyProvider.class;\n        }\n        return dc.defClass;\n    }\n\n    //\n    return loadDefaultClass(className);\n}\n```\n\n\n## 附录\n相关资料：\n\nhttp://www.jcodecraeer.com/a/anzhuokaifa/androidkaifa/2014/1223/2205.html\nhttp://www.jianshu.com/p/9c96b68f5ee6\nhttps://github.com/Qihoo360/RePlugin/tree/dev/replugin-host-library\nhttps://fenglincanyi.github.io/2016/11/17/Android%20%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%88%9D%E6%8E%A2/\n","slug":"RePlugin 插件化方案分析（一）","published":1,"updated":"2017-10-31T13:20:53.000Z","_id":"cjanfw0co0000g8ntzwgfmbc4","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><blockquote>\n<p>RePlugin 是今年360技术团队GMTC大会公布的插件化方案。360对插件化的技术探索及优化，在近几年是相当有技术沉淀的。从 DroidPlugin 到 RePlugin, 确实有值得学习的地方。<br>本文先来简单分析下 RePlugin 的基本原理。</p>\n</blockquote>\n<h2 id=\"一、引子\"><a href=\"#一、引子\" class=\"headerlink\" title=\"一、引子\"></a>一、引子</h2><p>普通的:  Application extends ContextWrapper, 其中 attachBaseContext() 是从 ContextWrapper 继承过来的，在 Application 的 attach()  中  attachBaseContext() 会被调用:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/* package */</span> <span class=\"function\"><span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">attach</span><span class=\"params\">(Context context)</span> </span>&#123;</div><div class=\"line\">    attachBaseContext(context);</div><div class=\"line\">    mLoadedApk = ContextImpl.getImpl(context).mPackageInfo;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Application 的 attachBaseContext() 方法 在 attach时被调用。那么 这个 attach() 方法是什么时机被调用呢？在 Instrumentation 类中，找到答案：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">public</span> Application <span class=\"title\">newApplication</span><span class=\"params\">(Class&lt;?&gt; clazz, Context context)</span>  </span>&#123;</div><div class=\"line\">    <span class=\"comment\">//实例化Application</span></div><div class=\"line\">    Application app = (Application)clazz.newInstance();</div><div class=\"line\"></div><div class=\"line\">    app.attach(context); <span class=\"comment\">// 这个传进来的 context 是 makeApplication 时创建的 ContextImpl</span></div><div class=\"line\">    <span class=\"keyword\">return</span> app;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>创建 Application 时，会将 Context attach 到 Application 上</p>\n<p>另外，后面对于 类加载 知识也是必要的，再做一次复习。</p>\n<p>可参考之前写的文章：<br><a href=\"https://fenglincanyi.github.io/2016/11/17/Android%20%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%88%9D%E6%8E%A2/\">https://fenglincanyi.github.io/2016/11/17/Android%20%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%88%9D%E6%8E%A2/</a></p>\n<h2 id=\"二、Hook时机及Hook点\"><a href=\"#二、Hook时机及Hook点\" class=\"headerlink\" title=\"二、Hook时机及Hook点\"></a>二、Hook时机及Hook点</h2><p>RePlugin 从 Application 就开始下手了, RePlugin 的 hook 时机：<br>在 application 的 attachBaseContext 方法中 初始化 Replugin 时（不管是哪种接入方式，都会调用）：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">RePlugin.App.attachBaseContext(<span class=\"keyword\">this</span>);</div></pre></td></tr></table></figure></p>\n<p>在 RePlugin.java 中：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">attachBaseContext</span><span class=\"params\">(Application app, RePluginConfig config)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(sAttached) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(LogDebug.LOG) &#123;</div><div class=\"line\">            LogDebug.d(<span class=\"string\">\"RePlugin\"</span>, <span class=\"string\">\"attachBaseContext: Already called\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        RePluginInternal.init(app);</div><div class=\"line\">        RePlugin.sConfig = config;</div><div class=\"line\">        RePlugin.sConfig.initDefaults(app);</div><div class=\"line\">        IPC.init(app);</div><div class=\"line\">        <span class=\"keyword\">if</span>(LogDebug.LOG &amp;&amp; RePlugin.sConfig.isPrintDetailLog()) &#123;</div><div class=\"line\">            LogDebug.printMemoryStatus(<span class=\"string\">\"RePlugin\"</span>, <span class=\"string\">\"act=, init, flag=, Start, pn=, framework, func=, attachBaseContext, lib=, RePlugin\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        HostConfigHelper.init();</div><div class=\"line\">        AppVar.sAppContext = app;</div><div class=\"line\">        PluginStatusController.setAppContext(app);</div><div class=\"line\">        PMF.init(app);<span class=\"comment\">// 此处是 hook classloader 入口</span></div><div class=\"line\">        PMF.callAttach();</div><div class=\"line\">        sAttached = <span class=\"keyword\">true</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>PMF.java 中：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">(Application application)</span> </span>&#123;</div><div class=\"line\">    setApplicationContext(application);</div><div class=\"line\">    PluginManager.init(application);</div><div class=\"line\">    sPluginMgr = <span class=\"keyword\">new</span> PmBase(application);</div><div class=\"line\">    sPluginMgr.init();</div><div class=\"line\">    Factory.sPluginManager = getLocal();</div><div class=\"line\">    Factory2.sPLProxy = getInternal();</div><div class=\"line\">    PatchClassLoaderUtils.patch(application);<span class=\"comment\">// 关键点</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>在 PatchClassLoaderUtils.java 中，进行 hook 操作； 所以, 是在 attachBaseContext() 时 做的 classloader 的 hook。<br>我们具体来看看：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">patch</span><span class=\"params\">(Application application)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">        <span class=\"comment\">// 获取Application的BaseContext （来自ContextWrapper）</span></div><div class=\"line\">        Context oBase = application.getBaseContext();</div><div class=\"line\">        <span class=\"keyword\">if</span> (oBase == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (LOGR) &#123;</div><div class=\"line\">                LogRelease.e(PLUGIN_TAG, <span class=\"string\">\"pclu.p: nf mb. ap cl=\"</span> + application.getClass());</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// 获取mBase.mPackageInfo</span></div><div class=\"line\">        <span class=\"comment\">// 1. ApplicationContext - Android 2.1</span></div><div class=\"line\">        <span class=\"comment\">// 2. ContextImpl - Android 2.2 and higher</span></div><div class=\"line\">        <span class=\"comment\">// 3. AppContextImpl - Android 2.2 and higher</span></div><div class=\"line\">        Object oPackageInfo = ReflectUtils.readField(oBase, <span class=\"string\">\"mPackageInfo\"</span>);</div><div class=\"line\">        <span class=\"keyword\">if</span> (oPackageInfo == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (LOGR) &#123;</div><div class=\"line\">                LogRelease.e(PLUGIN_TAG, <span class=\"string\">\"pclu.p: nf mpi. mb cl=\"</span> + oBase.getClass());</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// mPackageInfo的类型主要有两种：</span></div><div class=\"line\">        <span class=\"comment\">// 1. android.app.ActivityThread$PackageInfo - Android 2.1 - 2.3</span></div><div class=\"line\">        <span class=\"comment\">// 2. android.app.LoadedApk - Android 2.3.3 and higher</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (LOG) &#123;</div><div class=\"line\">            Log.d(TAG, <span class=\"string\">\"patch: mBase cl=\"</span> + oBase.getClass() + <span class=\"string\">\"; mPackageInfo cl=\"</span> + oPackageInfo.getClass());</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// 获取mPackageInfo.mClassLoader</span></div><div class=\"line\">        ClassLoader oClassLoader = (ClassLoader) ReflectUtils.readField(oPackageInfo, <span class=\"string\">\"mClassLoader\"</span>);</div><div class=\"line\">        <span class=\"keyword\">if</span> (oClassLoader == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (LOGR) &#123;</div><div class=\"line\">                LogRelease.e(PLUGIN_TAG, <span class=\"string\">\"pclu.p: nf mpi. mb cl=\"</span> + oBase.getClass() + <span class=\"string\">\"; mpi cl=\"</span> + oPackageInfo.getClass());</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// 外界可自定义ClassLoader的实现，但一定要基于RePluginClassLoader类</span></div><div class=\"line\">        ClassLoader cl = RePlugin.getConfig().getCallbacks().createClassLoader(oClassLoader.getParent(), oClassLoader);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// 将新的ClassLoader写入mPackageInfo.mClassLoader</span></div><div class=\"line\">        ReflectUtils.writeField(oPackageInfo, <span class=\"string\">\"mClassLoader\"</span>, cl);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// 设置线程上下文中的ClassLoader为RePluginClassLoader</span></div><div class=\"line\">        <span class=\"comment\">// 防止在个别Java库用到了Thread.currentThread().getContextClassLoader()时，“用了原来的PathClassLoader”，或为空指针</span></div><div class=\"line\">        Thread.currentThread().setContextClassLoader(cl);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (LOG) &#123;</div><div class=\"line\">            Log.d(TAG, <span class=\"string\">\"patch: patch mClassLoader ok\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125; <span class=\"keyword\">catch</span> (Throwable e) &#123;</div><div class=\"line\">        e.printStackTrace();</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>这里, 从 baseContext （makeApplication 时创建的 ContextImpl）获取到  mPackageInfo （是 LoadedApk 的实例）, 进而 再获取到 mPackageInfo的私有属性 mClassLoader.   拿到 classLoader 了，就可以进行 classLoader 的替换工作了.  </p>\n<h2 id=\"三、Hook实现过程\"><a href=\"#三、Hook实现过程\" class=\"headerlink\" title=\"三、Hook实现过程\"></a>三、Hook实现过程</h2><p>先不直接说怎么做的，我们先看看 这个 mClassLoader 是怎么来的？<br>在 LoadedApk.Java 中，构造方法里：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">mClassLoader = ClassLoader.getSystemClassLoader();</div></pre></td></tr></table></figure></p>\n<p>继续跟进，<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ClassLoader <span class=\"title\">getSystemClassLoader</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> SystemClassLoader.loader;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>其中：SystemClassLoader  是  抽象类ClassLoader 的一个静态类：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SystemClassLoader</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ClassLoader loader = ClassLoader.createSystemClassLoader();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>此时，就看到了熟悉的 PatchClassLoader：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> ClassLoader <span class=\"title\">createSystemClassLoader</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    String classPath = System.getProperty(<span class=\"string\">\"java.class.path\"</span>, <span class=\"string\">\".\"</span>);</div><div class=\"line\">    String librarySearchPath = System.getProperty(<span class=\"string\">\"java.library.path\"</span>, <span class=\"string\">\"\"</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// String[] paths = classPath.split(\":\");</span></div><div class=\"line\">    <span class=\"comment\">// URL[] urls = new URL[paths.length];</span></div><div class=\"line\">    <span class=\"comment\">// for (int i = 0; i &lt; paths.length; i++) &#123;</span></div><div class=\"line\">    <span class=\"comment\">// try &#123;</span></div><div class=\"line\">    <span class=\"comment\">// urls[i] = new URL(\"file://\" + paths[i]);</span></div><div class=\"line\">    <span class=\"comment\">// &#125;</span></div><div class=\"line\">    <span class=\"comment\">// catch (Exception ex) &#123;</span></div><div class=\"line\">    <span class=\"comment\">// ex.printStackTrace();</span></div><div class=\"line\">    <span class=\"comment\">// &#125;</span></div><div class=\"line\">    <span class=\"comment\">// &#125;</span></div><div class=\"line\">    <span class=\"comment\">//</span></div><div class=\"line\">    <span class=\"comment\">// return new java.net.URLClassLoader(urls, null);</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// TODO Make this a java.net.URLClassLoader once we have those?</span></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> PathClassLoader(classPath, librarySearchPath, BootClassLoader.getInstance());</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>我们再次回到 上面的 classLoader 替换步骤中， 那么 RepluginClassLoader  就  替换了  PathClassLoader.  后面的 类加载 过程 就依赖于  RePluginClassLoader 来工作了。<br>其中，oClassLoader 被赋值，就是 原始的 PathClassLoader</p>\n<p>下个阶段：RePluginClassLoader 的 loadClass 过程的更改：</p>\n<p>首先，原始的ClassLoader 的 loadClass 过程：（路径： Android/sdk/platforms/android-25/android.jar!/java/lang/ClassLoader.class）<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">protected</span> Class&lt;?&gt; loadClass(String name, <span class=\"keyword\">boolean</span> resolve)</div><div class=\"line\">    <span class=\"keyword\">throws</span> ClassNotFoundException</div><div class=\"line\">&#123;</div><div class=\"line\">        <span class=\"comment\">// First, check if the class has already been loaded   检查class是否加载过, 加载过则直接 return</span></div><div class=\"line\">        Class c = findLoadedClass(name);</div><div class=\"line\">        <span class=\"keyword\">if</span> (c == <span class=\"keyword\">null</span>) &#123;<span class=\"comment\">// 未加载过，则进行 下面的 加载过程：</span></div><div class=\"line\">            <span class=\"keyword\">long</span> t0 = System.nanoTime();<span class=\"comment\">//  获取 纳秒</span></div><div class=\"line\">            <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                <span class=\"comment\">// 双亲委托，机制进行 class 的 load 工作：</span></div><div class=\"line\">                <span class=\"keyword\">if</span> (parent != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                    c = parent.loadClass(name, <span class=\"keyword\">false</span>);</div><div class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                    c = findBootstrapClassOrNull(name); <span class=\"comment\">// 此方法内部，直接返回 null</span></div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125; <span class=\"keyword\">catch</span> (ClassNotFoundException e) &#123;</div><div class=\"line\">                <span class=\"comment\">// ClassNotFoundException thrown if class not found</span></div><div class=\"line\">                <span class=\"comment\">// from the non-null parent class loader</span></div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">if</span> (c == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                <span class=\"comment\">// If still not found, then invoke findClass in order</span></div><div class=\"line\">                <span class=\"comment\">// to find the class.    如果仍然找不到，就按顺序 查找 class</span></div><div class=\"line\">                <span class=\"keyword\">long</span> t1 = System.nanoTime();</div><div class=\"line\">                c = findClass(name);</div><div class=\"line\"></div><div class=\"line\">                <span class=\"comment\">// this is the defining class loader; record the stats</span></div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> c;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>下面是  RePluginClassLoader 的 实现：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"keyword\">protected</span> Class&lt;?&gt; loadClass(String className, <span class=\"keyword\">boolean</span> resolve) <span class=\"keyword\">throws</span> ClassNotFoundException &#123;</div><div class=\"line\">    <span class=\"comment\">//</span></div><div class=\"line\">    Class&lt;?&gt; c = <span class=\"keyword\">null</span>;</div><div class=\"line\">    c = PMF.loadClass(className, resolve);<span class=\"comment\">// 先去容器中查找并加载预埋的activity 或其他类</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (c != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> c;<span class=\"comment\">// 在 插件中 查找成功，则直接返回</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">//</span></div><div class=\"line\">    <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">        <span class=\"comment\">// 如果没有在 插件 中找到，则使用  mOrig  这个 classLoader 去加载</span></div><div class=\"line\">        <span class=\"comment\">//  mOrig 是谁呢？可以在 PatchClassLoaderUtils 中找到, 发现就是 原始的PathClassLoader，即 apk 刚被 加载的用的 classloader</span></div><div class=\"line\">        <span class=\"comment\">//  mOrig 就是 宿主host 的 classLoader </span></div><div class=\"line\">        c = mOrig.loadClass(className);</div><div class=\"line\">        <span class=\"comment\">// 只有开启“详细日志”才会输出，防止“刷屏”现象</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (LogDebug.LOG &amp;&amp; RePlugin.getConfig().isPrintDetailLog()) &#123;</div><div class=\"line\">            LogDebug.d(TAG, <span class=\"string\">\"loadClass: load other class, cn=\"</span> + className);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> c;</div><div class=\"line\">    &#125; <span class=\"keyword\">catch</span> (Throwable e) &#123;</div><div class=\"line\">        <span class=\"comment\">//</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">//</span></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.loadClass(className, resolve);<span class=\"comment\">// 极端情况，上面的方式全都加载失败，默认使用 BaseDexClassLoader 去加载</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>之后，PmBase 的 loadClass 过程：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">final</span> Class&lt;?&gt; loadClass(String className, <span class=\"keyword\">boolean</span> resolve) &#123;</div><div class=\"line\">    <span class=\"comment\">// 加载Service中介坑位</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (className.startsWith(PluginPitService.class.getName())) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (LOG) &#123;</div><div class=\"line\">            LogDebug.i(TAG, <span class=\"string\">\"loadClass: Loading PitService Class... clz=\"</span> + className);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> PluginPitService.class;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (mContainerActivities.contains(className)) &#123;</div><div class=\"line\">        Class&lt;?&gt; c = mClient.resolveActivityClass(className);</div><div class=\"line\">        <span class=\"keyword\">if</span> (c != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> c;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"comment\">// 输出warn日志便于查看</span></div><div class=\"line\">        <span class=\"comment\">// use DummyActivity orig=</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (LOGR) &#123;</div><div class=\"line\">            LogRelease.w(PLUGIN_TAG, <span class=\"string\">\"p m hlc u d a o \"</span> + className);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> DummyActivity.class;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (mContainerServices.contains(className)) &#123;</div><div class=\"line\">        Class&lt;?&gt; c = loadServiceClass(className);</div><div class=\"line\">        <span class=\"keyword\">if</span> (c != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> c;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"comment\">// 输出warn日志便于查看</span></div><div class=\"line\">        <span class=\"comment\">// use DummyService orig=</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (LOGR) &#123;</div><div class=\"line\">            LogRelease.w(PLUGIN_TAG, <span class=\"string\">\"p m hlc u d s o \"</span> + className);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> DummyService.class;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (mContainerProviders.contains(className)) &#123;</div><div class=\"line\">        Class&lt;?&gt; c = loadProviderClass(className);</div><div class=\"line\">        <span class=\"keyword\">if</span> (c != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> c;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"comment\">// 输出warn日志便于查看</span></div><div class=\"line\">        <span class=\"comment\">// use DummyProvider orig=</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (LOGR) &#123;</div><div class=\"line\">            LogRelease.w(PLUGIN_TAG, <span class=\"string\">\"p m hlc u d p o \"</span> + className);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> DummyProvider.class;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 插件定制表</span></div><div class=\"line\">    DynamicClass dc = mDynamicClasses.get(className);</div><div class=\"line\">    <span class=\"keyword\">if</span> (dc != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">final</span> Context context = RePluginInternal.getAppContext();</div><div class=\"line\">        PluginDesc desc = PluginDesc.get(dc.plugin);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (LOG) &#123;</div><div class=\"line\">            LogDebug.d(<span class=\"string\">\"loadClass\"</span>, <span class=\"string\">\"desc=\"</span> + desc);</div><div class=\"line\">            <span class=\"keyword\">if</span> (desc != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                LogDebug.d(<span class=\"string\">\"loadClass\"</span>, <span class=\"string\">\"desc.isLarge()=\"</span> + desc.isLarge());</div><div class=\"line\">            &#125;</div><div class=\"line\">            LogDebug.d(<span class=\"string\">\"loadClass\"</span>, <span class=\"string\">\"RePlugin.isPluginDexExtracted(\"</span> + dc.plugin + <span class=\"string\">\") = \"</span> + RePlugin.isPluginDexExtracted(dc.plugin));</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// 加载动态类时，如果其对应的插件未下载，则转到代理类</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (desc != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            String plugin = desc.getPluginName();</div><div class=\"line\">            <span class=\"keyword\">if</span> (PluginTable.getPluginInfo(plugin) == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> (LOG) &#123;</div><div class=\"line\">                    LogDebug.d(<span class=\"string\">\"loadClass\"</span>, <span class=\"string\">\"plugin=\"</span> + plugin + <span class=\"string\">\" not found, return DynamicClassProxyActivity.class\"</span>);</div><div class=\"line\">                &#125;</div><div class=\"line\">                <span class=\"keyword\">return</span> DynamicClassProxyActivity.class;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">/* 加载未安装的大插件时，启动一个过度 Activity */</span></div><div class=\"line\">        <span class=\"comment\">// todo fixme 仅对 activity 类型才弹窗</span></div><div class=\"line\">        <span class=\"keyword\">boolean</span> needStartLoadingActivity = (desc != <span class=\"keyword\">null</span> &amp;&amp; desc.isLarge() &amp;&amp; !RePlugin.isPluginDexExtracted(dc.plugin));</div><div class=\"line\">        <span class=\"keyword\">if</span> (LOG) &#123;</div><div class=\"line\">            LogDebug.d(<span class=\"string\">\"loadClass\"</span>, <span class=\"string\">\"needStartLoadingActivity = \"</span> + needStartLoadingActivity);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">if</span> (needStartLoadingActivity) &#123;</div><div class=\"line\">            Intent intent = <span class=\"keyword\">new</span> Intent();</div><div class=\"line\">            intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);</div><div class=\"line\">            <span class=\"comment\">// fixme 将 PluginLoadingActivity2 移到 replugin 中来，不写死</span></div><div class=\"line\">            intent.setComponent(<span class=\"keyword\">new</span> ComponentName(IPC.getPackageName(), <span class=\"string\">\"com.qihoo360.loader2.updater.PluginLoadingActivity2\"</span>));</div><div class=\"line\">            context.startActivity(intent);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        Plugin p = loadAppPlugin(dc.plugin);</div><div class=\"line\">        <span class=\"keyword\">if</span> (LOG) &#123;</div><div class=\"line\">            LogDebug.d(<span class=\"string\">\"loadClass\"</span>, <span class=\"string\">\"p=\"</span> + p);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">if</span> (p != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                Class&lt;?&gt; cls = p.getClassLoader().loadClass(dc.className);</div><div class=\"line\">                <span class=\"keyword\">if</span> (needStartLoadingActivity) &#123;</div><div class=\"line\">                    <span class=\"comment\">// 发广播给过度 Activity，让其关闭</span></div><div class=\"line\">                    <span class=\"comment\">// fixme 发送给 UI 进程</span></div><div class=\"line\">                    Tasks.postDelayed2Thread(<span class=\"keyword\">new</span> Runnable() &#123;</div><div class=\"line\">                        <span class=\"meta\">@Override</span></div><div class=\"line\">                        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">                            <span class=\"keyword\">if</span> (LOG) &#123;</div><div class=\"line\">                                LogDebug.d(<span class=\"string\">\"loadClass\"</span>, <span class=\"string\">\"发广播，让 PluginLoadingActivity2 消失\"</span>);</div><div class=\"line\">                            &#125;</div><div class=\"line\">                            IPC.sendLocalBroadcast2All(context, <span class=\"keyword\">new</span> Intent(<span class=\"string\">\"com.qihoo360.replugin.load_large_plugin.dismiss_dlg\"</span>));</div><div class=\"line\">                        &#125;</div><div class=\"line\">                    &#125;, <span class=\"number\">300</span>);</div><div class=\"line\">                    <span class=\"comment\">// IPC.sendLocalBroadcast2Process(context, IPC.getPersistentProcessName(), new Intent(\"com.qihoo360.replugin.load_large_plugin.dismiss_dlg\"), )</span></div><div class=\"line\">                &#125;</div><div class=\"line\">                <span class=\"keyword\">return</span> cls;</div><div class=\"line\">            &#125; <span class=\"keyword\">catch</span> (Throwable e) &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> (LOGR) &#123;</div><div class=\"line\">                    LogRelease.w(PLUGIN_TAG, <span class=\"string\">\"p m hlc dc \"</span> + className, e);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (LOG) &#123;</div><div class=\"line\">                LogDebug.d(<span class=\"string\">\"loadClass\"</span>, <span class=\"string\">\"加载 \"</span> + dc.plugin + <span class=\"string\">\" 失败\"</span>);</div><div class=\"line\">            &#125;</div><div class=\"line\">            Tasks.postDelayed2Thread(<span class=\"keyword\">new</span> Runnable() &#123;</div><div class=\"line\">                <span class=\"meta\">@Override</span></div><div class=\"line\">                <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">                    IPC.sendLocalBroadcast2All(context, <span class=\"keyword\">new</span> Intent(<span class=\"string\">\"com.qihoo360.replugin.load_large_plugin.dismiss_dlg\"</span>));</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;, <span class=\"number\">300</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">if</span> (LOGR) &#123;</div><div class=\"line\">            LogRelease.w(PLUGIN_TAG, <span class=\"string\">\"p m hlc dc failed: \"</span> + className + <span class=\"string\">\" t=\"</span> + dc.className + <span class=\"string\">\" tp=\"</span> + dc.classType + <span class=\"string\">\" df=\"</span> + dc.defClass);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"comment\">// return dummy class</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"string\">\"activity\"</span>.equals(dc.classType)) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> DummyActivity.class;</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"string\">\"service\"</span>.equals(dc.classType)) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> DummyService.class;</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"string\">\"provider\"</span>.equals(dc.classType)) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> DummyProvider.class;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> dc.defClass;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//</span></div><div class=\"line\">    <span class=\"keyword\">return</span> loadDefaultClass(className);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"附录\"><a href=\"#附录\" class=\"headerlink\" title=\"附录\"></a>附录</h2><p>相关资料：</p>\n<p><a href=\"http://www.jcodecraeer.com/a/anzhuokaifa/androidkaifa/2014/1223/2205.html\" target=\"_blank\" rel=\"external\">http://www.jcodecraeer.com/a/anzhuokaifa/androidkaifa/2014/1223/2205.html</a><br><a href=\"http://www.jianshu.com/p/9c96b68f5ee6\" target=\"_blank\" rel=\"external\">http://www.jianshu.com/p/9c96b68f5ee6</a><br><a href=\"https://github.com/Qihoo360/RePlugin/tree/dev/replugin-host-library\" target=\"_blank\" rel=\"external\">https://github.com/Qihoo360/RePlugin/tree/dev/replugin-host-library</a><br><a href=\"https://fenglincanyi.github.io/2016/11/17/Android%20%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%88%9D%E6%8E%A2/\">https://fenglincanyi.github.io/2016/11/17/Android%20%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%88%9D%E6%8E%A2/</a></p>\n","excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><blockquote>\n<p>RePlugin 是今年360技术团队GMTC大会公布的插件化方案。360对插件化的技术探索及优化，在近几年是相当有技术沉淀的。从 DroidPlugin 到 RePlugin, 确实有值得学习的地方。<br>本文先来简单分析下 RePlugin 的基本原理。</p>\n</blockquote>\n<h2 id=\"一、引子\"><a href=\"#一、引子\" class=\"headerlink\" title=\"一、引子\"></a>一、引子</h2><p>普通的:  Application extends ContextWrapper, 其中 attachBaseContext() 是从 ContextWrapper 继承过来的，在 Application 的 attach()  中  attachBaseContext() 会被调用:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/* package */</span> <span class=\"function\"><span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">attach</span><span class=\"params\">(Context context)</span> </span>&#123;</div><div class=\"line\">    attachBaseContext(context);</div><div class=\"line\">    mLoadedApk = ContextImpl.getImpl(context).mPackageInfo;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Application 的 attachBaseContext() 方法 在 attach时被调用。那么 这个 attach() 方法是什么时机被调用呢？在 Instrumentation 类中，找到答案：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">public</span> Application <span class=\"title\">newApplication</span><span class=\"params\">(Class&lt;?&gt; clazz, Context context)</span>  </span>&#123;</div><div class=\"line\">    <span class=\"comment\">//实例化Application</span></div><div class=\"line\">    Application app = (Application)clazz.newInstance();</div><div class=\"line\"></div><div class=\"line\">    app.attach(context); <span class=\"comment\">// 这个传进来的 context 是 makeApplication 时创建的 ContextImpl</span></div><div class=\"line\">    <span class=\"keyword\">return</span> app;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>创建 Application 时，会将 Context attach 到 Application 上</p>\n<p>另外，后面对于 类加载 知识也是必要的，再做一次复习。</p>\n<p>可参考之前写的文章：<br><a href=\"https://fenglincanyi.github.io/2016/11/17/Android%20%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%88%9D%E6%8E%A2/\">https://fenglincanyi.github.io/2016/11/17/Android%20%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%88%9D%E6%8E%A2/</a></p>\n<h2 id=\"二、Hook时机及Hook点\"><a href=\"#二、Hook时机及Hook点\" class=\"headerlink\" title=\"二、Hook时机及Hook点\"></a>二、Hook时机及Hook点</h2><p>RePlugin 从 Application 就开始下手了, RePlugin 的 hook 时机：<br>在 application 的 attachBaseContext 方法中 初始化 Replugin 时（不管是哪种接入方式，都会调用）：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">RePlugin.App.attachBaseContext(<span class=\"keyword\">this</span>);</div></pre></td></tr></table></figure></p>\n<p>在 RePlugin.java 中：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">attachBaseContext</span><span class=\"params\">(Application app, RePluginConfig config)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(sAttached) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(LogDebug.LOG) &#123;</div><div class=\"line\">            LogDebug.d(<span class=\"string\">\"RePlugin\"</span>, <span class=\"string\">\"attachBaseContext: Already called\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        RePluginInternal.init(app);</div><div class=\"line\">        RePlugin.sConfig = config;</div><div class=\"line\">        RePlugin.sConfig.initDefaults(app);</div><div class=\"line\">        IPC.init(app);</div><div class=\"line\">        <span class=\"keyword\">if</span>(LogDebug.LOG &amp;&amp; RePlugin.sConfig.isPrintDetailLog()) &#123;</div><div class=\"line\">            LogDebug.printMemoryStatus(<span class=\"string\">\"RePlugin\"</span>, <span class=\"string\">\"act=, init, flag=, Start, pn=, framework, func=, attachBaseContext, lib=, RePlugin\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        HostConfigHelper.init();</div><div class=\"line\">        AppVar.sAppContext = app;</div><div class=\"line\">        PluginStatusController.setAppContext(app);</div><div class=\"line\">        PMF.init(app);<span class=\"comment\">// 此处是 hook classloader 入口</span></div><div class=\"line\">        PMF.callAttach();</div><div class=\"line\">        sAttached = <span class=\"keyword\">true</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>PMF.java 中：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">(Application application)</span> </span>&#123;</div><div class=\"line\">    setApplicationContext(application);</div><div class=\"line\">    PluginManager.init(application);</div><div class=\"line\">    sPluginMgr = <span class=\"keyword\">new</span> PmBase(application);</div><div class=\"line\">    sPluginMgr.init();</div><div class=\"line\">    Factory.sPluginManager = getLocal();</div><div class=\"line\">    Factory2.sPLProxy = getInternal();</div><div class=\"line\">    PatchClassLoaderUtils.patch(application);<span class=\"comment\">// 关键点</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>在 PatchClassLoaderUtils.java 中，进行 hook 操作； 所以, 是在 attachBaseContext() 时 做的 classloader 的 hook。<br>我们具体来看看：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">patch</span><span class=\"params\">(Application application)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">        <span class=\"comment\">// 获取Application的BaseContext （来自ContextWrapper）</span></div><div class=\"line\">        Context oBase = application.getBaseContext();</div><div class=\"line\">        <span class=\"keyword\">if</span> (oBase == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (LOGR) &#123;</div><div class=\"line\">                LogRelease.e(PLUGIN_TAG, <span class=\"string\">\"pclu.p: nf mb. ap cl=\"</span> + application.getClass());</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// 获取mBase.mPackageInfo</span></div><div class=\"line\">        <span class=\"comment\">// 1. ApplicationContext - Android 2.1</span></div><div class=\"line\">        <span class=\"comment\">// 2. ContextImpl - Android 2.2 and higher</span></div><div class=\"line\">        <span class=\"comment\">// 3. AppContextImpl - Android 2.2 and higher</span></div><div class=\"line\">        Object oPackageInfo = ReflectUtils.readField(oBase, <span class=\"string\">\"mPackageInfo\"</span>);</div><div class=\"line\">        <span class=\"keyword\">if</span> (oPackageInfo == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (LOGR) &#123;</div><div class=\"line\">                LogRelease.e(PLUGIN_TAG, <span class=\"string\">\"pclu.p: nf mpi. mb cl=\"</span> + oBase.getClass());</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// mPackageInfo的类型主要有两种：</span></div><div class=\"line\">        <span class=\"comment\">// 1. android.app.ActivityThread$PackageInfo - Android 2.1 - 2.3</span></div><div class=\"line\">        <span class=\"comment\">// 2. android.app.LoadedApk - Android 2.3.3 and higher</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (LOG) &#123;</div><div class=\"line\">            Log.d(TAG, <span class=\"string\">\"patch: mBase cl=\"</span> + oBase.getClass() + <span class=\"string\">\"; mPackageInfo cl=\"</span> + oPackageInfo.getClass());</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// 获取mPackageInfo.mClassLoader</span></div><div class=\"line\">        ClassLoader oClassLoader = (ClassLoader) ReflectUtils.readField(oPackageInfo, <span class=\"string\">\"mClassLoader\"</span>);</div><div class=\"line\">        <span class=\"keyword\">if</span> (oClassLoader == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (LOGR) &#123;</div><div class=\"line\">                LogRelease.e(PLUGIN_TAG, <span class=\"string\">\"pclu.p: nf mpi. mb cl=\"</span> + oBase.getClass() + <span class=\"string\">\"; mpi cl=\"</span> + oPackageInfo.getClass());</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// 外界可自定义ClassLoader的实现，但一定要基于RePluginClassLoader类</span></div><div class=\"line\">        ClassLoader cl = RePlugin.getConfig().getCallbacks().createClassLoader(oClassLoader.getParent(), oClassLoader);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// 将新的ClassLoader写入mPackageInfo.mClassLoader</span></div><div class=\"line\">        ReflectUtils.writeField(oPackageInfo, <span class=\"string\">\"mClassLoader\"</span>, cl);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// 设置线程上下文中的ClassLoader为RePluginClassLoader</span></div><div class=\"line\">        <span class=\"comment\">// 防止在个别Java库用到了Thread.currentThread().getContextClassLoader()时，“用了原来的PathClassLoader”，或为空指针</span></div><div class=\"line\">        Thread.currentThread().setContextClassLoader(cl);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (LOG) &#123;</div><div class=\"line\">            Log.d(TAG, <span class=\"string\">\"patch: patch mClassLoader ok\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125; <span class=\"keyword\">catch</span> (Throwable e) &#123;</div><div class=\"line\">        e.printStackTrace();</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>这里, 从 baseContext （makeApplication 时创建的 ContextImpl）获取到  mPackageInfo （是 LoadedApk 的实例）, 进而 再获取到 mPackageInfo的私有属性 mClassLoader.   拿到 classLoader 了，就可以进行 classLoader 的替换工作了.  </p>\n<h2 id=\"三、Hook实现过程\"><a href=\"#三、Hook实现过程\" class=\"headerlink\" title=\"三、Hook实现过程\"></a>三、Hook实现过程</h2><p>先不直接说怎么做的，我们先看看 这个 mClassLoader 是怎么来的？<br>在 LoadedApk.Java 中，构造方法里：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">mClassLoader = ClassLoader.getSystemClassLoader();</div></pre></td></tr></table></figure></p>\n<p>继续跟进，<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ClassLoader <span class=\"title\">getSystemClassLoader</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> SystemClassLoader.loader;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>其中：SystemClassLoader  是  抽象类ClassLoader 的一个静态类：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SystemClassLoader</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ClassLoader loader = ClassLoader.createSystemClassLoader();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>此时，就看到了熟悉的 PatchClassLoader：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> ClassLoader <span class=\"title\">createSystemClassLoader</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    String classPath = System.getProperty(<span class=\"string\">\"java.class.path\"</span>, <span class=\"string\">\".\"</span>);</div><div class=\"line\">    String librarySearchPath = System.getProperty(<span class=\"string\">\"java.library.path\"</span>, <span class=\"string\">\"\"</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// String[] paths = classPath.split(\":\");</span></div><div class=\"line\">    <span class=\"comment\">// URL[] urls = new URL[paths.length];</span></div><div class=\"line\">    <span class=\"comment\">// for (int i = 0; i &lt; paths.length; i++) &#123;</span></div><div class=\"line\">    <span class=\"comment\">// try &#123;</span></div><div class=\"line\">    <span class=\"comment\">// urls[i] = new URL(\"file://\" + paths[i]);</span></div><div class=\"line\">    <span class=\"comment\">// &#125;</span></div><div class=\"line\">    <span class=\"comment\">// catch (Exception ex) &#123;</span></div><div class=\"line\">    <span class=\"comment\">// ex.printStackTrace();</span></div><div class=\"line\">    <span class=\"comment\">// &#125;</span></div><div class=\"line\">    <span class=\"comment\">// &#125;</span></div><div class=\"line\">    <span class=\"comment\">//</span></div><div class=\"line\">    <span class=\"comment\">// return new java.net.URLClassLoader(urls, null);</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// TODO Make this a java.net.URLClassLoader once we have those?</span></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> PathClassLoader(classPath, librarySearchPath, BootClassLoader.getInstance());</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>我们再次回到 上面的 classLoader 替换步骤中， 那么 RepluginClassLoader  就  替换了  PathClassLoader.  后面的 类加载 过程 就依赖于  RePluginClassLoader 来工作了。<br>其中，oClassLoader 被赋值，就是 原始的 PathClassLoader</p>\n<p>下个阶段：RePluginClassLoader 的 loadClass 过程的更改：</p>\n<p>首先，原始的ClassLoader 的 loadClass 过程：（路径： Android/sdk/platforms/android-25/android.jar!/java/lang/ClassLoader.class）<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">protected</span> Class&lt;?&gt; loadClass(String name, <span class=\"keyword\">boolean</span> resolve)</div><div class=\"line\">    <span class=\"keyword\">throws</span> ClassNotFoundException</div><div class=\"line\">&#123;</div><div class=\"line\">        <span class=\"comment\">// First, check if the class has already been loaded   检查class是否加载过, 加载过则直接 return</span></div><div class=\"line\">        Class c = findLoadedClass(name);</div><div class=\"line\">        <span class=\"keyword\">if</span> (c == <span class=\"keyword\">null</span>) &#123;<span class=\"comment\">// 未加载过，则进行 下面的 加载过程：</span></div><div class=\"line\">            <span class=\"keyword\">long</span> t0 = System.nanoTime();<span class=\"comment\">//  获取 纳秒</span></div><div class=\"line\">            <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                <span class=\"comment\">// 双亲委托，机制进行 class 的 load 工作：</span></div><div class=\"line\">                <span class=\"keyword\">if</span> (parent != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                    c = parent.loadClass(name, <span class=\"keyword\">false</span>);</div><div class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                    c = findBootstrapClassOrNull(name); <span class=\"comment\">// 此方法内部，直接返回 null</span></div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125; <span class=\"keyword\">catch</span> (ClassNotFoundException e) &#123;</div><div class=\"line\">                <span class=\"comment\">// ClassNotFoundException thrown if class not found</span></div><div class=\"line\">                <span class=\"comment\">// from the non-null parent class loader</span></div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">if</span> (c == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                <span class=\"comment\">// If still not found, then invoke findClass in order</span></div><div class=\"line\">                <span class=\"comment\">// to find the class.    如果仍然找不到，就按顺序 查找 class</span></div><div class=\"line\">                <span class=\"keyword\">long</span> t1 = System.nanoTime();</div><div class=\"line\">                c = findClass(name);</div><div class=\"line\"></div><div class=\"line\">                <span class=\"comment\">// this is the defining class loader; record the stats</span></div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> c;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>下面是  RePluginClassLoader 的 实现：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"keyword\">protected</span> Class&lt;?&gt; loadClass(String className, <span class=\"keyword\">boolean</span> resolve) <span class=\"keyword\">throws</span> ClassNotFoundException &#123;</div><div class=\"line\">    <span class=\"comment\">//</span></div><div class=\"line\">    Class&lt;?&gt; c = <span class=\"keyword\">null</span>;</div><div class=\"line\">    c = PMF.loadClass(className, resolve);<span class=\"comment\">// 先去容器中查找并加载预埋的activity 或其他类</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (c != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> c;<span class=\"comment\">// 在 插件中 查找成功，则直接返回</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">//</span></div><div class=\"line\">    <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">        <span class=\"comment\">// 如果没有在 插件 中找到，则使用  mOrig  这个 classLoader 去加载</span></div><div class=\"line\">        <span class=\"comment\">//  mOrig 是谁呢？可以在 PatchClassLoaderUtils 中找到, 发现就是 原始的PathClassLoader，即 apk 刚被 加载的用的 classloader</span></div><div class=\"line\">        <span class=\"comment\">//  mOrig 就是 宿主host 的 classLoader </span></div><div class=\"line\">        c = mOrig.loadClass(className);</div><div class=\"line\">        <span class=\"comment\">// 只有开启“详细日志”才会输出，防止“刷屏”现象</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (LogDebug.LOG &amp;&amp; RePlugin.getConfig().isPrintDetailLog()) &#123;</div><div class=\"line\">            LogDebug.d(TAG, <span class=\"string\">\"loadClass: load other class, cn=\"</span> + className);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> c;</div><div class=\"line\">    &#125; <span class=\"keyword\">catch</span> (Throwable e) &#123;</div><div class=\"line\">        <span class=\"comment\">//</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">//</span></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.loadClass(className, resolve);<span class=\"comment\">// 极端情况，上面的方式全都加载失败，默认使用 BaseDexClassLoader 去加载</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>之后，PmBase 的 loadClass 过程：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">final</span> Class&lt;?&gt; loadClass(String className, <span class=\"keyword\">boolean</span> resolve) &#123;</div><div class=\"line\">    <span class=\"comment\">// 加载Service中介坑位</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (className.startsWith(PluginPitService.class.getName())) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (LOG) &#123;</div><div class=\"line\">            LogDebug.i(TAG, <span class=\"string\">\"loadClass: Loading PitService Class... clz=\"</span> + className);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> PluginPitService.class;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (mContainerActivities.contains(className)) &#123;</div><div class=\"line\">        Class&lt;?&gt; c = mClient.resolveActivityClass(className);</div><div class=\"line\">        <span class=\"keyword\">if</span> (c != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> c;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"comment\">// 输出warn日志便于查看</span></div><div class=\"line\">        <span class=\"comment\">// use DummyActivity orig=</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (LOGR) &#123;</div><div class=\"line\">            LogRelease.w(PLUGIN_TAG, <span class=\"string\">\"p m hlc u d a o \"</span> + className);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> DummyActivity.class;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (mContainerServices.contains(className)) &#123;</div><div class=\"line\">        Class&lt;?&gt; c = loadServiceClass(className);</div><div class=\"line\">        <span class=\"keyword\">if</span> (c != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> c;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"comment\">// 输出warn日志便于查看</span></div><div class=\"line\">        <span class=\"comment\">// use DummyService orig=</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (LOGR) &#123;</div><div class=\"line\">            LogRelease.w(PLUGIN_TAG, <span class=\"string\">\"p m hlc u d s o \"</span> + className);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> DummyService.class;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (mContainerProviders.contains(className)) &#123;</div><div class=\"line\">        Class&lt;?&gt; c = loadProviderClass(className);</div><div class=\"line\">        <span class=\"keyword\">if</span> (c != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> c;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"comment\">// 输出warn日志便于查看</span></div><div class=\"line\">        <span class=\"comment\">// use DummyProvider orig=</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (LOGR) &#123;</div><div class=\"line\">            LogRelease.w(PLUGIN_TAG, <span class=\"string\">\"p m hlc u d p o \"</span> + className);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> DummyProvider.class;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 插件定制表</span></div><div class=\"line\">    DynamicClass dc = mDynamicClasses.get(className);</div><div class=\"line\">    <span class=\"keyword\">if</span> (dc != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">final</span> Context context = RePluginInternal.getAppContext();</div><div class=\"line\">        PluginDesc desc = PluginDesc.get(dc.plugin);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (LOG) &#123;</div><div class=\"line\">            LogDebug.d(<span class=\"string\">\"loadClass\"</span>, <span class=\"string\">\"desc=\"</span> + desc);</div><div class=\"line\">            <span class=\"keyword\">if</span> (desc != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                LogDebug.d(<span class=\"string\">\"loadClass\"</span>, <span class=\"string\">\"desc.isLarge()=\"</span> + desc.isLarge());</div><div class=\"line\">            &#125;</div><div class=\"line\">            LogDebug.d(<span class=\"string\">\"loadClass\"</span>, <span class=\"string\">\"RePlugin.isPluginDexExtracted(\"</span> + dc.plugin + <span class=\"string\">\") = \"</span> + RePlugin.isPluginDexExtracted(dc.plugin));</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// 加载动态类时，如果其对应的插件未下载，则转到代理类</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (desc != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            String plugin = desc.getPluginName();</div><div class=\"line\">            <span class=\"keyword\">if</span> (PluginTable.getPluginInfo(plugin) == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> (LOG) &#123;</div><div class=\"line\">                    LogDebug.d(<span class=\"string\">\"loadClass\"</span>, <span class=\"string\">\"plugin=\"</span> + plugin + <span class=\"string\">\" not found, return DynamicClassProxyActivity.class\"</span>);</div><div class=\"line\">                &#125;</div><div class=\"line\">                <span class=\"keyword\">return</span> DynamicClassProxyActivity.class;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">/* 加载未安装的大插件时，启动一个过度 Activity */</span></div><div class=\"line\">        <span class=\"comment\">// todo fixme 仅对 activity 类型才弹窗</span></div><div class=\"line\">        <span class=\"keyword\">boolean</span> needStartLoadingActivity = (desc != <span class=\"keyword\">null</span> &amp;&amp; desc.isLarge() &amp;&amp; !RePlugin.isPluginDexExtracted(dc.plugin));</div><div class=\"line\">        <span class=\"keyword\">if</span> (LOG) &#123;</div><div class=\"line\">            LogDebug.d(<span class=\"string\">\"loadClass\"</span>, <span class=\"string\">\"needStartLoadingActivity = \"</span> + needStartLoadingActivity);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">if</span> (needStartLoadingActivity) &#123;</div><div class=\"line\">            Intent intent = <span class=\"keyword\">new</span> Intent();</div><div class=\"line\">            intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);</div><div class=\"line\">            <span class=\"comment\">// fixme 将 PluginLoadingActivity2 移到 replugin 中来，不写死</span></div><div class=\"line\">            intent.setComponent(<span class=\"keyword\">new</span> ComponentName(IPC.getPackageName(), <span class=\"string\">\"com.qihoo360.loader2.updater.PluginLoadingActivity2\"</span>));</div><div class=\"line\">            context.startActivity(intent);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        Plugin p = loadAppPlugin(dc.plugin);</div><div class=\"line\">        <span class=\"keyword\">if</span> (LOG) &#123;</div><div class=\"line\">            LogDebug.d(<span class=\"string\">\"loadClass\"</span>, <span class=\"string\">\"p=\"</span> + p);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">if</span> (p != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                Class&lt;?&gt; cls = p.getClassLoader().loadClass(dc.className);</div><div class=\"line\">                <span class=\"keyword\">if</span> (needStartLoadingActivity) &#123;</div><div class=\"line\">                    <span class=\"comment\">// 发广播给过度 Activity，让其关闭</span></div><div class=\"line\">                    <span class=\"comment\">// fixme 发送给 UI 进程</span></div><div class=\"line\">                    Tasks.postDelayed2Thread(<span class=\"keyword\">new</span> Runnable() &#123;</div><div class=\"line\">                        <span class=\"meta\">@Override</span></div><div class=\"line\">                        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">                            <span class=\"keyword\">if</span> (LOG) &#123;</div><div class=\"line\">                                LogDebug.d(<span class=\"string\">\"loadClass\"</span>, <span class=\"string\">\"发广播，让 PluginLoadingActivity2 消失\"</span>);</div><div class=\"line\">                            &#125;</div><div class=\"line\">                            IPC.sendLocalBroadcast2All(context, <span class=\"keyword\">new</span> Intent(<span class=\"string\">\"com.qihoo360.replugin.load_large_plugin.dismiss_dlg\"</span>));</div><div class=\"line\">                        &#125;</div><div class=\"line\">                    &#125;, <span class=\"number\">300</span>);</div><div class=\"line\">                    <span class=\"comment\">// IPC.sendLocalBroadcast2Process(context, IPC.getPersistentProcessName(), new Intent(\"com.qihoo360.replugin.load_large_plugin.dismiss_dlg\"), )</span></div><div class=\"line\">                &#125;</div><div class=\"line\">                <span class=\"keyword\">return</span> cls;</div><div class=\"line\">            &#125; <span class=\"keyword\">catch</span> (Throwable e) &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> (LOGR) &#123;</div><div class=\"line\">                    LogRelease.w(PLUGIN_TAG, <span class=\"string\">\"p m hlc dc \"</span> + className, e);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (LOG) &#123;</div><div class=\"line\">                LogDebug.d(<span class=\"string\">\"loadClass\"</span>, <span class=\"string\">\"加载 \"</span> + dc.plugin + <span class=\"string\">\" 失败\"</span>);</div><div class=\"line\">            &#125;</div><div class=\"line\">            Tasks.postDelayed2Thread(<span class=\"keyword\">new</span> Runnable() &#123;</div><div class=\"line\">                <span class=\"meta\">@Override</span></div><div class=\"line\">                <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">                    IPC.sendLocalBroadcast2All(context, <span class=\"keyword\">new</span> Intent(<span class=\"string\">\"com.qihoo360.replugin.load_large_plugin.dismiss_dlg\"</span>));</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;, <span class=\"number\">300</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">if</span> (LOGR) &#123;</div><div class=\"line\">            LogRelease.w(PLUGIN_TAG, <span class=\"string\">\"p m hlc dc failed: \"</span> + className + <span class=\"string\">\" t=\"</span> + dc.className + <span class=\"string\">\" tp=\"</span> + dc.classType + <span class=\"string\">\" df=\"</span> + dc.defClass);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"comment\">// return dummy class</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"string\">\"activity\"</span>.equals(dc.classType)) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> DummyActivity.class;</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"string\">\"service\"</span>.equals(dc.classType)) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> DummyService.class;</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"string\">\"provider\"</span>.equals(dc.classType)) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> DummyProvider.class;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> dc.defClass;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//</span></div><div class=\"line\">    <span class=\"keyword\">return</span> loadDefaultClass(className);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"附录\"><a href=\"#附录\" class=\"headerlink\" title=\"附录\"></a>附录</h2><p>相关资料：</p>\n<p><a href=\"http://www.jcodecraeer.com/a/anzhuokaifa/androidkaifa/2014/1223/2205.html\">http://www.jcodecraeer.com/a/anzhuokaifa/androidkaifa/2014/1223/2205.html</a><br><a href=\"http://www.jianshu.com/p/9c96b68f5ee6\">http://www.jianshu.com/p/9c96b68f5ee6</a><br><a href=\"https://github.com/Qihoo360/RePlugin/tree/dev/replugin-host-library\">https://github.com/Qihoo360/RePlugin/tree/dev/replugin-host-library</a><br><a href=\"https://fenglincanyi.github.io/2016/11/17/Android%20%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%88%9D%E6%8E%A2/\">https://fenglincanyi.github.io/2016/11/17/Android%20%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%88%9D%E6%8E%A2/</a></p>\n"},{"title":"注解基础及相关应用","date":"2017-12-02T10:21:00.000Z","_content":"\n### 引子\n作为Java / Android 开发者，我们平时开发中经常用到注解，有的方便了我们开发，动态的添加代码，减少我们的开发量；有的编译时能友好的提示我们，帮我们纠错。\n现在我们就回炉，看看注解相关的问题\n\n### 注解基础\n#### Java 内置注解\nJava 在jdk中，定义了一套注解，我们最常见的有：\n* @Override \n* @Deprecated\n* @SuppressWarnings\n\n这3个就不用多说了，一看都懂。\n那么，他们是分别什么时候起作用呢，这就要说说注解的保留策略了（RetentionPolicy）\n我们来看看源码中是怎么定义的：\n``` java\npublic enum RetentionPolicy {\n    /**\n     * Annotations are to be discarded by the compiler.\n     */\n    SOURCE,\n\n    /**\n     * Annotations are to be recorded in the class file by the compiler\n     * but need not be retained by the VM at run time.  This is the default\n     * behavior.\n     */\n    CLASS,\n\n    /**\n     * Annotations are to be recorded in the class file by the compiler and\n     * retained by the VM at run time, so they may be read reflectively.\n     *\n     * @see java.lang.reflect.AnnotatedElement\n     */\n    RUNTIME\n}\n```\n分别是 源码级、编译时、运行时 三种策略：\n\n| RetentionPolicy      |     含义 |\n| :-------- | --------:|\n| SOURCE    |   仅存在Java源文件，经过编译器后便丢弃相应的注解 |\n| CLASS    |   存在Java源文件，以及经编译器后生成的Class字节码文件，但在运行时VM不再保留注释 |\n| RUNTIME    |   存在源文件、编译生成的Class字节码文件，以及保留在运行时VM中，可通过反射性地读取注解 |\n然后，我们也知道源码级框架是在javac编译源码时,生成框架代码或文件。源码级别框架发生过程是在编译期间，并不会过多影响到运行效率\n\n上面提到的3个最常见的注解，前两个是源码级注解，开发过程中提示我们，后一个是运行时注解，告诉VM忽略警告\n\n#### 元注解\nJava 中的元注解，也就是 注解的注解，有4个：\n* @Retention - 上面提到的保留策略\n* @Documented - 标记这些注解是否包含在用户文档中。\n* @Target - 修饰对象范围：对象、方法。。。\n* @Inherited - 也是一个标记注解，@Inherited阐述了某个被标注的类型是被继承的\n\n我们再看看 @Target, 它的定义里，value元素是一个枚举：\n```java\npublic enum ElementType {\n    /** Class, interface (including annotation type), or enum declaration */\n    TYPE,\n\n    /** Field declaration (includes enum constants) */\n    FIELD,\n\n    /** Method declaration */\n    METHOD,\n\n    /** Formal parameter declaration */\n    PARAMETER,\n\n    /** Constructor declaration */\n    CONSTRUCTOR,\n\n    /** Local variable declaration */\n    LOCAL_VARIABLE,\n\n    /** Annotation type declaration */\n    ANNOTATION_TYPE,\n\n    /** Package declaration */\n    PACKAGE,\n\n    /**\n     * Type parameter declaration\n     *\n     * @since 1.8\n     */\n    TYPE_PARAMETER,\n\n    /**\n     * Use of a type\n     *\n     * @since 1.8\n     */\n    TYPE_USE\n}\n```\n通过这个 @Target, 来标识注解作用在什么类型上\n\n我们在定义一个注解时，就会用到元注解。像jdk提供给我们的注解，也是由他们而来的\n\n### 自定义注解\n在自定义个注解时，会自动继承java.lang.annotation.Annotation接口。\n我们可以看到：\n![](http://7xr1vo.com1.z0.glb.clouddn.com/annotation1.png)\n\n实现一个简单的注解demo：\n```\n@Target({ElementType.TYPE})\n@Retention(RetentionPolicy.RUNTIME)\npublic @interface Setting {\n    String value() default \"\";\n}\n```\n定义起来也比较简单易懂。其中有一些规则，我们要清楚：\n\n注解参数的可支持数据类型：\n\n* 所有基本数据类型（int,float,boolean,byte,double,char,long,short)\n* String类型\n* Class类型\n* enum类型\n* Annotation类型\n* 以上所有类型的数组\n\n定义一个注解的工作就完成了，那谁来读取、处理注解呢，下面就来看看注解处理器\n\n### 注解处理器\nJDK 提供一些相关的api, 如： AnnotatedElement，通过反射也可以获取注解相关的内容，进行一些操作\n#### APT & AnnotationProcessor\nAPT（Annotation Processing Tool）是一个命令行工具，它对源代码文件进行检测找出其中的annotation后，使用annotation processors来处理annotation。\nAPT 也经过了几个版本的迭代，现在也不需要单独运行apt这样的命令行工具，Java编译器本身就可以完成对注解的处理。\n直接继承于javax.annotation.processing.AbstractProcessor进行相应的实现。\n对应Android开发者来说，apt 也被out了，Android Studio Gradle 2.2 版本以上，建议用 AnnotaitionProcessor。Gradle 也支持了annotationProcessor\n#### 自定义AnnotationProcessor\n##### 项目搭建\n1. 建立2个Java Library，分别为：setting_annotation，setting_annotation_processor\n2. setting_annotation 中定义注解，不需要添加特别的依赖库\n3. setting_annotation_processor 中定义自己的的AnnotaitionProcessor，实现下注解处理逻辑。build.gradle中需要添加：\n\n```gradle\nimplementation 'com.google.guava:guava:22.0-android'\nimplementation 'com.squareup:javapoet:1.9.0'// javapoet也要引用到guava\nimplementation 'com.google.auto.service:auto-service:1.0-rc2'\n```\n用于我们后面使用。\n\n4.项目依赖是这样的：\n![](http://7xr1vo.com1.z0.glb.clouddn.com/annotation2.png)\n贴上 具体的配置，不多说了。\napp 的 gradle 配置：\n\n```gradle\nimplementation project(':setting_annotation')\nannotationProcessor project(':setting_annotation_processor')\n```\nsetting_annotation_processor的gradle配置：\n```gradle\nimplementation 'com.google.guava:guava:22.0-android'\nimplementation 'com.squareup:javapoet:1.9.0'// 用于自动生成java代码\nimplementation 'com.google.auto.service:auto-service:1.0-rc2'// 方便注解处理相关配置\nimplementation project(':setting_annotation')\n```\n##### Demo 示例\n我们来实现一个 自动生成 JavaBean 的例子：\n* 注解定义（setting_annotation 中）\n\n```java\n@Target(ElementType.TYPE)\n@Retention(RetentionPolicy.CLASS)\npublic @interface Bean {\n\n    enum AttType {\n        INT, FLOAT, DOUBLE, STRING\n    }\n\n    String clzName() default \"\";\n    String[] attName() default {\"\"};\n    AttType[] typeName() default {STRING};\n}\n```\n* 注解使用（app 中）\n\n```java\n@Bean(clzName = \"PeopleBean\",\n        attName = {\"name\", \"age\", \"sex\"},\n        typeName = {Bean.AttType.STRING, Bean.AttType.INT, Bean.AttType.STRING})\npublic class BeanTest {\n}\n```\n* 注解处理（setting_annotation_processor 中）\n主要实现 AbstractProcessor 的 init()、process()、getSupportedAnnotationTypes()方法\n主要思路，在init()中拿到messager、filer相关的工具类，process()中是真正实现注解处理的地方，这里会使用到javapoet的工具类，方便操作Java代码的生成。getSupportedAnnotationTypes()描述注解处理器需要处理的注解，我们新建一个set添加我们的注解即可。\njavaopet的操作可以查阅 https://github.com/square/javapoet\n完成这些内容后，我们需要配置 processor 在META-INF/services中，我们就不麻烦了，直接用 google 提供的工具类，自动生成，也是一个注解 @AutoService 标记到类上：\n\n```java\n@AutoService(Processor.class)\npublic class SettingProcessor extends AbstractProcessor\n```\n* 验证\n我们 run 起来，首先观察，setting_annotation_processor 这个module下的产物：\n\n![](http://7xr1vo.com1.z0.glb.clouddn.com/annotation3.png)\nMETA-INF下的文件自动生成了\n我们再看看，app module 下：\n![](http://7xr1vo.com1.z0.glb.clouddn.com/annotation4.png) \n![](http://7xr1vo.com1.z0.glb.clouddn.com/annotation5.png)\nPeopleBean 自动生成了。\nOK，大功告成。\n\n    说明：注解处理器是运行它自己的虚拟机JVM中。javac启动一个完整Java虚拟机来运行注解处理器。\n    所以可以使用任何你在其他java应用中使用的东西。可以使用 guava 中的方便的api，处理注解操作\n\n那么类自动生成了，那我们就可以动态的在代码中 去加载，应用了。ButterKnife 不就是这种思路吗？\n\n### 如何debug注解处理器\n前面介绍了大部分过程，再讲一个小技巧，debug注解处理器。\n开发过程中少了debug，岂不是很麻烦了，光靠打日志比较浪费时间。Annotation Processor  debug 起来还是有点特殊的。\n#### 配置远程调试\n![](http://7xr1vo.com1.z0.glb.clouddn.com/annotation6.png)\n![](http://7xr1vo.com1.z0.glb.clouddn.com/annotation7.png)\n#### 配置gradle.properties\n```gradle\norg.gradle.daemon=true\norg.gradle.jvmargs=-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=5005\n```\n#### 开启守护进程\n![](http://7xr1vo.com1.z0.glb.clouddn.com/annotation8.png)\n#### 开始debug\n1. 执行一次 clean project（每次debug前，clean下项目）\n2. 打断点，并点击debug按钮\n![](http://7xr1vo.com1.z0.glb.clouddn.com/annotation9.png)\n\n3. 最后，make或者rebuild下，就可以进入 debug 状态了\n\n![](http://7xr1vo.com1.z0.glb.clouddn.com/annotation10.png)\n\n\n    注意：如果守护task 执行失败，建议重启 stuido 试试\n\n### 附录\nDemo地址：\nhttps://github.com/fenglincanyi/AndroidProject/tree/master/AnnoationProcessorDemo\n\nAndroid 注解库：\nhttp://mp.weixin.qq.com/s?__biz=MzI0MjE3OTYwMg==&mid=2649548684&idx=1&sn=e2c0b5bd10552beb6a8af59a350e268d&chksm=f1180cf1c66f85e77eaae2729da5d550af6b068143c851dd9d8e09014cf8de0d8e01472c9873&mpshare=1&scene=23&srcid=0314lppg3Lze1sjX40feRMOD%23rd\n\n注解：\nhttp://linbinghe.com/2017/ac8515d0.html\n\n注解处理器：\nhttps://medium.com/@iammert/annotation-processing-dont-repeat-yourself-generate-your-code-8425e60c6657\nhttps://gist.github.com/iammert/c9da4150a5b5faa4b7bd8fe7915d6e6b\nhttps://www.race604.com/annotation-processing/\n\njavaPoet:\nhttps://juejin.im/entry/58fefebf8d6d810058a610de\nhttps://xsfelvis.github.io/2016/11/06/%E7%BC%96%E8%AF%91%E6%9C%9F%E6%B3%A8%E8%A7%A3%E4%B9%8BJavaPoet/\n\nDebug annoation processor\nhttp://www.jianshu.com/p/80a14bc35000","source":"_posts/注解基础及相关应用.md","raw":"---\ntitle: 注解基础及相关应用\ndate: 2017-12-2 18:21\ncategories: Android\ntags: 注解\n---\n\n### 引子\n作为Java / Android 开发者，我们平时开发中经常用到注解，有的方便了我们开发，动态的添加代码，减少我们的开发量；有的编译时能友好的提示我们，帮我们纠错。\n现在我们就回炉，看看注解相关的问题\n\n### 注解基础\n#### Java 内置注解\nJava 在jdk中，定义了一套注解，我们最常见的有：\n* @Override \n* @Deprecated\n* @SuppressWarnings\n\n这3个就不用多说了，一看都懂。\n那么，他们是分别什么时候起作用呢，这就要说说注解的保留策略了（RetentionPolicy）\n我们来看看源码中是怎么定义的：\n``` java\npublic enum RetentionPolicy {\n    /**\n     * Annotations are to be discarded by the compiler.\n     */\n    SOURCE,\n\n    /**\n     * Annotations are to be recorded in the class file by the compiler\n     * but need not be retained by the VM at run time.  This is the default\n     * behavior.\n     */\n    CLASS,\n\n    /**\n     * Annotations are to be recorded in the class file by the compiler and\n     * retained by the VM at run time, so they may be read reflectively.\n     *\n     * @see java.lang.reflect.AnnotatedElement\n     */\n    RUNTIME\n}\n```\n分别是 源码级、编译时、运行时 三种策略：\n\n| RetentionPolicy      |     含义 |\n| :-------- | --------:|\n| SOURCE    |   仅存在Java源文件，经过编译器后便丢弃相应的注解 |\n| CLASS    |   存在Java源文件，以及经编译器后生成的Class字节码文件，但在运行时VM不再保留注释 |\n| RUNTIME    |   存在源文件、编译生成的Class字节码文件，以及保留在运行时VM中，可通过反射性地读取注解 |\n然后，我们也知道源码级框架是在javac编译源码时,生成框架代码或文件。源码级别框架发生过程是在编译期间，并不会过多影响到运行效率\n\n上面提到的3个最常见的注解，前两个是源码级注解，开发过程中提示我们，后一个是运行时注解，告诉VM忽略警告\n\n#### 元注解\nJava 中的元注解，也就是 注解的注解，有4个：\n* @Retention - 上面提到的保留策略\n* @Documented - 标记这些注解是否包含在用户文档中。\n* @Target - 修饰对象范围：对象、方法。。。\n* @Inherited - 也是一个标记注解，@Inherited阐述了某个被标注的类型是被继承的\n\n我们再看看 @Target, 它的定义里，value元素是一个枚举：\n```java\npublic enum ElementType {\n    /** Class, interface (including annotation type), or enum declaration */\n    TYPE,\n\n    /** Field declaration (includes enum constants) */\n    FIELD,\n\n    /** Method declaration */\n    METHOD,\n\n    /** Formal parameter declaration */\n    PARAMETER,\n\n    /** Constructor declaration */\n    CONSTRUCTOR,\n\n    /** Local variable declaration */\n    LOCAL_VARIABLE,\n\n    /** Annotation type declaration */\n    ANNOTATION_TYPE,\n\n    /** Package declaration */\n    PACKAGE,\n\n    /**\n     * Type parameter declaration\n     *\n     * @since 1.8\n     */\n    TYPE_PARAMETER,\n\n    /**\n     * Use of a type\n     *\n     * @since 1.8\n     */\n    TYPE_USE\n}\n```\n通过这个 @Target, 来标识注解作用在什么类型上\n\n我们在定义一个注解时，就会用到元注解。像jdk提供给我们的注解，也是由他们而来的\n\n### 自定义注解\n在自定义个注解时，会自动继承java.lang.annotation.Annotation接口。\n我们可以看到：\n![](http://7xr1vo.com1.z0.glb.clouddn.com/annotation1.png)\n\n实现一个简单的注解demo：\n```\n@Target({ElementType.TYPE})\n@Retention(RetentionPolicy.RUNTIME)\npublic @interface Setting {\n    String value() default \"\";\n}\n```\n定义起来也比较简单易懂。其中有一些规则，我们要清楚：\n\n注解参数的可支持数据类型：\n\n* 所有基本数据类型（int,float,boolean,byte,double,char,long,short)\n* String类型\n* Class类型\n* enum类型\n* Annotation类型\n* 以上所有类型的数组\n\n定义一个注解的工作就完成了，那谁来读取、处理注解呢，下面就来看看注解处理器\n\n### 注解处理器\nJDK 提供一些相关的api, 如： AnnotatedElement，通过反射也可以获取注解相关的内容，进行一些操作\n#### APT & AnnotationProcessor\nAPT（Annotation Processing Tool）是一个命令行工具，它对源代码文件进行检测找出其中的annotation后，使用annotation processors来处理annotation。\nAPT 也经过了几个版本的迭代，现在也不需要单独运行apt这样的命令行工具，Java编译器本身就可以完成对注解的处理。\n直接继承于javax.annotation.processing.AbstractProcessor进行相应的实现。\n对应Android开发者来说，apt 也被out了，Android Studio Gradle 2.2 版本以上，建议用 AnnotaitionProcessor。Gradle 也支持了annotationProcessor\n#### 自定义AnnotationProcessor\n##### 项目搭建\n1. 建立2个Java Library，分别为：setting_annotation，setting_annotation_processor\n2. setting_annotation 中定义注解，不需要添加特别的依赖库\n3. setting_annotation_processor 中定义自己的的AnnotaitionProcessor，实现下注解处理逻辑。build.gradle中需要添加：\n\n```gradle\nimplementation 'com.google.guava:guava:22.0-android'\nimplementation 'com.squareup:javapoet:1.9.0'// javapoet也要引用到guava\nimplementation 'com.google.auto.service:auto-service:1.0-rc2'\n```\n用于我们后面使用。\n\n4.项目依赖是这样的：\n![](http://7xr1vo.com1.z0.glb.clouddn.com/annotation2.png)\n贴上 具体的配置，不多说了。\napp 的 gradle 配置：\n\n```gradle\nimplementation project(':setting_annotation')\nannotationProcessor project(':setting_annotation_processor')\n```\nsetting_annotation_processor的gradle配置：\n```gradle\nimplementation 'com.google.guava:guava:22.0-android'\nimplementation 'com.squareup:javapoet:1.9.0'// 用于自动生成java代码\nimplementation 'com.google.auto.service:auto-service:1.0-rc2'// 方便注解处理相关配置\nimplementation project(':setting_annotation')\n```\n##### Demo 示例\n我们来实现一个 自动生成 JavaBean 的例子：\n* 注解定义（setting_annotation 中）\n\n```java\n@Target(ElementType.TYPE)\n@Retention(RetentionPolicy.CLASS)\npublic @interface Bean {\n\n    enum AttType {\n        INT, FLOAT, DOUBLE, STRING\n    }\n\n    String clzName() default \"\";\n    String[] attName() default {\"\"};\n    AttType[] typeName() default {STRING};\n}\n```\n* 注解使用（app 中）\n\n```java\n@Bean(clzName = \"PeopleBean\",\n        attName = {\"name\", \"age\", \"sex\"},\n        typeName = {Bean.AttType.STRING, Bean.AttType.INT, Bean.AttType.STRING})\npublic class BeanTest {\n}\n```\n* 注解处理（setting_annotation_processor 中）\n主要实现 AbstractProcessor 的 init()、process()、getSupportedAnnotationTypes()方法\n主要思路，在init()中拿到messager、filer相关的工具类，process()中是真正实现注解处理的地方，这里会使用到javapoet的工具类，方便操作Java代码的生成。getSupportedAnnotationTypes()描述注解处理器需要处理的注解，我们新建一个set添加我们的注解即可。\njavaopet的操作可以查阅 https://github.com/square/javapoet\n完成这些内容后，我们需要配置 processor 在META-INF/services中，我们就不麻烦了，直接用 google 提供的工具类，自动生成，也是一个注解 @AutoService 标记到类上：\n\n```java\n@AutoService(Processor.class)\npublic class SettingProcessor extends AbstractProcessor\n```\n* 验证\n我们 run 起来，首先观察，setting_annotation_processor 这个module下的产物：\n\n![](http://7xr1vo.com1.z0.glb.clouddn.com/annotation3.png)\nMETA-INF下的文件自动生成了\n我们再看看，app module 下：\n![](http://7xr1vo.com1.z0.glb.clouddn.com/annotation4.png) \n![](http://7xr1vo.com1.z0.glb.clouddn.com/annotation5.png)\nPeopleBean 自动生成了。\nOK，大功告成。\n\n    说明：注解处理器是运行它自己的虚拟机JVM中。javac启动一个完整Java虚拟机来运行注解处理器。\n    所以可以使用任何你在其他java应用中使用的东西。可以使用 guava 中的方便的api，处理注解操作\n\n那么类自动生成了，那我们就可以动态的在代码中 去加载，应用了。ButterKnife 不就是这种思路吗？\n\n### 如何debug注解处理器\n前面介绍了大部分过程，再讲一个小技巧，debug注解处理器。\n开发过程中少了debug，岂不是很麻烦了，光靠打日志比较浪费时间。Annotation Processor  debug 起来还是有点特殊的。\n#### 配置远程调试\n![](http://7xr1vo.com1.z0.glb.clouddn.com/annotation6.png)\n![](http://7xr1vo.com1.z0.glb.clouddn.com/annotation7.png)\n#### 配置gradle.properties\n```gradle\norg.gradle.daemon=true\norg.gradle.jvmargs=-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=5005\n```\n#### 开启守护进程\n![](http://7xr1vo.com1.z0.glb.clouddn.com/annotation8.png)\n#### 开始debug\n1. 执行一次 clean project（每次debug前，clean下项目）\n2. 打断点，并点击debug按钮\n![](http://7xr1vo.com1.z0.glb.clouddn.com/annotation9.png)\n\n3. 最后，make或者rebuild下，就可以进入 debug 状态了\n\n![](http://7xr1vo.com1.z0.glb.clouddn.com/annotation10.png)\n\n\n    注意：如果守护task 执行失败，建议重启 stuido 试试\n\n### 附录\nDemo地址：\nhttps://github.com/fenglincanyi/AndroidProject/tree/master/AnnoationProcessorDemo\n\nAndroid 注解库：\nhttp://mp.weixin.qq.com/s?__biz=MzI0MjE3OTYwMg==&mid=2649548684&idx=1&sn=e2c0b5bd10552beb6a8af59a350e268d&chksm=f1180cf1c66f85e77eaae2729da5d550af6b068143c851dd9d8e09014cf8de0d8e01472c9873&mpshare=1&scene=23&srcid=0314lppg3Lze1sjX40feRMOD%23rd\n\n注解：\nhttp://linbinghe.com/2017/ac8515d0.html\n\n注解处理器：\nhttps://medium.com/@iammert/annotation-processing-dont-repeat-yourself-generate-your-code-8425e60c6657\nhttps://gist.github.com/iammert/c9da4150a5b5faa4b7bd8fe7915d6e6b\nhttps://www.race604.com/annotation-processing/\n\njavaPoet:\nhttps://juejin.im/entry/58fefebf8d6d810058a610de\nhttps://xsfelvis.github.io/2016/11/06/%E7%BC%96%E8%AF%91%E6%9C%9F%E6%B3%A8%E8%A7%A3%E4%B9%8BJavaPoet/\n\nDebug annoation processor\nhttp://www.jianshu.com/p/80a14bc35000","slug":"注解基础及相关应用","published":1,"updated":"2017-12-06T16:47:37.324Z","_id":"cjav9njxt0000n9nts7d17hq9","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"引子\"><a href=\"#引子\" class=\"headerlink\" title=\"引子\"></a>引子</h3><p>作为Java / Android 开发者，我们平时开发中经常用到注解，有的方便了我们开发，动态的添加代码，减少我们的开发量；有的编译时能友好的提示我们，帮我们纠错。<br>现在我们就回炉，看看注解相关的问题</p>\n<h3 id=\"注解基础\"><a href=\"#注解基础\" class=\"headerlink\" title=\"注解基础\"></a>注解基础</h3><h4 id=\"Java-内置注解\"><a href=\"#Java-内置注解\" class=\"headerlink\" title=\"Java 内置注解\"></a>Java 内置注解</h4><p>Java 在jdk中，定义了一套注解，我们最常见的有：</p>\n<ul>\n<li>@Override </li>\n<li>@Deprecated</li>\n<li>@SuppressWarnings</li>\n</ul>\n<p>这3个就不用多说了，一看都懂。<br>那么，他们是分别什么时候起作用呢，这就要说说注解的保留策略了（RetentionPolicy）<br>我们来看看源码中是怎么定义的：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">enum</span> RetentionPolicy &#123;</div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * Annotations are to be discarded by the compiler.</div><div class=\"line\">     */</div><div class=\"line\">    SOURCE,</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * Annotations are to be recorded in the class file by the compiler</div><div class=\"line\">     * but need not be retained by the VM at run time.  This is the default</div><div class=\"line\">     * behavior.</div><div class=\"line\">     */</div><div class=\"line\">    CLASS,</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * Annotations are to be recorded in the class file by the compiler and</div><div class=\"line\">     * retained by the VM at run time, so they may be read reflectively.</div><div class=\"line\">     *</div><div class=\"line\">     * <span class=\"doctag\">@see</span> java.lang.reflect.AnnotatedElement</div><div class=\"line\">     */</div><div class=\"line\">    RUNTIME</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>分别是 源码级、编译时、运行时 三种策略：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">RetentionPolicy</th>\n<th style=\"text-align:right\">含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">SOURCE</td>\n<td style=\"text-align:right\">仅存在Java源文件，经过编译器后便丢弃相应的注解</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">CLASS</td>\n<td style=\"text-align:right\">存在Java源文件，以及经编译器后生成的Class字节码文件，但在运行时VM不再保留注释</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">RUNTIME</td>\n<td style=\"text-align:right\">存在源文件、编译生成的Class字节码文件，以及保留在运行时VM中，可通过反射性地读取注解</td>\n</tr>\n</tbody>\n</table>\n<p>然后，我们也知道源码级框架是在javac编译源码时,生成框架代码或文件。源码级别框架发生过程是在编译期间，并不会过多影响到运行效率</p>\n<p>上面提到的3个最常见的注解，前两个是源码级注解，开发过程中提示我们，后一个是运行时注解，告诉VM忽略警告</p>\n<h4 id=\"元注解\"><a href=\"#元注解\" class=\"headerlink\" title=\"元注解\"></a>元注解</h4><p>Java 中的元注解，也就是 注解的注解，有4个：</p>\n<ul>\n<li>@Retention - 上面提到的保留策略</li>\n<li>@Documented - 标记这些注解是否包含在用户文档中。</li>\n<li>@Target - 修饰对象范围：对象、方法。。。</li>\n<li>@Inherited - 也是一个标记注解，@Inherited阐述了某个被标注的类型是被继承的</li>\n</ul>\n<p>我们再看看 @Target, 它的定义里，value元素是一个枚举：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">enum</span> ElementType &#123;</div><div class=\"line\">    <span class=\"comment\">/** Class, interface (including annotation type), or enum declaration */</span></div><div class=\"line\">    TYPE,</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/** Field declaration (includes enum constants) */</span></div><div class=\"line\">    FIELD,</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/** Method declaration */</span></div><div class=\"line\">    METHOD,</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/** Formal parameter declaration */</span></div><div class=\"line\">    PARAMETER,</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/** Constructor declaration */</span></div><div class=\"line\">    CONSTRUCTOR,</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/** Local variable declaration */</span></div><div class=\"line\">    LOCAL_VARIABLE,</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/** Annotation type declaration */</span></div><div class=\"line\">    ANNOTATION_TYPE,</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/** Package declaration */</span></div><div class=\"line\">    PACKAGE,</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * Type parameter declaration</div><div class=\"line\">     *</div><div class=\"line\">     * <span class=\"doctag\">@since</span> 1.8</div><div class=\"line\">     */</div><div class=\"line\">    TYPE_PARAMETER,</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * Use of a type</div><div class=\"line\">     *</div><div class=\"line\">     * <span class=\"doctag\">@since</span> 1.8</div><div class=\"line\">     */</div><div class=\"line\">    TYPE_USE</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>通过这个 @Target, 来标识注解作用在什么类型上</p>\n<p>我们在定义一个注解时，就会用到元注解。像jdk提供给我们的注解，也是由他们而来的</p>\n<h3 id=\"自定义注解\"><a href=\"#自定义注解\" class=\"headerlink\" title=\"自定义注解\"></a>自定义注解</h3><p>在自定义个注解时，会自动继承java.lang.annotation.Annotation接口。<br>我们可以看到：<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/annotation1.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure></p>\n<p>实现一个简单的注解demo：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">@Target(&#123;ElementType.TYPE&#125;)</div><div class=\"line\">@Retention(RetentionPolicy.RUNTIME)</div><div class=\"line\">public @interface Setting &#123;</div><div class=\"line\">    String value() default &quot;&quot;;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>定义起来也比较简单易懂。其中有一些规则，我们要清楚：</p>\n<p>注解参数的可支持数据类型：</p>\n<ul>\n<li>所有基本数据类型（int,float,boolean,byte,double,char,long,short)</li>\n<li>String类型</li>\n<li>Class类型</li>\n<li>enum类型</li>\n<li>Annotation类型</li>\n<li>以上所有类型的数组</li>\n</ul>\n<p>定义一个注解的工作就完成了，那谁来读取、处理注解呢，下面就来看看注解处理器</p>\n<h3 id=\"注解处理器\"><a href=\"#注解处理器\" class=\"headerlink\" title=\"注解处理器\"></a>注解处理器</h3><p>JDK 提供一些相关的api, 如： AnnotatedElement，通过反射也可以获取注解相关的内容，进行一些操作</p>\n<h4 id=\"APT-amp-AnnotationProcessor\"><a href=\"#APT-amp-AnnotationProcessor\" class=\"headerlink\" title=\"APT &amp; AnnotationProcessor\"></a>APT &amp; AnnotationProcessor</h4><p>APT（Annotation Processing Tool）是一个命令行工具，它对源代码文件进行检测找出其中的annotation后，使用annotation processors来处理annotation。<br>APT 也经过了几个版本的迭代，现在也不需要单独运行apt这样的命令行工具，Java编译器本身就可以完成对注解的处理。<br>直接继承于javax.annotation.processing.AbstractProcessor进行相应的实现。<br>对应Android开发者来说，apt 也被out了，Android Studio Gradle 2.2 版本以上，建议用 AnnotaitionProcessor。Gradle 也支持了annotationProcessor</p>\n<h4 id=\"自定义AnnotationProcessor\"><a href=\"#自定义AnnotationProcessor\" class=\"headerlink\" title=\"自定义AnnotationProcessor\"></a>自定义AnnotationProcessor</h4><h5 id=\"项目搭建\"><a href=\"#项目搭建\" class=\"headerlink\" title=\"项目搭建\"></a>项目搭建</h5><ol>\n<li>建立2个Java Library，分别为：setting_annotation，setting_annotation_processor</li>\n<li>setting_annotation 中定义注解，不需要添加特别的依赖库</li>\n<li>setting_annotation_processor 中定义自己的的AnnotaitionProcessor，实现下注解处理逻辑。build.gradle中需要添加：</li>\n</ol>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">implementation <span class=\"string\">'com.google.guava:guava:22.0-android'</span></div><div class=\"line\">implementation <span class=\"string\">'com.squareup:javapoet:1.9.0'</span><span class=\"comment\">// javapoet也要引用到guava</span></div><div class=\"line\">implementation <span class=\"string\">'com.google.auto.service:auto-service:1.0-rc2'</span></div></pre></td></tr></table></figure>\n<p>用于我们后面使用。</p>\n<p>4.项目依赖是这样的：<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/annotation2.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure><br>贴上 具体的配置，不多说了。<br>app 的 gradle 配置：</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">implementation <span class=\"keyword\">project</span>(<span class=\"string\">':setting_annotation'</span>)</div><div class=\"line\">annotationProcessor <span class=\"keyword\">project</span>(<span class=\"string\">':setting_annotation_processor'</span>)</div></pre></td></tr></table></figure>\n<p>setting_annotation_processor的gradle配置：<br><figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">implementation <span class=\"string\">'com.google.guava:guava:22.0-android'</span></div><div class=\"line\">implementation <span class=\"string\">'com.squareup:javapoet:1.9.0'</span><span class=\"comment\">// 用于自动生成java代码</span></div><div class=\"line\">implementation <span class=\"string\">'com.google.auto.service:auto-service:1.0-rc2'</span><span class=\"comment\">// 方便注解处理相关配置</span></div><div class=\"line\">implementation <span class=\"keyword\">project</span>(<span class=\"string\">':setting_annotation'</span>)</div></pre></td></tr></table></figure></p>\n<h5 id=\"Demo-示例\"><a href=\"#Demo-示例\" class=\"headerlink\" title=\"Demo 示例\"></a>Demo 示例</h5><p>我们来实现一个 自动生成 JavaBean 的例子：</p>\n<ul>\n<li>注解定义（setting_annotation 中）</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Target</span>(ElementType.TYPE)</div><div class=\"line\"><span class=\"meta\">@Retention</span>(RetentionPolicy.CLASS)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> Bean &#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">enum</span> AttType &#123;</div><div class=\"line\">        INT, FLOAT, DOUBLE, STRING</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\">String <span class=\"title\">clzName</span><span class=\"params\">()</span> <span class=\"keyword\">default</span> \"\"</span>;</div><div class=\"line\">    String[] attName() <span class=\"keyword\">default</span> &#123;<span class=\"string\">\"\"</span>&#125;;</div><div class=\"line\">    AttType[] typeName() <span class=\"keyword\">default</span> &#123;STRING&#125;;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>注解使用（app 中）</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Bean</span>(clzName = <span class=\"string\">\"PeopleBean\"</span>,</div><div class=\"line\">        attName = &#123;<span class=\"string\">\"name\"</span>, <span class=\"string\">\"age\"</span>, <span class=\"string\">\"sex\"</span>&#125;,</div><div class=\"line\">        typeName = &#123;Bean.AttType.STRING, Bean.AttType.INT, Bean.AttType.STRING&#125;)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BeanTest</span> </span>&#123;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>注解处理（setting_annotation_processor 中）<br>主要实现 AbstractProcessor 的 init()、process()、getSupportedAnnotationTypes()方法<br>主要思路，在init()中拿到messager、filer相关的工具类，process()中是真正实现注解处理的地方，这里会使用到javapoet的工具类，方便操作Java代码的生成。getSupportedAnnotationTypes()描述注解处理器需要处理的注解，我们新建一个set添加我们的注解即可。<br>javaopet的操作可以查阅 <a href=\"https://github.com/square/javapoet\" target=\"_blank\" rel=\"external\">https://github.com/square/javapoet</a><br>完成这些内容后，我们需要配置 processor 在META-INF/services中，我们就不麻烦了，直接用 google 提供的工具类，自动生成，也是一个注解 @AutoService 标记到类上：</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@AutoService</span>(Processor.class)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SettingProcessor</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractProcessor</span></span></div></pre></td></tr></table></figure>\n<ul>\n<li>验证<br>我们 run 起来，首先观察，setting_annotation_processor 这个module下的产物：</li>\n</ul>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/annotation3.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>META-INF下的文件自动生成了<br>我们再看看，app module 下：<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/annotation4.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure><br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/annotation5.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure><br>PeopleBean 自动生成了。<br>OK，大功告成。</p>\n<pre><code>说明：注解处理器是运行它自己的虚拟机JVM中。javac启动一个完整Java虚拟机来运行注解处理器。\n所以可以使用任何你在其他java应用中使用的东西。可以使用 guava 中的方便的api，处理注解操作\n</code></pre><p>那么类自动生成了，那我们就可以动态的在代码中 去加载，应用了。ButterKnife 不就是这种思路吗？</p>\n<h3 id=\"如何debug注解处理器\"><a href=\"#如何debug注解处理器\" class=\"headerlink\" title=\"如何debug注解处理器\"></a>如何debug注解处理器</h3><p>前面介绍了大部分过程，再讲一个小技巧，debug注解处理器。<br>开发过程中少了debug，岂不是很麻烦了，光靠打日志比较浪费时间。Annotation Processor  debug 起来还是有点特殊的。</p>\n<h4 id=\"配置远程调试\"><a href=\"#配置远程调试\" class=\"headerlink\" title=\"配置远程调试\"></a>配置远程调试</h4><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/annotation6.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/annotation7.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<h4 id=\"配置gradle-properties\"><a href=\"#配置gradle-properties\" class=\"headerlink\" title=\"配置gradle.properties\"></a>配置gradle.properties</h4><figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">org.gradle.daemon=<span class=\"keyword\">true</span></div><div class=\"line\">org.gradle.jvmargs=-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=<span class=\"number\">5005</span></div></pre></td></tr></table></figure>\n<h4 id=\"开启守护进程\"><a href=\"#开启守护进程\" class=\"headerlink\" title=\"开启守护进程\"></a>开启守护进程</h4><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/annotation8.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<h4 id=\"开始debug\"><a href=\"#开始debug\" class=\"headerlink\" title=\"开始debug\"></a>开始debug</h4><ol>\n<li>执行一次 clean project（每次debug前，clean下项目）</li>\n<li><p>打断点，并点击debug按钮</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/annotation9.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n</li>\n<li><p>最后，make或者rebuild下，就可以进入 debug 状态了</p>\n</li>\n</ol>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/annotation10.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<pre><code>注意：如果守护task 执行失败，建议重启 stuido 试试\n</code></pre><h3 id=\"附录\"><a href=\"#附录\" class=\"headerlink\" title=\"附录\"></a>附录</h3><p>Demo地址：<br><a href=\"https://github.com/fenglincanyi/AndroidProject/tree/master/AnnoationProcessorDemo\" target=\"_blank\" rel=\"external\">https://github.com/fenglincanyi/AndroidProject/tree/master/AnnoationProcessorDemo</a></p>\n<p>Android 注解库：<br><a href=\"http://mp.weixin.qq.com/s?__biz=MzI0MjE3OTYwMg==&amp;mid=2649548684&amp;idx=1&amp;sn=e2c0b5bd10552beb6a8af59a350e268d&amp;chksm=f1180cf1c66f85e77eaae2729da5d550af6b068143c851dd9d8e09014cf8de0d8e01472c9873&amp;mpshare=1&amp;scene=23&amp;srcid=0314lppg3Lze1sjX40feRMOD%23rd\" target=\"_blank\" rel=\"external\">http://mp.weixin.qq.com/s?__biz=MzI0MjE3OTYwMg==&amp;mid=2649548684&amp;idx=1&amp;sn=e2c0b5bd10552beb6a8af59a350e268d&amp;chksm=f1180cf1c66f85e77eaae2729da5d550af6b068143c851dd9d8e09014cf8de0d8e01472c9873&amp;mpshare=1&amp;scene=23&amp;srcid=0314lppg3Lze1sjX40feRMOD%23rd</a></p>\n<p>注解：<br><a href=\"http://linbinghe.com/2017/ac8515d0.html\" target=\"_blank\" rel=\"external\">http://linbinghe.com/2017/ac8515d0.html</a></p>\n<p>注解处理器：<br><a href=\"https://medium.com/@iammert/annotation-processing-dont-repeat-yourself-generate-your-code-8425e60c6657\" target=\"_blank\" rel=\"external\">https://medium.com/@iammert/annotation-processing-dont-repeat-yourself-generate-your-code-8425e60c6657</a><br><a href=\"https://gist.github.com/iammert/c9da4150a5b5faa4b7bd8fe7915d6e6b\" target=\"_blank\" rel=\"external\">https://gist.github.com/iammert/c9da4150a5b5faa4b7bd8fe7915d6e6b</a><br><a href=\"https://www.race604.com/annotation-processing/\" target=\"_blank\" rel=\"external\">https://www.race604.com/annotation-processing/</a></p>\n<p>javaPoet:<br><a href=\"https://juejin.im/entry/58fefebf8d6d810058a610de\" target=\"_blank\" rel=\"external\">https://juejin.im/entry/58fefebf8d6d810058a610de</a><br><a href=\"https://xsfelvis.github.io/2016/11/06/%E7%BC%96%E8%AF%91%E6%9C%9F%E6%B3%A8%E8%A7%A3%E4%B9%8BJavaPoet/\" target=\"_blank\" rel=\"external\">https://xsfelvis.github.io/2016/11/06/%E7%BC%96%E8%AF%91%E6%9C%9F%E6%B3%A8%E8%A7%A3%E4%B9%8BJavaPoet/</a></p>\n<p>Debug annoation processor<br><a href=\"http://www.jianshu.com/p/80a14bc35000\" target=\"_blank\" rel=\"external\">http://www.jianshu.com/p/80a14bc35000</a></p>\n","excerpt":"","more":"<h3 id=\"引子\"><a href=\"#引子\" class=\"headerlink\" title=\"引子\"></a>引子</h3><p>作为Java / Android 开发者，我们平时开发中经常用到注解，有的方便了我们开发，动态的添加代码，减少我们的开发量；有的编译时能友好的提示我们，帮我们纠错。<br>现在我们就回炉，看看注解相关的问题</p>\n<h3 id=\"注解基础\"><a href=\"#注解基础\" class=\"headerlink\" title=\"注解基础\"></a>注解基础</h3><h4 id=\"Java-内置注解\"><a href=\"#Java-内置注解\" class=\"headerlink\" title=\"Java 内置注解\"></a>Java 内置注解</h4><p>Java 在jdk中，定义了一套注解，我们最常见的有：</p>\n<ul>\n<li>@Override </li>\n<li>@Deprecated</li>\n<li>@SuppressWarnings</li>\n</ul>\n<p>这3个就不用多说了，一看都懂。<br>那么，他们是分别什么时候起作用呢，这就要说说注解的保留策略了（RetentionPolicy）<br>我们来看看源码中是怎么定义的：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">enum</span> RetentionPolicy &#123;</div><div class=\"line\">    <span class=\"comment\">/**</div><div class=\"line\">     * Annotations are to be discarded by the compiler.</div><div class=\"line\">     */</span></div><div class=\"line\">    SOURCE,</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</div><div class=\"line\">     * Annotations are to be recorded in the class file by the compiler</div><div class=\"line\">     * but need not be retained by the VM at run time.  This is the default</div><div class=\"line\">     * behavior.</div><div class=\"line\">     */</span></div><div class=\"line\">    CLASS,</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</div><div class=\"line\">     * Annotations are to be recorded in the class file by the compiler and</div><div class=\"line\">     * retained by the VM at run time, so they may be read reflectively.</div><div class=\"line\">     *</div><div class=\"line\">     * <span class=\"doctag\">@see</span> java.lang.reflect.AnnotatedElement</div><div class=\"line\">     */</span></div><div class=\"line\">    RUNTIME</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>分别是 源码级、编译时、运行时 三种策略：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">RetentionPolicy</th>\n<th style=\"text-align:right\">含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">SOURCE</td>\n<td style=\"text-align:right\">仅存在Java源文件，经过编译器后便丢弃相应的注解</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">CLASS</td>\n<td style=\"text-align:right\">存在Java源文件，以及经编译器后生成的Class字节码文件，但在运行时VM不再保留注释</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">RUNTIME</td>\n<td style=\"text-align:right\">存在源文件、编译生成的Class字节码文件，以及保留在运行时VM中，可通过反射性地读取注解</td>\n</tr>\n</tbody>\n</table>\n<p>然后，我们也知道源码级框架是在javac编译源码时,生成框架代码或文件。源码级别框架发生过程是在编译期间，并不会过多影响到运行效率</p>\n<p>上面提到的3个最常见的注解，前两个是源码级注解，开发过程中提示我们，后一个是运行时注解，告诉VM忽略警告</p>\n<h4 id=\"元注解\"><a href=\"#元注解\" class=\"headerlink\" title=\"元注解\"></a>元注解</h4><p>Java 中的元注解，也就是 注解的注解，有4个：</p>\n<ul>\n<li>@Retention - 上面提到的保留策略</li>\n<li>@Documented - 标记这些注解是否包含在用户文档中。</li>\n<li>@Target - 修饰对象范围：对象、方法。。。</li>\n<li>@Inherited - 也是一个标记注解，@Inherited阐述了某个被标注的类型是被继承的</li>\n</ul>\n<p>我们再看看 @Target, 它的定义里，value元素是一个枚举：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">enum</span> ElementType &#123;</div><div class=\"line\">    <span class=\"comment\">/** Class, interface (including annotation type), or enum declaration */</span></div><div class=\"line\">    TYPE,</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/** Field declaration (includes enum constants) */</span></div><div class=\"line\">    FIELD,</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/** Method declaration */</span></div><div class=\"line\">    METHOD,</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/** Formal parameter declaration */</span></div><div class=\"line\">    PARAMETER,</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/** Constructor declaration */</span></div><div class=\"line\">    CONSTRUCTOR,</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/** Local variable declaration */</span></div><div class=\"line\">    LOCAL_VARIABLE,</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/** Annotation type declaration */</span></div><div class=\"line\">    ANNOTATION_TYPE,</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/** Package declaration */</span></div><div class=\"line\">    PACKAGE,</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</div><div class=\"line\">     * Type parameter declaration</div><div class=\"line\">     *</div><div class=\"line\">     * <span class=\"doctag\">@since</span> 1.8</div><div class=\"line\">     */</span></div><div class=\"line\">    TYPE_PARAMETER,</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</div><div class=\"line\">     * Use of a type</div><div class=\"line\">     *</div><div class=\"line\">     * <span class=\"doctag\">@since</span> 1.8</div><div class=\"line\">     */</span></div><div class=\"line\">    TYPE_USE</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>通过这个 @Target, 来标识注解作用在什么类型上</p>\n<p>我们在定义一个注解时，就会用到元注解。像jdk提供给我们的注解，也是由他们而来的</p>\n<h3 id=\"自定义注解\"><a href=\"#自定义注解\" class=\"headerlink\" title=\"自定义注解\"></a>自定义注解</h3><p>在自定义个注解时，会自动继承java.lang.annotation.Annotation接口。<br>我们可以看到：<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/annotation1.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure></p>\n<p>实现一个简单的注解demo：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">@Target(&#123;ElementType.TYPE&#125;)</div><div class=\"line\">@Retention(RetentionPolicy.RUNTIME)</div><div class=\"line\">public @interface Setting &#123;</div><div class=\"line\">    String value() default &quot;&quot;;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>定义起来也比较简单易懂。其中有一些规则，我们要清楚：</p>\n<p>注解参数的可支持数据类型：</p>\n<ul>\n<li>所有基本数据类型（int,float,boolean,byte,double,char,long,short)</li>\n<li>String类型</li>\n<li>Class类型</li>\n<li>enum类型</li>\n<li>Annotation类型</li>\n<li>以上所有类型的数组</li>\n</ul>\n<p>定义一个注解的工作就完成了，那谁来读取、处理注解呢，下面就来看看注解处理器</p>\n<h3 id=\"注解处理器\"><a href=\"#注解处理器\" class=\"headerlink\" title=\"注解处理器\"></a>注解处理器</h3><p>JDK 提供一些相关的api, 如： AnnotatedElement，通过反射也可以获取注解相关的内容，进行一些操作</p>\n<h4 id=\"APT-amp-AnnotationProcessor\"><a href=\"#APT-amp-AnnotationProcessor\" class=\"headerlink\" title=\"APT &amp; AnnotationProcessor\"></a>APT &amp; AnnotationProcessor</h4><p>APT（Annotation Processing Tool）是一个命令行工具，它对源代码文件进行检测找出其中的annotation后，使用annotation processors来处理annotation。<br>APT 也经过了几个版本的迭代，现在也不需要单独运行apt这样的命令行工具，Java编译器本身就可以完成对注解的处理。<br>直接继承于javax.annotation.processing.AbstractProcessor进行相应的实现。<br>对应Android开发者来说，apt 也被out了，Android Studio Gradle 2.2 版本以上，建议用 AnnotaitionProcessor。Gradle 也支持了annotationProcessor</p>\n<h4 id=\"自定义AnnotationProcessor\"><a href=\"#自定义AnnotationProcessor\" class=\"headerlink\" title=\"自定义AnnotationProcessor\"></a>自定义AnnotationProcessor</h4><h5 id=\"项目搭建\"><a href=\"#项目搭建\" class=\"headerlink\" title=\"项目搭建\"></a>项目搭建</h5><ol>\n<li>建立2个Java Library，分别为：setting_annotation，setting_annotation_processor</li>\n<li>setting_annotation 中定义注解，不需要添加特别的依赖库</li>\n<li>setting_annotation_processor 中定义自己的的AnnotaitionProcessor，实现下注解处理逻辑。build.gradle中需要添加：</li>\n</ol>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">implementation <span class=\"string\">'com.google.guava:guava:22.0-android'</span></div><div class=\"line\">implementation <span class=\"string\">'com.squareup:javapoet:1.9.0'</span><span class=\"comment\">// javapoet也要引用到guava</span></div><div class=\"line\">implementation <span class=\"string\">'com.google.auto.service:auto-service:1.0-rc2'</span></div></pre></td></tr></table></figure>\n<p>用于我们后面使用。</p>\n<p>4.项目依赖是这样的：<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/annotation2.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure><br>贴上 具体的配置，不多说了。<br>app 的 gradle 配置：</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">implementation <span class=\"keyword\">project</span>(<span class=\"string\">':setting_annotation'</span>)</div><div class=\"line\">annotationProcessor <span class=\"keyword\">project</span>(<span class=\"string\">':setting_annotation_processor'</span>)</div></pre></td></tr></table></figure>\n<p>setting_annotation_processor的gradle配置：<br><figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">implementation <span class=\"string\">'com.google.guava:guava:22.0-android'</span></div><div class=\"line\">implementation <span class=\"string\">'com.squareup:javapoet:1.9.0'</span><span class=\"comment\">// 用于自动生成java代码</span></div><div class=\"line\">implementation <span class=\"string\">'com.google.auto.service:auto-service:1.0-rc2'</span><span class=\"comment\">// 方便注解处理相关配置</span></div><div class=\"line\">implementation <span class=\"keyword\">project</span>(<span class=\"string\">':setting_annotation'</span>)</div></pre></td></tr></table></figure></p>\n<h5 id=\"Demo-示例\"><a href=\"#Demo-示例\" class=\"headerlink\" title=\"Demo 示例\"></a>Demo 示例</h5><p>我们来实现一个 自动生成 JavaBean 的例子：</p>\n<ul>\n<li>注解定义（setting_annotation 中）</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Target</span>(ElementType.TYPE)</div><div class=\"line\"><span class=\"meta\">@Retention</span>(RetentionPolicy.CLASS)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> Bean &#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">enum</span> AttType &#123;</div><div class=\"line\">        INT, FLOAT, DOUBLE, STRING</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\">String <span class=\"title\">clzName</span><span class=\"params\">()</span> <span class=\"keyword\">default</span> \"\"</span>;</div><div class=\"line\">    String[] attName() <span class=\"keyword\">default</span> &#123;<span class=\"string\">\"\"</span>&#125;;</div><div class=\"line\">    AttType[] typeName() <span class=\"keyword\">default</span> &#123;STRING&#125;;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>注解使用（app 中）</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Bean</span>(clzName = <span class=\"string\">\"PeopleBean\"</span>,</div><div class=\"line\">        attName = &#123;<span class=\"string\">\"name\"</span>, <span class=\"string\">\"age\"</span>, <span class=\"string\">\"sex\"</span>&#125;,</div><div class=\"line\">        typeName = &#123;Bean.AttType.STRING, Bean.AttType.INT, Bean.AttType.STRING&#125;)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BeanTest</span> </span>&#123;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>注解处理（setting_annotation_processor 中）<br>主要实现 AbstractProcessor 的 init()、process()、getSupportedAnnotationTypes()方法<br>主要思路，在init()中拿到messager、filer相关的工具类，process()中是真正实现注解处理的地方，这里会使用到javapoet的工具类，方便操作Java代码的生成。getSupportedAnnotationTypes()描述注解处理器需要处理的注解，我们新建一个set添加我们的注解即可。<br>javaopet的操作可以查阅 <a href=\"https://github.com/square/javapoet\">https://github.com/square/javapoet</a><br>完成这些内容后，我们需要配置 processor 在META-INF/services中，我们就不麻烦了，直接用 google 提供的工具类，自动生成，也是一个注解 @AutoService 标记到类上：</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@AutoService</span>(Processor.class)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SettingProcessor</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractProcessor</span></span></div></pre></td></tr></table></figure>\n<ul>\n<li>验证<br>我们 run 起来，首先观察，setting_annotation_processor 这个module下的产物：</li>\n</ul>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/annotation3.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>META-INF下的文件自动生成了<br>我们再看看，app module 下：<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/annotation4.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure><br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/annotation5.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure><br>PeopleBean 自动生成了。<br>OK，大功告成。</p>\n<pre><code>说明：注解处理器是运行它自己的虚拟机JVM中。javac启动一个完整Java虚拟机来运行注解处理器。\n所以可以使用任何你在其他java应用中使用的东西。可以使用 guava 中的方便的api，处理注解操作\n</code></pre><p>那么类自动生成了，那我们就可以动态的在代码中 去加载，应用了。ButterKnife 不就是这种思路吗？</p>\n<h3 id=\"如何debug注解处理器\"><a href=\"#如何debug注解处理器\" class=\"headerlink\" title=\"如何debug注解处理器\"></a>如何debug注解处理器</h3><p>前面介绍了大部分过程，再讲一个小技巧，debug注解处理器。<br>开发过程中少了debug，岂不是很麻烦了，光靠打日志比较浪费时间。Annotation Processor  debug 起来还是有点特殊的。</p>\n<h4 id=\"配置远程调试\"><a href=\"#配置远程调试\" class=\"headerlink\" title=\"配置远程调试\"></a>配置远程调试</h4><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/annotation6.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/annotation7.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<h4 id=\"配置gradle-properties\"><a href=\"#配置gradle-properties\" class=\"headerlink\" title=\"配置gradle.properties\"></a>配置gradle.properties</h4><figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">org.gradle.daemon=<span class=\"keyword\">true</span></div><div class=\"line\">org.gradle.jvmargs=-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=<span class=\"number\">5005</span></div></pre></td></tr></table></figure>\n<h4 id=\"开启守护进程\"><a href=\"#开启守护进程\" class=\"headerlink\" title=\"开启守护进程\"></a>开启守护进程</h4><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/annotation8.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<h4 id=\"开始debug\"><a href=\"#开始debug\" class=\"headerlink\" title=\"开始debug\"></a>开始debug</h4><ol>\n<li>执行一次 clean project（每次debug前，clean下项目）</li>\n<li><p>打断点，并点击debug按钮</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/annotation9.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n</li>\n<li><p>最后，make或者rebuild下，就可以进入 debug 状态了</p>\n</li>\n</ol>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://7xr1vo.com1.z0.glb.clouddn.com/annotation10.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<pre><code>注意：如果守护task 执行失败，建议重启 stuido 试试\n</code></pre><h3 id=\"附录\"><a href=\"#附录\" class=\"headerlink\" title=\"附录\"></a>附录</h3><p>Demo地址：<br><a href=\"https://github.com/fenglincanyi/AndroidProject/tree/master/AnnoationProcessorDemo\">https://github.com/fenglincanyi/AndroidProject/tree/master/AnnoationProcessorDemo</a></p>\n<p>Android 注解库：<br><a href=\"http://mp.weixin.qq.com/s?__biz=MzI0MjE3OTYwMg==&amp;mid=2649548684&amp;idx=1&amp;sn=e2c0b5bd10552beb6a8af59a350e268d&amp;chksm=f1180cf1c66f85e77eaae2729da5d550af6b068143c851dd9d8e09014cf8de0d8e01472c9873&amp;mpshare=1&amp;scene=23&amp;srcid=0314lppg3Lze1sjX40feRMOD%23rd\">http://mp.weixin.qq.com/s?__biz=MzI0MjE3OTYwMg==&amp;mid=2649548684&amp;idx=1&amp;sn=e2c0b5bd10552beb6a8af59a350e268d&amp;chksm=f1180cf1c66f85e77eaae2729da5d550af6b068143c851dd9d8e09014cf8de0d8e01472c9873&amp;mpshare=1&amp;scene=23&amp;srcid=0314lppg3Lze1sjX40feRMOD%23rd</a></p>\n<p>注解：<br><a href=\"http://linbinghe.com/2017/ac8515d0.html\">http://linbinghe.com/2017/ac8515d0.html</a></p>\n<p>注解处理器：<br><a href=\"https://medium.com/@iammert/annotation-processing-dont-repeat-yourself-generate-your-code-8425e60c6657\">https://medium.com/@iammert/annotation-processing-dont-repeat-yourself-generate-your-code-8425e60c6657</a><br><a href=\"https://gist.github.com/iammert/c9da4150a5b5faa4b7bd8fe7915d6e6b\">https://gist.github.com/iammert/c9da4150a5b5faa4b7bd8fe7915d6e6b</a><br><a href=\"https://www.race604.com/annotation-processing/\">https://www.race604.com/annotation-processing/</a></p>\n<p>javaPoet:<br><a href=\"https://juejin.im/entry/58fefebf8d6d810058a610de\">https://juejin.im/entry/58fefebf8d6d810058a610de</a><br><a href=\"https://xsfelvis.github.io/2016/11/06/%E7%BC%96%E8%AF%91%E6%9C%9F%E6%B3%A8%E8%A7%A3%E4%B9%8BJavaPoet/\">https://xsfelvis.github.io/2016/11/06/%E7%BC%96%E8%AF%91%E6%9C%9F%E6%B3%A8%E8%A7%A3%E4%B9%8BJavaPoet/</a></p>\n<p>Debug annoation processor<br><a href=\"http://www.jianshu.com/p/80a14bc35000\">http://www.jianshu.com/p/80a14bc35000</a></p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cizpjnf210006baqw7jyj4sr6","category_id":"cizpjnf1u0003baqwu9end35d","_id":"cizpjnf28000cbaqwxhaxz7zm"},{"post_id":"cizpjnf1o0001baqwev5rauix","category_id":"cizpjnf1u0003baqwu9end35d","_id":"cizpjnf2a000gbaqw2i051ylq"},{"post_id":"cizpjnf220007baqwudes5scm","category_id":"cizpjnf1u0003baqwu9end35d","_id":"cizpjnf2d000ibaqwcfn4upq9"},{"post_id":"cizpjnf25000bbaqw8xs0sjjx","category_id":"cizpjnf1u0003baqwu9end35d","_id":"cizpjnf2g000mbaqwxztz7np4"},{"post_id":"cizpjnf1r0002baqwfqvngvg0","category_id":"cizpjnf1u0003baqwu9end35d","_id":"cizpjnf2h000pbaqwsqjav5b5"},{"post_id":"cizpjnf1x0005baqweniknq6c","category_id":"cizpjnf29000ebaqwp7wo104k","_id":"cizpjnf2k000tbaqwpif9id17"},{"post_id":"cizpjnf29000dbaqwmqknyclb","category_id":"cizpjnf2f000kbaqwgaunj3ht","_id":"cizpjnf2r0010baqw5nc07mg3"},{"post_id":"cizpjnf2j000qbaqw3e2k1jnp","category_id":"cizpjnf1u0003baqwu9end35d","_id":"cizpjnf2t0013baqwnfukuv4m"},{"post_id":"cizpjnf2b000hbaqwt9z0dxad","category_id":"cizpjnf2f000kbaqwgaunj3ht","_id":"cizpjnf2v0015baqw6p9jzga7"},{"post_id":"cizpjnf2d000jbaqwcd3qfdoo","category_id":"cizpjnf2r000zbaqwyaswakfg","_id":"cizpjnf2x001bbaqwv1ar4p0o"},{"post_id":"cizpjnf2k000vbaqwgjr35o93","category_id":"cizpjnf2v0016baqwvxmo7try","_id":"cizpjnf35001ibaqw9lyjlqvc"},{"post_id":"cizpjnf2y001cbaqwfb2vv5ys","category_id":"cizpjnf1u0003baqwu9end35d","_id":"cizpjnf38001mbaqwlykud5ad"},{"post_id":"cizpjnf31001gbaqwxtcssbm5","category_id":"cizpjnf1u0003baqwu9end35d","_id":"cizpjnf3a001obaqww3xeui84"},{"post_id":"cizpjnf2p000ybaqwfy339spg","category_id":"cizpjnf2z001dbaqwy1oiy5ur","_id":"cizpjnf3b001qbaqw2py0cgye"},{"post_id":"cizpjnf2s0011baqw1g6sc6ln","category_id":"cizpjnf2z001dbaqwy1oiy5ur","_id":"cizpjnf3d001tbaqwvttr3odc"},{"post_id":"cizpjnf2u0014baqw2ig4q06b","category_id":"cizpjnf3b001pbaqwvlu71ak3","_id":"cizpjnf3f001xbaqwwdjfwzlv"},{"post_id":"cizpjnf2v0017baqwg39x865m","category_id":"cizpjnf3b001pbaqwvlu71ak3","_id":"cizpjnf3g0021baqwkteh18hx"},{"post_id":"cizpjnf2w0019baqwqzs38hw0","category_id":"cizpjnf3f001ybaqwmt9jh7ub","_id":"cizpjnf3i0025baqw3rn2htuv"},{"post_id":"cizpjnf35001jbaqwtdxmnqqg","category_id":"cizpjnf3g0022baqwuzovgm92","_id":"cizpjnf3i0028baqwwct7gvg7"},{"post_id":"cizweuq2z0000jqqwdyjvohd4","category_id":"cizpjnf2z001dbaqwy1oiy5ur","_id":"cizweuq360002jqqw3nbdz664"},{"post_id":"cizwgny8t00030qqwx7hjdu4p","category_id":"cizpjnf2z001dbaqwy1oiy5ur","_id":"cizwgny8w00050qqw8k5yjo41"},{"post_id":"cizwhdzrr0003f4qwwo0erdlf","category_id":"cizpjnf2z001dbaqwy1oiy5ur","_id":"cizwhdzrt0005f4qwlft37gxb"},{"post_id":"cizwit1hi0003rnqwkkdcv271","category_id":"cizpjnf2z001dbaqwy1oiy5ur","_id":"cizwit1hk0005rnqwmgv9lm1t"},{"post_id":"cizwjz0ba0003uzqwdnwqfv1i","category_id":"cizpjnf2z001dbaqwy1oiy5ur","_id":"cizwjz0bb0005uzqw61kt6iwr"},{"post_id":"cj09j1r880001c1qw4shyo8dw","category_id":"cizpjnf3g0022baqwuzovgm92","_id":"cj09j1r8u0003c1qw3t6yulun"},{"post_id":"cj344z8bd0000t0qwiks9ewpk","category_id":"cizpjnf1u0003baqwu9end35d","_id":"cj344z8c00002t0qwso00h60d"},{"post_id":"cj3perzfs0000gsqwuemozrbw","category_id":"cizpjnf1u0003baqwu9end35d","_id":"cj3perzgf0002gsqwsc9dzmsl"},{"post_id":"cj3pljt1i00049yqwgyhs166u","category_id":"cizpjnf1u0003baqwu9end35d","_id":"cj3pljt1k00069yqw05yujtoo"},{"post_id":"cj6ul19ug00009jqw3jknvag3","category_id":"cj6ul19ur00019jqwo0y58zgb","_id":"cj6ul19vk00049jqw1k6h984f"},{"post_id":"cj74l8riw0000xhqwt5awjp25","category_id":"cizpjnf1u0003baqwu9end35d","_id":"cj74l8rjr0002xhqwp97bmdgi"},{"post_id":"cj74litbb00059oqwpksxawv3","category_id":"cizpjnf1u0003baqwu9end35d","_id":"cj74litbg00079oqwx35nu1w8"},{"post_id":"cjanfw0co0000g8ntzwgfmbc4","category_id":"cjanfw0cr0001g8ntnun8a5df","_id":"cjanfw0ct0004g8ntd3xgkkky"},{"post_id":"cjav9njxt0000n9nts7d17hq9","category_id":"cizpjnf1u0003baqwu9end35d","_id":"cjava78n80000ebntglvzjxi5"}],"PostTag":[{"post_id":"cizpjnf1o0001baqwev5rauix","tag_id":"cizpjnf1x0004baqwss3bh9dj","_id":"cizpjnf25000abaqwiit42uz2"},{"post_id":"cizpjnf1r0002baqwfqvngvg0","tag_id":"cizpjnf230009baqw0p3b93qj","_id":"cizpjnf2h000obaqwdjvlxkfu"},{"post_id":"cizpjnf1r0002baqwfqvngvg0","tag_id":"cizpjnf2a000fbaqwi50j75vs","_id":"cizpjnf2k000rbaqwu8blel3q"},{"post_id":"cizpjnf1x0005baqweniknq6c","tag_id":"cizpjnf2f000lbaqwumzp3wco","_id":"cizpjnf2o000wbaqwg20sslxe"},{"post_id":"cizpjnf210006baqw7jyj4sr6","tag_id":"cizpjnf2k000ubaqwsm7yyczt","_id":"cizpjnf2x001abaqwrnr0w923"},{"post_id":"cizpjnf210006baqw7jyj4sr6","tag_id":"cizpjnf2t0012baqw4l0p0k1p","_id":"cizpjnf2z001ebaqwciufruau"},{"post_id":"cizpjnf220007baqwudes5scm","tag_id":"cizpjnf2w0018baqw3cfv71so","_id":"cizpjnf33001hbaqwwmf0d6oi"},{"post_id":"cizpjnf25000bbaqw8xs0sjjx","tag_id":"cizpjnf2k000ubaqwsm7yyczt","_id":"cizpjnf39001nbaqw38pen08v"},{"post_id":"cizpjnf29000dbaqwmqknyclb","tag_id":"cizpjnf38001lbaqwnrldfh5i","_id":"cizpjnf3c001sbaqwgbswmkca"},{"post_id":"cizpjnf2b000hbaqwt9z0dxad","tag_id":"cizpjnf38001lbaqwnrldfh5i","_id":"cizpjnf3f001wbaqwwo32qbwh"},{"post_id":"cizpjnf2d000jbaqwcd3qfdoo","tag_id":"cizpjnf3d001vbaqwg3gd6f22","_id":"cizpjnf3g0020baqwb1wnxhuh"},{"post_id":"cizpjnf2j000qbaqw3e2k1jnp","tag_id":"cizpjnf3h0023baqwooo2j02f","_id":"cizpjnf3i0027baqwpib33ebb"},{"post_id":"cizpjnf2k000vbaqwgjr35o93","tag_id":"cizpjnf3i0026baqw1vujs49c","_id":"cizpjnf3i002abaqwcwwki3c8"},{"post_id":"cizpjnf2p000ybaqwfy339spg","tag_id":"cizpjnf3i0029baqwa9l13asm","_id":"cizpjnf3j002cbaqwqlwy6b2i"},{"post_id":"cizpjnf2s0011baqw1g6sc6ln","tag_id":"cizpjnf3i0029baqwa9l13asm","_id":"cizpjnf3k002ebaqwfjpwzpge"},{"post_id":"cizpjnf2u0014baqw2ig4q06b","tag_id":"cizpjnf3j002dbaqwxf7k02z5","_id":"cizpjnf3k002hbaqwii6nucto"},{"post_id":"cizpjnf2u0014baqw2ig4q06b","tag_id":"cizpjnf3k002fbaqw856978sw","_id":"cizpjnf3k002ibaqwq2ywghf1"},{"post_id":"cizpjnf2v0017baqwg39x865m","tag_id":"cizpjnf3j002dbaqwxf7k02z5","_id":"cizpjnf3m002lbaqwz9xnfocp"},{"post_id":"cizpjnf2v0017baqwg39x865m","tag_id":"cizpjnf3k002fbaqw856978sw","_id":"cizpjnf3m002mbaqw3q0ba2kh"},{"post_id":"cizpjnf2w0019baqwqzs38hw0","tag_id":"cizpjnf3l002kbaqwo6xip252","_id":"cizpjnf3n002pbaqwq6zxumqx"},{"post_id":"cizpjnf2w0019baqwqzs38hw0","tag_id":"cizpjnf3m002nbaqw2jfcux19","_id":"cizpjnf3n002qbaqwnurm3txf"},{"post_id":"cizpjnf2y001cbaqwfb2vv5ys","tag_id":"cizpjnf3n002obaqwt3p2ajbo","_id":"cizpjnf3n002sbaqwfmckqx6b"},{"post_id":"cizpjnf31001gbaqwxtcssbm5","tag_id":"cizpjnf3n002rbaqwzbpb2c47","_id":"cizpjnf3o002ubaqwfpu0bb2u"},{"post_id":"cizpjnf35001jbaqwtdxmnqqg","tag_id":"cizpjnf3o002tbaqwztxamm8v","_id":"cizpjnf3p002vbaqwp3e8p67a"},{"post_id":"cizweuq2z0000jqqwdyjvohd4","tag_id":"cizpjnf3i0029baqwa9l13asm","_id":"cizweuq360001jqqwfq4msjaa"},{"post_id":"cizwgny8t00030qqwx7hjdu4p","tag_id":"cizwgonn700060qqw80k36cqd","_id":"cizwgonn800070qqwpdhi83tn"},{"post_id":"cizwhdzrr0003f4qwwo0erdlf","tag_id":"cizwgonn700060qqw80k36cqd","_id":"cizwhdzrs0004f4qwfmboutoh"},{"post_id":"cizwit1hi0003rnqwkkdcv271","tag_id":"cizwgonn700060qqw80k36cqd","_id":"cizwit1hj0004rnqww81iokf4"},{"post_id":"cizwjz0ba0003uzqwdnwqfv1i","tag_id":"cizwjzjo40006uzqwiouyvqz1","_id":"cizwjzjo50007uzqwy4zbvwom"},{"post_id":"cj09j1r880001c1qw4shyo8dw","tag_id":"cj09j1r8f0002c1qwh9qu3ar6","_id":"cj09j1r8v0004c1qwcu6aggoo"},{"post_id":"cj344z8bd0000t0qwiks9ewpk","tag_id":"cj344z8bm0001t0qwqwgpgwmy","_id":"cj344z8c10003t0qwx3k5mbg7"},{"post_id":"cj3perzfs0000gsqwuemozrbw","tag_id":"cj3pf61g20000rpqwnmiplkcy","_id":"cj3pf61g60002rpqw6hl77s03"},{"post_id":"cj3perzfs0000gsqwuemozrbw","tag_id":"cj3pf61g50001rpqwg58jpznx","_id":"cj3pf61g60003rpqwct8mwaer"},{"post_id":"cj3pljt1i00049yqwgyhs166u","tag_id":"cj3plkkc600089yqwcxmnrg5g","_id":"cj3plkkc7000a9yqwt1ajh9nq"},{"post_id":"cj3pljt1i00049yqwgyhs166u","tag_id":"cj3plkkc700099yqwapw5tle0","_id":"cj3plkkc8000b9yqwg1dag2js"},{"post_id":"cj6ul19ug00009jqw3jknvag3","tag_id":"cj6ul19vd00029jqwv732emhq","_id":"cj6ul19vj00039jqw83ccte8v"},{"post_id":"cj74l8riw0000xhqwt5awjp25","tag_id":"cj74l8rj80001xhqww0esjzr9","_id":"cj74l8rjy0005xhqwfwy1hyp0"},{"post_id":"cj74l8riw0000xhqwt5awjp25","tag_id":"cj74l8rjr0003xhqwej4tco8j","_id":"cj74l8rjz0006xhqwngdnwzep"},{"post_id":"cj74l8riw0000xhqwt5awjp25","tag_id":"cj74l8rjs0004xhqwhq1bu5t0","_id":"cj74l8rjz0007xhqwl450m7bp"},{"post_id":"cj74litbb00059oqwpksxawv3","tag_id":"cj74lkfrp000a9oqwo5z55x24","_id":"cj74lkfrs000c9oqw0ubrybf7"},{"post_id":"cj74litbb00059oqwpksxawv3","tag_id":"cj74lkfrr000b9oqwj57l41z8","_id":"cj74lkfrs000d9oqwltxbthop"},{"post_id":"cjanfw0co0000g8ntzwgfmbc4","tag_id":"cjanfw0cr0002g8ntycamh2ld","_id":"cjanfw0cs0003g8ntukvze5gl"},{"post_id":"cjav9njxt0000n9nts7d17hq9","tag_id":"cjav9njya0002n9nto4dlwdgo","_id":"cjav9njyb0003n9ntyj12u6e1"}],"Tag":[{"name":"SingleTask","_id":"cizpjnf1x0004baqwss3bh9dj"},{"name":"JNI","_id":"cizpjnf230009baqw0p3b93qj"},{"name":"NDK","_id":"cizpjnf2a000fbaqwi50j75vs"},{"name":"h5","_id":"cizpjnf2f000lbaqwumzp3wco"},{"name":"Dalvik","_id":"cizpjnf2k000ubaqwsm7yyczt"},{"name":"ART","_id":"cizpjnf2t0012baqw4l0p0k1p"},{"name":"ClassLoader","_id":"cizpjnf2w0018baqw3cfv71so"},{"name":"Git","_id":"cizpjnf38001lbaqwnrldfh5i"},{"name":"Gradle","_id":"cizpjnf3d001vbaqwg3gd6f22"},{"name":"Radiobutton","_id":"cizpjnf3h0023baqwooo2j02f"},{"name":"RxJava","_id":"cizpjnf3i0026baqw1vujs49c"},{"name":"Spring","_id":"cizpjnf3i0029baqwa9l13asm"},{"name":"Weex","_id":"cizpjnf3j002dbaqwxf7k02z5"},{"name":"Android","_id":"cizpjnf3k002fbaqw856978sw"},{"name":"加密","_id":"cizpjnf3l002kbaqwo6xip252"},{"name":"签名","_id":"cizpjnf3m002nbaqw2jfcux19"},{"name":"instant run","_id":"cizpjnf3n002obaqwt3p2ajbo"},{"name":"滑动冲突","_id":"cizpjnf3n002rbaqwzbpb2c47"},{"name":"LRU","_id":"cizpjnf3o002tbaqwztxamm8v"},{"name":"Mybatis","_id":"cizwgonn700060qqw80k36cqd"},{"name":"Springmvc","_id":"cizwjzjo40006uzqwiouyvqz1"},{"name":"排序","_id":"cj09j1r8f0002c1qwh9qu3ar6"},{"name":"Freeline","_id":"cj344z8bm0001t0qwqwgpgwmy"},{"name":"6","_id":"cj3perzfz0001gsqwen1nr0lf"},{"name":"6.0适配","_id":"cj3pf61g20000rpqwnmiplkcy"},{"name":"运行时权限","_id":"cj3pf61g50001rpqwg58jpznx"},{"name":"7.0适配","_id":"cj3plkkc600089yqwcxmnrg5g"},{"name":"FileProvider","_id":"cj3plkkc700099yqwapw5tle0"},{"name":"vue","_id":"cj6ul19vd00029jqwv732emhq"},{"name":"滑动","_id":"cj74l8rj80001xhqww0esjzr9"},{"name":"ScrollView","_id":"cj74l8rjr0003xhqwej4tco8j"},{"name":"ListView","_id":"cj74l8rjs0004xhqwhq1bu5t0"},{"name":"View","_id":"cj74lkfrp000a9oqwo5z55x24"},{"name":"Measure","_id":"cj74lkfrr000b9oqwj57l41z8"},{"name":"插件化","_id":"cjanfw0cr0002g8ntycamh2ld"},{"name":"注解","_id":"cjav9njya0002n9nto4dlwdgo"}]}}