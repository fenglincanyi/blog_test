<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>fenglincanyi</title>
  <subtitle>Blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://fenglincanyi.github.io/"/>
  <updated>2017-02-28T12:58:35.000Z</updated>
  <id>https://fenglincanyi.github.io/</id>
  
  <author>
    <name>fenglincanyi</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Weex SDK源码分析（二）</title>
    <link href="https://fenglincanyi.github.io/2017/02/28/Weex%20SDK%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <id>https://fenglincanyi.github.io/2017/02/28/Weex SDK源码分析（二）/</id>
    <published>2017-02-28T11:32:00.000Z</published>
    <updated>2017-02-28T12:58:35.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p> <strong>Weex 渲染页面过程</strong></p>
</blockquote>
<h2 id="weex-渲染入口-render"><a href="#weex-渲染入口-render" class="headerlink" title="weex 渲染入口 render()"></a>weex 渲染入口 render()</h2><p>渲染过程从 WXSDKInstance.render() 开始追溯，render()方法是异步执行渲染工作的。render()重载的方法比较多，此处介绍最基础的一个。<br>参数代表的含义：</p>
<ul>
<li>pageName：用于查看日志，渲染的哪个页面作为标识</li>
<li>template：加载的本地的或远程的 js（we文件被weex transform后的 js）</li>
<li>options：配置信息，包括系统版本、app版本、设备信息等</li>
<li>jsonInitData：用于渲染的初始数据</li>
<li>flag：监听渲染的时机：<ul>
<li>APPEND_ASYNC：渲染完第一个view后，IWXRenderListener.onViewCreated()调用</li>
<li>APPEND_ONCE：渲染完整个view tree后，onViewCreated()调用</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">wxSDKInstance.render(</div><div class="line">      getPageName(),</div><div class="line">      template,</div><div class="line">      options,</div><div class="line">      jsonInitData,</div><div class="line">      ScreenUtil.getDisplayWidth(<span class="keyword">this</span>),</div><div class="line">      ScreenUtil.getDisplayHeight(<span class="keyword">this</span>),</div><div class="line">      WXRenderStrategy.APPEND_ASYNC);</div></pre></td></tr></table></figure>
<p>接着，渲染工作真正开始于 renderInternal()：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ensureRenderArchor</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>(mRenderContainer == <span class="keyword">null</span>)&#123;</div><div class="line">      mRenderContainer = <span class="keyword">new</span> RenderContainer(getContext());</div><div class="line">      mRenderContainer.setLayoutParams(<span class="keyword">new</span> ViewGroup.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT));</div><div class="line">      mRenderContainer.setBackgroundColor(Color.TRANSPARENT);</div><div class="line">      mRenderContainer.setSDKInstance(<span class="keyword">this</span>);</div><div class="line">      mRenderContainer.addOnLayoutChangeListener(<span class="keyword">this</span>);</div><div class="line">    &#125;</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<p>会进行 mRenderContainer 的初始化，RenderContainer 是一个 weex 扩展的 FrameLayout，后期操作，会在这个 container 中添加view元素。<br>我们接着看 render 过程，WXSDKManager.createInstance() 创建实例：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">createInstance</span><span class="params">(WXSDKInstance instance, String code, Map&lt;String, Object&gt; options, String jsonInitData)</span> </span>&#123;</div><div class="line">     mWXRenderManager.registerInstance(instance);</div><div class="line">     mBridgeManager.createInstance(instance.getInstanceId(), code, options, jsonInitData);</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<p>此过程中，WXRenderManager 注册实例，实际就是在 mRegistries（map<wxsdkinstanceid, wxrenderstatement="">）中存储该实例的信息，并且创建 renderStatement。<br>mBridgeManager 创建实例时，WXModuleManager 会创建 DomModule，由WXDomManager进行创建，sDomModuleMap 存储该 wxSDKInstance 的WXDomModule。<br>然后，异步执行 invokeCreateInstance()，此过程还会执行 initFramework() 操作。initFramework() 后，会创建出一个 WXJSObject 将 wxsdkinstance相关的数据存储，组成一个数组的形式，传给执行 js 的方法：</wxsdkinstanceid,></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">WXJSObject instanceIdObj = <span class="keyword">new</span> WXJSObject(WXJSObject.String,</div><div class="line">                instance.getInstanceId());</div><div class="line">        WXJSObject instanceObj = <span class="keyword">new</span> WXJSObject(WXJSObject.String,</div><div class="line">                                                template);</div><div class="line">        WXJSObject optionsObj = <span class="keyword">new</span> WXJSObject(WXJSObject.JSON,</div><div class="line">                options == <span class="keyword">null</span> ? <span class="string">"&#123;&#125;"</span></div><div class="line">                        : WXJsonUtils.fromObjectToJSONString(options));</div><div class="line">        WXJSObject dataObj = <span class="keyword">new</span> WXJSObject(WXJSObject.JSON,</div><div class="line">                data == <span class="keyword">null</span> ? <span class="string">"&#123;&#125;"</span> : data);</div><div class="line">        WXJSObject[] args = &#123;instanceIdObj, instanceObj, optionsObj,</div><div class="line">                dataObj&#125;;</div><div class="line">        invokeExecJS(instance.getInstanceId(), <span class="keyword">null</span>, METHOD_CREATE_INSTANCE, args,<span class="keyword">false</span>);</div></pre></td></tr></table></figure>
<p>然后，WXBridgeManager 会调用 mWXBridge.execJS() 去调用底层的 C++方法，执行js。</p>
<h2 id="底层C-调用Weex-Android-功能"><a href="#底层C-调用Weex-Android-功能" class="headerlink" title="底层C++ 调用Weex Android 功能"></a>底层C++ 调用Weex Android 功能</h2><p>我们再来看看 c++ 代码实现的功能，以 callNative() 为例：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> *  This Function is a built-in function that JS bundle can execute</div><div class="line"> *  to call native module.</div><div class="line"> */</div><div class="line">v8::Handle&lt;v8::Value&gt; callNative(<span class="keyword">const</span> v8::Arguments &amp;args) &#123;</div><div class="line"></div><div class="line">    JNIEnv *env = getJNIEnv();</div><div class="line">    <span class="comment">//instacneID args[0]</span></div><div class="line">    jstring jInstanceId = <span class="literal">NULL</span>;</div><div class="line">    <span class="keyword">if</span> (!args[<span class="number">0</span>].IsEmpty()) &#123;</div><div class="line">        v8::String::<span class="function">Utf8Value <span class="title">instanceId</span><span class="params">(args[<span class="number">0</span>])</span></span>;</div><div class="line">        jInstanceId = env-&gt;NewStringUTF(*instanceId);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//task args[1]</span></div><div class="line">    jbyteArray jTaskString = <span class="literal">NULL</span>;</div><div class="line">    <span class="keyword">if</span> (!args[<span class="number">1</span>].IsEmpty() &amp;&amp; args[<span class="number">1</span>]-&gt;IsObject()) &#123;</div><div class="line">        v8::Handle&lt;v8::Value&gt; obj[<span class="number">1</span>];</div><div class="line">        v8::Handle&lt;v8::Object&gt; global = V8context-&gt;Global();</div><div class="line">        json = v8::Handle&lt;v8::Object&gt;::Cast(global-&gt;Get(v8::String::New(<span class="string">"JSON"</span>)));</div><div class="line">        json_stringify = v8::Handle&lt;v8::Function&gt;::Cast(json-&gt;Get(v8::String::New(<span class="string">"stringify"</span>)));</div><div class="line">        obj[<span class="number">0</span>] = args[<span class="number">1</span>];</div><div class="line">        v8::Handle&lt;v8::Value&gt; ret = json_stringify-&gt;Call(json, <span class="number">1</span>, obj);</div><div class="line">        v8::String::<span class="function">Utf8Value <span class="title">str</span><span class="params">(ret)</span></span>;</div><div class="line"></div><div class="line">        <span class="keyword">int</span> strLen = <span class="built_in">strlen</span>(ToCString(str));</div><div class="line">        jTaskString = env-&gt;NewByteArray(strLen);</div><div class="line">        env-&gt;SetByteArrayRegion(jTaskString, <span class="number">0</span>, strLen,</div><div class="line">                                <span class="keyword">reinterpret_cast</span>&lt;<span class="keyword">const</span> jbyte *&gt;(ToCString(str)));</div><div class="line">        <span class="comment">// jTaskString = env-&gt;NewStringUTF(ToCString(str));</span></div><div class="line"></div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!args[<span class="number">1</span>].IsEmpty() &amp;&amp; args[<span class="number">1</span>]-&gt;IsString()) &#123;</div><div class="line">        v8::String::Utf8Value tasks(args[<span class="number">1</span>]);</div><div class="line">        <span class="keyword">int</span> strLen = <span class="built_in">strlen</span>(*tasks);</div><div class="line">        jTaskString = env-&gt;NewByteArray(strLen);</div><div class="line">        env-&gt;SetByteArrayRegion(jTaskString, <span class="number">0</span>, strLen, <span class="keyword">reinterpret_cast</span>&lt;<span class="keyword">const</span> jbyte *&gt;(*tasks));</div><div class="line">        <span class="comment">// jTaskString = env-&gt;NewStringUTF(*tasks);</span></div><div class="line">    &#125;</div><div class="line">    <span class="comment">//callback args[2]</span></div><div class="line">    jstring jCallback = <span class="literal">NULL</span>;</div><div class="line">    <span class="keyword">if</span> (!args[<span class="number">2</span>].IsEmpty()) &#123;</div><div class="line">        v8::String::<span class="function">Utf8Value <span class="title">callback</span><span class="params">(args[<span class="number">2</span>])</span></span>;</div><div class="line">        jCallback = env-&gt;NewStringUTF(*callback);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (jCallNativeMethodId == <span class="literal">NULL</span>) &#123;</div><div class="line">        <span class="comment">// 反射方式，拿到 weexsdk 的callNative方法的ID</span></div><div class="line">        jCallNativeMethodId = env-&gt;GetMethodID(jBridgeClazz,</div><div class="line">                                               <span class="string">"callNative"</span>,</div><div class="line">                                               <span class="string">"(Ljava/lang/String;[BLjava/lang/String;)I"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 调用 java 的 callNative 方法</span></div><div class="line">    <span class="keyword">int</span> flag = env-&gt;CallIntMethod(jThis, jCallNativeMethodId, jInstanceId, jTaskString, jCallback);</div><div class="line">    <span class="keyword">if</span> (flag == <span class="number">-1</span>) &#123;</div><div class="line">        LOGE(<span class="string">"instance destroy JFM must stop callNative"</span>);</div><div class="line">    &#125;</div><div class="line">    env-&gt;DeleteLocalRef(jTaskString);</div><div class="line">    env-&gt;DeleteLocalRef(jInstanceId);</div><div class="line">    env-&gt;DeleteLocalRef(jCallback);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> v8::Integer::New(flag);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>C++ 解析 js 代码后，返回来再调用 weex sdk 的 Android 代码，通过 JNI 提供的反射方式拿到方法的 id，并调用执行。<br>相对应的，我们找到 Android callNative() 代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">callNative</span><span class="params">(String instanceId, String tasks, String callback)</span> </span>&#123;</div><div class="line">    <span class="keyword">long</span> start = System.currentTimeMillis();</div><div class="line">    WXSDKInstance instance = WXSDKManager.getInstance().getSDKInstance(instanceId);</div><div class="line">    <span class="keyword">if</span>(instance != <span class="keyword">null</span>) &#123;</div><div class="line">      instance.firstScreenCreateInstanceTime(start);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> errorCode = IWXBridge.INSTANCE_RENDERING;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">      <span class="comment">// 通过 WXBridgeManager.callNative 进行 tasks 的分发执行</span></div><div class="line">      errorCode = WXBridgeManager.getInstance().callNative(instanceId, tasks, callback);</div><div class="line">    &#125;<span class="keyword">catch</span> (Throwable e)&#123;</div><div class="line">      <span class="comment">//catch everything during call native.</span></div><div class="line">      <span class="keyword">if</span>(WXEnvironment.isApkDebugable())&#123;</div><div class="line">        WXLogUtils.e(TAG,<span class="string">"callNative throw exception:"</span>+e.getMessage());</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span>(instance != <span class="keyword">null</span>) &#123;</div><div class="line">      instance.callNativeTime(System.currentTimeMillis() - start);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(WXEnvironment.isApkDebugable())&#123;</div><div class="line">      <span class="keyword">if</span>(errorCode == IWXBridge.DESTROY_INSTANCE)&#123;</div><div class="line">        WXLogUtils.w(<span class="string">"destroyInstance :"</span>+instanceId+<span class="string">" JSF must stop callNative"</span>);</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> errorCode;</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<h2 id="Weex-native-响应-C-的调用"><a href="#Weex-native-响应-C-的调用" class="headerlink" title="Weex native 响应 C++ 的调用"></a>Weex native 响应 C++ 的调用</h2><p>WXBridgeManager.callNative() 对 tasks 进行分发，我们来看看如何分发的：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">JSONArray array = JSON.parseArray(tasks);</div><div class="line">... ...</div><div class="line"><span class="keyword">int</span> size = array.size();</div><div class="line">    <span class="keyword">if</span> (size &gt; <span class="number">0</span>) &#123;</div><div class="line">      <span class="keyword">try</span> &#123;</div><div class="line">        JSONObject task;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; ++i) &#123;</div><div class="line">          task = (JSONObject) array.get(i);</div><div class="line">          <span class="keyword">if</span> (task != <span class="keyword">null</span> &amp;&amp; WXSDKManager.getInstance().getSDKInstance(instanceId) != <span class="keyword">null</span>) &#123;</div><div class="line">            Object target = task.get(MODULE);</div><div class="line">            <span class="keyword">if</span>(target != <span class="keyword">null</span>)&#123;</div><div class="line">              <span class="keyword">if</span>(WXDomModule.WXDOM.equals(target))&#123;</div><div class="line">                WXDomModule dom = getDomModule(instanceId);</div><div class="line">                dom.callDomMethod(task);</div><div class="line">              &#125;<span class="keyword">else</span> &#123;</div><div class="line">                WXModuleManager.callModuleMethod(instanceId, (String) target,</div><div class="line">                    (String) task.get(METHOD), (JSONArray) task.get(ARGS));</div><div class="line">              &#125;</div><div class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(task.get(COMPONENT) != <span class="keyword">null</span>)&#123;</div><div class="line">              <span class="comment">//call component</span></div><div class="line">              WXDomModule dom = getDomModule(instanceId);</div><div class="line">              dom.invokeMethod((String) task.get(REF),(String) task.get(METHOD),(JSONArray) task.get(ARGS));</div><div class="line">            &#125;<span class="keyword">else</span>&#123;</div><div class="line">              <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"unknown callNative"</span>);</div><div class="line">            &#125;</div><div class="line">          &#125;</div><div class="line">        &#125;</div><div class="line">      &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">        WXLogUtils.e(<span class="string">"[WXBridgeManager] callNative exception: "</span>, e);</div><div class="line">        commitJSBridgeAlarmMonitor(instanceId, WXErrorCode.WX_ERR_INVOKE_NATIVE,<span class="string">"[WXBridgeManager] callNative exception "</span>+e.getCause());</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">    ... ...</div></pre></td></tr></table></figure>
<p>分发规则，对 tasks 逐个分类处理：</p>
<ul>
<li>如果是 module:<ul>
<li>如果 是 dom：执行 WXDomModule.callDomMethod()；</li>
<li>如果 不是 dom (普通的WXModule) : 执行WXModuleManager.callModuleMethod()</li>
</ul>
</li>
<li>如果是 component：<ul>
<li>调用 WXDomModule.invokeMethod()</li>
</ul>
</li>
</ul>
<p>task 数据格式（json），如图：<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://7xr1vo.com1.z0.glb.clouddn.com/weex%20debug%E5%9B%BE.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure></p>
<p>这里只分析第一种情况（其他相似）：<br>WXDomModule.callDomMethod()：<br>会根据 task 的 method 属性分类处理，此处只分析一个：CREATE_BODY：<br>会继续调用 createBody() 方法，将 wxSDKInstance.id 和 task的args 信息发送给WXDomHandler。<br>WXDomHandler 的 handleMessage() 中也有很多分类处理，对于WX_DOM_CREATE_BODY：会执行：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mWXDomManager.createBody(task.instanceId, (JSONObject) task.args.get(<span class="number">0</span>));</div></pre></td></tr></table></figure></p>
<p>具体可参考 WXDomModule、WXDomHandler 类分析<br>这个时候，就回到我们之前说过的 WXDomStatement 的流程了，WXDomStatement会添加dom 节点（addDomInternal() ），在 addDomInternal 过程中，对dom节点又是一通猛烈的操作：根节点（root节点的准备工作），普通节点（add到父节点下）。<br>然后，对 dom 对象 进行遍历操作（递归）：domObject.traverseTree()，在dom 线程创建 component，生成 component 树（也是递归操作：通过WXRenderStatement.generateComponentTree() ）。<br>对于每个dom节点都会进行 setLayout()、setExtra()、setPadding()，可以去看看compent.setLayout()，就是去使用Android的API 对view进布局和绘制，此处不再贴代码。<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://7xr1vo.com1.z0.glb.clouddn.com/weex%20component%20%E6%96%B9%E6%B3%95.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul>
<li>WXBridge 是 Android 与 底层 C++ 的衔接处，Android &lt;=&gt; C++ 的交互，及方法接口都在此类中，的确起到了见名知义的效果</li>
<li>Weex Android SDK 是使用 Android的API（Java层），实现了view的布局、绘制。并不是依靠 底层so包实现，与IOS的sdk实现方式不同（听同事说……）</li>
<li>component 处置 weex 的view绘制、布局过程，和Android native处理view的流程十分相似，具体可以参考后面的链接（阿里大神也分析过）</li>
</ul>
<p><br></p>
<p>参考：<br><a href="http://www.jianshu.com/p/3160a0297345" target="_blank" rel="external">http://www.jianshu.com/p/3160a0297345</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt; &lt;strong&gt;Weex 渲染页面过程&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;weex-渲染入口-render&quot;&gt;&lt;a href=&quot;#weex-渲染入口-render&quot; class=&quot;headerlink&quot; tit
    
    </summary>
    
      <category term="Weex" scheme="https://fenglincanyi.github.io/categories/Weex/"/>
    
    
      <category term="Weex" scheme="https://fenglincanyi.github.io/tags/Weex/"/>
    
      <category term="Android" scheme="https://fenglincanyi.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Weex SDK源码分析（一）</title>
    <link href="https://fenglincanyi.github.io/2017/02/28/Weex%20SDK%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>https://fenglincanyi.github.io/2017/02/28/Weex SDK源码分析（一）/</id>
    <published>2017-02-28T07:06:00.000Z</published>
    <updated>2017-02-28T13:02:59.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p><strong>WeexSDK 初始化源码分析</strong></p>
</blockquote>
<p>整个Weex SDK 初始化过程，入口是WXSDKEngine.initialize()，方法主要是依靠 doInitInternal() 方法执行初始化操作。里面涉及了WXEnvironment 相关环境的设置，几个重要的Manager的初始化操作，包括WXBridgeManager、WXSDKManager、WXRenderManager、WXDomManager，前两个 manager 以单例形式呈现的。<br>初始化完相关管理类，后面进行 component、module的注册。</p>
<p>下面对这一过程，进行一一分析：</p>
<p>WXSDKEngine.doInitInternal() 方法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">doInitInternal</span><span class="params">(<span class="keyword">final</span> Application application, <span class="keyword">final</span> InitConfig config)</span> </span>&#123;</div><div class="line">        WXEnvironment.sApplication = application;</div><div class="line">        WXEnvironment.JsFrameworkInit = <span class="keyword">false</span>;</div><div class="line"></div><div class="line">        WXBridgeManager.getInstance().post(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                <span class="keyword">long</span> start = System.currentTimeMillis();</div><div class="line">                WXSDKManager sm = WXSDKManager.getInstance();</div><div class="line">                <span class="keyword">if</span> (config != <span class="keyword">null</span>) &#123;</div><div class="line">                    sm.setInitConfig(config);</div><div class="line">                    <span class="keyword">if</span> (config.getDebugAdapter() != <span class="keyword">null</span>) &#123;</div><div class="line">                        config.getDebugAdapter().initDebug(application);<span class="comment">// 关于weex debug操作，不是此篇关注的重点，略过</span></div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">                WXSoInstallMgrSdk.init(application);</div><div class="line">                <span class="keyword">boolean</span> isSoInitSuccess = WXSoInstallMgrSdk.initSo(V8_SO_NAME, <span class="number">1</span>, config != <span class="keyword">null</span> ? config.getUtAdapter() : <span class="keyword">null</span>);</div><div class="line">                <span class="keyword">if</span> (!isSoInitSuccess) &#123;</div><div class="line">                    <span class="keyword">return</span>;</div><div class="line">                &#125;</div><div class="line">                sm.initScriptsFramework(config != <span class="keyword">null</span> ? config.getFramework() : <span class="keyword">null</span>);</div><div class="line"></div><div class="line">                WXEnvironment.sSDKInitExecuteTime = System.currentTimeMillis() - start;</div><div class="line">                WXLogUtils.renderPerformanceLog(<span class="string">"SDKInitExecuteTime"</span>, WXEnvironment.sSDKInitExecuteTime);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        register();</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<h2 id="WXSDKManager的初始化"><a href="#WXSDKManager的初始化" class="headerlink" title="WXSDKManager的初始化"></a>WXSDKManager的初始化</h2><p>首先，是WXSDKManager的初始化，会将WXRenderManager、WXDomManager初始化，并拿到WXBridgeManager实例的引用。</p>
<ul>
<li>关于 WXRenderManager<br>管理渲染操作，主要操作管理的是WXRenderStatement对象（WXRenderManager 也并不是一个线程安全的类，涉及到UI的更新操作。后面会对WXRenderStatement 进行分析）<br>WXRenderManager 主要的2个成员：mRegistries 和 mWXRenderHandler：<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> ConcurrentHashMap&lt;String, WXRenderStatement&gt; mRegistries;</div><div class="line"><span class="keyword">private</span> WXRenderHandler mWXRenderHandler;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>mRegistries存储WXRenderStatement，以 WXSDKInstance.id 为key存储WXRenderStatement，所以一个WXSDKInstance对应一个WXRenderStatement。<br>WXRenderManager 的 createBody、addComponent等等操作都是针对某个WXSDKInstance的 statement 调用操作的。具体的渲染，WXRenderStatement负责完成。<br>mWXRenderHandler 是将外界传给它的 渲染相关的task 发送消息，然后主线程收到messge后，进行相关渲染操作。</p>
<ul>
<li>关于 WXDomManager<br>管理dom操作，作为客户端执行dom命令，会调用 WXDomStatement 创建命令执行相对应的操作。里面提供的方法通常是在 dom 线程中调用。<br>其中有：<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> WXThread mDomThread;</div><div class="line"> <span class="comment">/** package **/</span></div><div class="line"> Handler mDomHandler;</div><div class="line"> <span class="keyword">private</span> WXRenderManager mWXRenderManager;</div><div class="line"> <span class="keyword">private</span> ConcurrentHashMap&lt;String, WXDomStatement&gt; mDomRegistries;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>mDomRegistries 和上面类似，大家一看就懂，<wxsdkinstance.id，wxdomstatement>。<br>mWXRenderManager 是拿到上一步初始化好的 mWXRenderManager实例。<br>mDomThread是WXDomManager创建的一个thread，也是WXThread，其中的handler是WXDomHandler<br>mDomHandler 是这个mDomThread的handler引用。<br>WXDomHandler 是关于dom操作的一个类，实现了Handler.Callback接口，会将mDomHandler发送的dom消息分类处理，这一任务是交给了 WXDomManager：</wxsdkinstance.id，wxdomstatement></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (msg == <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> what = msg.what;</div><div class="line">    Object obj = msg.obj;</div><div class="line">    WXDomTask task = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> WXDomTask) &#123;</div><div class="line">        task = (WXDomTask) obj;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (!mHasBatch) &#123;</div><div class="line">        mHasBatch = <span class="keyword">true</span>;</div><div class="line">        mWXDomManager.sendEmptyMessageDelayed(WXDomHandler.MsgType.WX_DOM_BATCH, DELAY_TIME);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">switch</span> (what) &#123;</div><div class="line">        <span class="keyword">case</span> MsgType.WX_DOM_CREATE_BODY:</div><div class="line">            mWXDomManager.createBody(task.instanceId, (JSONObject) task.args.get(<span class="number">0</span>));</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> MsgType.WX_DOM_UPDATE_ATTRS:</div><div class="line">            mWXDomManager.updateAttrs(task.instanceId, (String) task.args.get(<span class="number">0</span>), (JSONObject) task.args.get(<span class="number">1</span>));</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> MsgType.WX_DOM_UPDATE_STYLE:</div><div class="line">            mWXDomManager.updateStyle(</div><div class="line">                    task.instanceId,</div><div class="line">                    (String) task.args.get(<span class="number">0</span>),</div><div class="line">                    (JSONObject) task.args.get(<span class="number">1</span>),</div><div class="line">                    task.args.size() &gt; <span class="number">2</span> &amp;&amp; (<span class="keyword">boolean</span>) task.args.get(<span class="number">2</span>)</div><div class="line">            );</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> ...</div><div class="line">        <span class="keyword">case</span> ...</div></pre></td></tr></table></figure>
<p>具体的manager操作，会交给对应的 domstatement 操作，上面已经说过。</p>
<p>WXSoInstallMgrSdk 是管理 so 相关操作和cpu平台的支持情况。<br>WXSoInstallMgrSdk.initSo() 执行 weexv8.so 包的加载，就和普通加载so包的方式一样（System.loadLibrary(libName) ）。</p>
<blockquote>
<p>这里注意：weex 的 so 包不支持 mips平台的</p>
</blockquote>
<p>如果so包加载失败，则初始化操作会就此结束，后续工作不再执行。<br>so包加载完成之后，WXSDKManager会调用WXBridgeManager执行 js Framework的初始化，并发送消息给<br>WXBridgeManager，WXBridgeManager调用自己的 handleMessage() 处理操作，下面会有分析。</p>
<h2 id="WXBridgeManager-的初始化"><a href="#WXBridgeManager-的初始化" class="headerlink" title="WXBridgeManager 的初始化"></a>WXBridgeManager 的初始化</h2><p>其次，WXBridgeManager 的初始化。会创建名为：WeexJSBridgeThread的 WXThread，WXThread是一个weex封装的HandlerThread。为了方便该线程的消息处理，具体细节可参考源码查看。WXBridgeManager 自己也实现了 Handler.Callback 接口，用于处理消息，接受消息后对 js framework 的初始化操作进行控制。</p>
<p>发送消息：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Initialize JavaScript framework</div><div class="line"> * <span class="doctag">@param</span> framework String representation of the framework to be init.</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">initScriptsFramework</span><span class="params">(String framework)</span> </span>&#123;</div><div class="line">    Message msg = mJSHandler.obtainMessage();</div><div class="line">    msg.obj = framework;</div><div class="line">    msg.what = WXJSBridgeMsgType.INIT_FRAMEWORK;</div><div class="line">    msg.setTarget(mJSHandler);</div><div class="line">    msg.sendToTarget();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>接收消息：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (msg == <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> what = msg.what;</div><div class="line">    <span class="keyword">switch</span> (what) &#123;</div><div class="line">        <span class="keyword">case</span> WXJSBridgeMsgType.INIT_FRAMEWORK:</div><div class="line">            invokeInitFramework(msg);<span class="comment">// 过程中会加载 main.js，调用c++ 进行Framework的初始化：mWXBridge.initFramework(framework, assembleDefaultOptions())</span></div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> WXJSBridgeMsgType.CALL_JS_BATCH:</div><div class="line">            invokeCallJSBatch(msg);</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> ...</div></pre></td></tr></table></figure>
<p>在 WXBridge 中，是调用 底层native的方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Init JSFrameWork</div><div class="line"> *</div><div class="line"> * <span class="doctag">@param</span> framework assets/main.js</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">int</span> <span class="title">initFramework</span><span class="params">(String framework, WXParams params)</span></span>;</div></pre></td></tr></table></figure>
<p>底层 C++代码中：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function">jint <span class="title">Java_com_taobao_weex_bridge_WXBridge_initFramework</span><span class="params">(JNIEnv *env,</span></span></div><div class="line">                                                        jobject object, jstring script,</div><div class="line">                                                        jobject params)</div></pre></td></tr></table></figure>
<p>js framework 初始化就交给 C++ 来处理了</p>
<p>在这里再多看一眼：在so包加载后，C++层第一步就会把 WXBridge 加载出来，作为2层之间的桥梁：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * This function will be call when the library first be load.</div><div class="line"> * You can do some init in the lib. return which version jni it support.</div><div class="line"> */</div><div class="line"><span class="function">jint <span class="title">JNI_OnLoad</span><span class="params">(JavaVM *vm, <span class="keyword">void</span> *reserved)</span> </span>&#123;</div><div class="line">    LOGD(<span class="string">"begin JNI_OnLoad"</span>);</div><div class="line">    JNIEnv *env;</div><div class="line">    <span class="comment">/* Get environment */</span></div><div class="line">    <span class="keyword">if</span> ((vm)-&gt;GetEnv((<span class="keyword">void</span> **) &amp;env, JNI_VERSION_1_4) != JNI_OK) &#123;</div><div class="line">        <span class="keyword">return</span> JNI_FALSE;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    sVm = vm;</div><div class="line">    jclass tempClass = env-&gt;FindClass(</div><div class="line">            <span class="string">"com/taobao/weex/bridge/WXBridge"</span>);</div><div class="line">    jBridgeClazz = (jclass) env-&gt;NewGlobalRef(tempClass);</div><div class="line">    env-&gt;DeleteLocalRef(tempClass);</div><div class="line">    LOGD(<span class="string">"end JNI_OnLoad"</span>);</div><div class="line">    <span class="keyword">return</span> JNI_VERSION_1_4;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="注册操作"><a href="#注册操作" class="headerlink" title="注册操作"></a>注册操作</h2><p>weex 内置的 component 和 module 都会在此过程中注册，这一过程还包含了dom的注册操作。<br>注册操作，会由registerModules来进行操作：registerModules()，registerComponents()，这两个都是异步执行，最终调用：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// modules the format is like &#123;'dom':['updateAttrs','updateStyle'],'event':['openUrl']&#125;</span></div><div class="line">WXJSObject[] args = &#123;<span class="keyword">new</span> WXJSObject(WXJSObject.JSON,</div><div class="line">                                        WXJsonUtils.fromObjectToJSONString(modules))&#125;;</div><div class="line">mWXBridge.execJS(<span class="string">""</span>, <span class="keyword">null</span>, METHOD_REGISTER_MODULES, args);</div><div class="line"></div><div class="line">WXJSObject[] args = &#123;<span class="keyword">new</span> WXJSObject(WXJSObject.JSON,</div><div class="line">                                        WXJsonUtils.fromObjectToJSONString(components))&#125;;</div><div class="line">mWXBridge.execJS(<span class="string">""</span>, <span class="keyword">null</span>, METHOD_REGISTER_COMPONENTS, args);</div></pre></td></tr></table></figure>
<p>execJS() 最终是调用WXBridge.execJS() 的native方法，交给底层c++来执行：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function">jint <span class="title">Java_com_taobao_weex_bridge_WXBridge_execJS</span><span class="params">(JNIEnv *env, jobject this1, jstring jinstanceid,</span></span></div><div class="line">                                                 jstring jnamespace, jstring jfunction,</div><div class="line">                                                 jobjectArray jargs)</div></pre></td></tr></table></figure>
<p>C++ 使用反射的方式，找到WXJSObject类，找到相关的属性和方法，</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">jclass jsObjectClazz = env-&gt;FindClass(<span class="string">"com/taobao/weex/bridge/WXJSObject"</span>);</div></pre></td></tr></table></figure>
<p>调用 js Framework的相关api 执行。</p>
<p><br></p>
<p>源码：<br><a href="https://github.com/apache/incubator-weex/tree/master/android/sdk" target="_blank" rel="external">https://github.com/apache/incubator-weex/tree/master/android/sdk</a><br><a href="https://github.com/alibaba/weex_v8core" target="_blank" rel="external">https://github.com/alibaba/weex_v8core</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;WeexSDK 初始化源码分析&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;整个Weex SDK 初始化过程，入口是WXSDKEngine.initialize()，方法主要是依靠 doInitInternal() 
    
    </summary>
    
      <category term="Weex" scheme="https://fenglincanyi.github.io/categories/Weex/"/>
    
    
      <category term="Weex" scheme="https://fenglincanyi.github.io/tags/Weex/"/>
    
      <category term="Android" scheme="https://fenglincanyi.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Gradle实现自动拉取git及压缩文件</title>
    <link href="https://fenglincanyi.github.io/2017/02/01/Gradle%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%8A%A8%E6%8B%89%E5%8F%96git%E5%8F%8A%E5%8E%8B%E7%BC%A9%E6%96%87%E4%BB%B6/"/>
    <id>https://fenglincanyi.github.io/2017/02/01/Gradle实现自动拉取git及压缩文件/</id>
    <published>2017-02-01T07:00:00.000Z</published>
    <updated>2017-02-08T11:55:44.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>在实现 hybird 相关开发时，h5文件需要不断重新拉取，并解压文件，拷贝至项目的相关目录下。手工完成比较繁琐且耗时。自己查阅 gradle 相关文档，将其过程实现脚本自动化。<br>可实现：自动拉取相关 git 服务器上最新文件，并压缩至 src/main/assets/hybird目录下，打包时就会自动带上最新的h5文件了。</p>
<h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><p>上代码：</p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line">afterEvaluate &#123;</div><div class="line">    tasks.matching &#123;</div><div class="line">        it.name.startsWith(<span class="string">'process'</span>) &amp;&amp; (it.name.endsWith(<span class="string">'ReleaseJavaRes'</span>) || it.name.endsWith</div><div class="line">                (<span class="string">'DebugJavaRes'</span>))</div><div class="line">    &#125;.<span class="keyword">each</span> &#123; tk -&gt;</div><div class="line">        tk.dependsOn(deletehybird)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// clone hybird 文件</span></div><div class="line"><span class="keyword">task</span> cloneHybird(type: Exec)&#123;</div><div class="line">    <span class="keyword">delete</span> <span class="keyword">file</span>(<span class="string">"src/main/assets/hybird"</span>)</div><div class="line"></div><div class="line">    <span class="keyword">def</span> osName = System.getProperty(<span class="string">"os.name"</span>)</div><div class="line">    <span class="keyword">if</span> (osName.contains(<span class="string">"Windows"</span>)) &#123;</div><div class="line">        commandLine <span class="string">'cmd'</span>, <span class="string">'/c'</span>, <span class="string">'git clone  https://github.com/fenglincanyi/…… .git src/main/assets/hybird'</span></div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (osName.contains(<span class="string">"Mac OS"</span>)) &#123;</div><div class="line">        commandLine <span class="string">'git'</span>, <span class="string">'clone'</span>, <span class="string">' https://github.com/fenglincanyi/…… .git'</span>, <span class="string">'src/main/assets/hybird'</span></div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (osName.contains(<span class="string">"LINUX"</span>))&#123;</div><div class="line">        commandLine <span class="string">'git'</span>, <span class="string">'clone'</span>, <span class="string">' https://github.com/fenglincanyi/…… .git'</span>, <span class="string">'src/main/assets/hybird'</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">println</span>(<span class="string">"============== task cloneHybird =============="</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 压缩 hybird文件</span></div><div class="line"><span class="keyword">task</span> zipHybird(type: Zip) &#123;</div><div class="line">    dependsOn cloneHybird</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (<span class="keyword">file</span>(<span class="string">'src/main/assets/hybird.zip'</span>).lastModified() &gt;= <span class="keyword">file</span>(<span class="string">'src/main/assets/hybird'</span>).lastModified()) &#123;<span class="comment">// 保证zip包最新</span></div><div class="line">        <span class="keyword">delete</span> <span class="keyword">file</span>(<span class="string">"src/main/assets/hybird.zip"</span>)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    archiveName = <span class="string">'hybird.zip'</span></div><div class="line">    <span class="keyword">destinationDir</span> = <span class="keyword">file</span>(<span class="string">'src/main/assets'</span>)</div><div class="line">    <span class="keyword">from</span> <span class="string">'src/main/assets/hybird/0.1'</span></div><div class="line">    <span class="keyword">println</span>(<span class="string">"============== task hybirdZip =============="</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 删除 hybird 目录及文件，只留 hybird.zip</span></div><div class="line"><span class="keyword">task</span> deletehybird(type: <span class="keyword">Delete</span>) &#123;</div><div class="line">    dependsOn zipHybird</div><div class="line"></div><div class="line">    <span class="keyword">delete</span> <span class="string">"src/main/assets/hybird"</span></div><div class="line">    <span class="keyword">println</span>(<span class="string">"============== deletehybird =============="</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><br><br>此处，单独运行 task，演示效果：<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://7xr1vo.com1.z0.glb.clouddn.com/5FAACC49-BCE0-44ED-A60C-30378795BF74.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure></p>
<p>build 结果：<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://7xr1vo.com1.z0.glb.clouddn.com/22.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure></p>
<p>在 assets 目录下生成：<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://7xr1vo.com1.z0.glb.clouddn.com/33.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure></p>
<h3 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h3><p>Mac系统执行 commandLine 去 clone 时，每次都报错：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">Caused by: org.gradle.process.internal.ExecException: A problem occurred starting process <span class="string">'command '</span>git clone https:<span class="comment">//github.com/fenglincanyi/…… .git''</span></div><div class="line"><span class="number">11</span>:<span class="number">38</span>:<span class="number">32.043</span> [ERROR] [org.gradle.BuildExceptionReporter]      at org.gradle.process.internal.DefaultExecHandle.setEndStateInfo(DefaultExecHandle.java:<span class="number">197</span>)</div><div class="line"><span class="number">11</span>:<span class="number">38</span>:<span class="number">32.043</span> [ERROR] [org.gradle.BuildExceptionReporter]      at org.gradle.process.internal.DefaultExecHandle.failed(DefaultExecHandle.java:<span class="number">327</span>)</div><div class="line"><span class="number">11</span>:<span class="number">38</span>:<span class="number">32.043</span> [ERROR] [org.gradle.BuildExceptionReporter]      at org.gradle.process.internal.ExecHandleRunner.run(ExecHandleRunner.java:<span class="number">86</span>)</div><div class="line"><span class="number">11</span>:<span class="number">38</span>:<span class="number">32.043</span> [ERROR] [org.gradle.BuildExceptionReporter]      ... <span class="number">2</span> more</div><div class="line"><span class="number">11</span>:<span class="number">38</span>:<span class="number">32.043</span> [ERROR] [org.gradle.BuildExceptionReporter] Caused by: net.rubygrapefruit.platform.NativeException: Could not start <span class="string">'git clone https://github.com/fenglincanyi/…… .git'</span></div><div class="line"><span class="number">11</span>:<span class="number">38</span>:<span class="number">32.043</span> [ERROR] [org.gradle.BuildExceptionReporter]      at net.rubygrapefruit.platform.internal.DefaultProcessLauncher.start(DefaultProcessLauncher.java:<span class="number">27</span>)</div><div class="line"><span class="number">11</span>:<span class="number">38</span>:<span class="number">32.043</span> [ERROR] [org.gradle.BuildExceptionReporter]      at net.rubygrapefruit.platform.internal.WrapperProcessLauncher.start(WrapperProcessLauncher.java:<span class="number">36</span>)</div><div class="line"><span class="number">11</span>:<span class="number">38</span>:<span class="number">32.043</span> [ERROR] [org.gradle.BuildExceptionReporter]      at org.gradle.process.internal.ExecHandleRunner.run(ExecHandleRunner.java:<span class="number">68</span>)</div><div class="line"><span class="number">11</span>:<span class="number">38</span>:<span class="number">32.043</span> [ERROR] [org.gradle.BuildExceptionReporter]      ... <span class="number">2</span> more</div><div class="line"><span class="number">11</span>:<span class="number">38</span>:<span class="number">32.043</span> [ERROR] [org.gradle.BuildExceptionReporter] Caused by: java.io.IOException: Cannot run program <span class="string">"git clone https://github.com/fenglincanyi/…… .git"</span> (in directory <span class="string">"/Users/geng/AndroidStudioProjects/GradleTest/app"</span>): error=<span class="number">2</span>, No such file or directory</div><div class="line"><span class="number">11</span>:<span class="number">38</span>:<span class="number">32.043</span> [ERROR] [org.gradle.BuildExceptionReporter]      at net.rubygrapefruit.platform.internal.DefaultProcessLauncher.start(DefaultProcessLauncher.java:<span class="number">25</span>)</div><div class="line"><span class="number">11</span>:<span class="number">38</span>:<span class="number">32.044</span> [ERROR] [org.gradle.BuildExceptionReporter]      ... <span class="number">4</span> more</div><div class="line"><span class="number">11</span>:<span class="number">38</span>:<span class="number">32.044</span> [ERROR] [org.gradle.BuildExceptionReporter] Caused by: java.io.IOException: error=<span class="number">2</span>, No such file or directory</div><div class="line"><span class="number">11</span>:<span class="number">38</span>:<span class="number">32.044</span> [ERROR] [org.gradle.BuildExceptionReporter]      ... <span class="number">5</span> more</div><div class="line"><span class="number">11</span>:<span class="number">38</span>:<span class="number">32.044</span> [ERROR] [org.gradle.BuildExceptionReporter]</div></pre></td></tr></table></figure>
<p>最后Google半天，在 Mac 或 Linux 系统下，需要将命令中的字符串 逐个分割：</p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">commandLine <span class="string">'git'</span>, <span class="string">'clone'</span>, <span class="string">' https://github.com/fenglincanyi/…… .git'</span>, <span class="string">'src/main/assets/hybird'</span></div></pre></td></tr></table></figure>
<p>Gradle 官网的文档，说明的并不是很详细，这里要吐槽下。。。</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul>
<li>Gradle 基于Groovy实现，内置了许多好用的API，如：copy，zip等等，这些都可以将传统开发中的手动执行实现自动化</li>
<li>Gradle 的确方便了开发者，使用脚本来实现繁琐和重复的工作，也将开发过程中配置工作变得更加灵活</li>
</ul>
<p><br><br>参考：<br><a href="https://www.jeeboot.com/archives/1563.html" target="_blank" rel="external">https://www.jeeboot.com/archives/1563.html</a><br><a href="http://stackoverflow.com/questions/15776431/in-gradle-tasks-of-type-exec-why-do-commandline-and-executable-behave-different" target="_blank" rel="external">http://stackoverflow.com/questions/15776431/in-gradle-tasks-of-type-exec-why-do-commandline-and-executable-behave-different</a><br><a href="https://docs.gradle.org/current/dsl/org.gradle.api.tasks.Exec.html#org.gradle.api.tasks.Exec:commandLine(java.lang.Object%5B%5D" target="_blank" rel="external">https://docs.gradle.org/current/dsl/org.gradle.api.tasks.Exec.html#org.gradle.api.tasks.Exec:commandLine(java.lang.Object%5B%5D</a><br><a href="https://segmentfault.com/q/1010000004503896" target="_blank" rel="external">https://segmentfault.com/q/1010000004503896</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h3&gt;&lt;p&gt;在实现 hybird 相关开发时，h5文件需要不断重新拉取，并解压文件，拷贝至项目的相关目录下。手工完成比较繁琐且耗时。自己查阅 gradl
    
    </summary>
    
      <category term="Gradle" scheme="https://fenglincanyi.github.io/categories/Gradle/"/>
    
    
      <category term="Gradle" scheme="https://fenglincanyi.github.io/tags/Gradle/"/>
    
  </entry>
  
  <entry>
    <title>Springmvc 相关</title>
    <link href="https://fenglincanyi.github.io/2017/01/21/Springmvc%20%E7%9B%B8%E5%85%B3/"/>
    <id>https://fenglincanyi.github.io/2017/01/21/Springmvc 相关/</id>
    <published>2017-01-21T06:55:00.000Z</published>
    <updated>2017-03-05T10:49:24.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="springmvc-框架原理"><a href="#springmvc-框架原理" class="headerlink" title="springmvc 框架原理"></a>springmvc 框架原理</h2><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://7xr1vo.com1.z0.glb.clouddn.com/mvc.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>springmvc执行流程：</p>
<ol>
<li>前端控制器（DispatcherServlet）, 接受请求，然后请求 处理器映射器（HanderMapping）</li>
<li>HanderMapping 根据 xml / 注解 进行查找相关的 handler，并返回给 前端控制器</li>
<li>前端控制器 调用 处理器适配器（HanderAdapter）按照一定规则去执行 handler</li>
<li>handler执行完毕后，返回给 HanderAdapter ModelAndView，HandlerAdapter 再返回给 前端控制器</li>
<li>前端控制器 将 ModelAndView 发送给 视图解析器（ViewResolver），试图解析器根据试图名解析为真正的视图</li>
<li>视图解析器解析后，将view 返回给 前端控制器，前端控制器 进行视图渲染，视图渲染将模型数据(在ModelAndView对象中)填充到request域</li>
<li>前端控制器 向用户相应结果</li>
</ol>
<p>重要的组件：</p>
<ul>
<li>前端控制器 DispatherServlet：接受请求，相应结果，转发器的作用</li>
<li>处理器映射器 HandlerMapping: 根据配置查找 handler</li>
<li>处理器适配器 HandlerAdapter: 按照规则去执行 handler</li>
<li>处理器 Handler: 业务处理</li>
<li>视图解析器 ViewResolver: 进行视图解析，将ModelAndView解析为真正的view</li>
</ul>
<h2 id="springmvc-基本配置"><a href="#springmvc-基本配置" class="headerlink" title="springmvc 基本配置"></a>springmvc 基本配置</h2><p>如果不在 springmvc.xml 配置相关的映射器、适配器，spring会使用默认的，默认的配置 在 DispatcherServlet.properties 中：<br>这些默认的都不建议使用了。<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://7xr1vo.com1.z0.glb.clouddn.com/B77F53FF-BBEF-40EC-BD0A-E176EB7AD8DA.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"># Default implementation classes for DispatcherServlet's strategy interfaces.</div><div class="line"># Used as fallback when no matching beans are found in the DispatcherServlet context.</div><div class="line"># Not meant to be customized by application developers.</div><div class="line"></div><div class="line">org.springframework.web.servlet.LocaleResolver=org.springframework.web.servlet.i18n.AcceptHeaderLocaleResolver</div><div class="line"></div><div class="line">org.springframework.web.servlet.ThemeResolver=org.springframework.web.servlet.theme.FixedThemeResolver</div><div class="line"></div><div class="line">org.springframework.web.servlet.HandlerMapping=org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping,\</div><div class="line">   org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping</div><div class="line"></div><div class="line">org.springframework.web.servlet.HandlerAdapter=org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter,\</div><div class="line">   org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter,\</div><div class="line">   org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter</div><div class="line"></div><div class="line">org.springframework.web.servlet.HandlerExceptionResolver=org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerExceptionResolver,\</div><div class="line">   org.springframework.web.servlet.mvc.annotation.ResponseStatusExceptionResolver,\</div><div class="line">   org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver</div><div class="line"></div><div class="line">org.springframework.web.servlet.RequestToViewNameTranslator=org.springframework.web.servlet.view.DefaultRequestToViewNameTranslator</div><div class="line"></div><div class="line">org.springframework.web.servlet.ViewResolver=org.springframework.web.servlet.view.InternalResourceViewResolver</div><div class="line"></div><div class="line">org.springframework.web.servlet.FlashMapManager=org.springframework.web.servlet.support.SessionFlashMapManager</div></pre></td></tr></table></figure>
<p>Spring 3.1之后 使用的 映射器 和 适配器：</p>
<p>org.springframework.web.servlet.mvc.method.RequestMappingInfoHandlerMapping<br>org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter</p>
<p>springmvc.xml 中的约束配置，参考文档进行配置：<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://7xr1vo.com1.z0.glb.clouddn.com/5665FF5D-517B-45F0-819D-3707A9534C8B.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></div><div class="line">    <span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span></div><div class="line">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></div><div class="line">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans         </span></div><div class="line">        http://www.springframework.org/schema/beans/spring-beans.xsd         </div><div class="line">        http://www.springframework.org/schema/mvc         </div><div class="line">        http://www.springframework.org/schema/mvc/spring-mvc.xsd"&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></div></pre></td></tr></table></figure>
<p>基本配置：<br>web.xml：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE web-app PUBLIC</span></div><div class="line">        "-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN"</div><div class="line">        "http://java.sun.com/dtd/web-app_2_3.dtd" &gt;</div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">web-app</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>springmvcdemo1<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="comment">&lt;!-- 设置 springmvc 的配置文件 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:springmvcConfig.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!-- 访问 action 结尾的，由 DispatcherServlet 来解析--&gt;</span></div><div class="line"></div><div class="line">        <span class="comment">&lt;!--http://localhost:8080/springmvcdemo1/queryItems.action--&gt;</span></div><div class="line">        <span class="comment">&lt;!--&lt;url-pattern&gt;*.action&lt;/url-pattern&gt;--&gt;</span></div><div class="line"></div><div class="line">        <span class="comment">&lt;!--http://localhost:8080/springmvcdemo1/queryItems--&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></div></pre></td></tr></table></figure>
<p>springmvc.xml 基本配置： </p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></div><div class="line">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></div><div class="line">       <span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span></div><div class="line">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></div><div class="line">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></div><div class="line">      http://www.springframework.org/schema/beans/spring-beans-3.2.xsd</div><div class="line">      http://www.springframework.org/schema/context</div><div class="line">        http://www.springframework.org/schema/context/spring-context.xsd</div><div class="line">      http://www.springframework.org/schema/mvc</div><div class="line">      http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd"&gt;</div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- 注解的 映射器、适配器--&gt;</span></div><div class="line">    <span class="comment">&lt;!--&lt;bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping"/&gt;--&gt;</span></div><div class="line">    <span class="comment">&lt;!--&lt;bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter"/&gt;--&gt;</span></div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- 此配置默认 设置了 映射器、适配器，而且加载了许多的参数绑定，如json的自动转换</span></div><div class="line">        开发时候使用它 ：   --&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span> /&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- 视图解析器--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/jsp/"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- 使用扫描controller,service等等 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.gjr.controller"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="参数绑定"><a href="#参数绑定" class="headerlink" title="参数绑定"></a>参数绑定</h2><p>此处举例，具体看项目<br>@RequestMap中的简单类型，直接安装相关参数进行设置即可<br>对于包装类型 pojo, 客户端请求时候，相关的参数必须要和Pojo的属性名称一致</p>
<p>如：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ItemsQueryVo</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">// 商品信息</span></div><div class="line">    <span class="keyword">private</span> Items items;</div><div class="line"></div><div class="line">    <span class="comment">// 为了扩展性，对生成的 po 进行扩展</span></div><div class="line">    <span class="keyword">private</span> ItemsCustom itemsCustom;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/editItemsSubmit"</span>)</div><div class="line"><span class="function"><span class="keyword">public</span> ModelAndView <span class="title">editItemsSubmit</span><span class="params">(Integer id, ItemsQueryVo itemsQueryVo)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> modelAndView;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>前端页面请求时候，表单信息中：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">“itemsCustom.name”</span> …/&gt;</span></div></pre></td></tr></table></figure>
<h2 id="Spring-校验相关"><a href="#Spring-校验相关" class="headerlink" title="Spring 校验相关"></a>Spring 校验相关</h2><p>使用的是 Hibernate 的校验框架：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.hibernate<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hibernate-validator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.4.Final<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://7xr1vo.com1.z0.glb.clouddn.com/BD15A0C3-C8A8-4C0E-84AB-656C19A1C1B0.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>具体看项目。。。</p>
<p><br></p>
<p>附录<br>demo 地址：<br><a href="https://github.com/fenglincanyi/ssmdemo" target="_blank" rel="external">https://github.com/fenglincanyi/ssmdemo</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;springmvc-框架原理&quot;&gt;&lt;a href=&quot;#springmvc-框架原理&quot; class=&quot;headerlink&quot; title=&quot;springmvc 框架原理&quot;&gt;&lt;/a&gt;springmvc 框架原理&lt;/h2&gt;&lt;figure class=&quot;image-bubb
    
    </summary>
    
      <category term="Java后台" scheme="https://fenglincanyi.github.io/categories/Java%E5%90%8E%E5%8F%B0/"/>
    
    
      <category term="Springmvc" scheme="https://fenglincanyi.github.io/tags/Springmvc/"/>
    
  </entry>
  
  <entry>
    <title>Mybatis 逆向工程</title>
    <link href="https://fenglincanyi.github.io/2017/01/17/Mybatis%20%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B/"/>
    <id>https://fenglincanyi.github.io/2017/01/17/Mybatis 逆向工程/</id>
    <published>2017-01-17T02:11:00.000Z</published>
    <updated>2017-03-05T10:14:14.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="pom-配置"><a href="#pom-配置" class="headerlink" title="pom 配置"></a>pom 配置</h2><p>pom.xml 中 加入：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.generator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-generator-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">verbose</span>&gt;</span>true<span class="tag">&lt;/<span class="name">verbose</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">overwrite</span>&gt;</span>true<span class="tag">&lt;/<span class="name">overwrite</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="maven配置"><a href="#maven配置" class="headerlink" title="maven配置"></a>maven配置</h2><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://7xr1vo.com1.z0.glb.clouddn.com/5709477C-1A4B-4AEF-B0E6-5EBE20688677.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://7xr1vo.com1.z0.glb.clouddn.com/8C4EFD37-2282-4BEA-81C7-4C4E11D2A91C.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>命名：<br>mybatis-generator:generate -e</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://7xr1vo.com1.z0.glb.clouddn.com/C97FA1F0-DEDF-4A13-9810-6029D03D97DE.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://7xr1vo.com1.z0.glb.clouddn.com/4EAE9177-A8D0-411D-869D-2167D54CB026.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://7xr1vo.com1.z0.glb.clouddn.com/E3C00FBA-21F9-4B6B-80BE-74D553270C6A.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://7xr1vo.com1.z0.glb.clouddn.com/D0FC7201-E1D6-4D16-90E6-87D079213CA3.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>注意：<br>文件名必须是：generatorConfig.xml<br>否则报错： configfile /Users/geng/ssm/Demo/ssmdemo/src/main/resources/generatorConfig.xml does not exist</p>
<h2 id="mybatis-config-xml-文件配置"><a href="#mybatis-config-xml-文件配置" class="headerlink" title="mybatis config.xml 文件配置"></a>mybatis config.xml 文件配置</h2><p>拷贝驱动包的绝对路径<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://7xr1vo.com1.z0.glb.clouddn.com/68C3A3B3-DB05-4786-A412-C808F0A8AA17.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure></p>
<p>xml 配置：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</div><div class="line"><span class="meta">&lt;!DOCTYPE generatorConfiguration PUBLIC</span></div><div class="line">        "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"</div><div class="line">        "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd" &gt;</div><div class="line"><span class="tag">&lt;<span class="name">generatorConfiguration</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- !!!! Driver Class Path !!!! —&gt;</span></div><div class="line">    &lt;classPathEntry location="/Users/geng/ssm/Demo/mybaitsdemo2/src/main/resources/mysql-connector-java-5.1.7-bin.jar"/&gt;</div><div class="line"></div><div class="line">    &lt;context id="context" targetRuntime="MyBatis3"&gt;</div><div class="line">        &lt;commentGenerator&gt;</div><div class="line">            &lt;property name="suppressAllComments" value="false"/&gt;</div><div class="line">            &lt;property name="suppressDate" value="true"/&gt;</div><div class="line">        &lt;/commentGenerator&gt;</div><div class="line"></div><div class="line">        &lt;!-- !!!! Database Configurations !!!! --&gt;</div><div class="line">        <span class="tag">&lt;<span class="name">jdbcConnection</span> <span class="attr">driverClass</span>=<span class="string">"com.mysql.jdbc.Driver"</span></span></div><div class="line">                        <span class="attr">connectionURL</span>=<span class="string">"jdbc:mysql://localhost:3306/mybatis_demo2_db?characterEncoding=utf-8"</span></div><div class="line">                        <span class="attr">userId</span>=<span class="string">"root"</span></div><div class="line">                        <span class="attr">password</span>=<span class="string">"root"</span>/&gt;</div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">javaTypeResolver</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"forceBigDecimals"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">javaTypeResolver</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="comment">&lt;!-- !!!! Model Configurations !!!! --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">javaModelGenerator</span> <span class="attr">targetPackage</span>=<span class="string">"com.gjr.testgenerator.po"</span> <span class="attr">targetProject</span>=<span class="string">"src/main/java"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"enableSubPackages"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"trimStrings"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">javaModelGenerator</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="comment">&lt;!-- !!!! Mapper XML Configurations !!!! --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">sqlMapGenerator</span> <span class="attr">targetPackage</span>=<span class="string">"com.gjr.testgenerator.mapper"</span> <span class="attr">targetProject</span>=<span class="string">"src/main/java"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"enableSubPackages"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">sqlMapGenerator</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="comment">&lt;!-- !!!! Mapper Interface Configurations !!!! --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">javaClientGenerator</span> <span class="attr">targetPackage</span>=<span class="string">"com.gjr.testgenerator.mapper"</span> <span class="attr">targetProject</span>=<span class="string">"src/main/java"</span> <span class="attr">type</span>=<span class="string">"XMLMAPPER"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"enableSubPackages"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">javaClientGenerator</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="comment">&lt;!-- !!!! Table Configurations !!!! --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">tableName</span>=<span class="string">"items"</span> <span class="attr">enableCountByExample</span>=<span class="string">"false"</span> <span class="attr">enableDeleteByExample</span>=<span class="string">"false"</span> <span class="attr">enableSelectByExample</span>=<span class="string">"false"</span></span></div><div class="line">               <span class="attr">enableUpdateByExample</span>=<span class="string">"false"</span>/&gt;</div><div class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">tableName</span>=<span class="string">"orders"</span> <span class="attr">enableCountByExample</span>=<span class="string">"false"</span> <span class="attr">enableDeleteByExample</span>=<span class="string">"false"</span> <span class="attr">enableSelectByExample</span>=<span class="string">"false"</span></span></div><div class="line">               <span class="attr">enableUpdateByExample</span>=<span class="string">"false"</span>/&gt;</div><div class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">tableName</span>=<span class="string">"orderdetail"</span> <span class="attr">enableCountByExample</span>=<span class="string">"false"</span> <span class="attr">enableDeleteByExample</span>=<span class="string">"false"</span> <span class="attr">enableSelectByExample</span>=<span class="string">"false"</span></span></div><div class="line">               <span class="attr">enableUpdateByExample</span>=<span class="string">"false"</span>/&gt;</div><div class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">tableName</span>=<span class="string">"user"</span> <span class="attr">enableCountByExample</span>=<span class="string">"false"</span> <span class="attr">enableDeleteByExample</span>=<span class="string">"false"</span> <span class="attr">enableSelectByExample</span>=<span class="string">"false"</span></span></div><div class="line">               <span class="attr">enableUpdateByExample</span>=<span class="string">"false"</span>/&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;/<span class="name">context</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">generatorConfiguration</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="运行逆向生成代码"><a href="#运行逆向生成代码" class="headerlink" title="运行逆向生成代码"></a>运行逆向生成代码</h2><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://7xr1vo.com1.z0.glb.clouddn.com/90C77448-2475-4EE3-B0D3-BF49D2A79606.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://7xr1vo.com1.z0.glb.clouddn.com/617ABCDF-11AB-45AF-BA9C-1150393FEDC9.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>运行成功</p>
<p><br></p>
<p>附录<br>demo 地址：<br><a href="https://github.com/fenglincanyi/mybaitsdemo2" target="_blank" rel="external">https://github.com/fenglincanyi/mybaitsdemo2</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;pom-配置&quot;&gt;&lt;a href=&quot;#pom-配置&quot; class=&quot;headerlink&quot; title=&quot;pom 配置&quot;&gt;&lt;/a&gt;pom 配置&lt;/h2&gt;&lt;p&gt;pom.xml 中 加入：&lt;/p&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table
    
    </summary>
    
      <category term="Java后台" scheme="https://fenglincanyi.github.io/categories/Java%E5%90%8E%E5%8F%B0/"/>
    
    
      <category term="Mybatis" scheme="https://fenglincanyi.github.io/tags/Mybatis/"/>
    
  </entry>
  
  <entry>
    <title>Mybatis 学习（二）</title>
    <link href="https://fenglincanyi.github.io/2017/01/15/Mybatis%20%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <id>https://fenglincanyi.github.io/2017/01/15/Mybatis 学习（二）/</id>
    <published>2017-01-15T06:32:00.000Z</published>
    <updated>2017-03-05T09:45:47.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>本次学习内容：MyBatis 高级<br>结合demo进行学习</p>
</blockquote>
<h2 id="2张表关联查询，一对一查询"><a href="#2张表关联查询，一对一查询" class="headerlink" title="2张表关联查询，一对一查询"></a>2张表关联查询，一对一查询</h2><ul>
<li>需求<br>查询订单的信息及用户信息</li>
</ul>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span></div><div class="line">orders.*,user.username,user.sex, user.address</div><div class="line"><span class="keyword">from</span> orders, <span class="keyword">user</span></div><div class="line"><span class="keyword">where</span> orders.user_id=user.id</div></pre></td></tr></table></figure>
<p>结果集：<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://7xr1vo.com1.z0.glb.clouddn.com/0A6D42AE-B4E6-4960-8313-FAE563CBA426.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure></p>
<p>主要对 结果集 进行分析，再书写 mapper.xml</p>
<ul>
<li>resultType实现<br>新建一个 po , 继承自 Orders（因为此sql 中 orders表的字段较多），再增加 user 的几个字段即可.</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrdersCustom</span> <span class="keyword">extends</span> <span class="title">Orders</span></span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">// 需求：</span></div><div class="line">    <span class="comment">// select orders.*,user.username,user.sex, user.address</span></div><div class="line">    <span class="comment">// from orders, user</span></div><div class="line">    <span class="comment">// where orders.user_id=user.id</span></div><div class="line"></div><div class="line">    <span class="keyword">private</span> String username;</div><div class="line">    <span class="keyword">private</span> String sex;</div><div class="line">    <span class="keyword">private</span> String address;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> username;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsername</span><span class="params">(String username)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.username = username;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getSex</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> sex;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSex</span><span class="params">(String sex)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.sex = sex;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getAddress</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> address;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAddress</span><span class="params">(String address)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.address = address;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">OrdersCustomMapper</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">// 一对一查询 使用 resultType实现</span></div><div class="line">    <span class="function">List&lt;OrdersCustom&gt; <span class="title">queryOrdersUser</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"queryOrdersUser"</span> <span class="attr">resultType</span>=<span class="string">"com.gjr.po.OrdersCustom"</span>&gt;</span></div><div class="line">    select</div><div class="line">    orders.*,user.username,user.sex, user.address</div><div class="line">    from orders, user</div><div class="line">    where orders.user_id=user.id</div><div class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>resultMap实现<br>需要使用 association 进行关联，在原来的 Orders 类中 添加 user 属性</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">* 一对一查询：使用 resultMap实现，优点：可实现懒加载</div><div class="line">*/</div><div class="line"><span class="keyword">private</span> User user;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> user;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUser</span><span class="params">(User user)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>.user = user;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"queryOrdersUser1"</span> <span class="attr">resultMap</span>=<span class="string">"OrdersUserResultMap"</span>&gt;</span></div><div class="line">    select</div><div class="line">    orders.*,user.username,user.sex, user.address</div><div class="line">    from orders, user</div><div class="line">    where orders.user_id=user.id</div><div class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"OrdersUserResultMap"</span> <span class="attr">type</span>=<span class="string">"com.gjr.po.Orders"</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 配置订单信息 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">property</span>=<span class="string">"id"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"user_id"</span> <span class="attr">property</span>=<span class="string">"userId"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"number"</span> <span class="attr">property</span>=<span class="string">"number"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"createtime"</span> <span class="attr">property</span>=<span class="string">"createtime"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"note"</span> <span class="attr">property</span>=<span class="string">"note"</span>/&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- 配置用户信息 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">"user"</span> <span class="attr">javaType</span>=<span class="string">"com.gjr.po.User"</span>&gt;</span> <span class="comment">&lt;!-- 这个 property="user" 就是 com.gjr.po.Orders 中增加的那个 user 属性--&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"user_id"</span> <span class="attr">property</span>=<span class="string">"id"</span>/&gt;</span> <span class="comment">&lt;!-- column="user_id" 是查出来的结果中 用户的 唯一标示 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"username"</span> <span class="attr">property</span>=<span class="string">"username"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"sex"</span> <span class="attr">property</span>=<span class="string">"sex"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"address"</span> <span class="attr">property</span>=<span class="string">"address"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">association</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://7xr1vo.com1.z0.glb.clouddn.com/CB9AFFD6-B061-41CC-BC0B-0376C263DC0F.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<h2 id="3张表关联查询，一对多查询"><a href="#3张表关联查询，一对多查询" class="headerlink" title="3张表关联查询，一对多查询"></a>3张表关联查询，一对多查询</h2><p><strong>确定主表，对其 po 添加所需字段</strong></p>
<ul>
<li>需求<br>– 查询用户订单详情</li>
</ul>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span></div><div class="line">orders.*,</div><div class="line">user.username,user.sex, user.address,</div><div class="line">orderdetail.id orderdetail_id,</div><div class="line">orderdetail.items_id,</div><div class="line">orderdetail.items_num,</div><div class="line">orderdetail.orders_id</div><div class="line"><span class="keyword">from</span> orders, <span class="keyword">user</span>, orderdetail</div><div class="line"><span class="keyword">where</span> orders.user_id = user.id <span class="keyword">and</span> orders_id = orders.id</div></pre></td></tr></table></figure>
<p>结果集：<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://7xr1vo.com1.z0.glb.clouddn.com/937F9118-45DC-4D2F-83A3-8ED359C2CD7F.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure></p>
<ul>
<li>实现</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"queryOrdersDetailUser"</span> <span class="attr">resultMap</span>=<span class="string">"OrdersDetailUserMap"</span>&gt;</span></div><div class="line">select</div><div class="line">    orders.*,</div><div class="line">    user.username,user.sex, user.address,</div><div class="line">    orderdetail.id orderdetail_id,</div><div class="line">    orderdetail.items_id,</div><div class="line">    orderdetail.items_num,</div><div class="line">    orderdetail.orders_id</div><div class="line">from orders, user, orderdetail</div><div class="line">where orders.user_id = user.id and orders_id = orders.id</div><div class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"OrdersDetailUserMap"</span> <span class="attr">type</span>=<span class="string">"com.gjr.po.Orders"</span> <span class="attr">extends</span>=<span class="string">"OrdersUserResultMap"</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 用户信息、订单信息、复用前面的--&gt;</span></div><div class="line">    </div><div class="line">    <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">"orderdetailList"</span> <span class="attr">ofType</span>=<span class="string">"com.gjr.po.Orderdetail"</span>&gt;</span> <span class="comment">&lt;!--使用 ofType--&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"orderdetail_id"</span> <span class="attr">property</span>=<span class="string">"id"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"items_id"</span> <span class="attr">property</span>=<span class="string">"itemsId"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"items_num"</span> <span class="attr">property</span>=<span class="string">"itemsNum"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"orders_id"</span> <span class="attr">property</span>=<span class="string">"ordersId"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></div></pre></td></tr></table></figure>
<p>在查询主表对应的po类， Orders 中增加字段 </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> List&lt;Orderdetail&gt; orderdetailList;</div></pre></td></tr></table></figure>
<h2 id="3张表联合查询，多对多查询"><a href="#3张表联合查询，多对多查询" class="headerlink" title="3张表联合查询，多对多查询"></a>3张表联合查询，多对多查询</h2><ul>
<li>需求<br>查询用户订单商品明细</li>
</ul>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span></div><div class="line">  orders.*,</div><div class="line">  user.username,</div><div class="line">  user.sex,</div><div class="line">  user.address,</div><div class="line">  orderdetail.id orderdetail_id,</div><div class="line">  orderdetail.items_id,</div><div class="line">  orderdetail.items_num,</div><div class="line">  orderdetail.orders_id,</div><div class="line">  items.name items_name,</div><div class="line">  items.detail items_detail,</div><div class="line">  items.price items_price</div><div class="line"><span class="keyword">FROM</span></div><div class="line">  orders,</div><div class="line">  <span class="keyword">user</span>,</div><div class="line">  orderdetail,</div><div class="line">  items</div><div class="line"><span class="keyword">WHERE</span> orders.user_id = user.id <span class="keyword">AND</span> orderdetail.orders_id=orders.id <span class="keyword">AND</span> orderdetail.items_id = items.id</div></pre></td></tr></table></figure>
<p>结果集：<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://7xr1vo.com1.z0.glb.clouddn.com/C9339305-3D30-4A4F-B349-73DC6B6C9D50.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure></p>
<ul>
<li>实现</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"queryOrdersDetailUserItems"</span> <span class="attr">resultMap</span>=<span class="string">"OrdersDetailUserItemsMap"</span>&gt;</span></div><div class="line">--     查询用户订单商品明细</div><div class="line">        SELECT</div><div class="line">          orders.*,</div><div class="line">          user.username,</div><div class="line">          user.sex,</div><div class="line">          user.address,</div><div class="line">          orderdetail.id orderdetail_id,</div><div class="line">          orderdetail.items_id,</div><div class="line">          orderdetail.items_num,</div><div class="line">          orderdetail.orders_id,</div><div class="line">          items.name items_name,</div><div class="line">          items.detail items_detail,</div><div class="line">          items.price items_price</div><div class="line">        FROM</div><div class="line">          orders,</div><div class="line">          user,</div><div class="line">          orderdetail,</div><div class="line">          items</div><div class="line">        WHERE orders.user_id = user.id AND orderdetail.orders_id=orders.id AND orderdetail.items_id = items.id</div><div class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"OrdersDetailUserItemsMap"</span> <span class="attr">type</span>=<span class="string">"com.gjr.po.User"</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 用户信息--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"user_id"</span> <span class="attr">property</span>=<span class="string">"id"</span>/&gt;</span> <span class="comment">&lt;!-- 根据查询结果 写 column !!! --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"username"</span> <span class="attr">property</span>=<span class="string">"username"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"sex"</span> <span class="attr">property</span>=<span class="string">"sex"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"address"</span> <span class="attr">property</span>=<span class="string">"address"</span>/&gt;</span></div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- 订单信息: 一个用户对应多个订单--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">"ordersList"</span> <span class="attr">ofType</span>=<span class="string">"com.gjr.po.Orders"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">property</span>=<span class="string">"id"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"user_id"</span> <span class="attr">property</span>=<span class="string">"userId"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"number"</span> <span class="attr">property</span>=<span class="string">"number"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"createtime"</span> <span class="attr">property</span>=<span class="string">"createtime"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"note"</span> <span class="attr">property</span>=<span class="string">"note"</span>/&gt;</span></div><div class="line"></div><div class="line"></div><div class="line">        <span class="comment">&lt;!-- 订单明细：一个订单对应多个明细 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">"orderdetailList"</span> <span class="attr">ofType</span>=<span class="string">"com.gjr.po.Orderdetail"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"orderdetail_id"</span> <span class="attr">property</span>=<span class="string">"id"</span>/&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"items_id"</span> <span class="attr">property</span>=<span class="string">"itemsId"</span>/&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"items_num"</span> <span class="attr">property</span>=<span class="string">"itemsNum"</span>/&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"orders_id"</span> <span class="attr">property</span>=<span class="string">"ordersId"</span>/&gt;</span></div><div class="line"></div><div class="line"></div><div class="line">            <span class="comment">&lt;!-- 商品信息：一个明细对应一个商品 --&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">"items"</span> <span class="attr">javaType</span>=<span class="string">"com.gjr.po.Items"</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"items_id"</span> <span class="attr">property</span>=<span class="string">"id"</span>/&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"items_name"</span> <span class="attr">property</span>=<span class="string">"name"</span>/&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"items_detail"</span> <span class="attr">property</span>=<span class="string">"detail"</span>/&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"items_price"</span> <span class="attr">property</span>=<span class="string">"price"</span>/&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">association</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></div></pre></td></tr></table></figure>
<p>各个 po 类需要分别增加相关字段即可，安装关联的类型和字段</p>
<h2 id="懒加载"><a href="#懒加载" class="headerlink" title="懒加载"></a>懒加载</h2><p>配置 mybatisConfig.xml 相关参数：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 打开 延迟加载 的开关--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"lazyLoadingEnabled"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 设置按需加载 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"aggressiveLazyLoading"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findOrdersUserLazyLoading"</span> <span class="attr">resultMap</span>=<span class="string">"OrdersUserLazyLoadingResultMap"</span>&gt;</span></div><div class="line">--         懒加载测试</div><div class="line">        SELECT * FROM orders</div><div class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></div></pre></td></tr></table></figure>
<p>用 association 实现延迟加载：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"OrdersUserLazyLoadingResultMap"</span> <span class="attr">type</span>=<span class="string">"com.gjr.po.Orders"</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!--对订单信息进行映射配置  --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">property</span>=<span class="string">"id"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"user_id"</span> <span class="attr">property</span>=<span class="string">"userId"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"number"</span> <span class="attr">property</span>=<span class="string">"number"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"createtime"</span> <span class="attr">property</span>=<span class="string">"createtime"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"note"</span> <span class="attr">property</span>=<span class="string">"note"</span>/&gt;</span></div><div class="line">    </div><div class="line">    <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">"user"</span> <span class="attr">javaType</span>=<span class="string">"com.gjr.po.User"</span></span></div><div class="line">                 <span class="attr">select</span>=<span class="string">"com.gjr.mapper.UserMapper.findUserById"</span></div><div class="line">                 <span class="attr">column</span>=<span class="string">"user_id"</span>&gt;</div><div class="line">        <span class="comment">&lt;!-- 实现对用户信息进行延迟加载 --&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;/<span class="name">association</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></div></pre></td></tr></table></figure>
<p>测试：<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://7xr1vo.com1.z0.glb.clouddn.com/51C2ECFE-8AD9-4354-B9D1-3E0B7DC66FE8.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure></p>
<h2 id="mybatis-缓存相关"><a href="#mybatis-缓存相关" class="headerlink" title="mybatis 缓存相关"></a>mybatis 缓存相关</h2><ul>
<li>mybatis默认开启一级缓存，二级缓存</li>
<li>Mybatis查询得数据，缓存至一级缓存，再缓存至二级缓存中，二级缓存是 mapper 级别的，凡是同一个mapper，都会有自己的二级缓存区</li>
<li>多个sqlsession可以同享同一个 mapper的二级缓存</li>
</ul>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul>
<li>resultMap可以实现高级映射（使用association、collection实现一对一及一对多映射），association、collection具备延迟加载功能。</li>
<li>延迟加载：先从单表查询、需要时再从关联表去关联查询，大大提高数据库性能，因为查询单表要比关联查询多张表速度要快。</li>
<li>查询结果 必须要和 pojo 类型保持一致</li>
<li>联系实际问题的关系类型（如：一个订单对应一个用户，一个订单对应多个明细），进行 po 的修改或扩展</li>
<li>association, collection 分别是 关系类型为：1对1，1对多   配置时分别是 javaType 、ofType</li>
</ul>
<p><br></p>
<p>附录<br>demo 地址：<br><a href="https://github.com/fenglincanyi/mybaitsdemo2" target="_blank" rel="external">https://github.com/fenglincanyi/mybaitsdemo2</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本次学习内容：MyBatis 高级&lt;br&gt;结合demo进行学习&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;2张表关联查询，一对一查询&quot;&gt;&lt;a href=&quot;#2张表关联查询，一对一查询&quot; class=&quot;headerlink&quot; title=&quot;
    
    </summary>
    
      <category term="Java后台" scheme="https://fenglincanyi.github.io/categories/Java%E5%90%8E%E5%8F%B0/"/>
    
    
      <category term="Mybatis" scheme="https://fenglincanyi.github.io/tags/Mybatis/"/>
    
  </entry>
  
  <entry>
    <title>Mybatis 学习（一）</title>
    <link href="https://fenglincanyi.github.io/2017/01/11/Mybatis%20%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>https://fenglincanyi.github.io/2017/01/11/Mybatis 学习（一）/</id>
    <published>2017-01-11T04:01:00.000Z</published>
    <updated>2017-03-05T09:14:37.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>本次学习内容：MyBatis 基础</p>
</blockquote>
<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>mybatis 是一个持久层框架，是apache下的开源项目<br>是一个半自动化框架，与Hibernate相比，需要开发者手动写sql，这样更为灵活配置<br>mybatis 可以将PreparedStatement 中输入的参数自动进行输入映射，将查询结果灵活映射成 Java 对象</p>
<h2 id="基本原理"><a href="#基本原理" class="headerlink" title="基本原理"></a>基本原理</h2><p>执行过程：</p>
<p>SqlMapConfig.xml/mapper.xml … —&gt;<br>SqlSessionFactory —&gt;<br>SqlSession —&gt;<br>Executor —&gt;<br>mapper statement —&gt;<br>db</p>
<ul>
<li>配置数据源，映射文件</li>
<li>创建SqlSession 交给执行器操作数据库</li>
<li>操作数据库</li>
<li>对操作数据库存储做封装，包括SQL语句，输入参数，输出结果</li>
</ul>
<h2 id="遇到问题"><a href="#遇到问题" class="headerlink" title="遇到问题"></a>遇到问题</h2><p>报错：<br>org.apache.ibatis.binding.BindingException: Invalid bound statement (not found):    ………<br>然后，发现target目录下，XxxMapper.xml 没有在 target 下相应的目录生成<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://7xr1vo.com1.z0.glb.clouddn.com/4B5E209A-0C22-4072-8B8D-AD3532042E98.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure></p>
<p>原因：</p>
<pre><code>在使用maven等构建工具时，默认会将源码编译后再加上资源目录的文件放到target目录下作为最后运行的文件（可以是war,jar,或者目录）。有时为了方便，我们会在src/main/java源码目录下放了资源文件，例如mybatis的mapper文件，方便我们编程时展开查看。这时，我们需要设置编译时也将这些配置文件放到target目录下，否则最后的target目录式没有这些文件的。
</code></pre><p>解决：<br>在maven中，在build元素中添加：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">resources</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul>
<li>Mybatis 框架实际上 是对原来 jdbc 代码的封装，将繁琐重复的代码，交付给配置文件和接口类进行灵活的对象映射</li>
<li>动态sql 有点像 jstl，很容易理解，目的就是为了灵活的玩 sql 语句</li>
<li>对于各种类型的sql 语句，需要记住mybatis的处理方式即可</li>
<li>Mybatis 是将 对象或简单类型输入，将结果以数据实体/简单类型输出，省去了 jdbc 的复杂操作</li>
<li>进行 事务性操作时，一定要 commit，否则不生效<br>sqlSession.commit();</li>
</ul>
<h2 id="mybatis-插件"><a href="#mybatis-插件" class="headerlink" title="mybatis 插件"></a>mybatis 插件</h2><p>附录：<br>    使用：<a href="https://www.oschina.net/p/intellij-mybatis-plugin" target="_blank" rel="external">https://www.oschina.net/p/intellij-mybatis-plugin</a><br>    下载：<a href="https://github.com/CHN-Jaylin/Plugins-Cracked" target="_blank" rel="external">https://github.com/CHN-Jaylin/Plugins-Cracked</a> （破解的)</p>
<p><br></p>
<p>参考：<br><a href="http://ask.csdn.net/questions/226091" target="_blank" rel="external">http://ask.csdn.net/questions/226091</a></p>
<p>附录<br>demo 地址：<br><a href="https://github.com/fenglincanyi/mybaitsdemo1" target="_blank" rel="external">https://github.com/fenglincanyi/mybaitsdemo1</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本次学习内容：MyBatis 基础&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h2&gt;&lt;p&gt;mybatis 是一个持久层框架，是
    
    </summary>
    
      <category term="Java后台" scheme="https://fenglincanyi.github.io/categories/Java%E5%90%8E%E5%8F%B0/"/>
    
    
      <category term="Mybatis" scheme="https://fenglincanyi.github.io/tags/Mybatis/"/>
    
  </entry>
  
  <entry>
    <title>Spring 学习（三）</title>
    <link href="https://fenglincanyi.github.io/2017/01/07/Spring%20%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%89%EF%BC%89/"/>
    <id>https://fenglincanyi.github.io/2017/01/07/Spring 学习（三）/</id>
    <published>2017-01-07T04:01:00.000Z</published>
    <updated>2017-03-05T08:53:15.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>本次学习内容：Spring AOP相关</p>
</blockquote>
<h1 id="问题引入"><a href="#问题引入" class="headerlink" title="问题引入"></a>问题引入</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addUser</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">// ...</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>—— 需求，在上面原有的功能中，加入用户日志，记录用户信息？如何做？<br>—— 方法尝试：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseUser</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">writeLog</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">// 写日志，记录用户信息</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">extends</span> <span class="title">BaseUser</span></span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addUser</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">// ...</span></div><div class="line">        <span class="keyword">super</span>.writeLog();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这种 纵向 的抽取，并不能友好的解决问题，一旦父类的名称改变，后面也要接着更改</p>
<h1 id="AOP-原理"><a href="#AOP-原理" class="headerlink" title="AOP 原理"></a>AOP 原理</h1><h2 id="有接口"><a href="#有接口" class="headerlink" title="有接口"></a>有接口</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Dao</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DaoImpl</span> <span class="keyword">implements</span> <span class="title">Dao</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span> </span>&#123;</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>使用 jdk 动态代理，生成 接口实现类的代理对象，来增相应方法的功能</p>
<h2 id="没有接口"><a href="#没有接口" class="headerlink" title="没有接口"></a>没有接口</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addUser</span><span class="params">()</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>使用 cglib 动态代理，生成其子类的代理对象，调用父类的方法，来增强相应功能</p>
<h1 id="几个重要-术语"><a href="#几个重要-术语" class="headerlink" title="几个重要 术语"></a>几个重要 术语</h1><ul>
<li>连接点 JoinPoint：类中哪些方法可以被 增强，这些方法就是 连接点</li>
<li>切入点 PointCut：类中实际增强类那些方法（如：add,update)，这些方法称为 切入点</li>
<li>通知／增强 advice: 增强的逻辑，如：要扩展日志功能，则日志功能为 增强／通知<br>分为：前置通知(方法之前执行），后置通知，异常通知(方法出现异常)，最终通知(后置之后执行)，环绕通知(方法之前和之后执行)</li>
<li>切面 aspect：把增强功能应用到具体方法上，这个过程叫切面。即：把增强应用到切入点的过程</li>
<li>目标对象 target: 要增强的类，代理的目标对象</li>
<li>织入 weaving: 把增强应用到目标的过程，把advice 应用到target的过程</li>
<li>代理 Proxy: 一个类被aop织入增强后，就产生一个结果代理类</li>
</ul>
<h1 id="实现AOP"><a href="#实现AOP" class="headerlink" title="实现AOP"></a>实现AOP</h1><h2 id="xml-配置实现"><a href="#xml-配置实现" class="headerlink" title="xml 配置实现"></a>xml 配置实现</h2><ul>
<li><p>切入点配置表达式：<br><strong>execution(&lt;访问修饰符&gt; &lt;返回类型&gt;&lt;方法名&gt;(参数)&lt;异常&gt;）</strong><br>e.g.</p>
<pre><code>execution(* com.gjr.aop.Book.add(..))
execution(* com.gjr.aop.Book.*(..))          book 类下的所有方法加强
execution(* *.*(..))                         所有类下的所有方法加强
execution(* xxx*(..))                        所有xxx开头的方法加强
</code></pre></li>
</ul>
<p><br><br>demo 示例：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Book</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"show book ...."</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBook</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addFunctionBefore</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"在前面，加点功能 。。。"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addFunctionAfter</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"在后面，加点功能 。。。"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">arroundFunction</span><span class="params">(ProceedingJoinPoint proceedingJoinPoint)</span> <span class="keyword">throws</span> Throwable </span>&#123;</div><div class="line">        System.out.println(<span class="string">"之前环绕 。。。"</span>);</div><div class="line">        proceedingJoinPoint.proceed();</div><div class="line">        System.out.println(<span class="string">"之后环绕 。。。"</span>);</div><div class="line">        <span class="comment">// 注意 环绕通知 的参数：ProceedingJoinPoint</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>xml配置：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></div><div class="line">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></div><div class="line">       <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></div><div class="line">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></div><div class="line">            http://www.springframework.org/schema/beans/spring-beans.xsd</div><div class="line">            http://www.springframework.org/schema/aop</div><div class="line">            http://www.springframework.org/schema/aop/spring-aop.xsd"&gt;</div><div class="line">    <span class="comment">&lt;!-- 加入 aop 约束，xml 配置aop 来实现功能—&gt;</span></div><div class="line"></div><div class="line">    &lt;bean id="book" class="com.gjr.aspect.Book"/&gt;</div><div class="line">    &lt;bean id="myBook" class="com.gjr.aspect.MyBook"/&gt;</div><div class="line"></div><div class="line">    &lt;aop:config&gt;</div><div class="line">        &lt;!-- 切点: 需要被增强功能的方法 --&gt;</div><div class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"bookPoint"</span> <span class="attr">expression</span>=<span class="string">"execution(* com.gjr.aspect.Book.show(..))"</span>/&gt;</span></div><div class="line">        <span class="comment">&lt;!-- 切面: 把增强方法加到需要增强的方法上 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">"myBook"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">"addFunctionBefore"</span> <span class="attr">pointcut-ref</span>=<span class="string">"bookPoint"</span>/&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">aop:after</span> <span class="attr">method</span>=<span class="string">"addFunctionAfter"</span> <span class="attr">pointcut-ref</span>=<span class="string">"bookPoint"</span>/&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">aop:around</span> <span class="attr">method</span>=<span class="string">"arroundFunction"</span> <span class="attr">pointcut-ref</span>=<span class="string">"bookPoint"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://7xr1vo.com1.z0.glb.clouddn.com/DE37AB73-E35C-4515-8EE9-377A606E3956.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>3种 切面类型同时存在时：before最先调用，after最后调用</p>
<h2 id="注解实现-aop（只列出-Before，其他的相同）"><a href="#注解实现-aop（只列出-Before，其他的相同）" class="headerlink" title="注解实现 aop（只列出@Before，其他的相同）"></a>注解实现 aop（只列出@Before，其他的相同）</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Order</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"show order ..."</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="meta">@Aspect</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyOrder</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Before</span>(value = <span class="string">"execution(* Order.show(..))"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addFunction</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"add function ..."</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"order"</span> <span class="attr">class</span>=<span class="string">"com.gjr.annaop.Order"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"myOrder"</span> <span class="attr">class</span>=<span class="string">"com.gjr.annaop.MyOrder"</span>/&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 注解 实现 aop--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span>/&gt;</span></div></pre></td></tr></table></figure>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://7xr1vo.com1.z0.glb.clouddn.com/83664DD4-196B-44DB-BF22-16A94F0FFA01.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<h1 id="Spring-相关的-pom-配置"><a href="#Spring-相关的-pom-配置" class="headerlink" title="Spring 相关的 pom 配置"></a>Spring 相关的 pom 配置</h1><table>
<thead>
<tr>
<th style="text-align:left">GroupId</th>
<th style="text-align:right">ArtifactId</th>
<th style="text-align:center">Description</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">org.springframework</td>
<td style="text-align:right">spring-aop</td>
<td style="text-align:center">Proxy-based AOP support</td>
</tr>
<tr>
<td style="text-align:left">org.springframework</td>
<td style="text-align:right">spring-aspects</td>
<td style="text-align:center">AspectJ based aspects</td>
</tr>
<tr>
<td style="text-align:left">org.springframework</td>
<td style="text-align:right">spring-beans</td>
<td style="text-align:center">Beans support, including Groovy</td>
</tr>
<tr>
<td style="text-align:left">org.springframework</td>
<td style="text-align:right">spring-context</td>
<td style="text-align:center">Application context runtime, including scheduling and remoting abstractions</td>
</tr>
<tr>
<td style="text-align:left">org.springframework</td>
<td style="text-align:right">spring-context-support</td>
<td style="text-align:center">Support classes for integrating common third-party libraries into a Spring application context</td>
</tr>
<tr>
<td style="text-align:left">org.springframework</td>
<td style="text-align:right">spring-core</td>
<td style="text-align:center">Core utilities, used by many other Spring modules</td>
</tr>
<tr>
<td style="text-align:left">org.springframework</td>
<td style="text-align:right">spring-expression</td>
<td style="text-align:center">Spring Expression Language (SpEL)</td>
</tr>
<tr>
<td style="text-align:left">org.springframework</td>
<td style="text-align:right">spring-instrument</td>
<td style="text-align:center">Instrumentation agent for JVM bootstrapping</td>
</tr>
<tr>
<td style="text-align:left">org.springframework</td>
<td style="text-align:right">spring-instrument-tomcat</td>
<td style="text-align:center">Instrumentation agent for Tomcat</td>
</tr>
<tr>
<td style="text-align:left">org.springframework</td>
<td style="text-align:right">spring-jdbc</td>
<td style="text-align:center">JDBC support package, including DataSource setup and JDBC access support</td>
</tr>
<tr>
<td style="text-align:left">org.springframework</td>
<td style="text-align:right">spring-jms</td>
<td style="text-align:center">JMS support package, including helper classes to send and receive JMS messages</td>
</tr>
<tr>
<td style="text-align:left">org.springframework</td>
<td style="text-align:right">spring-messaging</td>
<td style="text-align:center">Support for messaging architectures and protocols</td>
</tr>
<tr>
<td style="text-align:left">org.springframework</td>
<td style="text-align:right">spring-orm</td>
<td style="text-align:center">Object/Relational Mapping, including JPA and Hibernate support</td>
</tr>
<tr>
<td style="text-align:left">org.springframework</td>
<td style="text-align:right">spring-oxm</td>
<td style="text-align:center">Object/XML Mapping</td>
</tr>
<tr>
<td style="text-align:left">org.springframework</td>
<td style="text-align:right">spring-test</td>
<td style="text-align:center">Support for unit testing and integration testing Spring components</td>
</tr>
<tr>
<td style="text-align:left">org.springframework</td>
<td style="text-align:right">spring-tx</td>
<td style="text-align:center">Transaction infrastructure, including DAO support and JCA integration</td>
</tr>
<tr>
<td style="text-align:left">org.springframework</td>
<td style="text-align:right">spring-web</td>
<td style="text-align:center">Web support packages, including client and web remoting</td>
</tr>
<tr>
<td style="text-align:left">org.springframework</td>
<td style="text-align:right">spring-webmvc</td>
<td style="text-align:center">REST Web Services and model-view-controller implementation for web applications</td>
</tr>
<tr>
<td style="text-align:left">org.springframework</td>
<td style="text-align:right">spring-webmvc-portlet</td>
<td style="text-align:center">MVC implementation to be used in a Portlet environment</td>
</tr>
<tr>
<td style="text-align:left">org.springframework</td>
<td style="text-align:right">spring-websocket</td>
<td style="text-align:center">WebSocket and SockJS implementations, including STOMP support</td>
</tr>
</tbody>
</table>
<p><br></p>
<p>附录<br>demo 地址：<br><a href="https://github.com/fenglincanyi/springdemo2" target="_blank" rel="external">https://github.com/fenglincanyi/springdemo2</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本次学习内容：Spring AOP相关&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;问题引入&quot;&gt;&lt;a href=&quot;#问题引入&quot; class=&quot;headerlink&quot; title=&quot;问题引入&quot;&gt;&lt;/a&gt;问题引入&lt;/h1&gt;&lt;figure cla
    
    </summary>
    
      <category term="Java后台" scheme="https://fenglincanyi.github.io/categories/Java%E5%90%8E%E5%8F%B0/"/>
    
    
      <category term="Spring" scheme="https://fenglincanyi.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Spring 学习（二）</title>
    <link href="https://fenglincanyi.github.io/2016/12/27/Spring%20%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <id>https://fenglincanyi.github.io/2016/12/27/Spring 学习（二）/</id>
    <published>2016-12-27T09:01:00.000Z</published>
    <updated>2017-03-05T08:41:50.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>本次学习内容：Spring 依赖注入相关</p>
</blockquote>
<h1 id="xml-配置实现"><a href="#xml-配置实现" class="headerlink" title="xml 配置实现"></a>xml 配置实现</h1><h2 id="setXXX-方法注入"><a href="#setXXX-方法注入" class="headerlink" title="setXXX() 方法注入"></a>setXXX() 方法注入</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"book"</span> <span class="attr">class</span>=<span class="string">"com.geng.attr.Book"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"bookName"</span> <span class="attr">value</span>=<span class="string">"西游记"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="构造方法注入"><a href="#构造方法注入" class="headerlink" title="构造方法注入"></a>构造方法注入</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">// 这里通过有参构造注入</div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"people"</span> <span class="attr">class</span>=<span class="string">"com.geng.attr.People"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"小明"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="对象注入"><a href="#对象注入" class="headerlink" title="对象注入"></a>对象注入</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userDao"</span> <span class="attr">class</span>=<span class="string">"com.geng.obj.UserDao"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userService"</span> <span class="attr">class</span>=<span class="string">"com.geng.obj.UserService"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"userDao"</span> <span class="attr">ref</span>=<span class="string">"userDao"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDao</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showUserDao</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"show user dao..."</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> UserDao userDao;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserDao</span><span class="params">(UserDao userDao)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.userDao = userDao;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showService</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"show Service...."</span>);</div><div class="line"></div><div class="line">        userDao.showUserDao();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>测试：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceTest</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> ApplicationContext context;</div><div class="line"></div><div class="line">    <span class="meta">@Before</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUp</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"beans1.xml"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showService</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        UserService userService = (UserService) context.getBean(<span class="string">"userService"</span>);</div><div class="line">        userService.showService();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://7xr1vo.com1.z0.glb.clouddn.com/40B10214-301C-4735-8CE0-8DB0F4CCCC8B.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<h2 id="p命名空间注入"><a href="#p命名空间注入" class="headerlink" title="p命名空间注入"></a>p命名空间注入</h2><p>xml 头部加入：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">xmlns:p="http://www.springframework.org/schema/p"</div></pre></td></tr></table></figure>
<p>配置：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"person"</span> <span class="attr">class</span>=<span class="string">"com.geng.attr.Person"</span> <span class="attr">p:pName</span>=<span class="string">"呵呵哒”/&gt;</span></span></div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> String pName;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setpName</span><span class="params">(String pName)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.pName = pName;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"result: "</span> + pName);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://7xr1vo.com1.z0.glb.clouddn.com/EA20EBAD-5360-4197-BA0C-4059ABF7636F.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<h2 id="复杂类型注入"><a href="#复杂类型注入" class="headerlink" title="复杂类型注入"></a>复杂类型注入</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MulitDemo</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> String[] arrs;</div><div class="line">    <span class="keyword">private</span> List&lt;String&gt; list;</div><div class="line">    <span class="keyword">private</span> Map&lt;String, String&gt; map;</div><div class="line">    <span class="keyword">private</span> Properties properties;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setArrs</span><span class="params">(String[] arrs)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.arrs = arrs;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setList</span><span class="params">(List&lt;String&gt; list)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.list = list;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMap</span><span class="params">(Map&lt;String, String&gt; map)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.map = map;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setProperties</span><span class="params">(Properties properties)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.properties = properties;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showAll</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(arrs);</div><div class="line">        System.out.println(list);</div><div class="line">        System.out.println(map);</div><div class="line">        System.out.println(properties);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>xml 分别配置：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"mulitDemo"</span> <span class="attr">class</span>=<span class="string">"com.geng.collection.MulitDemo"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"arrs"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">array</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>小红<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>小白<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>小绿<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">array</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"list"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">list</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>大白<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>大春<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>大花<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">list</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"map"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">map</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"001"</span> <span class="attr">value</span>=<span class="string">"小白"</span> /&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"002"</span> <span class="attr">value</span>=<span class="string">"小刘"</span> /&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"003"</span> <span class="attr">value</span>=<span class="string">"小东"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">map</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"properties"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">props</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"driveClass"</span>&gt;</span>com.mysql.jdbc.Driver<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"userName"</span>&gt;</span>root<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"userPwd"</span>&gt;</span>root<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">props</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>测试：<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://7xr1vo.com1.z0.glb.clouddn.com/76FF4DDF-95DD-4F5A-B43F-30946D328A30.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure></p>
<h1 id="注解实现"><a href="#注解实现" class="headerlink" title="注解实现"></a>注解实现</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></div><div class="line">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></div><div class="line">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></div><div class="line">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></div><div class="line">            http://www.springframework.org/schema/beans/spring-beans.xsd</div><div class="line">            http://www.springframework.org/schema/context</div><div class="line">            http://www.springframework.org/schema/context/spring-context.xsd"&gt;</div><div class="line">    <span class="comment">&lt;!-- 上面 加入 spring-context 约束，参照spring文档： 41.2.8 the context schema；否则，无法使用 context标 签 --&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="创建对象注解"><a href="#创建对象注解" class="headerlink" title="创建对象注解"></a>创建对象注解</h2><ul>
<li>@Component</li>
<li>@Controller —— web 层</li>
<li>@Service  —— 业务层</li>
<li>@Repository —— 持久层</li>
</ul>
<p>以上4个注解 功能是一致的，都是用于创建对象，作用在 <strong>类</strong> 上，只是为了后期方便扩展</p>
<h2 id="对象的-scope"><a href="#对象的-scope" class="headerlink" title="对象的 scope"></a>对象的 scope</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Scope</span>(scopeName = ConfigurableBeanFactory.SCOPE_PROTOTYPE) <span class="comment">// 默认是 singleton</span></div></pre></td></tr></table></figure>
<p>可查看源码进行设置</p>
<h2 id="对象属性注入"><a href="#对象属性注入" class="headerlink" title="对象属性注入"></a>对象属性注入</h2><ul>
<li>@Autowired：自动装配</li>
<li>@Resource(name=“userDao”) 指定创建哪种类型的对象</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Component</span>(value = <span class="string">"userDao"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDao</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showUserDao</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"show user dao ..."</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Service</span>(value = <span class="string">"userService"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">// 1. 第一种</span></div><div class="line"><span class="comment">//    @Autowired</span></div><div class="line"><span class="comment">//    private UserDao userDao;// 要使用UserDao的对象，使用自动装配</span></div><div class="line"></div><div class="line">    <span class="comment">// 2. 第二种</span></div><div class="line">    <span class="meta">@Resource</span>(name = <span class="string">"userDao"</span>) <span class="comment">// name 值必须和 UserDao 内的value值必须一样，否则报错：no such bean is defined</span></div><div class="line">    <span class="keyword">private</span> UserDao userDao;<span class="comment">// 这种是明确指定创建哪种类型的对象，比较常用</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showUserService</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"show user service ..."</span>);</div><div class="line">        userDao.showUserDao();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>测试：<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://7xr1vo.com1.z0.glb.clouddn.com/A49E426F-CDC3-4A7E-8AD2-D428586B749D.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure></p>
<p><br></p>
<blockquote>
<p>xml 配置注入 和 注解注入 两种可以联合使用，用法和前面一样，不再举例。</p>
</blockquote>
<h1 id="IOC-与-DI-区别"><a href="#IOC-与-DI-区别" class="headerlink" title="IOC 与 DI 区别"></a>IOC 与 DI 区别</h1><p>IOC ：控制反转，将创建对象交给 Spring 的配置来完成<br>DI ：将对象的属性赋值</p>
<p>DI 是依赖于 ioc 才能完成操作，不能单独存在</p>
<p><br></p>
<p>附录：<br>demo地址：<br><a href="https://github.com/fenglincanyi/springdemo1" target="_blank" rel="external">https://github.com/fenglincanyi/springdemo1</a><br><a href="https://github.com/fenglincanyi/springdemo2" target="_blank" rel="external">https://github.com/fenglincanyi/springdemo2</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本次学习内容：Spring 依赖注入相关&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;xml-配置实现&quot;&gt;&lt;a href=&quot;#xml-配置实现&quot; class=&quot;headerlink&quot; title=&quot;xml 配置实现&quot;&gt;&lt;/a&gt;xml 配置实
    
    </summary>
    
      <category term="Java后台" scheme="https://fenglincanyi.github.io/categories/Java%E5%90%8E%E5%8F%B0/"/>
    
    
      <category term="Spring" scheme="https://fenglincanyi.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Spring 学习（一）</title>
    <link href="https://fenglincanyi.github.io/2016/12/26/Spring%20%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>https://fenglincanyi.github.io/2016/12/26/Spring 学习（一）/</id>
    <published>2016-12-26T06:06:00.000Z</published>
    <updated>2017-02-08T12:03:31.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Spring的2个基本概念"><a href="#Spring的2个基本概念" class="headerlink" title="Spring的2个基本概念"></a>Spring的2个基本概念</h2><ul>
<li>aop<br>面向切面编程<br>在原有的基础上进行扩展，而不是进行修改。符合 开闭原则</li>
<li><p>ioc<br>控制反转<br>不通过手动 new 方式，来创建对象，而是交给Spring 容器根据配置，进行创建。从而将类的对象交给Spring 进行控制管理</p>
<ul>
<li>ioc 的2种方式来创建对象：<br>（1）通过配置文件<br>（2）通过注解<br><br></li>
<li><p>ioc 实现原理</p>
<p>通过dom4j 解析 xml 文件，拿到类的全路径，然后通过反射的技术创建该类的对象，结合工厂模式返给调用方<br>伪代码实现说明：</p>
</li>
</ul>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">“userService”</span> <span class="attr">class</span>=<span class="string">“com.geng.UserService”</span> /&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Factory</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> UserService <span class="title">getUserService</span><span class="params">()</span> </span>&#123;</div><div class="line">        String classValue = dom4j.getValue(“userService”);</div><div class="line">        Class clazz = Class.forName(“classValue”);</div><div class="line">        <span class="keyword">return</span> clazz.newInstance();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Spring-运行时"><a href="#Spring-运行时" class="headerlink" title="Spring 运行时"></a>Spring 运行时</h2><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://7xr1vo.com1.z0.glb.clouddn.com/spring-overview.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>Spring 提供了全面的Java web 服务框架，从web层到业务层，再到持久层，都有着相关模块的实现。<br>对于Spring 最基本使用，必须尹若 Core Container中的4个重要的部分，方可使用。<br>若只引用某部分的库，maven也会自动引用最核心的jar包到你的应用中。</p>
<h2 id="Spring-第一个Demo-开发"><a href="#Spring-第一个Demo-开发" class="headerlink" title="Spring 第一个Demo 开发"></a>Spring 第一个Demo 开发</h2><p>在 idea 中，创建 maven 项目，然后，编辑 pom.xml 文件。<br>引入：Spring 主要的几个库，log4j，junit</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></div></pre></td></tr></table></figure>
<p>在resource 目录下，创建 xml 配置文件，如图：<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://7xr1vo.com1.z0.glb.clouddn.com/A5CEBFD6-CFE5-404A-A42F-CF521BAB4B47.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure></p>
<p>Idea 在你编辑时候，会提示相关的属性，方便书写配置</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></div><div class="line">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></div><div class="line">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd”&gt;</span></div><div class="line"></div><div class="line">    &lt;bean id="<span class="attr">user</span>" <span class="attr">class</span>=<span class="string">"com.geng.ioc.User"</span>/&gt;</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://7xr1vo.com1.z0.glb.clouddn.com/9FEC554D-7DDC-48C7-BA89-3FAAAC181312.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>创建测试用例：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserTest</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> ApplicationContext context;</div><div class="line"></div><div class="line">    <span class="meta">@Before</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUp</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"beans1.xml"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        User user = (User) context.getBean(<span class="string">"user"</span>);</div><div class="line">        user.add();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://7xr1vo.com1.z0.glb.clouddn.com/979F1DF8-ADF4-499F-8119-62CDDE033AD4.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>至此，我们完成了第一个 Spring demo</p>
<h2 id="bean-的管理"><a href="#bean-的管理" class="headerlink" title="bean 的管理"></a>bean 的管理</h2><ul>
<li>通过无参构造创建（前面第一个demo）</li>
<li>通过静态工厂实现对象创建<br>代码示例：</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">public class BeanFactory &#123;</div><div class="line"></div><div class="line">    public static User2 createUser2() &#123;</div><div class="line">        return new User2();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">public class User2 &#123;</div><div class="line"></div><div class="line">    public void add() &#123;</div><div class="line">        System.out.println("user2.....”);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>xml中配置：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--用静态工厂创建--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"user2"</span> <span class="attr">class</span>=<span class="string">"com.geng.ioc.BeanFactory"</span> <span class="attr">factory-method</span>=<span class="string">"createUser2”/&gt;</span></span></div></pre></td></tr></table></figure>
<p>测试：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User2Test</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> ApplicationContext context;</div><div class="line"></div><div class="line">    <span class="meta">@Before</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUp</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"beans1.xml"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        User2 user2 = (User2) context.getBean(<span class="string">"user2"</span>);</div><div class="line">        System.out.println(user2);</div><div class="line">        user2.add();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://7xr1vo.com1.z0.glb.clouddn.com/0815D096-5833-4AA4-9BD8-EE493BE15F32.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<ul>
<li>通过实例工厂创建对象</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--用实例工厂创建—&gt;</span></div><div class="line">&lt;bean id="bean2Factory" class="com.geng.ioc.Bean2Factory" /&gt;</div><div class="line">&lt;bean id="user2" factory-bean="bean2Factory" factory-method="getBean"/&gt;</div></pre></td></tr></table></figure>
<p>这里不再验证。。。</p>
<h2 id="Spring配置文件中的几个重要属性"><a href="#Spring配置文件中的几个重要属性" class="headerlink" title="Spring配置文件中的几个重要属性"></a>Spring配置文件中的几个重要属性</h2><p>id：不能还有特殊符号，“_”是可以的<br>name：可以含有特殊符号，如：#，历史版本中使用的，后期不推荐使用。context.getBean() 方法可以获取这两种属性的值<br>class：类的全路径<br>scope：作用域  </p>
<pre><code>singleton(默认)  
prototype(多例)
request 创建对象放在request域
session 创建对象放在session域
globalSession 一次登陆，任何地方都保存有登录状态
</code></pre><h2 id="附录：IDEA-Resource-目录下，存放的文件类型"><a href="#附录：IDEA-Resource-目录下，存放的文件类型" class="headerlink" title="附录：IDEA Resource 目录下，存放的文件类型"></a>附录：IDEA Resource 目录下，存放的文件类型</h2><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://7xr1vo.com1.z0.glb.clouddn.com/23395798-F73A-4EBB-95E2-1641C5EF8A24.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>（IDEA 官网：<a href="https://www.jetbrains.com/help/idea/2016.3/resource-files.html" target="_blank" rel="external">https://www.jetbrains.com/help/idea/2016.3/resource-files.html</a> ）</p>
<p>所以，在此目录下，我们一般存放配置文件，或一些必要的资源文件。</p>
<p>Demo 地址：<br><a href="https://github.com/fenglincanyi/springdemo1" target="_blank" rel="external">https://github.com/fenglincanyi/springdemo1</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Spring的2个基本概念&quot;&gt;&lt;a href=&quot;#Spring的2个基本概念&quot; class=&quot;headerlink&quot; title=&quot;Spring的2个基本概念&quot;&gt;&lt;/a&gt;Spring的2个基本概念&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;aop&lt;br&gt;面向切面编程&lt;br&gt;在原有
    
    </summary>
    
      <category term="Java后台" scheme="https://fenglincanyi.github.io/categories/Java%E5%90%8E%E5%8F%B0/"/>
    
    
      <category term="Spring" scheme="https://fenglincanyi.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>instant run 相关分析</title>
    <link href="https://fenglincanyi.github.io/2016/12/17/instant%20run%20%E7%9B%B8%E5%85%B3%E5%88%86%E6%9E%90/"/>
    <id>https://fenglincanyi.github.io/2016/12/17/instant run 相关分析/</id>
    <published>2016-12-17T05:00:00.000Z</published>
    <updated>2017-02-08T11:57:39.000Z</updated>
    
    <content type="html"><![CDATA[<p>Android Studio 2.0 引入了即时编译功能：instant run，一定程度上进行了增量编译、增量更新代码，节省了开发耗时（喝咖啡的时间）。<br>下面具体分析下instant run相关工作流程和相关的源码</p>
<h3 id="instant-run-使用"><a href="#instant-run-使用" class="headerlink" title="instant run 使用"></a>instant run 使用</h3><h4 id="版本要求"><a href="#版本要求" class="headerlink" title="版本要求"></a>版本要求</h4><p>Gradle 2.0 以上<br>build.gradle：minSdkVersion 15 以上（设置21以上可获得最佳性能）<br>Android 5.0以上的手机或模拟器</p>
<h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><p>首先确认开启instant run，在settings中搜索instant run，可看到相关设置，默认instant run功能是开启的<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://7xr1vo.com1.z0.glb.clouddn.com/Image.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure></p>
<p>当第一次点击 run 按钮 <figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://7xr1vo.com1.z0.glb.clouddn.com/Image1.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>，进行第一次编译打包。<br>apk成功安装之后，再观察工具栏，run按钮发生了变化：<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://7xr1vo.com1.z0.glb.clouddn.com/Image2.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure></p>
<p>然后我们随意修改一部分代码，点击运行，可看到手机屏幕上弹出toast，提示代码已经改变了，可看到最新的运行效果。使用起来也比较方便、快捷。</p>
<h4 id="更新方式"><a href="#更新方式" class="headerlink" title="更新方式"></a>更新方式</h4><ul>
<li>热交换 hot swap<br>更改现有方法的实现代码；不会重新初始化正在运行的app，不要做重启app，activity的操作，即可看到最新代码运行结果</li>
<li>温交换 warm swap<br>更改或移除当前的资源；activity会自动重启（小闪烁），即可看到最新运行结果</li>
<li>冷交换 cold swap<br>对代码有结构性的更改（字段更改、类继承关系、清单文件更改）；此时会重启app</li>
</ul>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://7xr1vo.com1.z0.glb.clouddn.com/1-Y-gIucAGyqQscMdXuHaSiA.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>参考：<br><a href="https://developer.android.com/studio/run/index.html?hl=zh-cn" target="_blank" rel="external">https://developer.android.com/studio/run/index.html?hl=zh-cn</a><br><a href="https://medium.com/google-developers/instant-run-how-does-it-work-294a1633367f#.go1u6yq2o" target="_blank" rel="external">https://medium.com/google-developers/instant-run-how-does-it-work-294a1633367f#.go1u6yq2o</a></p>
<h3 id="过程分析"><a href="#过程分析" class="headerlink" title="过程分析"></a>过程分析</h3><h4 id="第一次打包"><a href="#第一次打包" class="headerlink" title="第一次打包"></a>第一次打包</h4><p>instant run 第一次编译打包流程，会执行下面的工作<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://7xr1vo.com1.z0.glb.clouddn.com/1-U2tXGUWaeDU7L3u9Z_U0fw.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure></p>
<p>先来看看生成的apk：<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://7xr1vo.com1.z0.glb.clouddn.com/instant%20run%20apk.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure></p>
<p> 多出了 instant-run.zip文件，那它里面是什么内容呢？<br> <figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://7xr1vo.com1.z0.glb.clouddn.com/instant%20run%20zip%20class.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure><br> instant-run.zip里的dex文件，是我们真正的业务代码</p>
<p> 那instant run 相关的类呢，反而跑到了外层的classes.dex和classes2.dex中。</p>
<p><img src="http://7xr1vo.com1.z0.glb.clouddn.com/%E6%97%A0%E6%A0%87%E9%A2%98.png" alt=""><br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://7xr1vo.com1.z0.glb.clouddn.com/instant%20run%20%E7%9B%B8%E5%85%B3jar.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure></p>
<p>实际上这2个dex中的内容是instant-run.jar和instant-run-bootstrap.jar 的内容（自己可反编译出来看看）：</p>
<p><strong>就是说，第一次运行打包时候，是将 instant-run.jar 和 instant-run-bootstrap.jar 2个jar 变成 2个dex文件，真正的业务代码编译后整合到别的dex中，然后放在了instant-run.zip中</strong></p>
<blockquote>
<p>classes.dex  -&gt;   instant-run.jar &nbsp;&nbsp;&nbsp;&nbsp; instant run 相关api类<br>classes2.dex  -&gt;  instant-run-bootstrap.jar   &nbsp;&nbsp;  AppInfo.class</p>
</blockquote>
<p>再来看看清单文件，application 被替换成 BootstrapApplication：<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://7xr1vo.com1.z0.glb.clouddn.com/instant%20run%20application.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure></p>
<h4 id="instant-run-代码分析"><a href="#instant-run-代码分析" class="headerlink" title="instant run 代码分析"></a>instant run 代码分析</h4><h5 id="attachBaseContext-中执行的三个步骤"><a href="#attachBaseContext-中执行的三个步骤" class="headerlink" title="attachBaseContext() 中执行的三个步骤"></a>attachBaseContext() 中执行的三个步骤</h5><p>首先来观察下该类下的 attachBaseContext()方法，其中做了3个比较重要的事情：<br>createResources() 、setupClassLoaders()、createRealApplication()</p>
<ul>
<li>createResources()<br>主要是判断资源resource.ap<em>是否改变，然后保存resource.ap</em>的路径到externalResourcePath中</li>
<li>setupClassLoaders()<br>设置instant run 相关的classLoader，及其继承关系（PathClassLoader -&gt; BootClassLoader   变为  PathClassLoader -&gt; IncrementalClassLoader -&gt; BootClassLoader）</li>
<li>createRealApplication()<br>进行application 的相关替换，当前app的application变为realApplication；<br>反射的方式拿到 真实的 Application，通过AppInfo相关字段进行获取</li>
</ul>
<p>下面我们分析一下setClassLoader详细过程：<br>主要经历了以下的方法：<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://7xr1vo.com1.z0.glb.clouddn.com/instant%20run%20%E8%AE%BE%E7%BD%AE%E7%88%B6classloader%E8%BF%87%E7%A8%8B.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure><br>这几个ClassLoader类定义的逻辑关系如下：<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://7xr1vo.com1.z0.glb.clouddn.com/instant-run%E7%9B%B8%E5%85%B3classLoader%E5%AE%9A%E4%B9%89.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure><br>findClass过程依次委托给 父ClassLoader，最后是让PathClassLoader去加载类</p>
<h5 id="onCreate-过程"><a href="#onCreate-过程" class="headerlink" title="onCreate() 过程"></a>onCreate() 过程</h5><ul>
<li>通过MonkeyPatcher 替换当前的 application 为 realApplication<br>包含ActivityThread中相应的Application 都替换成 realApplication</li>
<li>替换相应的资源resource<br>替换当前app的assetManager，资源相关的变量等等（期间都是用反射的方式）</li>
<li>Server 创建，建立Socket连接，开启连接</li>
</ul>
<h5 id="Server-部署工作"><a href="#Server-部署工作" class="headerlink" title="Server 部署工作"></a>Server 部署工作</h5><p>在Server 建立起连接后，三种部署工作（hot swap、warm swap、cold swap），都是通过Server进行操作。具体在那种情形下进行哪种交换，源码中有具体实现：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">handlePatches</span><span class="params">(List&lt;ApplicationPatch&gt; paramList, <span class="keyword">boolean</span> paramBoolean, <span class="keyword">int</span> paramInt)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (paramBoolean) &#123;</div><div class="line">        FileManager.startUpdate();</div><div class="line">    &#125;</div><div class="line">    Iterator localIterator = paramList.iterator();</div><div class="line">    <span class="keyword">while</span> (localIterator.hasNext()) &#123;</div><div class="line">        Object localObject = (ApplicationPatch) localIterator.next();</div><div class="line">        String str = ((ApplicationPatch) localObject).getPath();</div><div class="line">        <span class="keyword">if</span> (str.endsWith(<span class="string">".dex"</span>)) &#123;<span class="comment">// 冷交换</span></div><div class="line">            handleColdSwapPatch((ApplicationPatch) localObject);</div><div class="line">            <span class="keyword">int</span> j = <span class="number">0</span>;</div><div class="line">            localObject = paramList.iterator();</div><div class="line">            <span class="keyword">do</span> &#123;</div><div class="line">                i = j;</div><div class="line">                <span class="keyword">if</span> (!((Iterator) localObject).hasNext()) &#123;</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">while</span> (!((ApplicationPatch) ((Iterator) localObject).next()).getPath().equals(<span class="string">"classes.dex.3"</span>));</div><div class="line">            <span class="keyword">int</span> i = <span class="number">1</span>;</div><div class="line">            <span class="keyword">if</span> (i == <span class="number">0</span>) &#123;</div><div class="line">                paramInt = <span class="number">3</span>;</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (str.equals(<span class="string">"classes.dex.3"</span>)) &#123;<span class="comment">// 热交换</span></div><div class="line">            paramInt = handleHotSwapPatch(paramInt, (ApplicationPatch) localObject);</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isResourcePath(str)) &#123;<span class="comment">// 资源：温交换</span></div><div class="line">            paramInt = handleResourcePatch(paramInt, (ApplicationPatch) localObject, str);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (paramBoolean) &#123;</div><div class="line">        FileManager.finishUpdate(<span class="keyword">true</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> paramInt;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="代码热更新流程"><a href="#代码热更新流程" class="headerlink" title="代码热更新流程"></a>代码热更新流程</h3><p>在我们增加一行代码后，点击运行，我们来观察生成的类的变化<br>在 build 目录下，transforms 中有生成相关的代码<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://7xr1vo.com1.z0.glb.clouddn.com/instant-run%E6%9C%89%E4%BB%A3%E7%A0%81%E5%8F%98%E6%9B%B4%E6%97%B6%E6%96%B0%E7%94%9F%E6%88%90.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure></p>
<h4 id="几个重要类"><a href="#几个重要类" class="headerlink" title="几个重要类"></a>几个重要类</h4><p>我们来具体看看demo 中代码更改：MainActivity$override类内容的确是最新的代码内容<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://7xr1vo.com1.z0.glb.clouddn.com/instant%20run%20%E5%A2%9E%E5%8A%A0%E7%9A%84%E4%BB%A3%E7%A0%81override%E7%B1%BB.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure></p>
<p>AppPatchesLoaderImpl类记录了更改的类，存储在一个数组中，供类加载时候，替换成最新的类的代码内容<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://7xr1vo.com1.z0.glb.clouddn.com/instant%20run%20%E5%8F%98%E5%8C%96%E7%9A%84%E7%B1%BB%E6%95%B0%E7%BB%84%E5%AD%98%E5%82%A8.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure></p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://7xr1vo.com1.z0.glb.clouddn.com/instant-run%20patch%E7%9B%B8%E5%85%B3.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>在此处，我反编译了slice_0-classes.dex：<br> <figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://7xr1vo.com1.z0.glb.clouddn.com/instant%20run%E7%AC%AC%E4%B8%80%E6%AC%A1%E6%89%93%E5%8C%85%E7%BB%93%E6%9E%9C.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure></p>
<p>第一次运行打包生成的 “业务代码” 中，生成的类中的方法里都增加了 IncrementalChange 相关的判断，如果 $change 不为空，说明我们有更改的代码，有更改的代码，则执行最新更改的代码</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> Object access$dispatch(String paramString, Object... paramVarArgs) &#123;</div><div class="line">        <span class="keyword">switch</span> (paramString.hashCode()) &#123;</div><div class="line">            <span class="keyword">case</span> -<span class="number">833446436</span>:</div><div class="line">                initView((MainActivity) paramVarArgs[<span class="number">0</span>]);</div><div class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">            <span class="keyword">case</span> -<span class="number">641568046</span>:</div><div class="line">                onCreate((MainActivity) paramVarArgs[<span class="number">0</span>], (Bundle) paramVarArgs[<span class="number">1</span>]);</div><div class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">            <span class="keyword">case</span> -<span class="number">399296056</span>:</div><div class="line">                <span class="keyword">return</span> init$args((MainActivity[]) paramVarArgs[<span class="number">0</span>], (Object[]) paramVarArgs[<span class="number">1</span>]);</div><div class="line">            <span class="keyword">case</span> <span class="number">781336394</span>:</div><div class="line">                init$body((MainActivity) paramVarArgs[<span class="number">0</span>], (Object[]) paramVarArgs[<span class="number">1</span>]);</div><div class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">            <span class="keyword">case</span> <span class="number">2118315029</span>:</div><div class="line">                testClick((MainActivity) paramVarArgs[<span class="number">0</span>], (View) paramVarArgs[<span class="number">1</span>]);</div><div class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> InstantReloadException(String.format(<span class="string">"String switch could not find '%s' with hashcode %s in %s"</span>, <span class="keyword">new</span> Object[]&#123;paramString, Integer.valueOf(paramString.hashCode()), <span class="string">"com/geng/myapplication/MainActivity"</span>&#125;));</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>最后根据不同的类型，进行相关的重启（activity 或者 app），主要由 Restarter负责，同时也提供了相关的重启方法：</p>
<ul>
<li>restartActivity()</li>
<li>restartApp()</li>
</ul>
<p><br><br>至此，整个 instant run 的分析告一段落，需要慢慢消化一下。。。</p>
<p><br><br>源码及工具资源：<br><a href="https://github.com/fenglincanyi/Study/tree/master/instant%20run%E7%9B%B8%E5%85%B3" target="_blank" rel="external">https://github.com/fenglincanyi/Study/tree/master/instant%20run%E7%9B%B8%E5%85%B3</a><br>参考：<br><a href="https://github.com/nuptboyzhb/AndroidInstantRun" target="_blank" rel="external">https://github.com/nuptboyzhb/AndroidInstantRun</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Android Studio 2.0 引入了即时编译功能：instant run，一定程度上进行了增量编译、增量更新代码，节省了开发耗时（喝咖啡的时间）。&lt;br&gt;下面具体分析下instant run相关工作流程和相关的源码&lt;/p&gt;
&lt;h3 id=&quot;instant-run-使
    
    </summary>
    
      <category term="Android" scheme="https://fenglincanyi.github.io/categories/Android/"/>
    
    
      <category term="instant run" scheme="https://fenglincanyi.github.io/tags/instant-run/"/>
    
  </entry>
  
  <entry>
    <title>Android WebView 相关踩坑</title>
    <link href="https://fenglincanyi.github.io/2016/12/15/Android%20WebView%20%E7%9B%B8%E5%85%B3%E8%B8%A9%E5%9D%91/"/>
    <id>https://fenglincanyi.github.io/2016/12/15/Android WebView 相关踩坑/</id>
    <published>2016-12-15T05:29:00.000Z</published>
    <updated>2017-02-08T11:53:18.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="url-传参-url-嵌套的问题"><a href="#url-传参-url-嵌套的问题" class="headerlink" title="url 传参 url 嵌套的问题"></a>url 传参 url 嵌套的问题</h3><h4 id="问题场景"><a href="#问题场景" class="headerlink" title="问题场景"></a>问题场景</h4><p>get请求链接中： 传参中含有url</p>
<p>“chinahr://customer/h5page?” + LEOGAO_PAGE+”=”+finishpage+”&amp;”+LEOGAO_ACTION+”=”+finishaction + “&amp;”+INTENT_URL+”=” + <b><font color="red">url</font></b></p>
<p>其中：<br><b><font color="red">url：</font></b>  file:///android_asset/hybird/cp/index.html?uid=” + cuid +”&amp;gender=”+gender +”&amp;photo=”+photoPath;</p>
<p>合并之后：<br>“chinahr://customer/h5page?” + LEOGAO_PAGE+”=”+finishpage+”&amp;”+LEOGAO_ACTION+”=”+finishaction + “&amp;”+INTENT_URL+”=”+“file:///android_asset/hybird/cp/index.html?uid=” + cuid +”&amp;gender=”+gender +”&amp;photo=”+photoPath；</p>
<p>所以这个 url 中的 第二个及以后的参数第一次就会被router解析，并不会将 url 整体作为一个参数传到下一个页面中去再次解析识别。</p>
<h4 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h4><h5 id="Android端"><a href="#Android端" class="headerlink" title="Android端"></a>Android端</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">JSONObject jsonObject = <span class="keyword">new</span> JSONObject();</div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">    jsonObject.put(<span class="string">"uid"</span>, cUid);</div><div class="line">    jsonObject.put(<span class="string">"gender"</span>, gender);</div><div class="line">    jsonObject.put(<span class="string">"photo"</span>, potoPath);</div><div class="line">    paramsResult =  URLEncoder.encode(Base64.encodeToString(jsonObject.toString().getBytes(), Base64.DEFAULT));</div><div class="line">&#125; <span class="keyword">catch</span> (JSONException e) &#123;</div><div class="line">    e.printStackTrace();</div><div class="line">&#125;</div><div class="line"><span class="comment">// 此处为加载本地，也可以为网络url</span></div><div class="line">BaseH5Activity.startWebViewActivity(<span class="keyword">this</span>, <span class="string">"file:///android_asset/hybird/cp/index.html?params="</span> + paramsResult, <span class="string">""</span>,<span class="string">""</span>,<span class="string">""</span>,<span class="string">""</span>);</div></pre></td></tr></table></figure>
<h5 id="前端js"><a href="#前端js" class="headerlink" title="前端js"></a>前端js</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> me = <span class="keyword">this</span>;</div><div class="line"><span class="keyword">var</span> href = <span class="built_in">window</span>.location.url || <span class="built_in">window</span>.location.href;</div><div class="line"><span class="keyword">var</span> params = me.getParams(href, <span class="string">'params'</span>);</div><div class="line">params = Base64.decode(<span class="built_in">decodeURIComponent</span>(params));</div><div class="line">info = <span class="built_in">JSON</span>.parse(params);</div><div class="line"><span class="keyword">var</span> uid = info.uid;</div><div class="line"><span class="keyword">var</span> photo = info.photo;</div><div class="line"><span class="keyword">var</span> gender = info.gender;</div></pre></td></tr></table></figure>
<h5 id="踩坑"><a href="#踩坑" class="headerlink" title="踩坑"></a>踩坑</h5><ul>
<li>第一次使用UrlEncoder编码，k可能会造成浏览器与js解析数据会存在不一致的问题<br>解决：先使用base64进行编码，解决数据不一致的问题，再进行UrlEncoder编码（为了防止base64编码后的数据解析时：”+” 会当做空格的问题 ） </li>
<li><p>加载本地 html 时：直接设置 cookie 在 本地url 上是无效的，也是没有必要的。自己遇到的问题是：加载本地 html，此html中使用的 jsonp 请求网络，此时需要的cookie，需要设置 WebView 的cookie，使之持久化，下次会自动带 cookie 访问网络的。</p>
<h3 id="Android-5-0-WebView-设置cookie问题"><a href="#Android-5-0-WebView-设置cookie问题" class="headerlink" title="Android 5.0 WebView 设置cookie问题"></a>Android 5.0 WebView 设置cookie问题</h3></li>
<li><p>对于 Android 5.0 以上的WebView，默认关闭了接收三方cookie，但是提供了设置 cookie的接口，需要开发者去手动设置三方信任cookie。否则，加载本地 html 时，cookie 同步不过去。<br>代码如下：</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">CookieManager cookieManager = CookieManager.getInstance();</div><div class="line">cookieManager.setAcceptCookie(<span class="keyword">true</span>);</div><div class="line">cookieManager.setAcceptFileSchemeCookies(<span class="keyword">true</span>);</div><div class="line"><span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.LOLLIPOP) &#123;</div><div class="line">    cookieManager.setAcceptThirdPartyCookies(webView, <span class="keyword">true</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Android-WebView-加载本地-html"><a href="#Android-WebView-加载本地-html" class="headerlink" title="Android WebView 加载本地 html"></a>Android WebView 加载本地 html</h3><ul>
<li>webview 加载 sd 卡下的 html 是不能访问的，权限问题。</li>
<li>如果访问 /data/data/包名/files/index.html，需要开启文件访问权限（默认是开启的，不要动态设置关闭）<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">webSettings.setAllowFileAccess(<span class="keyword">false</span>);<span class="comment">// 关闭</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h3><p>在线加解密、编码解析工具：<br><a href="http://tool.oschina.net/encrypt?type=3" target="_blank" rel="external">http://tool.oschina.net/encrypt?type=3</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;url-传参-url-嵌套的问题&quot;&gt;&lt;a href=&quot;#url-传参-url-嵌套的问题&quot; class=&quot;headerlink&quot; title=&quot;url 传参 url 嵌套的问题&quot;&gt;&lt;/a&gt;url 传参 url 嵌套的问题&lt;/h3&gt;&lt;h4 id=&quot;问题场景&quot;&gt;&lt;a 
    
    </summary>
    
      <category term="Hybird" scheme="https://fenglincanyi.github.io/categories/Hybird/"/>
    
    
      <category term="h5" scheme="https://fenglincanyi.github.io/tags/h5/"/>
    
  </entry>
  
  <entry>
    <title>Dalvik中PreVerify问题</title>
    <link href="https://fenglincanyi.github.io/2016/11/24/Dalvik%E4%B8%ADPreVerify%E9%97%AE%E9%A2%98/"/>
    <id>https://fenglincanyi.github.io/2016/11/24/Dalvik中PreVerify问题/</id>
    <published>2016-11-24T05:01:00.000Z</published>
    <updated>2017-02-08T11:27:41.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="PreVerify（预校验）的由来"><a href="#PreVerify（预校验）的由来" class="headerlink" title="PreVerify（预校验）的由来"></a>PreVerify（预校验）的由来</h2><p>Dalvik 虚拟机在启动的时候，会有许多的启动参数，其中有一项就是verify，当verify被打开的时候，doVerify变量为true，则进行类的校验（dvmVerifyClass方法调用）。若校验成功，则这个类会被打上标记：CLASS_ISPREVERIFIED。<br>上面描述的过程是dex -&gt; odex (dexopt 过程)时，做的一个优化。当从classes.dex 变为 odex 后，才会被拿去执行。</p>
<h2 id="Class-被-Preverify-的过程"><a href="#Class-被-Preverify-的过程" class="headerlink" title="Class 被 Preverify 的过程"></a>Class 被 Preverify 的过程</h2><p>在dex 被 dexopt 的过程中，源码中有校验和优化 Class 相关的操作：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"> * Verify and/or optimize a specific class.</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">verifyAndOptimizeClass</span><span class="params">(DexFile* pDexFile, ClassObject* clazz,</span></span></div><div class="line">    <span class="keyword">const</span> DexClassDef* pClassDef, <span class="keyword">bool</span> doVerify, <span class="keyword">bool</span> doOpt)</div><div class="line">&#123;</div><div class="line">    <span class="keyword">const</span> <span class="keyword">char</span>* classDescriptor;</div><div class="line">    <span class="keyword">bool</span> verified = <span class="literal">false</span>;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (clazz-&gt;pDvmDex-&gt;pDexFile != pDexFile) &#123;</div><div class="line">        <span class="comment">/*</span></div><div class="line">         * The current DEX file defined a class that is also present in the</div><div class="line">         * bootstrap class path.  The class loader favored the bootstrap</div><div class="line">         * version, which means that we have a pointer to a class that is</div><div class="line">         * (a) not the one we want to examine, and (b) mapped read-only,</div><div class="line">         * so we will seg fault if we try to rewrite instructions inside it.</div><div class="line">         */</div><div class="line">        ALOGD(<span class="string">"DexOpt: not verifying/optimizing '%s': multiple definitions"</span>,</div><div class="line">            clazz-&gt;descriptor);</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    classDescriptor = dexStringByTypeIdx(pDexFile, pClassDef-&gt;classIdx);</div><div class="line"></div><div class="line">    <span class="comment">/*</span></div><div class="line">     * First, try to verify it.</div><div class="line">     */</div><div class="line">    <span class="keyword">if</span> (doVerify) &#123;</div><div class="line">        <span class="keyword">if</span> (dvmVerifyClass(clazz)) &#123;</div><div class="line">            <span class="comment">/*</span></div><div class="line">             * Set the "is preverified" flag in the DexClassDef.  We</div><div class="line">             * do it here, rather than in the ClassObject structure,</div><div class="line">             * because the DexClassDef is part of the odex file.</div><div class="line">             */</div><div class="line">            assert((clazz-&gt;accessFlags &amp; JAVA_FLAGS_MASK) ==</div><div class="line">                pClassDef-&gt;accessFlags);</div><div class="line">            ((DexClassDef*)pClassDef)-&gt;accessFlags |= CLASS_ISPREVERIFIED;</div><div class="line">            verified = <span class="literal">true</span>;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="comment">// <span class="doctag">TODO:</span> log when in verbose mode</span></div><div class="line">            ALOGV(<span class="string">"DexOpt: '%s' failed verification"</span>, classDescriptor);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (doOpt) &#123;</div><div class="line">        <span class="keyword">bool</span> needVerify = (gDvm.dexOptMode == OPTIMIZE_MODE_VERIFIED ||</div><div class="line">                           gDvm.dexOptMode == OPTIMIZE_MODE_FULL);</div><div class="line">        <span class="keyword">if</span> (!verified &amp;&amp; needVerify) &#123;</div><div class="line">            ALOGV(<span class="string">"DexOpt: not optimizing '%s': not verified"</span>,</div><div class="line">                classDescriptor);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            dvmOptimizeClass(clazz, <span class="literal">false</span>);<span class="comment">// 优化 Class 操作</span></div><div class="line"></div><div class="line">            <span class="comment">/* set the flag whether or not we actually changed anything */</span></div><div class="line">            ((DexClassDef*)pClassDef)-&gt;accessFlags |= CLASS_ISOPTIMIZED;<span class="comment">// Class被优化过后，也会打上被优化过的标记 CLASS_ISOPTIMIZED</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>dvmVerifyClass 的具体过程，源码中是这样描述的：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"> * Verify a class.</div><div class="line"> *</div><div class="line"> * By the time we get here, the value of gDvm.classVerifyMode should already</div><div class="line"> * have been factored in.  If you want to call into the verifier even</div><div class="line"> * though verification is disabled, that's your business.</div><div class="line"> *</div><div class="line"> * Returns "true" on success.</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">dvmVerifyClass</span><span class="params">(ClassObject*clazz)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> i;</div><div class="line">    <span class="keyword">if</span> (dvmIsClassVerified(clazz)) &#123;</div><div class="line">        ALOGD(<span class="string">"Ignoring duplicate verify attempt on %s"</span>, clazz -&gt; descriptor);</div><div class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; clazz -&gt; directMethodCount; i++) &#123;</div><div class="line">        <span class="keyword">if</span> (!verifyMethod( &amp; clazz -&gt; directMethods[i]))&#123;</div><div class="line">            LOG_VFY(<span class="string">"Verifier rejected class %s"</span>, clazz -&gt; descriptor);</div><div class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; clazz -&gt; virtualMethodCount; i++) &#123;</div><div class="line">        <span class="keyword">if</span> (!verifyMethod( &amp; clazz -&gt; virtualMethods[i]))&#123;</div><div class="line">            LOG_VFY(<span class="string">"Verifier rejected class %s"</span>, clazz -&gt; descriptor);</div><div class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>其中，dvmVerifyClass中又去调用了 方法的校验 verifyMethod, 再去追源码：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"> * Perform verification on a single method.</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">bool</span> <span class="title">verifyMethod</span><span class="params">(Method* meth)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">bool</span> result = <span class="literal">false</span>;</div><div class="line"></div><div class="line">    <span class="comment">/*</span></div><div class="line">     * Verifier state blob.  Various values will be cached here so we</div><div class="line">     * can avoid expensive lookups and pass fewer arguments around.</div><div class="line">     */</div><div class="line">    VerifierData vdata;</div><div class="line"><span class="meta">#<span class="meta-keyword">if</span> 1   <span class="comment">// ndef NDEBUG</span></span></div><div class="line">    <span class="built_in">memset</span>(&amp;vdata, <span class="number">0x99</span>, <span class="keyword">sizeof</span>(vdata));</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line"></div><div class="line">    vdata.method = meth;</div><div class="line">    vdata.insnsSize = dvmGetMethodInsnsSize(meth);</div><div class="line">    vdata.insnRegCount = meth-&gt;registersSize;</div><div class="line">    vdata.insnFlags = <span class="literal">NULL</span>;</div><div class="line">    vdata.uninitMap = <span class="literal">NULL</span>;</div><div class="line">    vdata.basicBlocks = <span class="literal">NULL</span>;</div><div class="line"></div><div class="line">    <span class="comment">/*</span></div><div class="line">     * If there aren't any instructions, make sure that's expected, then</div><div class="line">     * exit successfully.  <span class="doctag">Note:</span> for native methods, meth-&gt;insns gets set</div><div class="line">     * to a native function pointer on first call, so don't use that as</div><div class="line">     * an indicator.</div><div class="line">     */</div><div class="line">    <span class="keyword">if</span> (vdata.insnsSize == <span class="number">0</span>) &#123;</div><div class="line">        <span class="keyword">if</span> (!dvmIsNativeMethod(meth) &amp;&amp; !dvmIsAbstractMethod(meth)) &#123;</div><div class="line">            LOG_VFY_METH(meth,</div><div class="line">                <span class="string">"VFY: zero-length code in concrete non-native method"</span>);</div><div class="line">            <span class="keyword">goto</span> bail;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">goto</span> success;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/*</span></div><div class="line">     * Sanity-check the register counts.  ins + locals = registers, so make</div><div class="line">     * sure that ins &lt;= registers.</div><div class="line">     */</div><div class="line">    <span class="keyword">if</span> (meth-&gt;insSize &gt; meth-&gt;registersSize) &#123;</div><div class="line">        LOG_VFY_METH(meth, <span class="string">"VFY: bad register counts (ins=%d regs=%d)"</span>,</div><div class="line">            meth-&gt;insSize, meth-&gt;registersSize);</div><div class="line">        <span class="keyword">goto</span> bail;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/*</span></div><div class="line">     * Allocate and populate an array to hold instruction data.</div><div class="line">     *</div><div class="line">     * <span class="doctag">TODO:</span> Consider keeping a reusable pre-allocated array sitting</div><div class="line">     * around for smaller methods.</div><div class="line">     */</div><div class="line">    vdata.insnFlags = (InsnFlags*) <span class="built_in">calloc</span>(vdata.insnsSize, <span class="keyword">sizeof</span>(InsnFlags));</div><div class="line">    <span class="keyword">if</span> (vdata.insnFlags == <span class="literal">NULL</span>)</div><div class="line">        <span class="keyword">goto</span> bail;</div><div class="line"></div><div class="line">    <span class="comment">/*</span></div><div class="line">     * Compute the width of each instruction and store the result in insnFlags.</div><div class="line">     * Count up the #of occurrences of certain opcodes while we're at it.</div><div class="line">     */</div><div class="line">    <span class="keyword">if</span> (!computeWidthsAndCountOps(&amp;vdata))</div><div class="line">        <span class="keyword">goto</span> bail;</div><div class="line"></div><div class="line">    <span class="comment">/*</span></div><div class="line">     * Allocate a map to hold the classes of uninitialized instances.</div><div class="line">     */</div><div class="line">    vdata.uninitMap = dvmCreateUninitInstanceMap(meth, vdata.insnFlags,</div><div class="line">        vdata.newInstanceCount);</div><div class="line">    <span class="keyword">if</span> (vdata.uninitMap == <span class="literal">NULL</span>)</div><div class="line">        <span class="keyword">goto</span> bail;</div><div class="line"></div><div class="line">    <span class="comment">/*</span></div><div class="line">     * Set the "in try" flags for all instructions guarded by a "try" block.</div><div class="line">     * Also sets the "branch target" flag on exception handlers.</div><div class="line">     */</div><div class="line">    <span class="keyword">if</span> (!scanTryCatchBlocks(meth, vdata.insnFlags))</div><div class="line">        <span class="keyword">goto</span> bail;</div><div class="line"></div><div class="line">    <span class="comment">/*</span></div><div class="line">     * Perform static instruction verification.  Also sets the "branch</div><div class="line">     * target" flags.</div><div class="line">     */</div><div class="line">    <span class="keyword">if</span> (!verifyInstructions(&amp;vdata))</div><div class="line">        <span class="keyword">goto</span> bail;</div><div class="line"></div><div class="line">    <span class="comment">/*</span></div><div class="line">     * Do code-flow analysis.</div><div class="line">     *</div><div class="line">     * We could probably skip this for a method with no registers, but</div><div class="line">     * that's so rare that there's little point in checking.</div><div class="line">     */</div><div class="line">    <span class="keyword">if</span> (!dvmVerifyCodeFlow(&amp;vdata)) &#123;</div><div class="line">        <span class="comment">//ALOGD("+++ %s failed code flow", meth-&gt;name);</span></div><div class="line">        <span class="keyword">goto</span> bail;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">success:</div><div class="line">    result = <span class="literal">true</span>;</div><div class="line"></div><div class="line">bail:</div><div class="line">    dvmFreeVfyBasicBlocks(&amp;vdata);</div><div class="line">    dvmFreeUninitInstanceMap(vdata.uninitMap);</div><div class="line">    <span class="built_in">free</span>(vdata.insnFlags);</div><div class="line">    <span class="keyword">return</span> result;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>dvmVerifyClass 具体过程中，会去校验 这个 Class中的所有的 directMethod 方法，和 virtualMethod 方法。具体这些方法包含哪些呢？ 其中时包含了：</p>
<ul>
<li>static 方法</li>
<li>private 方法</li>
<li>构造方法</li>
<li>… …</li>
</ul>
<p>由此可知：  如果这些方法中直接引用到的类（第一层级关系，不会进行递归搜索） 和 class (源码中的clazz) 在同一个 dex 中的话，这个类就会被打上  CLASS_ISPREVERIFY 标记</p>
<h2 id="PreVerify-缘由"><a href="#PreVerify-缘由" class="headerlink" title="PreVerify 缘由"></a>PreVerify 缘由</h2><ul>
<li>一方面，Dalvik 虚拟机在安装期间，为Class 打上 CLASS_ISPREVERIFIED 是为了提高性能，下次使用时，则会省去校验操作，提高访问效率。</li>
<li>另一方面，被标上“CLASS_ISPREVERIFIED”的类，dvm在运行期载入Class时候，会对其内存中对应的直接引用类进行校验，如果该类存在与直接引用类所在的dex不是同一个，则直接报“pre-verification” 错误，该类无法加载。</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div></pre></td><td class="code"><pre><div class="line"><span class="function">ClassObject* <span class="title">dvmResolveClass</span><span class="params">(<span class="keyword">const</span> ClassObject* referrer, u4 classIdx,</span></span></div><div class="line">    <span class="keyword">bool</span> fromUnverifiedConstant)</div><div class="line">&#123;</div><div class="line">    DvmDex* pDvmDex = referrer-&gt;pDvmDex;</div><div class="line">    ClassObject* resClass;</div><div class="line">    <span class="keyword">const</span> <span class="keyword">char</span>* className;</div><div class="line">    <span class="comment">/*</span></div><div class="line">     * Check the table first -- this gets called from the other "resolve"</div><div class="line">     * methods.</div><div class="line">     */</div><div class="line">    resClass = dvmDexGetResolvedClass(pDvmDex, classIdx); <span class="comment">// 预先在dex的缓存表里查</span></div><div class="line">    <span class="keyword">if</span> (resClass != <span class="literal">NULL</span>)</div><div class="line">        <span class="keyword">return</span> resClass;</div><div class="line">    LOGVV(<span class="string">"--- resolving class %u (referrer=%s cl=%p)"</span>,</div><div class="line">        classIdx, referrer-&gt;descriptor, referrer-&gt;classLoader);</div><div class="line">    <span class="comment">/*</span></div><div class="line">     * Class hasn't been loaded yet, or is in the process of being loaded</div><div class="line">     * and initialized now.  Try to get a copy.  If we find one, put the</div><div class="line">     * pointer in the DexTypeId.  There isn't a race condition here --</div><div class="line">     * 32-bit writes are guaranteed atomic on all target platforms.  Worst</div><div class="line">     * case we have two threads storing the same value.</div><div class="line">     *</div><div class="line">     * If this is an array class, we'll generate it here.</div><div class="line">     */</div><div class="line">    className = dexStringByTypeIdx(pDvmDex-&gt;pDexFile, classIdx);</div><div class="line">    <span class="keyword">if</span> (className[<span class="number">0</span>] != <span class="string">'\0'</span> &amp;&amp; className[<span class="number">1</span>] == <span class="string">'\0'</span>) &#123;</div><div class="line">        <span class="comment">/* primitive type */</span></div><div class="line">        resClass = dvmFindPrimitiveClass(className[<span class="number">0</span>]);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        resClass = dvmFindClassNoInit(className, referrer-&gt;classLoader);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (resClass != <span class="literal">NULL</span>) &#123;</div><div class="line">        <span class="comment">/*</span></div><div class="line">         * If the referrer was pre-verified, the resolved class must come</div><div class="line">         * from the same DEX or from a bootstrap class.  The pre-verifier</div><div class="line">         * makes assumptions that could be invalidated by a wacky class</div><div class="line">         * loader.  (See the notes at the top of oo/Class.c.)</div><div class="line">         *</div><div class="line">         * The verifier does *not* fail a class for using a const-class</div><div class="line">         * or instance-of instruction referring to an unresolveable class,</div><div class="line">         * because the result of the instruction is simply a Class object</div><div class="line">         * or boolean -- there's no need to resolve the class object during</div><div class="line">         * verification.  Instance field and virtual method accesses can</div><div class="line">         * break dangerously if we get the wrong class, but const-class and</div><div class="line">         * instance-of are only interesting at execution time.  So, if we</div><div class="line">         * we got here as part of executing one of the "unverified class"</div><div class="line">         * instructions, we skip the additional check.</div><div class="line">         *</div><div class="line">         * Ditto for class references from annotations and exception</div><div class="line">         * handler lists.</div><div class="line">         */</div><div class="line">        <span class="keyword">if</span> (!fromUnverifiedConstant &amp;&amp;</div><div class="line">            IS_CLASS_FLAG_SET(referrer, CLASS_ISPREVERIFIED))</div><div class="line">        &#123;</div><div class="line">            ClassObject* resClassCheck = resClass;</div><div class="line">            <span class="keyword">if</span> (dvmIsArrayClass(resClassCheck))</div><div class="line">                resClassCheck = resClassCheck-&gt;elementClass;</div><div class="line">            <span class="keyword">if</span> (referrer-&gt;pDvmDex != resClassCheck-&gt;pDvmDex &amp;&amp;</div><div class="line">                resClassCheck-&gt;classLoader != <span class="literal">NULL</span>)  <span class="comment">// 校验dex是否是安装时的同一个dex</span></div><div class="line">            &#123;</div><div class="line">                ALOGW(<span class="string">"Class resolved by unexpected DEX:"</span></div><div class="line">                     <span class="string">" %s(%p):%p ref [%s] %s(%p):%p"</span>,</div><div class="line">                    referrer-&gt;descriptor, referrer-&gt;classLoader,</div><div class="line">                    referrer-&gt;pDvmDex,</div><div class="line">                    resClass-&gt;descriptor, resClassCheck-&gt;descriptor,</div><div class="line">                    resClassCheck-&gt;classLoader, resClassCheck-&gt;pDvmDex);</div><div class="line">                ALOGW(<span class="string">"(%s had used a different %s during pre-verification)"</span>,</div><div class="line">                    referrer-&gt;descriptor, resClass-&gt;descriptor);</div><div class="line">                dvmThrowIllegalAccessError(</div><div class="line">                    <span class="string">"Class ref in pre-verified class resolved to unexpected "</span></div><div class="line">                    <span class="string">"implementation"</span>);</div><div class="line">                <span class="keyword">return</span> <span class="literal">NULL</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        LOGVV(<span class="string">"##### +ResolveClass(%s): referrer=%s dex=%p ldr=%p ref=%d"</span>,</div><div class="line">            resClass-&gt;descriptor, referrer-&gt;descriptor, referrer-&gt;pDvmDex,</div><div class="line">            referrer-&gt;classLoader, classIdx);</div><div class="line">        <span class="comment">/*</span></div><div class="line">         * Add what we found to the list so we can skip the class search</div><div class="line">         * next time through.</div><div class="line">         *</div><div class="line">         * <span class="doctag">TODO:</span> should we be doing this when fromUnverifiedConstant==true?</div><div class="line">         * (see comments at top of oo/Class.c)</div><div class="line">         */</div><div class="line">        dvmDexSetResolvedClass(pDvmDex, classIdx, resClass);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="comment">/* not found, exception should be raised */</span></div><div class="line">        LOGVV(<span class="string">"Class not found: %s"</span>,</div><div class="line">            dexStringByTypeIdx(pDvmDex-&gt;pDexFile, classIdx));</div><div class="line">        assert(dvmCheckException(dvmThreadSelf()));</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> resClass;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>实际上，这一步dex的一致性判断，也是google为了防止外部DEX注入的一个安全方案，即保证运行期的Class与其直接引用类之间所在的DEX关系要与安装时候一致</p>
<p><br><br>源码链接:<br><a href="http://osxr.org:8080/android/source/dalvik/vm/analysis/DexPrepare.cpp" target="_blank" rel="external">http://osxr.org:8080/android/source/dalvik/vm/analysis/DexPrepare.cpp</a><br><a href="http://osxr.org:8080/android/source/dalvik/vm/analysis/DexVerify.cpp" target="_blank" rel="external">http://osxr.org:8080/android/source/dalvik/vm/analysis/DexVerify.cpp</a><br><a href="http://osxr.org:8080/android/source/dalvik/vm/oo/Resolve.cpp" target="_blank" rel="external">http://osxr.org:8080/android/source/dalvik/vm/oo/Resolve.cpp</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;PreVerify（预校验）的由来&quot;&gt;&lt;a href=&quot;#PreVerify（预校验）的由来&quot; class=&quot;headerlink&quot; title=&quot;PreVerify（预校验）的由来&quot;&gt;&lt;/a&gt;PreVerify（预校验）的由来&lt;/h2&gt;&lt;p&gt;Dalvik 虚拟机
    
    </summary>
    
      <category term="Android" scheme="https://fenglincanyi.github.io/categories/Android/"/>
    
    
      <category term="Dalvik" scheme="https://fenglincanyi.github.io/tags/Dalvik/"/>
    
  </entry>
  
  <entry>
    <title>Android apk安装过程实例分析</title>
    <link href="https://fenglincanyi.github.io/2016/11/17/Android%20apk%E5%AE%89%E8%A3%85%E8%BF%87%E7%A8%8B%E5%AE%9E%E4%BE%8B%E5%88%86%E6%9E%90/"/>
    <id>https://fenglincanyi.github.io/2016/11/17/Android apk安装过程实例分析/</id>
    <published>2016-11-17T13:08:00.000Z</published>
    <updated>2017-01-19T08:20:55.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>注：本文不对apk安装之前，系统所做的复杂工作做分析，只针对普通的apk安装过程进行简单的过程理解</p>
</blockquote>
<p>一般情况下，在apk安装时，系统一般会显示一个安装界面，获取用户同意之后进行安装，并且有一些apk预处理相关的操作，紧接着，会启动app界面，进入app。<br>在这一过程中，不同版本的Android系统在安装时，对包的处理是不太一样的，以下分Dalivk、ART两种虚拟机进行分析。这里主要采用原生模拟器，进行分析。</p>
<h3 id="一、-Dalvik（JIT：just-in-time-即时编译）"><a href="#一、-Dalvik（JIT：just-in-time-即时编译）" class="headerlink" title="一、 Dalvik（JIT：just in time  即时编译）"></a>一、 Dalvik（JIT：just in time  即时编译）</h3><ul>
<li>过程分析：<ul>
<li>点击apk包后或apk下载后，安装之前，系统会启动安装界面PackageInstallerActivity，让用户进行授权选择，用户同意后，会调用ApplicationPackageManager 进行相关操作。</li>
<li>调用ApplicationPackageManager，通过IPC来调用 PackageManagerService 中的 installPackage 方法，在这个方法中，又去调用 installPackageAsUser 方法，此时，要进行权限相关校验，完毕之后，会通过 handler 发送消息（类型：INIT_COPY，MCS_BOUND）</li>
<li>然后 startCopy —&gt; handleStartCopy 依次调用，这里，对安装位置、存储空间进行处理，之后会 拷贝apk 相关文件放在相应的目录下。这些文件主要包括：<ul>
<li>apk文件</li>
<li>jar、so文件</li>
<li>db文件（若有的话）</li>
</ul>
</li>
<li>拷贝完成之后，进行预处理，对于Dalvik来说，dexopt要进行dex文件的优化，生成odex文件，在app运行时，能加快其启动速度。</li>
<li>另外，对于资源处理，是 AssetMananger 来进行资源的解析、加载。</li>
</ul>
</li>
</ul>
<ul>
<li>实例考察：<ul>
<li>安装时logcat日志：拷贝工作，然后进行dex优化，dexopt执行操作</li>
</ul>
</li>
</ul>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://7xr1vo.com1.z0.glb.clouddn.com/apk%E5%AE%89%E8%A3%85%E8%BF%87%E7%A8%8B.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>   拷贝后，目录如下：</p>
<p><img src="http://7xr1vo.com1.z0.glb.clouddn.com/copy%20lib%E7%BB%93%E6%9E%9C.png" alt=""></p>
<p> dex位置：</p>
<p><img src="http://7xr1vo.com1.z0.glb.clouddn.com/dex%E4%BD%8D%E7%BD%AE.png" alt=""></p>
<p>如果把此位置的 dex 删除后，且杀掉已经运行的进程后，再次点击app启动后奔溃，如图：</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://7xr1vo.com1.z0.glb.clouddn.com/%E5%88%A0%E6%8E%89dalvik-cache%E7%9B%AE%E5%BD%95%E4%B8%8B%E7%9A%84dex%E5%90%8E%EF%BC%8C%E4%B8%94%E6%9D%80%E6%8E%89%E5%B7%B2%E7%BB%8F%E8%BF%90%E8%A1%8C%E7%9A%84%E5%BA%94%E7%94%A8%E8%BF%9B%E7%A8%8B%EF%BC%8C%E5%86%8D%E6%AC%A1%E5%90%AF%E5%8A%A8.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>由此可知，要启动app时，需要加载 /data/dalik-cache 目录下的dex文件</p>
<p>相关参考文献：<br><a href="http://www.woaitqs.cc/android/2016/07/28/android-plugin-get-apk-info" target="_blank" rel="external">http://www.woaitqs.cc/android/2016/07/28/android-plugin-get-apk-info</a><br><a href="http://blog.csdn.net/luoshengyang/article/details/8852432" target="_blank" rel="external">http://blog.csdn.net/luoshengyang/article/details/8852432</a></p>
<h3 id="二、ART（AOT：Ahead-of-time-预编译）"><a href="#二、ART（AOT：Ahead-of-time-预编译）" class="headerlink" title="二、ART（AOT：Ahead of time  预编译）"></a>二、ART（AOT：Ahead of time  预编译）</h3><p>Android 4.4之后，对于Android虚拟机又继续做了优化，art 代替了 Dalvik，对于dex文件，优化工作做了改变。</p>
<ul>
<li><p>大致的处理过程：</p>
</li>
<li><p>编译时，通过调用 dex2oat 对dex 进行预编译，这个编译器参考了LLVM框架，默认情况下，是采用了quick模式，但在6.0之后，LLVM被彻底去除了。关于LLVM细节，自行Google。</p>
</li>
<li>编译后生成的文件 .oat 文件，实际上是Android 私有的ELF文件。在Linux系统中，ELF文件主要分为3类：目标文件（ .o）、共享文件（ .so）、可执行文件。此处Android的 .oat文件属于可执行文件。<br>  oat 文件含有ELF文件正常的结构形态，里面既包含有dex 文件，也包含编译好的本地指令代码。被包含的dex文件也可以是多个。</li>
</ul>
<ul>
<li>实例考察<ul>
<li>ART 安装apk时，日志记录：</li>
</ul>
</li>
</ul>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://7xr1vo.com1.z0.glb.clouddn.com/art%E5%AE%89%E8%A3%85apk%E7%9A%84log.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<pre><code>可以看到，有apk的拷贝，有dex2oat的dex优化过程。再追一下相关的目录：
</code></pre><p> <img src="http://7xr1vo.com1.z0.glb.clouddn.com/local%E7%9B%AE%E5%BD%95%E4%B8%8B.png" alt=""></p>
<p>  <img src="http://7xr1vo.com1.z0.glb.clouddn.com/dalvik-cache%E7%9B%AE%E5%BD%95%E4%B8%8B.png" alt=""></p>
<p>里面有一部分是系统框架层的相关文件。</p>
<p>安装后的目录结构也有变化：</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://7xr1vo.com1.z0.glb.clouddn.com/data_app%E7%9B%AE%E5%BD%95%E4%B8%8B.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>生成相应的平台下的文件，此处我使用的是x86的模拟器</p>
<p>Android 在编译时用到的 dexopt、dex2oat、aapt 都在 /system/bin目录下：</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://7xr1vo.com1.z0.glb.clouddn.com/4.4%E4%B8%8Bsystem_bin%E4%B8%8B%E7%9A%84aapt.png.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>当时对于 multidex 的包也进行了目录查找，如下，留下后续研究做参考。</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://7xr1vo.com1.z0.glb.clouddn.com/multidex.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>相关参考文献：<br><a href="https://mssun.me/blog/android-art-runtime-2-dex2oat.html" target="_blank" rel="external">https://mssun.me/blog/android-art-runtime-2-dex2oat.html</a><br><a href="http://blog.csdn.net/luoshengyang/article/details/39307813" target="_blank" rel="external">http://blog.csdn.net/luoshengyang/article/details/39307813</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;注：本文不对apk安装之前，系统所做的复杂工作做分析，只针对普通的apk安装过程进行简单的过程理解&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;一般情况下，在apk安装时，系统一般会显示一个安装界面，获取用户同意之后进行安装，并且有一些apk预处理相
    
    </summary>
    
      <category term="Android" scheme="https://fenglincanyi.github.io/categories/Android/"/>
    
    
      <category term="Dalvik" scheme="https://fenglincanyi.github.io/tags/Dalvik/"/>
    
      <category term="ART" scheme="https://fenglincanyi.github.io/tags/ART/"/>
    
  </entry>
  
  <entry>
    <title>Android 类加载初探</title>
    <link href="https://fenglincanyi.github.io/2016/11/17/Android%20%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%88%9D%E6%8E%A2/"/>
    <id>https://fenglincanyi.github.io/2016/11/17/Android 类加载初探/</id>
    <published>2016-11-17T13:08:00.000Z</published>
    <updated>2017-01-19T08:20:55.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>源码路径(此版本：Android 5.0)：<br>android-5.0.0_r7\libcore\dalvik\src\main\java\dalvik\system</p>
</blockquote>
<p>需要关注的类有：<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://7xr1vo.com1.z0.glb.clouddn.com/AndroidClassloader1.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure></p>
<h3 id="一、查找类的过程"><a href="#一、查找类的过程" class="headerlink" title="一、查找类的过程"></a>一、查找类的过程</h3><p>对于一个Class，在Android中，是如何被ClassLoader查找的呢？我们先查看一下，在Android中最原始的ClassLoader: BaseDexClassLoader 中有直接的方法。直接看源码：<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://7xr1vo.com1.z0.glb.clouddn.com/AndroidClassLoader2.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure></p>
<p>再继续追， pathList 的 findClass() 方法：<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://7xr1vo.com1.z0.glb.clouddn.com/AndroidClassLoader3.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure></p>
<p>此时遍历每个dex，通过二进制名来查找类Class；若类未定义或类未找到，则将异常add至suppressed异常集合中，随后抛出。<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://7xr1vo.com1.z0.glb.clouddn.com/AndroidClassLoader4.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure></p>
<h3 id="二、3个类加载器的关系"><a href="#二、3个类加载器的关系" class="headerlink" title="二、3个类加载器的关系"></a>二、3个类加载器的关系</h3><p>我们先来看看这3个ClassLoader的定义</p>
<ul>
<li>BaseDexClassLoader</li>
</ul>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://7xr1vo.com1.z0.glb.clouddn.com/AndroidClassloader5.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<ul>
<li>DexClassLoader</li>
</ul>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://7xr1vo.com1.z0.glb.clouddn.com/AndroidClassloader6.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<ul>
<li>PathClassLoader</li>
</ul>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://7xr1vo.com1.z0.glb.clouddn.com/AndroidClassloader7.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>由上面可看出：BaseDexClassLoader 继承自最原始的 ClassLoader，DexClassLoader 和 PathClassLoader都继承自BaseClassLoader。依据传入的参数不同，来实现各自不同的 dex 加载功能</p>
<p><strong>ClassLoader 相关说明：</strong></p>
<p>从存储中加载类和资源。 在运行时安装一个或多个类加载器。 每当运行时系统需要在内存中尚不可用的特定类时，都会查询这些类。 通常，类加载器是一个树型结构，其中子类加载器将所有请求委托给父类加载器。 只有父类加载器无法满足请求，子类加载器才会尝试处理它（委托机制）</p>
<p>下面我们再继续分析，传入不同的 optimizedDirectory 参数，两者会有什么样的区别？</p>
<p>DexPathList 构造函数：<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://7xr1vo.com1.z0.glb.clouddn.com/AndroidClassloader8.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure></p>
<p>makeDexElements过程：<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://7xr1vo.com1.z0.glb.clouddn.com/AndroidClassloader9.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure></p>
<p>加载DexFile，若optimizedDirectory 目录为空，则初始化一个DexFile，否则，直接加载dex文件：</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://7xr1vo.com1.z0.glb.clouddn.com/AndroidClassloader10.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>初始化DexFile文件，通常是从一个文件对象中打开一个Dex file ，通常是一个 内容是 classes.dex 的 zip/jar文件，<br>虚拟机将在 /data/dalvik-cache 目录下生成相应名称的文件，且打开它，在系统权限允许的情况下尽可能的先创建或更新该文件<br>不能传递 优化后的 文件名（/data/dalvik-cache），而是在 dexopt 之前的原始状态的文件名。</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://7xr1vo.com1.z0.glb.clouddn.com/AndroidClassloader11.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>由上可知，PathClassLoader 的构造函数，与DexClassLoader相比较，optimizedDirectory 优化目录为null。<br>由于optimizedDirectory是用来缓存我们需要加载的dex文件的，并创建一个DexFile对象，如果它为null，那么会直接使用dex文件原有的路径来创建DexFile对象。<br>optimizedDirectory必须是一个内部存储路径，无论哪种动态加载，加载的可执行文件一定要存放在内部存储。DexClassLoader可以指定自己的optimizedDirectory，所以它可以加载外部的dex，因为这个dex会被复制到内部路径的optimizedDirectory<br>所以DexClassLoader可以通过其他路径（内部存储路径）加载dex，而PathClassLoader没有optimizedDirectory，所以它只能加载内部的dex，这些大都是存在系统中已经安装过的apk里面的。</p>
<p>若想查看相关目录下的dex文件，可参考上一篇文章。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;源码路径(此版本：Android 5.0)：&lt;br&gt;android-5.0.0_r7\libcore\dalvik\src\main\java\dalvik\system&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;需要关注的类有：&lt;br&gt;&lt;figu
    
    </summary>
    
      <category term="Android" scheme="https://fenglincanyi.github.io/categories/Android/"/>
    
    
      <category term="ClassLoader" scheme="https://fenglincanyi.github.io/tags/ClassLoader/"/>
    
  </entry>
  
  <entry>
    <title>RadioGroup、RadioButton动态创建并定制icon显示</title>
    <link href="https://fenglincanyi.github.io/2016/10/25/RadioGroup%E3%80%81RadioButton%E5%8A%A8%E6%80%81%E5%88%9B%E5%BB%BA%E5%B9%B6%E5%AE%9A%E5%88%B6icon%E6%98%BE%E7%A4%BA/"/>
    <id>https://fenglincanyi.github.io/2016/10/25/RadioGroup、RadioButton动态创建并定制icon显示/</id>
    <published>2016-10-25T02:24:00.000Z</published>
    <updated>2017-02-08T11:57:56.000Z</updated>
    
    <content type="html"><![CDATA[<p>由于原生的Radiobutton不能满足业务需求，所以需要自己定制icon图片，和默认选中某一项。需要自己代码动态实现。废话不多说，上代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setViewData</span><span class="params">()</span> </span>&#123;</div><div class="line">        radioGroup.removeAllViews();</div><div class="line"></div><div class="line">        <span class="keyword">int</span> margin = ScreenUtil.dip2px(<span class="keyword">this</span>, <span class="number">14.0f</span>);</div><div class="line">        <span class="keyword">int</span> marginLeft = ScreenUtil.dip2px(<span class="keyword">this</span>, <span class="number">20.0f</span>);</div><div class="line">        <span class="keyword">int</span> paddingLeft = ScreenUtil.dip2px(<span class="keyword">this</span>, <span class="number">3.0f</span>);</div><div class="line"></div><div class="line">        RadioGroup.LayoutParams layoutParams = </div><div class="line">            <span class="keyword">new</span> RadioGroup.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT);</div><div class="line">        RadioGroup.LayoutParams layoutParams1 = </div><div class="line">            <span class="keyword">new</span> RadioGroup.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, <span class="number">1</span>);</div><div class="line">        layoutParams.setMargins(marginLeft, margin, margin, margin);</div><div class="line">        layoutParams1.setMargins(margin, <span class="number">0</span>, margin, <span class="number">0</span>);</div><div class="line"></div><div class="line">        <span class="keyword">int</span> defaultId = -<span class="number">1</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; messageList.size(); i++) &#123;</div><div class="line">            RadioButton rb = <span class="keyword">new</span> RadioButton(<span class="keyword">this</span>);</div><div class="line">            rb.setMaxLines(<span class="number">2</span>);</div><div class="line">            rb.setPadding(paddingLeft, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</div><div class="line">            rb.setText(messageList.get(i).relayMessage);</div><div class="line">            rb.setButtonDrawable(android.R.color.transparent);</div><div class="line">            rb.setTextColor(Color.parseColor(<span class="string">"#555555"</span>));</div><div class="line">            rb.setButtonDrawable(<span class="keyword">null</span>);<span class="comment">// 去掉左边默认图标</span></div><div class="line">            rb.setCompoundDrawablePadding(margin);</div><div class="line">            rb.setEllipsize(TextUtils.TruncateAt.END);<span class="comment">// 结尾处打点显示</span></div><div class="line">            Drawable drawable = getResources().getDrawable(R.drawable.relay_message_radio_selector);</div><div class="line">            drawable.setBounds(<span class="number">0</span>, <span class="number">0</span>, drawable.getMinimumWidth(), drawable.getMinimumHeight());</div><div class="line">            rb.setCompoundDrawables(drawable, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>);</div><div class="line">            <span class="comment">// 手动生成id</span></div><div class="line">            <span class="keyword">int</span> generateId = generateViewId();</div><div class="line">            messages.put(generateId, messageList.get(i).relayMessage);</div><div class="line">            rb.setId(generateId);</div><div class="line">            <span class="keyword">if</span> (i == <span class="number">0</span>) &#123;</div><div class="line">                defaultId = generateId;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            TextView view = <span class="keyword">new</span> TextView(<span class="keyword">this</span>);</div><div class="line">            view.setBackgroundColor(Color.parseColor(<span class="string">"#dddddd"</span>));</div><div class="line"></div><div class="line">            radioGroup.addView(rb, layoutParams);</div><div class="line">            radioGroup.addView(view, layoutParams1);</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// 此处：默认选中第一个</span></div><div class="line">        radioGroup.check(defaultId);</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>R.drawable.relay_message_radio_selector 代码如下：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">selector</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!--设置自己的图片icon--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">android:drawable</span>=<span class="string">"@drawable/relay_radio_unchecked"</span> </span></div><div class="line">        <span class="attr">android:state_checked</span>=<span class="string">"false"</span> /&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">android:drawable</span>=<span class="string">"@drawable/relay_radio_checked"</span> </span></div><div class="line">        <span class="attr">android:state_checked</span>=<span class="string">"true"</span> /&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">selector</span>&gt;</span></div></pre></td></tr></table></figure>
<p>效果如下图：</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://7xr1vo.com1.z0.glb.clouddn.com/%E9%80%89%E6%8B%A9.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;由于原生的Radiobutton不能满足业务需求，所以需要自己定制icon图片，和默认选中某一项。需要自己代码动态实现。废话不多说，上代码：&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;p
    
    </summary>
    
      <category term="Android" scheme="https://fenglincanyi.github.io/categories/Android/"/>
    
    
      <category term="Radiobutton" scheme="https://fenglincanyi.github.io/tags/Radiobutton/"/>
    
  </entry>
  
  <entry>
    <title>RxJava 初探（一）</title>
    <link href="https://fenglincanyi.github.io/2016/10/06/RxJava%20%E5%88%9D%E6%8E%A2%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>https://fenglincanyi.github.io/2016/10/06/RxJava 初探（一）/</id>
    <published>2016-10-05T16:45:00.000Z</published>
    <updated>2017-01-19T08:20:55.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、几个基本概念"><a href="#一、几个基本概念" class="headerlink" title="一、几个基本概念"></a>一、几个基本概念</h3><ul>
<li>由来<br>  Rx(Reactive Extensions)，最初是LINQ的一个扩展，后由微软团队开发，在2012年11月开源。ReactiveX.io给的定义是，Rx是一个使用可观察数据流进行异步编程的编程接口，ReactiveX结合了观察者模式、迭代器模式和函数式编程的精华。</li>
<li>Rx 模式<ul>
<li>创建：Rx可以方便的创建事件流和数据流</li>
<li>组合：Rx使用查询式的操作符组合和变换数据流</li>
<li>监听：Rx可以订阅任何可观察的数据流并执行操作</li>
</ul>
</li>
<li>名词定义<ul>
<li>Iterable： 可迭代对象，支持以迭代器的形式遍历</li>
<li>Observable：可观察对象，在Rx中定义为更强大的Iterable，在观察者模式中是被观察的对象，一旦数据产生或发生变化，会通过某种方式通知观察者或订阅者</li>
<li>Observer： 观察者对象，监听Observable发射的数据并做出响应，Subscriber是它的一个特殊实现</li>
<li>emit：直译为发射，发布，发出，含义是Observable在数据产生或变化时发送通知给Observer，调用Observer对应的方法。文章统一翻译为发射</li>
<li>items：直译为项目，条目，在Rx里是指Observable发射的数据项，文章统一译为数据，数据项</li>
</ul>
</li>
</ul>
<h3 id="二、响应式编程模式"><a href="#二、响应式编程模式" class="headerlink" title="二、响应式编程模式"></a>二、响应式编程模式</h3><ul>
<li><p>下图采自官方文档，基本阐述了数据流和数据变换的过程：</p>
<p>  <img src="http://7xr1vo.com1.z0.glb.clouddn.com/rxjava%E7%AE%80%E5%8D%95%E5%9B%BE%E8%A7%A3.png" alt="这里写图片描述"></p>
</li>
<li>冷热观察者<ul>
<li>热 观察者：可能一创建完就开始发射数据，因此所有后续订阅它的观察者可能从序列中间的某个位置开始接受数据（有一些数据错过了）</li>
<li>冷 观察者：一个”冷”的Observable会一直等待，直到有观察者订阅它才开始发射数据，因此这个观察者可以确保会收到整个数据序列</li>
</ul>
</li>
</ul>
<h3 id="三、操作分类"><a href="#三、操作分类" class="headerlink" title="三、操作分类"></a>三、操作分类</h3><ul>
<li>创建操作： Create, Defer, Empty/Never/Throw, From, Interval, Just, Range, Repeat, Start, Timer</li>
<li>变换操作：Buffer, FlatMap, GroupBy, Map, Scan和Window</li>
<li>过滤操作：Debounce, Distinct, ElementAt, Filter, First, IgnoreElements, Last, Sample, Skip, SkipLast, Take, TakeLast</li>
<li>组合操作：And/Then/When, CombineLatest, Join, Merge, StartWith, Switch, Zip</li>
<li>错误处理：Catch和Retry</li>
<li>辅助操作：Delay, Do, Materialize/Dematerialize, ObserveOn, Serialize, Subscribe, SubscribeOn, TimeInterval, Timeout, Timestamp, Using</li>
<li>条件和布尔操作：All, Amb, Contains, DefaultIfEmpty, SequenceEqual, SkipUntil, SkipWhile, TakeUntil, TakeWhile</li>
<li>算术和集合操作：Average, Concat, Count, Max, Min, Reduce, Sum</li>
<li>转换操作：To</li>
<li>连接操作：Connect, Publish, RefCount, Replay</li>
<li>反压操作：用于增加特殊的流程控制策略的操作符</li>
</ul>
<blockquote>
<p>官方文档翻译版：<a href="https://mcxiaoke.gitbooks.io/rxdocs/content/Intro.html" target="_blank" rel="external">https://mcxiaoke.gitbooks.io/rxdocs/content/Intro.html</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;一、几个基本概念&quot;&gt;&lt;a href=&quot;#一、几个基本概念&quot; class=&quot;headerlink&quot; title=&quot;一、几个基本概念&quot;&gt;&lt;/a&gt;一、几个基本概念&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;由来&lt;br&gt;  Rx(Reactive Extensions)，最初是LINQ的
    
    </summary>
    
      <category term="RxJava" scheme="https://fenglincanyi.github.io/categories/RxJava/"/>
    
    
      <category term="RxJava" scheme="https://fenglincanyi.github.io/tags/RxJava/"/>
    
  </entry>
  
  <entry>
    <title>Gradle相关配置</title>
    <link href="https://fenglincanyi.github.io/2016/09/09/Gradle%E7%9B%B8%E5%85%B3%E9%85%8D%E7%BD%AE/"/>
    <id>https://fenglincanyi.github.io/2016/09/09/Gradle相关配置/</id>
    <published>2016-09-09T02:36:00.000Z</published>
    <updated>2017-02-08T11:57:07.000Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div></pre></td><td class="code"><pre><div class="line">android &#123;</div><div class="line">    compileSdkVersion <span class="number">24</span></div><div class="line">    buildToolsVersion <span class="string">"24.0.0"</span></div><div class="line"></div><div class="line">    defaultConfig &#123;</div><div class="line">        applicationId <span class="string">"com.geng.hello"</span></div><div class="line">        minSdkVersion <span class="number">19</span></div><div class="line">        targetSdkVersion <span class="number">24</span></div><div class="line">        versionCode <span class="number">1</span></div><div class="line">        versionName <span class="string">"1.0"</span></div><div class="line">        <span class="comment">// 在buildConfig.java中自动配置常量字段</span></div><div class="line">        buildConfigField(<span class="string">'String'</span>, <span class="string">"API_DEBUG_URL"</span>, <span class="string">'"http://test.baidu.com"'</span>)</div><div class="line"></div><div class="line">        <span class="comment">// 开启multidex,突破64k</span></div><div class="line">        multiDexEnabled <span class="keyword">true</span></div><div class="line"></div><div class="line">        <span class="comment">// ndk cpu架构，生成相应的so包</span></div><div class="line">        ndk&#123;</div><div class="line">            abiFilter <span class="string">'armeabi'</span>, <span class="string">'x86'</span>, <span class="string">'armeabi-v7a'</span>, <span class="string">'x86_64'</span>, <span class="string">'arm64-v8a'</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 渠道</span></div><div class="line">    productFlavors &#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    signingConfigs &#123;</div><div class="line">        relase &#123;</div><div class="line">            storeFile <span class="keyword">file</span>(<span class="string">"relase.keystore"</span>)</div><div class="line">            keyAlias <span class="string">"relase"</span></div><div class="line">            keyPassword <span class="string">"123456"</span></div><div class="line">            storePassword <span class="string">"123456"</span></div><div class="line">        &#125;</div><div class="line">        debug &#123;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    buildTypes &#123;</div><div class="line">        release &#123;</div><div class="line">            <span class="comment">// 混淆开启</span></div><div class="line">            minifyEnabled <span class="keyword">true</span></div><div class="line">            proguardFiles getDefaultProguardFile(<span class="string">'proguard-android.txt'</span>), <span class="string">'proguard-rules.pro'</span></div><div class="line">        &#125;</div><div class="line">        debug &#123;</div><div class="line">            minifyEnabled <span class="keyword">false</span></div><div class="line">            <span class="comment">// 4byte对齐，加快解析效率</span></div><div class="line">            zipAlignEnabled <span class="keyword">true</span></div><div class="line">            <span class="comment">// 移除无用的资源文件</span></div><div class="line">            shrinkResources <span class="keyword">true</span></div><div class="line">            <span class="comment">// 更改包名</span></div><div class="line">            applicationVariants.all &#123; variant -&gt;</div><div class="line">                variant.outputs.<span class="keyword">each</span> &#123; output -&gt;</div><div class="line">                    output.outputFile = <span class="keyword">new</span> <span class="keyword">File</span>(output.outputFile.parent,</div><div class="line">                            <span class="string">"debug_"</span> + buildTime() + <span class="string">".apk"</span>)</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">dependencies</span> &#123;</div><div class="line">    <span class="keyword">compile</span> <span class="keyword">fileTree</span>(dir: <span class="string">'libs'</span>, <span class="keyword">include</span>: [<span class="string">'*.jar'</span>])</div><div class="line">    testCompile <span class="string">'junit:junit:4.12'</span></div><div class="line">    <span class="keyword">compile</span> <span class="string">'com.android.support:appcompat-v7:24.0.0'</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// --------------------------------gradle.properties配置------------------------------</span></div><div class="line"></div><div class="line"><span class="comment">// 加速构建速度</span></div><div class="line">org.gradle.daemon=<span class="keyword">true</span></div><div class="line">org.gradle.parallel=<span class="keyword">true</span></div><div class="line">org.gradle.jvmargs=-Xmx2048m</div><div class="line"></div><div class="line"><span class="comment">// 使用ndk配置</span></div><div class="line">android.useDeprecatedNdk=<span class="keyword">true</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// 其他：</span></div><div class="line"><span class="number">1</span>.查看 keystore 文件的签名信息：</div><div class="line"></div><div class="line">在keystore所在目录下，打开cmd:</div><div class="line">keytool -list -v -keystore keystore文件名</div><div class="line"></div><div class="line">再根据提示，输入storepassword即可查看</div><div class="line"></div><div class="line"><span class="number">2</span>.混淆：</div><div class="line">https:<span class="comment">//segmentfault.com/a/1190000004461614</span></div><div class="line">http:<span class="comment">//www.mayflyask.org/question/247</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight gradle&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/d
    
    </summary>
    
      <category term="Android" scheme="https://fenglincanyi.github.io/categories/Android/"/>
    
    
      <category term="Gradle" scheme="https://fenglincanyi.github.io/tags/Gradle/"/>
    
  </entry>
  
  <entry>
    <title>滑动冲突之EditText-ScrollView</title>
    <link href="https://fenglincanyi.github.io/2016/08/16/%E6%BB%91%E5%8A%A8%E5%86%B2%E7%AA%81%E4%B9%8BEditText-ScrollView/"/>
    <id>https://fenglincanyi.github.io/2016/08/16/滑动冲突之EditText-ScrollView/</id>
    <published>2016-08-16T09:14:00.000Z</published>
    <updated>2017-02-16T03:09:09.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="问题一"><a href="#问题一" class="headerlink" title="问题一"></a>问题一</h3><pre><code>EditText的内容过多时，EditText的内容并不能滚动，而是ScrollView的滚动
</code></pre><h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><pre><code>重写EditText的onTouch事件，将触摸事件交给EditText来处理
</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">et.setOnTouchListener(<span class="keyword">new</span> View.OnTouchListener() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTouch</span><span class="params">(View v, MotionEvent event)</span> </span>&#123;</div><div class="line">                <span class="comment">// 设置ScrollView不拦截事件</span></div><div class="line">                scrollView.requestDisallowInterceptTouchEvent(<span class="keyword">true</span>);</div><div class="line">                <span class="keyword">switch</span> (event.getAction() &amp; MotionEvent.ACTION_MASK)&#123;</div><div class="line">                    <span class="keyword">case</span> MotionEvent.ACTION_UP:</div><div class="line">                    <span class="comment">// 手指离开时：重置ScrollView事件拦截的状态</span></div><div class="line">                    scrollView.requestDisallowInterceptTouchEvent(<span class="keyword">false</span>);</div><div class="line">                        <span class="keyword">break</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h3 id="问题二"><a href="#问题二" class="headerlink" title="问题二"></a>问题二</h3><pre><code>若有ScrollView内容比较多，比较长时，编辑EditText里的内容时会出现ScrollView滑到底部的现象，使得当前编辑的EditText看不到了
</code></pre><h3 id="解决-1"><a href="#解决-1" class="headerlink" title="解决"></a>解决</h3><pre><code>修改AndroidManifest.xml中Activity的windowSoftInputMode属性(看具体逻辑而定：adjustPan)
</code></pre><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">activity</span></span></div><div class="line">    <span class="attr">android:name</span>=<span class="string">".me.MineResumeProjectExperienceActivity"</span></div><div class="line">    <span class="attr">android:screenOrientation</span>=<span class="string">"portrait</span></div><div class="line">    android:windowSoftInputMode="<span class="attr">stateHidden</span>|<span class="attr">adjustPan</span>"/&gt;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;问题一&quot;&gt;&lt;a href=&quot;#问题一&quot; class=&quot;headerlink&quot; title=&quot;问题一&quot;&gt;&lt;/a&gt;问题一&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;EditText的内容过多时，EditText的内容并不能滚动，而是ScrollView的滚动
&lt;/code&gt;&lt;/p
    
    </summary>
    
      <category term="Android" scheme="https://fenglincanyi.github.io/categories/Android/"/>
    
    
      <category term="滑动冲突" scheme="https://fenglincanyi.github.io/tags/%E6%BB%91%E5%8A%A8%E5%86%B2%E7%AA%81/"/>
    
  </entry>
  
  <entry>
    <title>简单的页面置换算法分析</title>
    <link href="https://fenglincanyi.github.io/2016/06/04/%E7%AE%80%E5%8D%95%E7%9A%84%E9%A1%B5%E9%9D%A2%E7%BD%AE%E6%8D%A2%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90/"/>
    <id>https://fenglincanyi.github.io/2016/06/04/简单的页面置换算法分析/</id>
    <published>2016-06-04T11:39:00.000Z</published>
    <updated>2017-01-19T08:20:55.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>本文主要分析操作系统中涉及到的一些常见的置换算法，并不对涉及的操作系统内容过多介绍。这些算法在其他的计算机应用中也有体现，基本原理都是一致的，可参考理解。</p>
</blockquote>
<h3 id="一、前提说明"><a href="#一、前提说明" class="headerlink" title="一、前提说明"></a>一、前提说明</h3><p>本文主要针对一个例子进行说明，以下的算法实现过程均是按照本例进行分析。页面的走向为：</p>
<pre><code>4 3 2 1 4 3 5 4 3 2 1 5 
</code></pre><p>一段程序在内存中，分配3个页面，初始情况下为空。<br>以下依次根据不同的算法进行页面置换过程的分析。</p>
<h3 id="二、算法分析过程"><a href="#二、算法分析过程" class="headerlink" title="二、算法分析过程"></a>二、算法分析过程</h3><h4 id="1-FIFO（先进先出）"><a href="#1-FIFO（先进先出）" class="headerlink" title="1. FIFO（先进先出）"></a>1. FIFO（先进先出）</h4><p>FIFO算是最简单、最容易理解的算法了，只要按照依次装入内存的页面的页号按照进入的先后次序排好队列，每次总是从队首出，队尾出。当发生缺页时，置换队首的页面即可。<br><br>对上面的页面走向序列，分析过程如下图：</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://7xr1vo.com1.z0.glb.clouddn.com/%E5%9B%BE1.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<h4 id="2-LRU-（最近最少使用-Least-Recently-Used）"><a href="#2-LRU-（最近最少使用-Least-Recently-Used）" class="headerlink" title="2. LRU （最近最少使用 Least Recently Used）"></a>2. LRU （最近最少使用 Least Recently Used）</h4><p>在缺页发生时，选择离现在最长时间内，没有被访问过的页面置换出来。<br><br>分析过程，如下图：</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://7xr1vo.com1.z0.glb.clouddn.com/%E5%9B%BE2.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<ul>
<li>此算法应用的比较广泛，尤其是拿来做缓存算法。Android的API中，已经封装了相关的LRU的算法直接可以调用。</li>
<li>一些图片的缓存算法都是使用LRU进行缓存优化的。ImageLoader框架更是将好几种缓存算法融合到里面，可以灵活选用。详细可以查看源码的实现。<h4 id="3-LFU-（最近最不常用-Least-Frequently-Used）"><a href="#3-LFU-（最近最不常用-Least-Frequently-Used）" class="headerlink" title="3. LFU （最近最不常用 Least Frequently Used）"></a>3. LFU （最近最不常用 Least Frequently Used）</h4>选择访问次数最少的页面置换出来。<br>此算法的实现要花费的开销很大，并且要确定一个合适的周期T也有一定的难度，就不在分析了。<h4 id="3-OPT-（理想）"><a href="#3-OPT-（理想）" class="headerlink" title="3. OPT （理想）"></a>3. OPT （理想）</h4>此算法置换以后不再需要或最长时间以后才会用到的页面。这一算法一般不可能实现，但它可以作为衡量其他页面置换算法的标准。<br><br>分析过程，如下图：</li>
</ul>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://7xr1vo.com1.z0.glb.clouddn.com/%E5%9B%BE3.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本文主要分析操作系统中涉及到的一些常见的置换算法，并不对涉及的操作系统内容过多介绍。这些算法在其他的计算机应用中也有体现，基本原理都是一致的，可参考理解。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;一、前提说明&quot;&gt;&lt;a href=&quot;#一、
    
    </summary>
    
      <category term="算法" scheme="https://fenglincanyi.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="LRU" scheme="https://fenglincanyi.github.io/tags/LRU/"/>
    
  </entry>
  
  <entry>
    <title>Android SingleTask 探究</title>
    <link href="https://fenglincanyi.github.io/2016/05/16/Android%20SingleTask%20%E6%8E%A2%E7%A9%B6/"/>
    <id>https://fenglincanyi.github.io/2016/05/16/Android SingleTask 探究/</id>
    <published>2016-05-16T03:12:00.000Z</published>
    <updated>2017-01-19T08:20:55.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>Android 4种启动模式来说，用法说明此处不再提及主要介绍SingleTop，SingleTask相关的问题</p>
</blockquote>
<h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><ul>
<li><p>先分析 官方文档 中的一段话：</p>
<blockquote>
<p>As shown in the table above, standard is the default mode and is appropriate for most types of activities. SingleTop is also a common and useful launch mode for many types of activities. The other modes — singleTask and singleInstance — <font color="red">are not appropriate for most applications</font>, since they result in an interaction model that is likely to be unfamiliar to users and is very different from most other applications.</p>
</blockquote>
</li>
</ul>
<p>&emsp;&emsp;对于大多数应用来说，SingleTask 和 SingleInstance 并不适用，standrd 和 SingleTop对于普通的大部分Activity启动是适用的。<br>之所以使用singleTask，是存在这样一类问题，想要从后面的Activity 直接跳转到前面某一个Activity时，可能会采用的，如一个应用的MainActivity，LoginActivity等。</p>
<p>&emsp;&emsp;对于SingleTask模式，官方文档的这么一句话，坑了不少人（我还比较幸运，没被坑惨）,也带给我对之前知识的迷惑。</p>
<blockquote>
<p>The system creates a new task and instantiates the activity at the root of the new task</p>
</blockquote>
<p>&emsp;&emsp;<strong>其实事实根本不是这样的</strong>！！！</p>
<h3 id="场景复现"><a href="#场景复现" class="headerlink" title="场景复现"></a>场景复现</h3><ul>
<li><p>下面用代码事实说话：建立3个Activity，分别为Main1Activity、Main2Activity、Main3Activity，前两个都设定单击事件，跳转逻辑为：main1 -&gt; main2 -&gt; main3，其中 Main2Activity 为 SingleTask（AndroidManifest.xml中设置）。打印相应的生命周期方法和所在的 <strong>taskId</strong></p>
<p>  <img src="http://7xr1vo.com1.z0.glb.clouddn.com/SingleTask%20%E5%9B%BE1.png" alt=""></p>
</li>
</ul>
<p>&emsp;&emsp;这些taskid都是一样的，所以它们都是同一个Task中的。事实胜于雄辩。然后搜了一下相关问题，老罗的博客还是给力，彻彻底底的分析了这个坑。致谢老罗的开源精神！<br>&emsp;&emsp;链接：<a href="http://blog.csdn.net/luoshengyang/article/details/6714543" target="_blank" rel="external">http://blog.csdn.net/luoshengyang/article/details/6714543</a></p>
<ul>
<li><p>同时为了解释项目中类似的一个页面跳转问题，对于上面的demo做了修改：</p>
<p>  将 Main1Activity 设置为 SingleTask，其余2个为standrd</p>
<p>  操作步骤：</p>
<ol>
<li>点击图标启动此应用</li>
<li>依次点击进入 Main2，Main3，再点击Home键</li>
<li><p>点击应用图标重新进入</p>
<p>操作结果：结果再次显示的是Main1Activity，而不是Main3Activity。</p>
<p>先看看打印的日志：</p>
<p><img src="http://7xr1vo.com1.z0.glb.clouddn.com/SingleTask%E5%9B%BE2.png" alt=""></p>
<p>再次点击图标进入应用时，实际上是Main2Activity，Main3Activity 出栈了。<br>分析下这个过程：</p>
<p>Main1，Main2，Main3 依次压入栈中，然后 Home 键，则整个Task处于stop状态，是一个background Task。当再次点击应用图标时，系统检测到此时已经存在一个该应用的Task的，此时就将此Background Task 移至前台，成为Foreground Task，而且由于Main1Activity是SingleTask，且位于task底部，所以，再次启动时，将前两个Activity移除，且按照启动顺序依次移除，所以打出的日志是：Main2 desotry，Main3 destory，Main1 onResume。</p>
</li>
</ol>
<ul>
<li><p><strong>看来，SingleTask这种特殊的模式引起的Task内Activity的变化是值得注意的</strong></p>
<p>之前我在Stackoverflow上问相关的问题，和我猜想的原因比较类似，链接如下：</p>
<p><a href="http://stackoverflow.com/questions/36933755/activity-is-singletask-and-is-root-in-task-restrart-activity-of-top-is-destorye" target="_blank" rel="external">http://stackoverflow.com/questions/36933755/activity-is-singletask-and-is-root-in-task-restrart-activity-of-top-is-destorye</a> （可供参考）</p>
</li>
</ul>
</li>
</ul>
<p>那么，如何才能在一个新的任务栈里创建新的Activity呢？</p>
<ul>
<li><p>只需要在AndroidManifest.xml中配置即可</p>
<p>  在SingleTask的基础之上，再增加设置 <strong>taskAffinify</strong> 属性即可，默认情况下，taskAffinity属性值为 包名，所以可以自定义一个taskAffinity值，便可以实现一个新的Task,新的Activity处于这个新的Task的root。如，我的 Demo 代码如下：</p>
<p>  <img src="http://7xr1vo.com1.z0.glb.clouddn.com/SingleTask%E5%9B%BE3.png" alt=""></p>
</li>
</ul>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul>
<li>SingleTask的启动模式并不会启动一个新的任务栈来承载Activity，而是在原来的Task中</li>
<li>SingleTask的启动模式，在官方文档的说明中，日常开发中并不建议使用，SingleInstance更是如此。</li>
<li>Activity的启动模式会带来的Task的变化和Activity的生命周期变化都会在ActivityRecord中体现的，通过源码分析可以发现。</li>
<li><p>通过以下命令，可以查看Task内的Activity的变化：</p>
<pre><code>adb shell dumpsys activity  获取所有应用的activity堆栈信息
adb shell dumpsys activity | grep com.xxx.xxx.xxx   获取某个应用的activity 堆栈信息
adb shell dumpsys activity | grep mFocusedActivity  获取处于栈顶的Activity
</code></pre></li>
<li><p><a href="http://blog.piasy.com/2016/03/19/Android-Task-And-Back-Stack/" target="_blank" rel="external">http://blog.piasy.com/2016/03/19/Android-Task-And-Back-Stack/</a> (写完此文后，发现有高人已经写得很全面很详尽了)</p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Android 4种启动模式来说，用法说明此处不再提及主要介绍SingleTop，SingleTask相关的问题&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;说明&quot;&gt;&lt;a href=&quot;#说明&quot; class=&quot;headerlink&quot; titl
    
    </summary>
    
      <category term="Android" scheme="https://fenglincanyi.github.io/categories/Android/"/>
    
    
      <category term="SingleTask" scheme="https://fenglincanyi.github.io/tags/SingleTask/"/>
    
  </entry>
  
  <entry>
    <title>对称、非对称加密技术初探</title>
    <link href="https://fenglincanyi.github.io/2016/02/28/%E5%AF%B9%E7%A7%B0%E3%80%81%E9%9D%9E%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86%E6%8A%80%E6%9C%AF%E5%88%9D%E6%8E%A2/"/>
    <id>https://fenglincanyi.github.io/2016/02/28/对称、非对称加密技术初探/</id>
    <published>2016-02-28T09:52:00.000Z</published>
    <updated>2017-01-19T08:20:55.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、对称加密"><a href="#一、对称加密" class="headerlink" title="一、对称加密"></a>一、对称加密</h3><ol>
<li><p><strong>对称加密简介</strong></p>
<p> 对称加密算法所用到的基本的方法是：代换 和 置换。简单来说：（以早期的加密方式举例）</p>
<ul>
<li><p>代换：是将明文字母替换成其他字母、数字或符号的方法</p>
<p>  对于明文中的每一个字母，用字母表中k个字母来代替（允许循环，即a可以在z的后面）</p>
<blockquote>
<p>例如：如果 k = 3，那么明文中的 a 在密文中就变 d ，b 就变成 e。这里 k 值充当密钥</p>
</blockquote>
</li>
<li><p>置换：可以说对代换的一种改进，通过并不是通过固定的规则来替换字母，任意字母都可以替换为别的其他字母，但是一一对应的。例如（单表置换加密）：</p>
<blockquote>
<p>明文：a b c d e f g</p>
<p>密文：d c h n q i a</p>
</blockquote>
<p>以上是早期加密时用的简单的方法，其思想还是通过 替换 来进行加密的</p>
</li>
</ul>
</li>
<li><p><strong>对称加密过程</strong></p>
<p> <img src="http://7xr1vo.com1.z0.glb.clouddn.com/%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86%E8%BF%87%E7%A8%8B.PNG" alt=""></p>
</li>
<li><p><strong>常见对称加密算法</strong></p>
<ul>
<li><p><strong>DES</strong>   </p>
<p>  采用64位的分组长度，和56位的密钥长度，将64位的输入经过一系列的变换得到64位的输出。加密解密使用了相同的密钥。</p>
<pre><code>* 注： 此算法可以被暴力破解，穷举即可解密，所以不再单纯使用 
</code></pre></li>
<li><p><strong>3DES</strong></p>
<p>  对DES的改进，使用多个密钥对DES进行三次加密，有些基于Internet的应用已经采纳了这种算法，如：PGP，S/MIME</p>
</li>
<li><p><strong>AES</strong>(高级加密标准)</p>
<p>  对DES的再次改进，性能不低于3DES， 它的密钥长度为128、192或256位，分组长度为128位</p>
</li>
<li><p><strong>Blowfish算法</strong></p>
<p>  一种可变密钥长度的分组加密算法，分组长度64位。迄今为止，该算法的安全性还没有受到挑战</p>
</li>
<li><p><strong>RC5算法</strong></p>
<p>  参数可变的分组加密算法，此算法使用了三种运算：异或、加、循环</p>
</li>
</ul>
</li>
</ol>
<h3 id="二、非对称加密"><a href="#二、非对称加密" class="headerlink" title="二、非对称加密"></a>二、非对称加密</h3><blockquote>
<p>基于数学函数的算法，而不再是基于代换和置换技术，公钥加密算法是 非对称的</p>
<p>根据加密算法 和 加密密钥 是推不出 解密密钥的</p>
</blockquote>
<ol>
<li><p><strong>关于公钥、私钥</strong></p>
<p> 正确理解：</p>
<pre><code>公钥是用于 加密 和 认证 的
私钥是用于 解密 和 签名 的

* 这两个密钥，任意一个都可以用来加密，另一个用来解密
* 公钥是公开的
</code></pre></li>
<li><p><strong>非对称加密过程</strong></p>
<p> <img src="http://7xr1vo.com1.z0.glb.clouddn.com/%E9%9D%9E%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86%E8%BF%87%E7%A8%8B.png" alt=""></p>
</li>
<li><p><strong>RSA简介</strong></p>
<p> 第一个能用于数据加密也能用于数字签名的算法，RSA是一种分组密码</p>
<ul>
<li>易于理解和操作，但安全性一直没有得到理论上的证明</li>
<li><p>RSA的加密和解密时间是DES的上百倍，效率较低</p>
<blockquote>
<p>选取密钥的过程：</p>
</blockquote>
<p>  (1). 选取两个 大质数 p, q. 质数值越大，破解 RSA 就越困难，进行加密和解密的时间就越长<br>  (2). 计算 n = p <em> q,  z = (p-1) </em> (q-1)<br>  (3). 选取 e &lt; n, 且与 z 互质（e 和 z没有公约数）<br>  (4). 找到数 d, 满足 ed - 1 被 z 整除（ ((e * d) - 1) % n) == 0 ）<br>  (5). 公钥：（n, e）;  私钥：（n, d）</p>
<blockquote>
<p>加密、解密过程：</p>
</blockquote>
<p>  (1). 甲方（发送方）：发送 m (发送数)，m &lt; n,<br>  (2). 发送时，用乙方（接收方）的公钥加密：密文 c = m^e % n<br>  (3). 乙方：解密用自己的私钥，得到明文 m = c^d % n</p>
</li>
</ul>
</li>
<li><p><strong>其他非对称加密算法</strong></p>
<ul>
<li>ElGamal算法：基于公钥密码体制和椭圆曲线加密体系，既能用于数据加密，又能用于数字签名</li>
<li>背包加密算法：基于背包算法，但是大多数一次背包体制均被破译了，因此很少有人使用它</li>
</ul>
</li>
</ol>
<ol>
<li><p><strong>散列(哈希)函数</strong></p>
<p> 是公开的函数，可以将任意长的串映射成一个固定长度的串，Hash值 由下面的函数 H 生成：</p>
<pre><code>h = H (M)

M: 变长的消息，H(M)是定长的 Hash值
</code></pre><p> 常见的散列函数有： <strong>MD5</strong>，<strong>SHA-1</strong> </p>
<ul>
<li><p>MD5：</p>
<p>  有广泛的应用，如在 Java API 中就有体现，但也不安全，有人专门将大量的明文和密文收集起来存至数据库中，用于暴力破解MD5。所以实际使用时，需 “加盐”</p>
</li>
<li><p>SHA-1:</p>
<p>  在Linux系统、Git中都有广泛的使用，它的原理类似于 MD4(MD5的前身)。</p>
<blockquote>
<p>说明： MD5 和 SHA-1被好多人称为 加密算法，其实这两个散列函数，是用于散列获得消息摘要的，严格来说，应该叫做 <strong>消息摘要算法</strong></p>
</blockquote>
</li>
</ul>
</li>
<li><p><strong>数字签名</strong></p>
<p> 签名是用来验证 发送方的身份 和 数据的完整性(数据是否被第三方篡改)的</p>
<p> 签名分为：</p>
<ul>
<li>普通数字签名（如：RSA，DES）</li>
<li><p>特殊数字签名（如：有盲签名，代理签名）</p>
<p><strong>数字签名过程</strong>：</p>
<p>  (1). 发送方 生成一对公钥和私钥，将自己的 公钥 发送给 接收方<br>  (2). 发送方 将 要发送的消息 msg, 进行散列(MD5或者SHA-1)，得到 消息摘要<br>  (3). 发送方 将 消息摘要 用自己的私钥加密，加密后的信息就是 数字签名<br>  (4). 发送方 将 数字签名 附在 要发送的消息 msg’ (是通过接收方的公钥加密后的) 的后面，再一起发送至 接收方<br><strong>数字签名的验证过程</strong>：</p>
<p>  (1). 接收方 收到消息后，对消息 msg’ 使用自己的私钥进行解密得到 msg<br>  (2). 接收方 对 数字签名 使用 发送方的公钥解密，得到 消息摘要(之前是由消息经过散列得到)<br>  (3). 接收方 使用相同的 散列函数(散列函数也是公开的)对 msg 进行散列，再计算得到一个 消息摘要<br>  (4). 接收方 对比着两个 消息摘要 即可判断出 消息的完整性</p>
<blockquote>
<p>身份的正确性：可通过 使用公钥能否解开数字签名 来判断</p>
<p>数据的完整性：可通过 对比两个消息摘要是否相同 来判断</p>
</blockquote>
<p><img src="http://7xr1vo.com1.z0.glb.clouddn.com/%E6%95%B0%E5%AD%97%E7%AD%BE%E5%90%8D.png" alt=""></p>
</li>
</ul>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;一、对称加密&quot;&gt;&lt;a href=&quot;#一、对称加密&quot; class=&quot;headerlink&quot; title=&quot;一、对称加密&quot;&gt;&lt;/a&gt;一、对称加密&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;对称加密简介&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; 对称加密算法所用到的基本的
    
    </summary>
    
      <category term="网络" scheme="https://fenglincanyi.github.io/categories/%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="加密" scheme="https://fenglincanyi.github.io/tags/%E5%8A%A0%E5%AF%86/"/>
    
      <category term="签名" scheme="https://fenglincanyi.github.io/tags/%E7%AD%BE%E5%90%8D/"/>
    
  </entry>
  
  <entry>
    <title>Git学习笔记（二）</title>
    <link href="https://fenglincanyi.github.io/2016/02/19/Git%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <id>https://fenglincanyi.github.io/2016/02/19/Git学习笔记（二）/</id>
    <published>2016-02-19T08:06:00.000Z</published>
    <updated>2017-01-19T08:20:55.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="常用命令："><a href="#常用命令：" class="headerlink" title="常用命令："></a>常用命令：</h3><blockquote>
<p>1、初始</p>
</blockquote>
<pre><code>git &lt;verb&gt; --help            查看命令用法(方法之一)
git init                    初始化git仓库(在当前目录下会创建.git目录)
</code></pre><blockquote>
<p>2、 远程操作</p>
</blockquote>
<pre><code>git clone URL                从远程clone git仓库
git remote -v                查看远程仓库使用的 Git 保存的简写与其对应的 URL    
git pull URL                将数据拉取到你的本地仓库,并合并远程分支到当前分支
git fetch URL                将数据拉取到你的本地仓库,并不会自动合并或修改你当前的工作
git push URL                将本地git仓库推送到远程仓库(一次就记住URL了,之后不需要写URL)
</code></pre><blockquote>
<p>3、添加文件</p>
</blockquote>
<pre><code>git add filename            添加某个文件(该文件处于已跟踪(A)：tracked)
git add --all , -A            添加所有文件
</code></pre><blockquote>
<p>4、提交文件</p>
</blockquote>
<pre><code>git commit -m &quot;提交信息&quot;         提交当下工作区的文件
git commit -a -m &quot;提交信息&quot;         前两个命令的合并，直接跳过暂存区提交
git commit                        启动文本编辑器写提交信息
</code></pre><blockquote>
<p>5、查看文件状态</p>
</blockquote>
<pre><code>git status                    查看当前文件状态
git status -s                查看当前文件详细状态列表    
</code></pre><blockquote>
<p>6、查看日志</p>
</blockquote>
<pre><code>git log                        查看提交的日志
git log    --oneline            查看提交的日志简略信息
git log    -p -2                查看最近两次提交的日志
</code></pre><blockquote>
<p>7、查看修改</p>
</blockquote>
<pre><code>git diff                    查看未暂存文件(未add)的修改内容
git diff --staged, --cached    查看已暂存文件(已add)的修改内容
</code></pre><blockquote>
<p>8、删除文件</p>
</blockquote>
<pre><code>git rm filename                移除文件
git rm --cached filename    移除文件,但该文件还留在工作区，但之后不会被跟踪(untracked)
git rm \*.txt                移除以 .txt 结尾的文件
</code></pre><blockquote>
<p>9、更改文件名</p>
</blockquote>
<pre><code>git mv oldName newName        更改文件名
</code></pre><blockquote>
<p>10、标签操作</p>
</blockquote>
<pre><code>git tag -a v1.0 -m &quot;info&quot;    打标签 v1.0:版本号，info:版本信息
git tag                        查看已有标签
</code></pre><blockquote>
<p>11、分支操作</p>
</blockquote>
<pre><code>git branch branchName        创建分支
git branch -d branchName    删除分支
git checkout branchName        切换分支
git merge branchName        合并分支到当前分支
git mergetool                启动图形化工具解决冲突
git branch                    查看所有分支
git branch -v, -vv            查看所有分支的最后一次提交
</code></pre><h3 id="补充："><a href="#补充：" class="headerlink" title="补充："></a>补充：</h3><ul>
<li><strong>rebase</strong>: <strong>变基</strong>，另一种不同于merge的”整合”方式 (命令示例：git rebase master)</li>
<li>变基是将一系列提交按照原有次序依次应用到另一分支上，而合并是把最终结果合在一起。</li>
<li><p>请注意：</p>
<blockquote>
<p>无论是通过变基，还是通过三方合并，整合的最终结果所指向的快照始终是一样的，只不过提交历史不同罢了。</p>
</blockquote>
</li>
<li><p>准则：</p>
<ul>
<li>不要对在你的仓库外有副本的分支执行变基</li>
<li>只对尚未推送或分享给别人的本地修改执行变基操作清理历史，从不对已推送至别处的提交执行变基操作</li>
</ul>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;常用命令：&quot;&gt;&lt;a href=&quot;#常用命令：&quot; class=&quot;headerlink&quot; title=&quot;常用命令：&quot;&gt;&lt;/a&gt;常用命令：&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;1、初始&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;git &amp;lt;ver
    
    </summary>
    
      <category term="工具" scheme="https://fenglincanyi.github.io/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="Git" scheme="https://fenglincanyi.github.io/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Git学习笔记（一）</title>
    <link href="https://fenglincanyi.github.io/2016/02/19/Git%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>https://fenglincanyi.github.io/2016/02/19/Git学习笔记（一）/</id>
    <published>2016-02-19T07:28:00.000Z</published>
    <updated>2017-01-19T08:20:55.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、Git特点"><a href="#一、Git特点" class="headerlink" title="一、Git特点"></a>一、Git特点</h3><h4 id="1-直接记录快照，而非差异比较"><a href="#1-直接记录快照，而非差异比较" class="headerlink" title="1. 直接记录快照，而非差异比较"></a>1. 直接记录快照，而非差异比较</h4><ul>
<li>在 Git 中保存项目状态时，它主要对当时的全部文件制作一个快照并保存这个快照的索引。</li>
<li>为了高效，如果文件没有修改，Git 不再重新存储该文件，而是只保留一个链接指向之前存储的文件。</li>
<li>Git 对待数据更像是一个 快照流。<h4 id="2-近乎所有操作都是本地执行"><a href="#2-近乎所有操作都是本地执行" class="headerlink" title="2. 近乎所有操作都是本地执行"></a>2. 近乎所有操作都是本地执行</h4></li>
<li>在 Git 中的绝大多数操作都只需要访问本地文件和资源，一般不需要来自网络上其它计算机的信息。<h4 id="3-Git-保证完整性"><a href="#3-Git-保证完整性" class="headerlink" title="3. Git 保证完整性"></a>3. Git 保证完整性</h4></li>
<li><p>Git 中所有数据在存储前都计算校验和，然后以校验和来引用。Git 用以计算校验和的机制叫做 SHA-1 散列（hash，哈希）。<br>这是一个由 40 个十六进制字符（0-9 和 a-f）组成字符串，基于 Git 中文件的内容或目录结构计算出来。<br>SHA-1 哈希看起来是这样：  </p>
<pre><code>&gt;24b9da6552252987aa493b52f8696cd6d3b00373
</code></pre></li>
<li><p>实际上，Git 数据库中保存的信息都是以文件内容的哈希值来索引，而不是文件名</p>
<h4 id="4-Git-一般只添加数据"><a href="#4-Git-一般只添加数据" class="headerlink" title="4. Git 一般只添加数据"></a>4. Git 一般只添加数据</h4></li>
<li>你执行的 Git 操作，几乎只往 Git 数据库中增加数据</li>
</ul>
<h3 id="二、Git-中的文件有3种状态："><a href="#二、Git-中的文件有3种状态：" class="headerlink" title="二、Git 中的文件有3种状态："></a>二、Git 中的文件有3种状态：</h3><h4 id="1-已提交：数据已经安全的保存在本地数据库中"><a href="#1-已提交：数据已经安全的保存在本地数据库中" class="headerlink" title="1. 已提交：数据已经安全的保存在本地数据库中"></a>1. 已提交：数据已经安全的保存在本地数据库中</h4><h4 id="2-已修改：修改了文件，但未保存到数据库中"><a href="#2-已修改：修改了文件，但未保存到数据库中" class="headerlink" title="2. 已修改：修改了文件，但未保存到数据库中"></a>2. 已修改：修改了文件，但未保存到数据库中</h4><h4 id="3-已暂存：对一个已修改文件的当前版本做了标记，使之包含在下次提交的快照中"><a href="#3-已暂存：对一个已修改文件的当前版本做了标记，使之包含在下次提交的快照中" class="headerlink" title="3. 已暂存：对一个已修改文件的当前版本做了标记，使之包含在下次提交的快照中"></a>3. 已暂存：对一个已修改文件的当前版本做了标记，使之包含在下次提交的快照中</h4><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://7xr1vo.com1.z0.glb.clouddn.com/%E6%96%87%E4%BB%B6%E7%9A%84%E7%8A%B6%E6%80%81%E5%8F%98%E5%8C%96%E5%91%A8%E6%9C%9F.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure> 
<h3 id="三、Git-中的3个工作区域"><a href="#三、Git-中的3个工作区域" class="headerlink" title="三、Git 中的3个工作区域"></a>三、Git 中的3个工作区域</h3><h4 id="1-Git仓库：保存项目的元数据和对象数据库，Git中最重要的部分，供其他人clone-仓库"><a href="#1-Git仓库：保存项目的元数据和对象数据库，Git中最重要的部分，供其他人clone-仓库" class="headerlink" title="1. Git仓库：保存项目的元数据和对象数据库，Git中最重要的部分，供其他人clone 仓库"></a>1. Git仓库：保存项目的元数据和对象数据库，Git中最重要的部分，供其他人clone 仓库</h4><h4 id="2-工作目录：对项目的某个版本独立提取出来的，供工作中使用、修改"><a href="#2-工作目录：对项目的某个版本独立提取出来的，供工作中使用、修改" class="headerlink" title="2. 工作目录：对项目的某个版本独立提取出来的，供工作中使用、修改"></a>2. 工作目录：对项目的某个版本独立提取出来的，供工作中使用、修改</h4><ul>
<li><p>工作目录下的文件状态：</p>
<p>  已跟踪：纳入了版本控制的文件，后期可能处于 未修改，已修改或放入暂存区了</p>
<p>  未跟踪：工作目录下除已跟踪文件外的其他所有文件</p>
<h4 id="3-暂存区：是一个文件，保存下次将提交的文件列表信息，一般在Git仓库目录中，有时也被叫做索引"><a href="#3-暂存区：是一个文件，保存下次将提交的文件列表信息，一般在Git仓库目录中，有时也被叫做索引" class="headerlink" title="3. 暂存区：是一个文件，保存下次将提交的文件列表信息，一般在Git仓库目录中，有时也被叫做索引"></a>3. 暂存区：是一个文件，保存下次将提交的文件列表信息，一般在Git仓库目录中，有时也被叫做索引</h4><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://7xr1vo.com1.z0.glb.clouddn.com/git3%E7%A7%8D%E5%B7%A5%E4%BD%9C%E5%8C%BA%E5%9F%9F.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure> 
</li>
</ul>
<h3 id="四、Git-的基本工作流程"><a href="#四、Git-的基本工作流程" class="headerlink" title="四、Git 的基本工作流程"></a>四、Git 的基本工作流程</h3><h4 id="1-在工作目录中修改文件"><a href="#1-在工作目录中修改文件" class="headerlink" title="1. 在工作目录中修改文件"></a>1. 在工作目录中修改文件</h4><h4 id="2-暂存文件，将文件的快照放入暂存区"><a href="#2-暂存文件，将文件的快照放入暂存区" class="headerlink" title="2. 暂存文件，将文件的快照放入暂存区"></a>2. 暂存文件，将文件的快照放入暂存区</h4><h4 id="3-提交更新，找到暂存区的文件，将快照永久性存储到Git仓库中"><a href="#3-提交更新，找到暂存区的文件，将快照永久性存储到Git仓库中" class="headerlink" title="3. 提交更新，找到暂存区的文件，将快照永久性存储到Git仓库中"></a>3. 提交更新，找到暂存区的文件，将快照永久性存储到Git仓库中</h4><h3 id="五、Git-个人信息初始配置"><a href="#五、Git-个人信息初始配置" class="headerlink" title="五、Git 个人信息初始配置"></a>五、Git 个人信息初始配置</h3><ul>
<li><p>全局信息配置：(个人默认信息)</p>
<blockquote>
<p>git config –global user.name “xxx”</p>
<p>git config –global user.email   xxx@qq.coom</p>
</blockquote>
<p>  此配置会写入 user目录下的 .gitconfig文件，实际上为个人信息默认值</p>
</li>
<li><p>临时配置：</p>
<p>  去掉 –global 即可<br>  实际是在其配置列表中追加其信息，重复变量名，不同的value值<br>  (Git每次会读取不同文件，其中就可能含有同一个配置)<br>  Git 会使用每个变量的最后一次的配置的值</p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;一、Git特点&quot;&gt;&lt;a href=&quot;#一、Git特点&quot; class=&quot;headerlink&quot; title=&quot;一、Git特点&quot;&gt;&lt;/a&gt;一、Git特点&lt;/h3&gt;&lt;h4 id=&quot;1-直接记录快照，而非差异比较&quot;&gt;&lt;a href=&quot;#1-直接记录快照，而非差异比较&quot; c
    
    </summary>
    
      <category term="工具" scheme="https://fenglincanyi.github.io/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="Git" scheme="https://fenglincanyi.github.io/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Android Studio NDK开发环境搭建及Demo示例</title>
    <link href="https://fenglincanyi.github.io/2016/01/16/Android%20Studio%20NDK%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E5%8F%8ADemo%E7%A4%BA%E4%BE%8B/"/>
    <id>https://fenglincanyi.github.io/2016/01/16/Android Studio NDK开发环境搭建及Demo示例/</id>
    <published>2016-01-16T11:34:00.000Z</published>
    <updated>2017-02-08T11:49:06.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p> 说明：Android Studio 1.4后支持C/C++开发，1.3之前的版本坑点较多，所以使用1.4后的版本较为容易</p>
</blockquote>
<h3 id="所用工具版本"><a href="#所用工具版本" class="headerlink" title="所用工具版本"></a>所用工具版本</h3><ul>
<li>Android Studio 1.5</li>
<li>android-ndk-r10e-windows-x86_64.exe</li>
</ul>
<h3 id="配置NDK环境"><a href="#配置NDK环境" class="headerlink" title="配置NDK环境"></a>配置NDK环境</h3><ul>
<li><p>自行下载 <strong>ndk</strong> 工具，在你的要安装 ndk 的目录下，直接双击 此安装包，就会自动安装至此目录下，过程中会打开cmd窗口，命令行不断执行命令，需等待一会即可</p>
</li>
<li><p>cmd窗口自动关闭后，会出现 <strong>ndk</strong> 的文件夹，如图： </p>
</li>
</ul>
<p><img src="http://7xr1vo.com1.z0.glb.clouddn.com/1.jpg" alt=""><img src="http://7xr1vo.com1.z0.glb.clouddn.com/2.png" alt=""></p>
<ul>
<li><p>配置<strong>ndk</strong>环境变量，path 中添加即可，如我的路径如下：</p>
<blockquote>
<p><strong>PATH： D:\android-ndk-r10e</strong></p>
</blockquote>
</li>
<li><p>保存后，打开cmd,输入命令:</p>
<blockquote>
<p><strong>ndk-build</strong> </p>
</blockquote>
<p>  出现如下显示，则安装成功：</p>
</li>
</ul>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://7xr1vo.com1.z0.glb.clouddn.com/3.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<h3 id="第一个NDKDemo"><a href="#第一个NDKDemo" class="headerlink" title="第一个NDKDemo"></a>第一个NDKDemo</h3><ul>
<li>studio中，新建一个project，    name： NDKDemo</li>
<li>在本项目中，配置 <strong>ndk</strong> 路径，如图：</li>
</ul>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://7xr1vo.com1.z0.glb.clouddn.com/4.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://7xr1vo.com1.z0.glb.clouddn.com/5.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>点击<strong>OK</strong>， 此时，等待gradle构建，构建完成后，观察 <strong>local.properties</strong> 文件，多出来了 <strong>ndk</strong> 的路径，如图所示：<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://7xr1vo.com1.z0.glb.clouddn.com/6.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure></p>
<ul>
<li><p>打开 <strong>grade.properties</strong> 文件，在末尾添加：</p>
<blockquote>
<p><strong>android.useDeprecatedNdk=”true”</strong></p>
</blockquote>
</li>
</ul>
<p><img src="http://7xr1vo.com1.z0.glb.clouddn.com/7.png" alt=""></p>
<pre><code>* 此步骤，为了防止下一步修改 app/build.gradle 文件后报错
</code></pre><ul>
<li>打开 <strong>app/build.gradle</strong> 文件，在 <strong>defaultConfig</strong> 下加入<strong>ndk</strong>相关配置参数：</li>
</ul>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ndk &#123;</div><div class="line">	moduleName <span class="string">"HelloNDK"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://7xr1vo.com1.z0.glb.clouddn.com/8.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<pre><code>* 此处的 modleName 是 加载库文件的标识，必须和后面代码中的 System.loadLibrary(&quot;HelloNDK&quot;) 保持一致，否则会报错
</code></pre><ul>
<li>书写 <strong>native</strong> 方法 和 加载类库，代码如下：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">static</span> &#123;</div><div class="line">	<span class="comment">// 加载类库</span></div><div class="line">	System.loadLibrary(<span class="string">"HelloNDK"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// native方法 调用 C代码</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">native</span> String <span class="title">javaCallC</span><span class="params">()</span></span>;</div></pre></td></tr></table></figure>
<p>如图，我这是后续的图片，过程中的未截：</p>
<p><img src="http://7xr1vo.com1.z0.glb.clouddn.com/10.png" alt=""></p>
<ul>
<li><p>打开左下角的 <strong>Terminal</strong>，<strong>cd</strong> 至 <strong>java</strong> 路径下，并执行命令：</p>
<pre><code>javah -d jni [native方法所在类的全路径]
</code></pre><p>  如图：</p>
</li>
</ul>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://7xr1vo.com1.z0.glb.clouddn.com/11.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>在studio中：类的全路径可 通过 右击该类 -&gt; Copy Reference获得，执行成功后，刷新下目录，可看到目录中多了一个 <strong>咖啡色的jni目录</strong>，和一个 <strong>.h文件</strong>，如图：</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://7xr1vo.com1.z0.glb.clouddn.com/12.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<ul>
<li>右击 <strong>Main目录的图标 -&gt; New -&gt; Floder -&gt; JNI Floder</strong>，之后会出现一个 <strong>蓝色的JNI</strong> 文件夹，如图：</li>
</ul>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://7xr1vo.com1.z0.glb.clouddn.com/13.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>此时，继续解决上面 <strong>native</strong> 方法名报错（红色）的问题，<strong>Alt + Enter</strong> 选择创建 <strong>.c</strong> 中的方法，这时，会在蓝色的JNI文件夹下自动生成一个 <strong>.c</strong> 文件，并且 含有 <strong>c代码</strong>，里面有复杂的方法头</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://7xr1vo.com1.z0.glb.clouddn.com/9.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://7xr1vo.com1.z0.glb.clouddn.com/14.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<pre><code>* 可能 native 方法名仍然是红色的，这可能是 Studio 的一个bug，但其实是可以运行的。可能过一段时间红色会消失变为正常，我的就是这种情况
</code></pre><ul>
<li><p>下面就可以书写真正的 <strong>C代码</strong>了，此处 只简单写下，关于更牛逼的用法，将更新在后面blog中，继续总结。</p>
<p>  此处代码改为：</p>
</li>
</ul>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">return</span> (*env)-&gt;NewStringUTF(env, <span class="string">"你好，NDK"</span>);</div></pre></td></tr></table></figure>
<ul>
<li>OK，第一个NDK Demo可以运行了，上图：</li>
</ul>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://7xr1vo.com1.z0.glb.clouddn.com/16.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul>
<li>相比以前在 <strong>eclipse</strong> 中进行 <strong>NDK</strong> 开发，<strong>studio</strong>中显得方便多了，并不用安装 <strong>CDT</strong> 和 <strong>cygwin</strong>，而且 <strong>.c</strong> 文件及其内容可以自动生成</li>
<li>利用命令 <strong>javah -d jni [native方法所在类的全路径]</strong>  生成的  <strong>.h头文件</strong> 可以在 有了 <strong>.c</strong> 文件后删除，此 <strong>.h</strong> 文件主要是用来用于生成 <strong>.c</strong> 文件中相应比较长的方法头。如果之前没有 <strong>.h</strong> 文件，<strong>Alt + Enter</strong> 是无法自动生成 <strong>.c</strong>文件的</li>
<li>必须在 有 <strong>/src/main/jni</strong> 的文件夹（蓝色的jni文件夹）下，才能自动生成<strong>.c</strong> 文件</li>
<li><strong>.c</strong> 文件中要出现了中文，必须是 <strong>UTF-8</strong> 下，否则，运行时会崩溃报错</li>
<li>注意观察 <strong>/app/build/intermediates/ndk</strong> 目录下，有相关的 所有平台的 .so 文件（默认情况下，生成所有平台的；若只想生成某几种平台的，可在 <strong>app/build.gradle（abi-Filters “armeabi”,”armeabi-v7a”,”x86”）</strong> 中  或者 <strong>Android.mk</strong>中 进行配置）</li>
</ul>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://7xr1vo.com1.z0.glb.clouddn.com/17.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<h3 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h3><ul>
<li>so文件和native类与混淆无关，无需keep语句</li>
<li>实现类一定要方法名正确否则会报java.lang.UnsatisfiedLinkError: dlopen failed异常</li>
<li>studio工具的提示并不是很智能，所以有时要rebuild project</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt; 说明：Android Studio 1.4后支持C/C++开发，1.3之前的版本坑点较多，所以使用1.4后的版本较为容易&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;所用工具版本&quot;&gt;&lt;a href=&quot;#所用工具版本&quot; class=&quot;hea
    
    </summary>
    
      <category term="Android" scheme="https://fenglincanyi.github.io/categories/Android/"/>
    
    
      <category term="JNI" scheme="https://fenglincanyi.github.io/tags/JNI/"/>
    
      <category term="NDK" scheme="https://fenglincanyi.github.io/tags/NDK/"/>
    
  </entry>
  
</feed>
